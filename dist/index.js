var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __esm = (fn, res) => () => (fn && (res = fn(fn = 0)), res);

// node_modules/react/cjs/react.production.js
var exports_react_production = {};
__export(exports_react_production, {
  version: () => $version,
  useTransition: () => $useTransition,
  useSyncExternalStore: () => $useSyncExternalStore,
  useState: () => $useState,
  useRef: () => $useRef,
  useReducer: () => $useReducer,
  useOptimistic: () => $useOptimistic,
  useMemo: () => $useMemo,
  useLayoutEffect: () => $useLayoutEffect,
  useInsertionEffect: () => $useInsertionEffect,
  useImperativeHandle: () => $useImperativeHandle,
  useId: () => $useId,
  useEffect: () => $useEffect,
  useDeferredValue: () => $useDeferredValue,
  useDebugValue: () => $useDebugValue,
  useContext: () => $useContext,
  useCallback: () => $useCallback,
  useActionState: () => $useActionState,
  use: () => $use,
  unstable_useCacheRefresh: () => $unstable_useCacheRefresh,
  startTransition: () => $startTransition,
  memo: () => $memo,
  lazy: () => $lazy,
  isValidElement: () => $isValidElement,
  forwardRef: () => $forwardRef,
  createRef: () => $createRef,
  createElement: () => $createElement,
  createContext: () => $createContext,
  cloneElement: () => $cloneElement,
  cache: () => $cache,
  __COMPILER_RUNTIME: () => $__COMPILER_RUNTIME,
  __CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE: () => $__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
  Suspense: () => $Suspense,
  StrictMode: () => $StrictMode,
  PureComponent: () => $PureComponent,
  Profiler: () => $Profiler,
  Fragment: () => $Fragment,
  Component: () => $Component,
  Children: () => $Children
});
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== "object")
    return null;
  maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
  return typeof maybeIterable === "function" ? maybeIterable : null;
}
function Component(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}
function ComponentDummy() {
}
function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}
function ReactElement(type, key, self, source, owner, props) {
  self = props.ref;
  return {
    $$typeof: REACT_ELEMENT_TYPE,
    type,
    key,
    ref: self !== undefined ? self : null,
    props
  };
}
function cloneAndReplaceKey(oldElement, newKey) {
  return ReactElement(oldElement.type, newKey, undefined, undefined, undefined, oldElement.props);
}
function isValidElement(object) {
  return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function escape(key) {
  var escaperLookup = { "=": "=0", ":": "=2" };
  return "$" + key.replace(/[=:]/g, function(match) {
    return escaperLookup[match];
  });
}
function getElementKey(element, index) {
  return typeof element === "object" && element !== null && element.key != null ? escape("" + element.key) : index.toString(36);
}
function noop$1() {
}
function resolveThenable(thenable) {
  switch (thenable.status) {
    case "fulfilled":
      return thenable.value;
    case "rejected":
      throw thenable.reason;
    default:
      switch (typeof thenable.status === "string" ? thenable.then(noop$1, noop$1) : (thenable.status = "pending", thenable.then(function(fulfilledValue) {
        thenable.status === "pending" && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
      }, function(error) {
        thenable.status === "pending" && (thenable.status = "rejected", thenable.reason = error);
      })), thenable.status) {
        case "fulfilled":
          return thenable.value;
        case "rejected":
          throw thenable.reason;
      }
  }
  throw thenable;
}
function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
  var type = typeof children;
  if (type === "undefined" || type === "boolean")
    children = null;
  var invokeCallback = false;
  if (children === null)
    invokeCallback = true;
  else
    switch (type) {
      case "bigint":
      case "string":
      case "number":
        invokeCallback = true;
        break;
      case "object":
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
            break;
          case REACT_LAZY_TYPE:
            return invokeCallback = children._init, mapIntoArray(invokeCallback(children._payload), array, escapedPrefix, nameSoFar, callback);
        }
    }
  if (invokeCallback)
    return callback = callback(children), invokeCallback = nameSoFar === "" ? "." + getElementKey(children, 0) : nameSoFar, isArrayImpl(callback) ? (escapedPrefix = "", invokeCallback != null && (escapedPrefix = invokeCallback.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c) {
      return c;
    })) : callback != null && (isValidElement(callback) && (callback = cloneAndReplaceKey(callback, escapedPrefix + (callback.key == null || children && children.key === callback.key ? "" : ("" + callback.key).replace(userProvidedKeyEscapeRegex, "$&/") + "/") + invokeCallback)), array.push(callback)), 1;
  invokeCallback = 0;
  var nextNamePrefix = nameSoFar === "" ? "." : nameSoFar + ":";
  if (isArrayImpl(children))
    for (var i = 0;i < children.length; i++)
      nameSoFar = children[i], type = nextNamePrefix + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);
  else if (i = getIteratorFn(children), typeof i === "function")
    for (children = i.call(children), i = 0;!(nameSoFar = children.next()).done; )
      nameSoFar = nameSoFar.value, type = nextNamePrefix + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(nameSoFar, array, escapedPrefix, type, callback);
  else if (type === "object") {
    if (typeof children.then === "function")
      return mapIntoArray(resolveThenable(children), array, escapedPrefix, nameSoFar, callback);
    array = String(children);
    throw Error("Objects are not valid as a React child (found: " + (array === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead.");
  }
  return invokeCallback;
}
function mapChildren(children, func, context) {
  if (children == null)
    return children;
  var result = [], count = 0;
  mapIntoArray(children, result, "", "", function(child) {
    return func.call(context, child, count++);
  });
  return result;
}
function lazyInitializer(payload) {
  if (payload._status === -1) {
    var ctor = payload._result;
    ctor = ctor();
    ctor.then(function(moduleObject) {
      if (payload._status === 0 || payload._status === -1)
        payload._status = 1, payload._result = moduleObject;
    }, function(error) {
      if (payload._status === 0 || payload._status === -1)
        payload._status = 2, payload._result = error;
    });
    payload._status === -1 && (payload._status = 0, payload._result = ctor);
  }
  if (payload._status === 1)
    return payload._result.default;
  throw payload._result;
}
function noop() {
}
var REACT_ELEMENT_TYPE, REACT_PORTAL_TYPE, REACT_FRAGMENT_TYPE, REACT_STRICT_MODE_TYPE, REACT_PROFILER_TYPE, REACT_CONSUMER_TYPE, REACT_CONTEXT_TYPE, REACT_FORWARD_REF_TYPE, REACT_SUSPENSE_TYPE, REACT_MEMO_TYPE, REACT_LAZY_TYPE, MAYBE_ITERATOR_SYMBOL, ReactNoopUpdateQueue, assign, emptyObject, pureComponentPrototype, isArrayImpl, ReactSharedInternals, hasOwnProperty, userProvidedKeyEscapeRegex, reportGlobalError, $Children, $Component, $Fragment, $Profiler, $PureComponent, $StrictMode, $Suspense, $__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, $__COMPILER_RUNTIME, $cache = function(fn) {
  return function() {
    return fn.apply(null, arguments);
  };
}, $cloneElement = function(element, config, children) {
  if (element === null || element === undefined)
    throw Error("The argument must be a React element, but you passed " + element + ".");
  var props = assign({}, element.props), key = element.key, owner = undefined;
  if (config != null)
    for (propName in config.ref !== undefined && (owner = undefined), config.key !== undefined && (key = "" + config.key), config)
      !hasOwnProperty.call(config, propName) || propName === "key" || propName === "__self" || propName === "__source" || propName === "ref" && config.ref === undefined || (props[propName] = config[propName]);
  var propName = arguments.length - 2;
  if (propName === 1)
    props.children = children;
  else if (1 < propName) {
    for (var childArray = Array(propName), i = 0;i < propName; i++)
      childArray[i] = arguments[i + 2];
    props.children = childArray;
  }
  return ReactElement(element.type, key, undefined, undefined, owner, props);
}, $createContext = function(defaultValue) {
  defaultValue = {
    $$typeof: REACT_CONTEXT_TYPE,
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    _threadCount: 0,
    Provider: null,
    Consumer: null
  };
  defaultValue.Provider = defaultValue;
  defaultValue.Consumer = {
    $$typeof: REACT_CONSUMER_TYPE,
    _context: defaultValue
  };
  return defaultValue;
}, $createElement = function(type, config, children) {
  var propName, props = {}, key = null;
  if (config != null)
    for (propName in config.key !== undefined && (key = "" + config.key), config)
      hasOwnProperty.call(config, propName) && propName !== "key" && propName !== "__self" && propName !== "__source" && (props[propName] = config[propName]);
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1)
    props.children = children;
  else if (1 < childrenLength) {
    for (var childArray = Array(childrenLength), i = 0;i < childrenLength; i++)
      childArray[i] = arguments[i + 2];
    props.children = childArray;
  }
  if (type && type.defaultProps)
    for (propName in childrenLength = type.defaultProps, childrenLength)
      props[propName] === undefined && (props[propName] = childrenLength[propName]);
  return ReactElement(type, key, undefined, undefined, null, props);
}, $createRef = function() {
  return { current: null };
}, $forwardRef = function(render) {
  return { $$typeof: REACT_FORWARD_REF_TYPE, render };
}, $isValidElement, $lazy = function(ctor) {
  return {
    $$typeof: REACT_LAZY_TYPE,
    _payload: { _status: -1, _result: ctor },
    _init: lazyInitializer
  };
}, $memo = function(type, compare) {
  return {
    $$typeof: REACT_MEMO_TYPE,
    type,
    compare: compare === undefined ? null : compare
  };
}, $startTransition = function(scope) {
  var prevTransition = ReactSharedInternals.T, currentTransition = {};
  ReactSharedInternals.T = currentTransition;
  try {
    var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
    onStartTransitionFinish !== null && onStartTransitionFinish(currentTransition, returnValue);
    typeof returnValue === "object" && returnValue !== null && typeof returnValue.then === "function" && returnValue.then(noop, reportGlobalError);
  } catch (error) {
    reportGlobalError(error);
  } finally {
    ReactSharedInternals.T = prevTransition;
  }
}, $unstable_useCacheRefresh = function() {
  return ReactSharedInternals.H.useCacheRefresh();
}, $use = function(usable) {
  return ReactSharedInternals.H.use(usable);
}, $useActionState = function(action, initialState, permalink) {
  return ReactSharedInternals.H.useActionState(action, initialState, permalink);
}, $useCallback = function(callback, deps) {
  return ReactSharedInternals.H.useCallback(callback, deps);
}, $useContext = function(Context) {
  return ReactSharedInternals.H.useContext(Context);
}, $useDebugValue = function() {
}, $useDeferredValue = function(value, initialValue) {
  return ReactSharedInternals.H.useDeferredValue(value, initialValue);
}, $useEffect = function(create, createDeps, update) {
  var dispatcher = ReactSharedInternals.H;
  if (typeof update === "function")
    throw Error("useEffect CRUD overload is not enabled in this build of React.");
  return dispatcher.useEffect(create, createDeps);
}, $useId = function() {
  return ReactSharedInternals.H.useId();
}, $useImperativeHandle = function(ref, create, deps) {
  return ReactSharedInternals.H.useImperativeHandle(ref, create, deps);
}, $useInsertionEffect = function(create, deps) {
  return ReactSharedInternals.H.useInsertionEffect(create, deps);
}, $useLayoutEffect = function(create, deps) {
  return ReactSharedInternals.H.useLayoutEffect(create, deps);
}, $useMemo = function(create, deps) {
  return ReactSharedInternals.H.useMemo(create, deps);
}, $useOptimistic = function(passthrough, reducer) {
  return ReactSharedInternals.H.useOptimistic(passthrough, reducer);
}, $useReducer = function(reducer, initialArg, init) {
  return ReactSharedInternals.H.useReducer(reducer, initialArg, init);
}, $useRef = function(initialValue) {
  return ReactSharedInternals.H.useRef(initialValue);
}, $useState = function(initialState) {
  return ReactSharedInternals.H.useState(initialState);
}, $useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
  return ReactSharedInternals.H.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
}, $useTransition = function() {
  return ReactSharedInternals.H.useTransition();
}, $version = "19.1.0";
var init_react_production = __esm(() => {
  REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
  REACT_PORTAL_TYPE = Symbol.for("react.portal");
  REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
  REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
  REACT_PROFILER_TYPE = Symbol.for("react.profiler");
  REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
  REACT_CONTEXT_TYPE = Symbol.for("react.context");
  REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
  REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
  REACT_MEMO_TYPE = Symbol.for("react.memo");
  REACT_LAZY_TYPE = Symbol.for("react.lazy");
  MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
  ReactNoopUpdateQueue = {
    isMounted: function() {
      return false;
    },
    enqueueForceUpdate: function() {
    },
    enqueueReplaceState: function() {
    },
    enqueueSetState: function() {
    }
  };
  assign = Object.assign;
  emptyObject = {};
  Component.prototype.isReactComponent = {};
  Component.prototype.setState = function(partialState, callback) {
    if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null)
      throw Error("takes an object of state variables to update or a function which returns an object of state variables.");
    this.updater.enqueueSetState(this, partialState, callback, "setState");
  };
  Component.prototype.forceUpdate = function(callback) {
    this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
  };
  ComponentDummy.prototype = Component.prototype;
  pureComponentPrototype = PureComponent.prototype = new ComponentDummy;
  pureComponentPrototype.constructor = PureComponent;
  assign(pureComponentPrototype, Component.prototype);
  pureComponentPrototype.isPureReactComponent = true;
  isArrayImpl = Array.isArray;
  ReactSharedInternals = { H: null, A: null, T: null, S: null, V: null };
  hasOwnProperty = Object.prototype.hasOwnProperty;
  userProvidedKeyEscapeRegex = /\/+/g;
  reportGlobalError = typeof reportError === "function" ? reportError : function(error) {
    if (typeof window === "object" && typeof window.ErrorEvent === "function") {
      var event = new window.ErrorEvent("error", {
        bubbles: true,
        cancelable: true,
        message: typeof error === "object" && error !== null && typeof error.message === "string" ? String(error.message) : String(error),
        error
      });
      if (!window.dispatchEvent(event))
        return;
    } else if (typeof process === "object" && typeof process.emit === "function") {
      process.emit("uncaughtException", error);
      return;
    }
    console.error(error);
  };
  $Children = {
    map: mapChildren,
    forEach: function(children, forEachFunc, forEachContext) {
      mapChildren(children, function() {
        forEachFunc.apply(this, arguments);
      }, forEachContext);
    },
    count: function(children) {
      var n = 0;
      mapChildren(children, function() {
        n++;
      });
      return n;
    },
    toArray: function(children) {
      return mapChildren(children, function(child) {
        return child;
      }) || [];
    },
    only: function(children) {
      if (!isValidElement(children))
        throw Error("React.Children.only expected to receive a single React element child.");
      return children;
    }
  };
  $Component = Component;
  $Fragment = REACT_FRAGMENT_TYPE;
  $Profiler = REACT_PROFILER_TYPE;
  $PureComponent = PureComponent;
  $StrictMode = REACT_STRICT_MODE_TYPE;
  $Suspense = REACT_SUSPENSE_TYPE;
  $__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
  $__COMPILER_RUNTIME = {
    __proto__: null,
    c: function(size) {
      return ReactSharedInternals.H.useMemoCache(size);
    }
  };
  $isValidElement = isValidElement;
});

// node_modules/react/index.js
var require_react = __commonJS((exports, module) => {
  init_react_production();
  if (true) {
    module.exports = exports_react_production;
  } else {
  }
});

// node_modules/scheduler/cjs/scheduler.production.js
var exports_scheduler_production = {};
__export(exports_scheduler_production, {
  unstable_wrapCallback: () => $unstable_wrapCallback,
  unstable_shouldYield: () => $unstable_shouldYield,
  unstable_scheduleCallback: () => $unstable_scheduleCallback,
  unstable_runWithPriority: () => $unstable_runWithPriority,
  unstable_requestPaint: () => $unstable_requestPaint,
  unstable_now: () => $unstable_now,
  unstable_next: () => $unstable_next,
  unstable_getCurrentPriorityLevel: () => $unstable_getCurrentPriorityLevel,
  unstable_forceFrameRate: () => $unstable_forceFrameRate,
  unstable_cancelCallback: () => $unstable_cancelCallback,
  unstable_UserBlockingPriority: () => $unstable_UserBlockingPriority,
  unstable_Profiling: () => $unstable_Profiling,
  unstable_NormalPriority: () => $unstable_NormalPriority,
  unstable_LowPriority: () => $unstable_LowPriority,
  unstable_ImmediatePriority: () => $unstable_ImmediatePriority,
  unstable_IdlePriority: () => $unstable_IdlePriority
});
function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  a:
    for (;0 < index; ) {
      var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
      if (0 < compare(parent, node))
        heap[parentIndex] = node, heap[index] = parent, index = parentIndex;
      else
        break a;
    }
}
function peek(heap) {
  return heap.length === 0 ? null : heap[0];
}
function pop(heap) {
  if (heap.length === 0)
    return null;
  var first = heap[0], last = heap.pop();
  if (last !== first) {
    heap[0] = last;
    a:
      for (var index = 0, length = heap.length, halfLength = length >>> 1;index < halfLength; ) {
        var leftIndex = 2 * (index + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
        if (0 > compare(left, last))
          rightIndex < length && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last, index = leftIndex);
        else if (rightIndex < length && 0 > compare(right, last))
          heap[index] = right, heap[rightIndex] = last, index = rightIndex;
        else
          break a;
      }
  }
  return first;
}
function compare(a, b) {
  var diff = a.sortIndex - b.sortIndex;
  return diff !== 0 ? diff : a.id - b.id;
}
function advanceTimers(currentTime) {
  for (var timer = peek(timerQueue);timer !== null; ) {
    if (timer.callback === null)
      pop(timerQueue);
    else if (timer.startTime <= currentTime)
      pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
    else
      break;
    timer = peek(timerQueue);
  }
}
function handleTimeout(currentTime) {
  isHostTimeoutScheduled = false;
  advanceTimers(currentTime);
  if (!isHostCallbackScheduled)
    if (peek(taskQueue) !== null)
      isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline());
    else {
      var firstTimer = peek(timerQueue);
      firstTimer !== null && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }
}
function shouldYieldToHost() {
  return needsPaint ? true : $unstable_now() - startTime < frameInterval ? false : true;
}
function performWorkUntilDeadline() {
  needsPaint = false;
  if (isMessageLoopRunning) {
    var currentTime = $unstable_now();
    startTime = currentTime;
    var hasMoreWork = true;
    try {
      a: {
        isHostCallbackScheduled = false;
        isHostTimeoutScheduled && (isHostTimeoutScheduled = false, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
        isPerformingWork = true;
        var previousPriorityLevel = currentPriorityLevel;
        try {
          b: {
            advanceTimers(currentTime);
            for (currentTask = peek(taskQueue);currentTask !== null && !(currentTask.expirationTime > currentTime && shouldYieldToHost()); ) {
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var continuationCallback = callback(currentTask.expirationTime <= currentTime);
                currentTime = $unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                  advanceTimers(currentTime);
                  hasMoreWork = true;
                  break b;
                }
                currentTask === peek(taskQueue) && pop(taskQueue);
                advanceTimers(currentTime);
              } else
                pop(taskQueue);
              currentTask = peek(taskQueue);
            }
            if (currentTask !== null)
              hasMoreWork = true;
            else {
              var firstTimer = peek(timerQueue);
              firstTimer !== null && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              hasMoreWork = false;
            }
          }
          break a;
        } finally {
          currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = false;
        }
        hasMoreWork = undefined;
      }
    } finally {
      hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = false;
    }
  }
}
function requestHostTimeout(callback, ms) {
  taskTimeoutID = localSetTimeout(function() {
    callback($unstable_now());
  }, ms);
}
var $unstable_now = undefined, localPerformance, localDate, initialTime, taskQueue, timerQueue, taskIdCounter = 1, currentTask = null, currentPriorityLevel = 3, isPerformingWork = false, isHostCallbackScheduled = false, isHostTimeoutScheduled = false, needsPaint = false, localSetTimeout, localClearTimeout, localSetImmediate, isMessageLoopRunning = false, taskTimeoutID = -1, frameInterval = 5, startTime = -1, schedulePerformWorkUntilDeadline, channel, port, $unstable_IdlePriority = 5, $unstable_ImmediatePriority = 1, $unstable_LowPriority = 4, $unstable_NormalPriority = 3, $unstable_Profiling = null, $unstable_UserBlockingPriority = 2, $unstable_cancelCallback = function(task) {
  task.callback = null;
}, $unstable_forceFrameRate = function(fps) {
  0 > fps || 125 < fps ? console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported") : frameInterval = 0 < fps ? Math.floor(1000 / fps) : 5;
}, $unstable_getCurrentPriorityLevel = function() {
  return currentPriorityLevel;
}, $unstable_next = function(eventHandler) {
  switch (currentPriorityLevel) {
    case 1:
    case 2:
    case 3:
      var priorityLevel = 3;
      break;
    default:
      priorityLevel = currentPriorityLevel;
  }
  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;
  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}, $unstable_requestPaint = function() {
  needsPaint = true;
}, $unstable_runWithPriority = function(priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      break;
    default:
      priorityLevel = 3;
  }
  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;
  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}, $unstable_scheduleCallback = function(priorityLevel, callback, options) {
  var currentTime = $unstable_now();
  typeof options === "object" && options !== null ? (options = options.delay, options = typeof options === "number" && 0 < options ? currentTime + options : currentTime) : options = currentTime;
  switch (priorityLevel) {
    case 1:
      var timeout = -1;
      break;
    case 2:
      timeout = 250;
      break;
    case 5:
      timeout = 1073741823;
      break;
    case 4:
      timeout = 1e4;
      break;
    default:
      timeout = 5000;
  }
  timeout = options + timeout;
  priorityLevel = {
    id: taskIdCounter++,
    callback,
    priorityLevel,
    startTime: options,
    expirationTime: timeout,
    sortIndex: -1
  };
  options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), peek(taskQueue) === null && priorityLevel === peek(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = true, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline())));
  return priorityLevel;
}, $unstable_shouldYield, $unstable_wrapCallback = function(callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function() {
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;
    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
};
var init_scheduler_production = __esm(() => {
  if (typeof performance === "object" && typeof performance.now === "function") {
    localPerformance = performance;
    $unstable_now = function() {
      return localPerformance.now();
    };
  } else {
    localDate = Date, initialTime = localDate.now();
    $unstable_now = function() {
      return localDate.now() - initialTime;
    };
  }
  taskQueue = [];
  timerQueue = [];
  localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
  localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
  localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
  if (typeof localSetImmediate === "function")
    schedulePerformWorkUntilDeadline = function() {
      localSetImmediate(performWorkUntilDeadline);
    };
  else if (typeof MessageChannel !== "undefined") {
    channel = new MessageChannel, port = channel.port2;
    channel.port1.onmessage = performWorkUntilDeadline;
    schedulePerformWorkUntilDeadline = function() {
      port.postMessage(null);
    };
  } else
    schedulePerformWorkUntilDeadline = function() {
      localSetTimeout(performWorkUntilDeadline, 0);
    };
  $unstable_shouldYield = shouldYieldToHost;
});

// node_modules/scheduler/index.js
var require_scheduler = __commonJS((exports, module) => {
  init_scheduler_production();
  if (true) {
    module.exports = exports_scheduler_production;
  } else {
  }
});

// node_modules/react-dom/cjs/react-dom.production.js
var exports_react_dom_production = {};
__export(exports_react_dom_production, {
  version: () => $version2,
  useFormStatus: () => $useFormStatus,
  useFormState: () => $useFormState,
  unstable_batchedUpdates: () => $unstable_batchedUpdates,
  requestFormReset: () => $requestFormReset,
  preloadModule: () => $preloadModule,
  preload: () => $preload,
  preinitModule: () => $preinitModule,
  preinit: () => $preinit,
  prefetchDNS: () => $prefetchDNS,
  preconnect: () => $preconnect,
  flushSync: () => $flushSync,
  createPortal: () => $createPortal,
  __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE: () => $__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
});
function formatProdErrorMessage(code) {
  var url = "https://react.dev/errors/" + code;
  if (1 < arguments.length) {
    url += "?args[]=" + encodeURIComponent(arguments[1]);
    for (var i = 2;i < arguments.length; i++)
      url += "&args[]=" + encodeURIComponent(arguments[i]);
  }
  return "Minified React error #" + code + "; visit " + url + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
function noop2() {
}
function createPortal$1(children, containerInfo, implementation) {
  var key = 3 < arguments.length && arguments[3] !== undefined ? arguments[3] : null;
  return {
    $$typeof: REACT_PORTAL_TYPE2,
    key: key == null ? null : "" + key,
    children,
    containerInfo,
    implementation
  };
}
function getCrossOriginStringAs(as, input) {
  if (as === "font")
    return "";
  if (typeof input === "string")
    return input === "use-credentials" ? input : "";
}
var React, Internals, REACT_PORTAL_TYPE2, ReactSharedInternals2, $__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, $createPortal = function(children, container) {
  var key = 2 < arguments.length && arguments[2] !== undefined ? arguments[2] : null;
  if (!container || container.nodeType !== 1 && container.nodeType !== 9 && container.nodeType !== 11)
    throw Error(formatProdErrorMessage(299));
  return createPortal$1(children, container, null, key);
}, $flushSync = function(fn) {
  var previousTransition = ReactSharedInternals2.T, previousUpdatePriority = Internals.p;
  try {
    if (ReactSharedInternals2.T = null, Internals.p = 2, fn)
      return fn();
  } finally {
    ReactSharedInternals2.T = previousTransition, Internals.p = previousUpdatePriority, Internals.d.f();
  }
}, $preconnect = function(href, options) {
  typeof href === "string" && (options ? (options = options.crossOrigin, options = typeof options === "string" ? options === "use-credentials" ? options : "" : undefined) : options = null, Internals.d.C(href, options));
}, $prefetchDNS = function(href) {
  typeof href === "string" && Internals.d.D(href);
}, $preinit = function(href, options) {
  if (typeof href === "string" && options && typeof options.as === "string") {
    var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin), integrity = typeof options.integrity === "string" ? options.integrity : undefined, fetchPriority = typeof options.fetchPriority === "string" ? options.fetchPriority : undefined;
    as === "style" ? Internals.d.S(href, typeof options.precedence === "string" ? options.precedence : undefined, {
      crossOrigin,
      integrity,
      fetchPriority
    }) : as === "script" && Internals.d.X(href, {
      crossOrigin,
      integrity,
      fetchPriority,
      nonce: typeof options.nonce === "string" ? options.nonce : undefined
    });
  }
}, $preinitModule = function(href, options) {
  if (typeof href === "string")
    if (typeof options === "object" && options !== null) {
      if (options.as == null || options.as === "script") {
        var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);
        Internals.d.M(href, {
          crossOrigin,
          integrity: typeof options.integrity === "string" ? options.integrity : undefined,
          nonce: typeof options.nonce === "string" ? options.nonce : undefined
        });
      }
    } else
      options == null && Internals.d.M(href);
}, $preload = function(href, options) {
  if (typeof href === "string" && typeof options === "object" && options !== null && typeof options.as === "string") {
    var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);
    Internals.d.L(href, as, {
      crossOrigin,
      integrity: typeof options.integrity === "string" ? options.integrity : undefined,
      nonce: typeof options.nonce === "string" ? options.nonce : undefined,
      type: typeof options.type === "string" ? options.type : undefined,
      fetchPriority: typeof options.fetchPriority === "string" ? options.fetchPriority : undefined,
      referrerPolicy: typeof options.referrerPolicy === "string" ? options.referrerPolicy : undefined,
      imageSrcSet: typeof options.imageSrcSet === "string" ? options.imageSrcSet : undefined,
      imageSizes: typeof options.imageSizes === "string" ? options.imageSizes : undefined,
      media: typeof options.media === "string" ? options.media : undefined
    });
  }
}, $preloadModule = function(href, options) {
  if (typeof href === "string")
    if (options) {
      var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);
      Internals.d.m(href, {
        as: typeof options.as === "string" && options.as !== "script" ? options.as : undefined,
        crossOrigin,
        integrity: typeof options.integrity === "string" ? options.integrity : undefined
      });
    } else
      Internals.d.m(href);
}, $requestFormReset = function(form) {
  Internals.d.r(form);
}, $unstable_batchedUpdates = function(fn, a) {
  return fn(a);
}, $useFormState = function(action, initialState, permalink) {
  return ReactSharedInternals2.H.useFormState(action, initialState, permalink);
}, $useFormStatus = function() {
  return ReactSharedInternals2.H.useHostTransitionStatus();
}, $version2 = "19.1.0";
var init_react_dom_production = __esm(() => {
  React = __toESM(require_react(), 1);
  Internals = {
    d: {
      f: noop2,
      r: function() {
        throw Error(formatProdErrorMessage(522));
      },
      D: noop2,
      C: noop2,
      L: noop2,
      m: noop2,
      X: noop2,
      S: noop2,
      M: noop2
    },
    p: 0,
    findDOMNode: null
  };
  REACT_PORTAL_TYPE2 = Symbol.for("react.portal");
  ReactSharedInternals2 = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
  $__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
});

// node_modules/react-dom/index.js
var require_react_dom = __commonJS((exports, module) => {
  init_react_dom_production();
  function checkDCE() {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
      return;
    }
    if (false) {
    }
    try {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    } catch (err) {
      console.error(err);
    }
  }
  if (true) {
    checkDCE();
    module.exports = exports_react_dom_production;
  } else {
  }
});

// node_modules/react-dom/cjs/react-dom-client.production.js
var exports_react_dom_client_production = {};
__export(exports_react_dom_client_production, {
  version: () => $version3,
  hydrateRoot: () => $hydrateRoot,
  createRoot: () => $createRoot
});
function formatProdErrorMessage2(code) {
  var url = "https://react.dev/errors/" + code;
  if (1 < arguments.length) {
    url += "?args[]=" + encodeURIComponent(arguments[1]);
    for (var i = 2;i < arguments.length; i++)
      url += "&args[]=" + encodeURIComponent(arguments[i]);
  }
  return "Minified React error #" + code + "; visit " + url + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
}
function isValidContainer(node) {
  return !(!node || node.nodeType !== 1 && node.nodeType !== 9 && node.nodeType !== 11);
}
function getNearestMountedFiber(fiber) {
  var node = fiber, nearestMounted = fiber;
  if (fiber.alternate)
    for (;node.return; )
      node = node.return;
  else {
    fiber = node;
    do
      node = fiber, (node.flags & 4098) !== 0 && (nearestMounted = node.return), fiber = node.return;
    while (fiber);
  }
  return node.tag === 3 ? nearestMounted : null;
}
function getSuspenseInstanceFromFiber(fiber) {
  if (fiber.tag === 13) {
    var suspenseState = fiber.memoizedState;
    suspenseState === null && (fiber = fiber.alternate, fiber !== null && (suspenseState = fiber.memoizedState));
    if (suspenseState !== null)
      return suspenseState.dehydrated;
  }
  return null;
}
function assertIsMounted(fiber) {
  if (getNearestMountedFiber(fiber) !== fiber)
    throw Error(formatProdErrorMessage2(188));
}
function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;
  if (!alternate) {
    alternate = getNearestMountedFiber(fiber);
    if (alternate === null)
      throw Error(formatProdErrorMessage2(188));
    return alternate !== fiber ? null : fiber;
  }
  for (var a = fiber, b = alternate;; ) {
    var parentA = a.return;
    if (parentA === null)
      break;
    var parentB = parentA.alternate;
    if (parentB === null) {
      b = parentA.return;
      if (b !== null) {
        a = b;
        continue;
      }
      break;
    }
    if (parentA.child === parentB.child) {
      for (parentB = parentA.child;parentB; ) {
        if (parentB === a)
          return assertIsMounted(parentA), fiber;
        if (parentB === b)
          return assertIsMounted(parentA), alternate;
        parentB = parentB.sibling;
      }
      throw Error(formatProdErrorMessage2(188));
    }
    if (a.return !== b.return)
      a = parentA, b = parentB;
    else {
      for (var didFindChild = false, child$0 = parentA.child;child$0; ) {
        if (child$0 === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }
        if (child$0 === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }
        child$0 = child$0.sibling;
      }
      if (!didFindChild) {
        for (child$0 = parentB.child;child$0; ) {
          if (child$0 === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }
          if (child$0 === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }
          child$0 = child$0.sibling;
        }
        if (!didFindChild)
          throw Error(formatProdErrorMessage2(189));
      }
    }
    if (a.alternate !== b)
      throw Error(formatProdErrorMessage2(190));
  }
  if (a.tag !== 3)
    throw Error(formatProdErrorMessage2(188));
  return a.stateNode.current === a ? fiber : alternate;
}
function findCurrentHostFiberImpl(node) {
  var tag = node.tag;
  if (tag === 5 || tag === 26 || tag === 27 || tag === 6)
    return node;
  for (node = node.child;node !== null; ) {
    tag = findCurrentHostFiberImpl(node);
    if (tag !== null)
      return tag;
    node = node.sibling;
  }
  return null;
}
function getIteratorFn2(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== "object")
    return null;
  maybeIterable = MAYBE_ITERATOR_SYMBOL2 && maybeIterable[MAYBE_ITERATOR_SYMBOL2] || maybeIterable["@@iterator"];
  return typeof maybeIterable === "function" ? maybeIterable : null;
}
function getComponentNameFromType(type) {
  if (type == null)
    return null;
  if (typeof type === "function")
    return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
  if (typeof type === "string")
    return type;
  switch (type) {
    case REACT_FRAGMENT_TYPE2:
      return "Fragment";
    case REACT_PROFILER_TYPE2:
      return "Profiler";
    case REACT_STRICT_MODE_TYPE2:
      return "StrictMode";
    case REACT_SUSPENSE_TYPE2:
      return "Suspense";
    case REACT_SUSPENSE_LIST_TYPE:
      return "SuspenseList";
    case REACT_ACTIVITY_TYPE:
      return "Activity";
  }
  if (typeof type === "object")
    switch (type.$$typeof) {
      case REACT_PORTAL_TYPE3:
        return "Portal";
      case REACT_CONTEXT_TYPE2:
        return (type.displayName || "Context") + ".Provider";
      case REACT_CONSUMER_TYPE2:
        return (type._context.displayName || "Context") + ".Consumer";
      case REACT_FORWARD_REF_TYPE2:
        var innerType = type.render;
        type = type.displayName;
        type || (type = innerType.displayName || innerType.name || "", type = type !== "" ? "ForwardRef(" + type + ")" : "ForwardRef");
        return type;
      case REACT_MEMO_TYPE2:
        return innerType = type.displayName || null, innerType !== null ? innerType : getComponentNameFromType(type.type) || "Memo";
      case REACT_LAZY_TYPE2:
        innerType = type._payload;
        type = type._init;
        try {
          return getComponentNameFromType(type(innerType));
        } catch (x) {
        }
    }
  return null;
}
function createCursor(defaultValue) {
  return { current: defaultValue };
}
function pop2(cursor) {
  0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
}
function push2(cursor, value) {
  index++;
  valueStack[index] = cursor.current;
  cursor.current = value;
}
function pushHostContainer(fiber, nextRootInstance) {
  push2(rootInstanceStackCursor, nextRootInstance);
  push2(contextFiberStackCursor, fiber);
  push2(contextStackCursor, null);
  switch (nextRootInstance.nodeType) {
    case 9:
    case 11:
      fiber = (fiber = nextRootInstance.documentElement) ? (fiber = fiber.namespaceURI) ? getOwnHostContext(fiber) : 0 : 0;
      break;
    default:
      if (fiber = nextRootInstance.tagName, nextRootInstance = nextRootInstance.namespaceURI)
        nextRootInstance = getOwnHostContext(nextRootInstance), fiber = getChildHostContextProd(nextRootInstance, fiber);
      else
        switch (fiber) {
          case "svg":
            fiber = 1;
            break;
          case "math":
            fiber = 2;
            break;
          default:
            fiber = 0;
        }
  }
  pop2(contextStackCursor);
  push2(contextStackCursor, fiber);
}
function popHostContainer() {
  pop2(contextStackCursor);
  pop2(contextFiberStackCursor);
  pop2(rootInstanceStackCursor);
}
function pushHostContext(fiber) {
  fiber.memoizedState !== null && push2(hostTransitionProviderCursor, fiber);
  var context = contextStackCursor.current;
  var JSCompiler_inline_result = getChildHostContextProd(context, fiber.type);
  context !== JSCompiler_inline_result && (push2(contextFiberStackCursor, fiber), push2(contextStackCursor, JSCompiler_inline_result));
}
function popHostContext(fiber) {
  contextFiberStackCursor.current === fiber && (pop2(contextStackCursor), pop2(contextFiberStackCursor));
  hostTransitionProviderCursor.current === fiber && (pop2(hostTransitionProviderCursor), HostTransitionContext._currentValue = sharedNotPendingObject);
}
function setIsStrictModeForDevtools(newIsStrictMode) {
  typeof log$1 === "function" && unstable_setDisableYieldValue2(newIsStrictMode);
  if (injectedHook && typeof injectedHook.setStrictMode === "function")
    try {
      injectedHook.setStrictMode(rendererID, newIsStrictMode);
    } catch (err) {
    }
}
function clz32Fallback(x) {
  x >>>= 0;
  return x === 0 ? 32 : 31 - (log2(x) / LN2 | 0) | 0;
}
function getHighestPriorityLanes(lanes) {
  var pendingSyncLanes = lanes & 42;
  if (pendingSyncLanes !== 0)
    return pendingSyncLanes;
  switch (lanes & -lanes) {
    case 1:
      return 1;
    case 2:
      return 2;
    case 4:
      return 4;
    case 8:
      return 8;
    case 16:
      return 16;
    case 32:
      return 32;
    case 64:
      return 64;
    case 128:
      return 128;
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return lanes & 4194048;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
      return lanes & 62914560;
    case 67108864:
      return 67108864;
    case 134217728:
      return 134217728;
    case 268435456:
      return 268435456;
    case 536870912:
      return 536870912;
    case 1073741824:
      return 0;
    default:
      return lanes;
  }
}
function getNextLanes(root, wipLanes, rootHasPendingCommit) {
  var pendingLanes = root.pendingLanes;
  if (pendingLanes === 0)
    return 0;
  var nextLanes = 0, suspendedLanes = root.suspendedLanes, pingedLanes = root.pingedLanes;
  root = root.warmLanes;
  var nonIdlePendingLanes = pendingLanes & 134217727;
  nonIdlePendingLanes !== 0 ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, pendingLanes !== 0 ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, pingedLanes !== 0 ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = nonIdlePendingLanes & ~root, rootHasPendingCommit !== 0 && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, nonIdlePendingLanes !== 0 ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : pingedLanes !== 0 ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = pendingLanes & ~root, rootHasPendingCommit !== 0 && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))));
  return nextLanes === 0 ? 0 : wipLanes !== 0 && wipLanes !== nextLanes && (wipLanes & suspendedLanes) === 0 && (suspendedLanes = nextLanes & -nextLanes, rootHasPendingCommit = wipLanes & -wipLanes, suspendedLanes >= rootHasPendingCommit || suspendedLanes === 32 && (rootHasPendingCommit & 4194048) !== 0) ? wipLanes : nextLanes;
}
function checkIfRootIsPrerendering(root, renderLanes) {
  return (root.pendingLanes & ~(root.suspendedLanes & ~root.pingedLanes) & renderLanes) === 0;
}
function computeExpirationTime(lane, currentTime) {
  switch (lane) {
    case 1:
    case 2:
    case 4:
    case 8:
    case 64:
      return currentTime + 250;
    case 16:
    case 32:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
      return currentTime + 5000;
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
      return -1;
    case 67108864:
    case 134217728:
    case 268435456:
    case 536870912:
    case 1073741824:
      return -1;
    default:
      return -1;
  }
}
function claimNextTransitionLane() {
  var lane = nextTransitionLane;
  nextTransitionLane <<= 1;
  (nextTransitionLane & 4194048) === 0 && (nextTransitionLane = 256);
  return lane;
}
function claimNextRetryLane() {
  var lane = nextRetryLane;
  nextRetryLane <<= 1;
  (nextRetryLane & 62914560) === 0 && (nextRetryLane = 4194304);
  return lane;
}
function createLaneMap(initial) {
  for (var laneMap = [], i = 0;31 > i; i++)
    laneMap.push(initial);
  return laneMap;
}
function markRootUpdated$1(root, updateLane) {
  root.pendingLanes |= updateLane;
  updateLane !== 268435456 && (root.suspendedLanes = 0, root.pingedLanes = 0, root.warmLanes = 0);
}
function markRootFinished(root, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
  var previouslyPendingLanes = root.pendingLanes;
  root.pendingLanes = remainingLanes;
  root.suspendedLanes = 0;
  root.pingedLanes = 0;
  root.warmLanes = 0;
  root.expiredLanes &= remainingLanes;
  root.entangledLanes &= remainingLanes;
  root.errorRecoveryDisabledLanes &= remainingLanes;
  root.shellSuspendCounter = 0;
  var { entanglements, expirationTimes, hiddenUpdates } = root;
  for (remainingLanes = previouslyPendingLanes & ~remainingLanes;0 < remainingLanes; ) {
    var index$5 = 31 - clz32(remainingLanes), lane = 1 << index$5;
    entanglements[index$5] = 0;
    expirationTimes[index$5] = -1;
    var hiddenUpdatesForLane = hiddenUpdates[index$5];
    if (hiddenUpdatesForLane !== null)
      for (hiddenUpdates[index$5] = null, index$5 = 0;index$5 < hiddenUpdatesForLane.length; index$5++) {
        var update = hiddenUpdatesForLane[index$5];
        update !== null && (update.lane &= -536870913);
      }
    remainingLanes &= ~lane;
  }
  spawnedLane !== 0 && markSpawnedDeferredLane(root, spawnedLane, 0);
  suspendedRetryLanes !== 0 && updatedLanes === 0 && root.tag !== 0 && (root.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
}
function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
  root.pendingLanes |= spawnedLane;
  root.suspendedLanes &= ~spawnedLane;
  var spawnedLaneIndex = 31 - clz32(spawnedLane);
  root.entangledLanes |= spawnedLane;
  root.entanglements[spawnedLaneIndex] = root.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 4194090;
}
function markRootEntangled(root, entangledLanes) {
  var rootEntangledLanes = root.entangledLanes |= entangledLanes;
  for (root = root.entanglements;rootEntangledLanes; ) {
    var index$6 = 31 - clz32(rootEntangledLanes), lane = 1 << index$6;
    lane & entangledLanes | root[index$6] & entangledLanes && (root[index$6] |= entangledLanes);
    rootEntangledLanes &= ~lane;
  }
}
function getBumpedLaneForHydrationByLane(lane) {
  switch (lane) {
    case 2:
      lane = 1;
      break;
    case 8:
      lane = 4;
      break;
    case 32:
      lane = 16;
      break;
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
    case 8192:
    case 16384:
    case 32768:
    case 65536:
    case 131072:
    case 262144:
    case 524288:
    case 1048576:
    case 2097152:
    case 4194304:
    case 8388608:
    case 16777216:
    case 33554432:
      lane = 128;
      break;
    case 268435456:
      lane = 134217728;
      break;
    default:
      lane = 0;
  }
  return lane;
}
function lanesToEventPriority(lanes) {
  lanes &= -lanes;
  return 2 < lanes ? 8 < lanes ? (lanes & 134217727) !== 0 ? 32 : 268435456 : 8 : 2;
}
function resolveUpdatePriority() {
  var updatePriority = ReactDOMSharedInternals.p;
  if (updatePriority !== 0)
    return updatePriority;
  updatePriority = window.event;
  return updatePriority === undefined ? 32 : getEventPriority(updatePriority.type);
}
function runWithPriority(priority, fn) {
  var previousPriority = ReactDOMSharedInternals.p;
  try {
    return ReactDOMSharedInternals.p = priority, fn();
  } finally {
    ReactDOMSharedInternals.p = previousPriority;
  }
}
function detachDeletedInstance(node) {
  delete node[internalInstanceKey];
  delete node[internalPropsKey];
  delete node[internalEventHandlersKey];
  delete node[internalEventHandlerListenersKey];
  delete node[internalEventHandlesSetKey];
}
function getClosestInstanceFromNode(targetNode) {
  var targetInst = targetNode[internalInstanceKey];
  if (targetInst)
    return targetInst;
  for (var parentNode = targetNode.parentNode;parentNode; ) {
    if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey]) {
      parentNode = targetInst.alternate;
      if (targetInst.child !== null || parentNode !== null && parentNode.child !== null)
        for (targetNode = getParentSuspenseInstance(targetNode);targetNode !== null; ) {
          if (parentNode = targetNode[internalInstanceKey])
            return parentNode;
          targetNode = getParentSuspenseInstance(targetNode);
        }
      return targetInst;
    }
    targetNode = parentNode;
    parentNode = targetNode.parentNode;
  }
  return null;
}
function getInstanceFromNode(node) {
  if (node = node[internalInstanceKey] || node[internalContainerInstanceKey]) {
    var tag = node.tag;
    if (tag === 5 || tag === 6 || tag === 13 || tag === 26 || tag === 27 || tag === 3)
      return node;
  }
  return null;
}
function getNodeFromInstance(inst) {
  var tag = inst.tag;
  if (tag === 5 || tag === 26 || tag === 27 || tag === 6)
    return inst.stateNode;
  throw Error(formatProdErrorMessage2(33));
}
function getResourcesFromRoot(root) {
  var resources = root[internalRootNodeResourcesKey];
  resources || (resources = root[internalRootNodeResourcesKey] = { hoistableStyles: new Map, hoistableScripts: new Map });
  return resources;
}
function markNodeAsHoistable(node) {
  node[internalHoistableMarker] = true;
}
function registerTwoPhaseEvent(registrationName, dependencies) {
  registerDirectEvent(registrationName, dependencies);
  registerDirectEvent(registrationName + "Capture", dependencies);
}
function registerDirectEvent(registrationName, dependencies) {
  registrationNameDependencies[registrationName] = dependencies;
  for (registrationName = 0;registrationName < dependencies.length; registrationName++)
    allNativeEvents.add(dependencies[registrationName]);
}
function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty2.call(validatedAttributeNameCache, attributeName))
    return true;
  if (hasOwnProperty2.call(illegalAttributeNameCache, attributeName))
    return false;
  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
    return validatedAttributeNameCache[attributeName] = true;
  illegalAttributeNameCache[attributeName] = true;
  return false;
}
function setValueForAttribute(node, name, value) {
  if (isAttributeNameSafe(name))
    if (value === null)
      node.removeAttribute(name);
    else {
      switch (typeof value) {
        case "undefined":
        case "function":
        case "symbol":
          node.removeAttribute(name);
          return;
        case "boolean":
          var prefix$8 = name.toLowerCase().slice(0, 5);
          if (prefix$8 !== "data-" && prefix$8 !== "aria-") {
            node.removeAttribute(name);
            return;
          }
      }
      node.setAttribute(name, "" + value);
    }
}
function setValueForKnownAttribute(node, name, value) {
  if (value === null)
    node.removeAttribute(name);
  else {
    switch (typeof value) {
      case "undefined":
      case "function":
      case "symbol":
      case "boolean":
        node.removeAttribute(name);
        return;
    }
    node.setAttribute(name, "" + value);
  }
}
function setValueForNamespacedAttribute(node, namespace, name, value) {
  if (value === null)
    node.removeAttribute(name);
  else {
    switch (typeof value) {
      case "undefined":
      case "function":
      case "symbol":
      case "boolean":
        node.removeAttribute(name);
        return;
    }
    node.setAttributeNS(namespace, name, "" + value);
  }
}
function describeBuiltInComponentFrame(name) {
  if (prefix === undefined)
    try {
      throw Error();
    } catch (x) {
      var match = x.stack.trim().match(/\n( *(at )?)/);
      prefix = match && match[1] || "";
      suffix = -1 < x.stack.indexOf(`
    at`) ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
    }
  return `
` + prefix + name + suffix;
}
function describeNativeComponentFrame(fn, construct) {
  if (!fn || reentry)
    return "";
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace;
  Error.prepareStackTrace = undefined;
  try {
    var RunInRootFrame = {
      DetermineComponentFrameRoot: function() {
        try {
          if (construct) {
            var Fake = function() {
              throw Error();
            };
            Object.defineProperty(Fake.prototype, "props", {
              set: function() {
                throw Error();
              }
            });
            if (typeof Reflect === "object" && Reflect.construct) {
              try {
                Reflect.construct(Fake, []);
              } catch (x) {
                var control = x;
              }
              Reflect.construct(fn, [], Fake);
            } else {
              try {
                Fake.call();
              } catch (x$9) {
                control = x$9;
              }
              fn.call(Fake.prototype);
            }
          } else {
            try {
              throw Error();
            } catch (x$10) {
              control = x$10;
            }
            (Fake = fn()) && typeof Fake.catch === "function" && Fake.catch(function() {
            });
          }
        } catch (sample) {
          if (sample && control && typeof sample.stack === "string")
            return [sample.stack, control.stack];
        }
        return [null, null];
      }
    };
    RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
    var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
    namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", { value: "DetermineComponentFrameRoot" });
    var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
    if (sampleStack && controlStack) {
      var sampleLines = sampleStack.split(`
`), controlLines = controlStack.split(`
`);
      for (namePropDescriptor = RunInRootFrame = 0;RunInRootFrame < sampleLines.length && !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot"); )
        RunInRootFrame++;
      for (;namePropDescriptor < controlLines.length && !controlLines[namePropDescriptor].includes("DetermineComponentFrameRoot"); )
        namePropDescriptor++;
      if (RunInRootFrame === sampleLines.length || namePropDescriptor === controlLines.length)
        for (RunInRootFrame = sampleLines.length - 1, namePropDescriptor = controlLines.length - 1;1 <= RunInRootFrame && 0 <= namePropDescriptor && sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]; )
          namePropDescriptor--;
      for (;1 <= RunInRootFrame && 0 <= namePropDescriptor; RunInRootFrame--, namePropDescriptor--)
        if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
          if (RunInRootFrame !== 1 || namePropDescriptor !== 1) {
            do
              if (RunInRootFrame--, namePropDescriptor--, 0 > namePropDescriptor || sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                var frame = `
` + sampleLines[RunInRootFrame].replace(" at new ", " at ");
                fn.displayName && frame.includes("<anonymous>") && (frame = frame.replace("<anonymous>", fn.displayName));
                return frame;
              }
            while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
          }
          break;
        }
    }
  } finally {
    reentry = false, Error.prepareStackTrace = previousPrepareStackTrace;
  }
  return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(previousPrepareStackTrace) : "";
}
function describeFiber(fiber) {
  switch (fiber.tag) {
    case 26:
    case 27:
    case 5:
      return describeBuiltInComponentFrame(fiber.type);
    case 16:
      return describeBuiltInComponentFrame("Lazy");
    case 13:
      return describeBuiltInComponentFrame("Suspense");
    case 19:
      return describeBuiltInComponentFrame("SuspenseList");
    case 0:
    case 15:
      return describeNativeComponentFrame(fiber.type, false);
    case 11:
      return describeNativeComponentFrame(fiber.type.render, false);
    case 1:
      return describeNativeComponentFrame(fiber.type, true);
    case 31:
      return describeBuiltInComponentFrame("Activity");
    default:
      return "";
  }
}
function getStackByFiberInDevAndProd(workInProgress) {
  try {
    var info = "";
    do
      info += describeFiber(workInProgress), workInProgress = workInProgress.return;
    while (workInProgress);
    return info;
  } catch (x) {
    return `
Error generating stack: ` + x.message + `
` + x.stack;
  }
}
function getToStringValue(value) {
  switch (typeof value) {
    case "bigint":
    case "boolean":
    case "number":
    case "string":
    case "undefined":
      return value;
    case "object":
      return value;
    default:
      return "";
  }
}
function isCheckable(elem) {
  var type = elem.type;
  return (elem = elem.nodeName) && elem.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
}
function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField), currentValue = "" + node[valueField];
  if (!node.hasOwnProperty(valueField) && typeof descriptor !== "undefined" && typeof descriptor.get === "function" && typeof descriptor.set === "function") {
    var { get, set } = descriptor;
    Object.defineProperty(node, valueField, {
      configurable: true,
      get: function() {
        return get.call(this);
      },
      set: function(value) {
        currentValue = "" + value;
        set.call(this, value);
      }
    });
    Object.defineProperty(node, valueField, {
      enumerable: descriptor.enumerable
    });
    return {
      getValue: function() {
        return currentValue;
      },
      setValue: function(value) {
        currentValue = "" + value;
      },
      stopTracking: function() {
        node._valueTracker = null;
        delete node[valueField];
      }
    };
  }
}
function track(node) {
  node._valueTracker || (node._valueTracker = trackValueOnNode(node));
}
function updateValueIfChanged(node) {
  if (!node)
    return false;
  var tracker = node._valueTracker;
  if (!tracker)
    return true;
  var lastValue = tracker.getValue();
  var value = "";
  node && (value = isCheckable(node) ? node.checked ? "true" : "false" : node.value);
  node = value;
  return node !== lastValue ? (tracker.setValue(node), true) : false;
}
function getActiveElement(doc) {
  doc = doc || (typeof document !== "undefined" ? document : undefined);
  if (typeof doc === "undefined")
    return null;
  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}
function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
  return value.replace(escapeSelectorAttributeValueInsideDoubleQuotesRegex, function(ch) {
    return "\\" + ch.charCodeAt(0).toString(16) + " ";
  });
}
function updateInput(element, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name) {
  element.name = "";
  type != null && typeof type !== "function" && typeof type !== "symbol" && typeof type !== "boolean" ? element.type = type : element.removeAttribute("type");
  if (value != null)
    if (type === "number") {
      if (value === 0 && element.value === "" || element.value != value)
        element.value = "" + getToStringValue(value);
    } else
      element.value !== "" + getToStringValue(value) && (element.value = "" + getToStringValue(value));
  else
    type !== "submit" && type !== "reset" || element.removeAttribute("value");
  value != null ? setDefaultValue(element, type, getToStringValue(value)) : defaultValue != null ? setDefaultValue(element, type, getToStringValue(defaultValue)) : lastDefaultValue != null && element.removeAttribute("value");
  checked == null && defaultChecked != null && (element.defaultChecked = !!defaultChecked);
  checked != null && (element.checked = checked && typeof checked !== "function" && typeof checked !== "symbol");
  name != null && typeof name !== "function" && typeof name !== "symbol" && typeof name !== "boolean" ? element.name = "" + getToStringValue(name) : element.removeAttribute("name");
}
function initInput(element, value, defaultValue, checked, defaultChecked, type, name, isHydrating) {
  type != null && typeof type !== "function" && typeof type !== "symbol" && typeof type !== "boolean" && (element.type = type);
  if (value != null || defaultValue != null) {
    if (!(type !== "submit" && type !== "reset" || value !== undefined && value !== null))
      return;
    defaultValue = defaultValue != null ? "" + getToStringValue(defaultValue) : "";
    value = value != null ? "" + getToStringValue(value) : defaultValue;
    isHydrating || value === element.value || (element.value = value);
    element.defaultValue = value;
  }
  checked = checked != null ? checked : defaultChecked;
  checked = typeof checked !== "function" && typeof checked !== "symbol" && !!checked;
  element.checked = isHydrating ? element.checked : !!checked;
  element.defaultChecked = !!checked;
  name != null && typeof name !== "function" && typeof name !== "symbol" && typeof name !== "boolean" && (element.name = name);
}
function setDefaultValue(node, type, value) {
  type === "number" && getActiveElement(node.ownerDocument) === node || node.defaultValue === "" + value || (node.defaultValue = "" + value);
}
function updateOptions(node, multiple, propValue, setDefaultSelected) {
  node = node.options;
  if (multiple) {
    multiple = {};
    for (var i = 0;i < propValue.length; i++)
      multiple["$" + propValue[i]] = true;
    for (propValue = 0;propValue < node.length; propValue++)
      i = multiple.hasOwnProperty("$" + node[propValue].value), node[propValue].selected !== i && (node[propValue].selected = i), i && setDefaultSelected && (node[propValue].defaultSelected = true);
  } else {
    propValue = "" + getToStringValue(propValue);
    multiple = null;
    for (i = 0;i < node.length; i++) {
      if (node[i].value === propValue) {
        node[i].selected = true;
        setDefaultSelected && (node[i].defaultSelected = true);
        return;
      }
      multiple !== null || node[i].disabled || (multiple = node[i]);
    }
    multiple !== null && (multiple.selected = true);
  }
}
function updateTextarea(element, value, defaultValue) {
  if (value != null && (value = "" + getToStringValue(value), value !== element.value && (element.value = value), defaultValue == null)) {
    element.defaultValue !== value && (element.defaultValue = value);
    return;
  }
  element.defaultValue = defaultValue != null ? "" + getToStringValue(defaultValue) : "";
}
function initTextarea(element, value, defaultValue, children) {
  if (value == null) {
    if (children != null) {
      if (defaultValue != null)
        throw Error(formatProdErrorMessage2(92));
      if (isArrayImpl2(children)) {
        if (1 < children.length)
          throw Error(formatProdErrorMessage2(93));
        children = children[0];
      }
      defaultValue = children;
    }
    defaultValue == null && (defaultValue = "");
    value = defaultValue;
  }
  defaultValue = getToStringValue(value);
  element.defaultValue = defaultValue;
  children = element.textContent;
  children === defaultValue && children !== "" && children !== null && (element.value = children);
}
function setTextContent(node, text) {
  if (text) {
    var firstChild = node.firstChild;
    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === 3) {
      firstChild.nodeValue = text;
      return;
    }
  }
  node.textContent = text;
}
function setValueForStyle(style, styleName, value) {
  var isCustomProperty = styleName.indexOf("--") === 0;
  value == null || typeof value === "boolean" || value === "" ? isCustomProperty ? style.setProperty(styleName, "") : styleName === "float" ? style.cssFloat = "" : style[styleName] = "" : isCustomProperty ? style.setProperty(styleName, value) : typeof value !== "number" || value === 0 || unitlessNumbers.has(styleName) ? styleName === "float" ? style.cssFloat = value : style[styleName] = ("" + value).trim() : style[styleName] = value + "px";
}
function setValueForStyles(node, styles, prevStyles) {
  if (styles != null && typeof styles !== "object")
    throw Error(formatProdErrorMessage2(62));
  node = node.style;
  if (prevStyles != null) {
    for (var styleName in prevStyles)
      !prevStyles.hasOwnProperty(styleName) || styles != null && styles.hasOwnProperty(styleName) || (styleName.indexOf("--") === 0 ? node.setProperty(styleName, "") : styleName === "float" ? node.cssFloat = "" : node[styleName] = "");
    for (var styleName$16 in styles)
      styleName = styles[styleName$16], styles.hasOwnProperty(styleName$16) && prevStyles[styleName$16] !== styleName && setValueForStyle(node, styleName$16, styleName);
  } else
    for (var styleName$17 in styles)
      styles.hasOwnProperty(styleName$17) && setValueForStyle(node, styleName$17, styles[styleName$17]);
}
function isCustomElement(tagName) {
  if (tagName.indexOf("-") === -1)
    return false;
  switch (tagName) {
    case "annotation-xml":
    case "color-profile":
    case "font-face":
    case "font-face-src":
    case "font-face-uri":
    case "font-face-format":
    case "font-face-name":
    case "missing-glyph":
      return false;
    default:
      return true;
  }
}
function sanitizeURL(url) {
  return isJavaScriptProtocol.test("" + url) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : url;
}
function getEventTarget(nativeEvent) {
  nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
  nativeEvent.correspondingUseElement && (nativeEvent = nativeEvent.correspondingUseElement);
  return nativeEvent.nodeType === 3 ? nativeEvent.parentNode : nativeEvent;
}
function restoreStateOfTarget(target) {
  var internalInstance = getInstanceFromNode(target);
  if (internalInstance && (target = internalInstance.stateNode)) {
    var props = target[internalPropsKey] || null;
    a:
      switch (target = internalInstance.stateNode, internalInstance.type) {
        case "input":
          updateInput(target, props.value, props.defaultValue, props.defaultValue, props.checked, props.defaultChecked, props.type, props.name);
          internalInstance = props.name;
          if (props.type === "radio" && internalInstance != null) {
            for (props = target;props.parentNode; )
              props = props.parentNode;
            props = props.querySelectorAll('input[name="' + escapeSelectorAttributeValueInsideDoubleQuotes("" + internalInstance) + '"][type="radio"]');
            for (internalInstance = 0;internalInstance < props.length; internalInstance++) {
              var otherNode = props[internalInstance];
              if (otherNode !== target && otherNode.form === target.form) {
                var otherProps = otherNode[internalPropsKey] || null;
                if (!otherProps)
                  throw Error(formatProdErrorMessage2(90));
                updateInput(otherNode, otherProps.value, otherProps.defaultValue, otherProps.defaultValue, otherProps.checked, otherProps.defaultChecked, otherProps.type, otherProps.name);
              }
            }
            for (internalInstance = 0;internalInstance < props.length; internalInstance++)
              otherNode = props[internalInstance], otherNode.form === target.form && updateValueIfChanged(otherNode);
          }
          break a;
        case "textarea":
          updateTextarea(target, props.value, props.defaultValue);
          break a;
        case "select":
          internalInstance = props.value, internalInstance != null && updateOptions(target, !!props.multiple, internalInstance, false);
      }
  }
}
function batchedUpdates$1(fn, a, b) {
  if (isInsideEventHandler)
    return fn(a, b);
  isInsideEventHandler = true;
  try {
    var JSCompiler_inline_result = fn(a);
    return JSCompiler_inline_result;
  } finally {
    if (isInsideEventHandler = false, restoreTarget !== null || restoreQueue !== null) {
      if (flushSyncWork$1(), restoreTarget && (a = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(a), fn))
        for (a = 0;a < fn.length; a++)
          restoreStateOfTarget(fn[a]);
    }
  }
}
function getListener(inst, registrationName) {
  var stateNode = inst.stateNode;
  if (stateNode === null)
    return null;
  var props = stateNode[internalPropsKey] || null;
  if (props === null)
    return null;
  stateNode = props[registrationName];
  a:
    switch (registrationName) {
      case "onClick":
      case "onClickCapture":
      case "onDoubleClick":
      case "onDoubleClickCapture":
      case "onMouseDown":
      case "onMouseDownCapture":
      case "onMouseMove":
      case "onMouseMoveCapture":
      case "onMouseUp":
      case "onMouseUpCapture":
      case "onMouseEnter":
        (props = !props.disabled) || (inst = inst.type, props = !(inst === "button" || inst === "input" || inst === "select" || inst === "textarea"));
        inst = !props;
        break a;
      default:
        inst = false;
    }
  if (inst)
    return null;
  if (stateNode && typeof stateNode !== "function")
    throw Error(formatProdErrorMessage2(231, registrationName, typeof stateNode));
  return stateNode;
}
function getData() {
  if (fallbackText)
    return fallbackText;
  var start, startValue = startText, startLength = startValue.length, end, endValue = "value" in root ? root.value : root.textContent, endLength = endValue.length;
  for (start = 0;start < startLength && startValue[start] === endValue[start]; start++)
    ;
  var minEnd = startLength - start;
  for (end = 1;end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++)
    ;
  return fallbackText = endValue.slice(start, 1 < end ? 1 - end : undefined);
}
function getEventCharCode(nativeEvent) {
  var keyCode = nativeEvent.keyCode;
  "charCode" in nativeEvent ? (nativeEvent = nativeEvent.charCode, nativeEvent === 0 && keyCode === 13 && (nativeEvent = 13)) : nativeEvent = keyCode;
  nativeEvent === 10 && (nativeEvent = 13);
  return 32 <= nativeEvent || nativeEvent === 13 ? nativeEvent : 0;
}
function functionThatReturnsTrue() {
  return true;
}
function functionThatReturnsFalse() {
  return false;
}
function createSyntheticEvent(Interface) {
  function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
    this._reactName = reactName;
    this._targetInst = targetInst;
    this.type = reactEventType;
    this.nativeEvent = nativeEvent;
    this.target = nativeEventTarget;
    this.currentTarget = null;
    for (var propName in Interface)
      Interface.hasOwnProperty(propName) && (reactName = Interface[propName], this[propName] = reactName ? reactName(nativeEvent) : nativeEvent[propName]);
    this.isDefaultPrevented = (nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false) ? functionThatReturnsTrue : functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }
  assign2(SyntheticBaseEvent.prototype, {
    preventDefault: function() {
      this.defaultPrevented = true;
      var event = this.nativeEvent;
      event && (event.preventDefault ? event.preventDefault() : typeof event.returnValue !== "unknown" && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
    },
    stopPropagation: function() {
      var event = this.nativeEvent;
      event && (event.stopPropagation ? event.stopPropagation() : typeof event.cancelBubble !== "unknown" && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
    },
    persist: function() {
    },
    isPersistent: functionThatReturnsTrue
  });
  return SyntheticBaseEvent;
}
function modifierStateGetter(keyArg) {
  var nativeEvent = this.nativeEvent;
  return nativeEvent.getModifierState ? nativeEvent.getModifierState(keyArg) : (keyArg = modifierKeyToProp[keyArg]) ? !!nativeEvent[keyArg] : false;
}
function getEventModifierState() {
  return modifierStateGetter;
}
function isFallbackCompositionEnd(domEventName, nativeEvent) {
  switch (domEventName) {
    case "keyup":
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
    case "keydown":
      return nativeEvent.keyCode !== 229;
    case "keypress":
    case "mousedown":
    case "focusout":
      return true;
    default:
      return false;
  }
}
function getDataFromCustomEvent(nativeEvent) {
  nativeEvent = nativeEvent.detail;
  return typeof nativeEvent === "object" && "data" in nativeEvent ? nativeEvent.data : null;
}
function getNativeBeforeInputChars(domEventName, nativeEvent) {
  switch (domEventName) {
    case "compositionend":
      return getDataFromCustomEvent(nativeEvent);
    case "keypress":
      if (nativeEvent.which !== 32)
        return null;
      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;
    case "textInput":
      return domEventName = nativeEvent.data, domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName;
    default:
      return null;
  }
}
function getFallbackBeforeInputChars(domEventName, nativeEvent) {
  if (isComposing)
    return domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent) ? (domEventName = getData(), fallbackText = startText = root = null, isComposing = false, domEventName) : null;
  switch (domEventName) {
    case "paste":
      return null;
    case "keypress":
      if (!(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) || nativeEvent.ctrlKey && nativeEvent.altKey) {
        if (nativeEvent.char && 1 < nativeEvent.char.length)
          return nativeEvent.char;
        if (nativeEvent.which)
          return String.fromCharCode(nativeEvent.which);
      }
      return null;
    case "compositionend":
      return useFallbackCompositionData && nativeEvent.locale !== "ko" ? null : nativeEvent.data;
    default:
      return null;
  }
}
function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === "input" ? !!supportedInputTypes[elem.type] : nodeName === "textarea" ? true : false;
}
function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
  restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
  inst = accumulateTwoPhaseListeners(inst, "onChange");
  0 < inst.length && (nativeEvent = new SyntheticEvent("onChange", "change", null, nativeEvent, target), dispatchQueue.push({ event: nativeEvent, listeners: inst }));
}
function runEventInBatch(dispatchQueue) {
  processDispatchQueue(dispatchQueue, 0);
}
function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance(targetInst);
  if (updateValueIfChanged(targetNode))
    return targetInst;
}
function getTargetInstForChangeEvent(domEventName, targetInst) {
  if (domEventName === "change")
    return targetInst;
}
function stopWatchingForValueChange() {
  activeElement$1 && (activeElement$1.detachEvent("onpropertychange", handlePropertyChange), activeElementInst$1 = activeElement$1 = null);
}
function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName === "value" && getInstIfValueChanged(activeElementInst$1)) {
    var dispatchQueue = [];
    createAndAccumulateChangeEvent(dispatchQueue, activeElementInst$1, nativeEvent, getEventTarget(nativeEvent));
    batchedUpdates$1(runEventInBatch, dispatchQueue);
  }
}
function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
  domEventName === "focusin" ? (stopWatchingForValueChange(), activeElement$1 = target, activeElementInst$1 = targetInst, activeElement$1.attachEvent("onpropertychange", handlePropertyChange)) : domEventName === "focusout" && stopWatchingForValueChange();
}
function getTargetInstForInputEventPolyfill(domEventName) {
  if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown")
    return getInstIfValueChanged(activeElementInst$1);
}
function getTargetInstForClickEvent(domEventName, targetInst) {
  if (domEventName === "click")
    return getInstIfValueChanged(targetInst);
}
function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
  if (domEventName === "input" || domEventName === "change")
    return getInstIfValueChanged(targetInst);
}
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
}
function shallowEqual(objA, objB) {
  if (objectIs(objA, objB))
    return true;
  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null)
    return false;
  var keysA = Object.keys(objA), keysB = Object.keys(objB);
  if (keysA.length !== keysB.length)
    return false;
  for (keysB = 0;keysB < keysA.length; keysB++) {
    var currentKey = keysA[keysB];
    if (!hasOwnProperty2.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
      return false;
  }
  return true;
}
function getLeafNode(node) {
  for (;node && node.firstChild; )
    node = node.firstChild;
  return node;
}
function getNodeForCharacterOffset(root2, offset) {
  var node = getLeafNode(root2);
  root2 = 0;
  for (var nodeEnd;node; ) {
    if (node.nodeType === 3) {
      nodeEnd = root2 + node.textContent.length;
      if (root2 <= offset && nodeEnd >= offset)
        return { node, offset: offset - root2 };
      root2 = nodeEnd;
    }
    a: {
      for (;node; ) {
        if (node.nextSibling) {
          node = node.nextSibling;
          break a;
        }
        node = node.parentNode;
      }
      node = undefined;
    }
    node = getLeafNode(node);
  }
}
function containsNode(outerNode, innerNode) {
  return outerNode && innerNode ? outerNode === innerNode ? true : outerNode && outerNode.nodeType === 3 ? false : innerNode && innerNode.nodeType === 3 ? containsNode(outerNode, innerNode.parentNode) : ("contains" in outerNode) ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : false : false;
}
function getActiveElementDeep(containerInfo) {
  containerInfo = containerInfo != null && containerInfo.ownerDocument != null && containerInfo.ownerDocument.defaultView != null ? containerInfo.ownerDocument.defaultView : window;
  for (var element = getActiveElement(containerInfo.document);element instanceof containerInfo.HTMLIFrameElement; ) {
    try {
      var JSCompiler_inline_result = typeof element.contentWindow.location.href === "string";
    } catch (err) {
      JSCompiler_inline_result = false;
    }
    if (JSCompiler_inline_result)
      containerInfo = element.contentWindow;
    else
      break;
    element = getActiveElement(containerInfo.document);
  }
  return element;
}
function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
}
function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
  var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : nativeEventTarget.nodeType === 9 ? nativeEventTarget : nativeEventTarget.ownerDocument;
  mouseDown || activeElement == null || activeElement !== getActiveElement(doc) || (doc = activeElement, ("selectionStart" in doc) && hasSelectionCapabilities(doc) ? doc = { start: doc.selectionStart, end: doc.selectionEnd } : (doc = (doc.ownerDocument && doc.ownerDocument.defaultView || window).getSelection(), doc = {
    anchorNode: doc.anchorNode,
    anchorOffset: doc.anchorOffset,
    focusNode: doc.focusNode,
    focusOffset: doc.focusOffset
  }), lastSelection && shallowEqual(lastSelection, doc) || (lastSelection = doc, doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect"), 0 < doc.length && (nativeEvent = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget), dispatchQueue.push({ event: nativeEvent, listeners: doc }), nativeEvent.target = activeElement)));
}
function makePrefixMap(styleProp, eventName) {
  var prefixes = {};
  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes["Webkit" + styleProp] = "webkit" + eventName;
  prefixes["Moz" + styleProp] = "moz" + eventName;
  return prefixes;
}
function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName])
    return prefixedEventNames[eventName];
  if (!vendorPrefixes[eventName])
    return eventName;
  var prefixMap = vendorPrefixes[eventName], styleProp;
  for (styleProp in prefixMap)
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
      return prefixedEventNames[eventName] = prefixMap[styleProp];
  return eventName;
}
function registerSimpleEvent(domEventName, reactName) {
  topLevelEventsToReactNames.set(domEventName, reactName);
  registerTwoPhaseEvent(reactName, [domEventName]);
}
function createCapturedValueAtFiber(value, source) {
  if (typeof value === "object" && value !== null) {
    var existing = CapturedStacks.get(value);
    if (existing !== undefined)
      return existing;
    source = {
      value,
      source,
      stack: getStackByFiberInDevAndProd(source)
    };
    CapturedStacks.set(value, source);
    return source;
  }
  return {
    value,
    source,
    stack: getStackByFiberInDevAndProd(source)
  };
}
function finishQueueingConcurrentUpdates() {
  for (var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0;i < endIndex; ) {
    var fiber = concurrentQueues[i];
    concurrentQueues[i++] = null;
    var queue = concurrentQueues[i];
    concurrentQueues[i++] = null;
    var update = concurrentQueues[i];
    concurrentQueues[i++] = null;
    var lane = concurrentQueues[i];
    concurrentQueues[i++] = null;
    if (queue !== null && update !== null) {
      var pending = queue.pending;
      pending === null ? update.next = update : (update.next = pending.next, pending.next = update);
      queue.pending = update;
    }
    lane !== 0 && markUpdateLaneFromFiberToRoot(fiber, update, lane);
  }
}
function enqueueUpdate$1(fiber, queue, update, lane) {
  concurrentQueues[concurrentQueuesIndex++] = fiber;
  concurrentQueues[concurrentQueuesIndex++] = queue;
  concurrentQueues[concurrentQueuesIndex++] = update;
  concurrentQueues[concurrentQueuesIndex++] = lane;
  concurrentlyUpdatedLanes |= lane;
  fiber.lanes |= lane;
  fiber = fiber.alternate;
  fiber !== null && (fiber.lanes |= lane);
}
function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
  enqueueUpdate$1(fiber, queue, update, lane);
  return getRootForUpdatedFiber(fiber);
}
function enqueueConcurrentRenderForLane(fiber, lane) {
  enqueueUpdate$1(fiber, null, null, lane);
  return getRootForUpdatedFiber(fiber);
}
function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
  sourceFiber.lanes |= lane;
  var alternate = sourceFiber.alternate;
  alternate !== null && (alternate.lanes |= lane);
  for (var isHidden = false, parent = sourceFiber.return;parent !== null; )
    parent.childLanes |= lane, alternate = parent.alternate, alternate !== null && (alternate.childLanes |= lane), parent.tag === 22 && (sourceFiber = parent.stateNode, sourceFiber === null || sourceFiber._visibility & 1 || (isHidden = true)), sourceFiber = parent, parent = parent.return;
  return sourceFiber.tag === 3 ? (parent = sourceFiber.stateNode, isHidden && update !== null && (isHidden = 31 - clz32(lane), sourceFiber = parent.hiddenUpdates, alternate = sourceFiber[isHidden], alternate === null ? sourceFiber[isHidden] = [update] : alternate.push(update), update.lane = lane | 536870912), parent) : null;
}
function getRootForUpdatedFiber(sourceFiber) {
  if (50 < nestedUpdateCount)
    throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error(formatProdErrorMessage2(185));
  for (var parent = sourceFiber.return;parent !== null; )
    sourceFiber = parent, parent = sourceFiber.return;
  return sourceFiber.tag === 3 ? sourceFiber.stateNode : null;
}
function FiberNode(tag, pendingProps, key, mode) {
  this.tag = tag;
  this.key = key;
  this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
  this.index = 0;
  this.refCleanup = this.ref = null;
  this.pendingProps = pendingProps;
  this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
  this.mode = mode;
  this.subtreeFlags = this.flags = 0;
  this.deletions = null;
  this.childLanes = this.lanes = 0;
  this.alternate = null;
}
function createFiberImplClass(tag, pendingProps, key, mode) {
  return new FiberNode(tag, pendingProps, key, mode);
}
function shouldConstruct(Component2) {
  Component2 = Component2.prototype;
  return !(!Component2 || !Component2.isReactComponent);
}
function createWorkInProgress(current, pendingProps) {
  var workInProgress = current.alternate;
  workInProgress === null ? (workInProgress = createFiberImplClass(current.tag, pendingProps, current.key, current.mode), workInProgress.elementType = current.elementType, workInProgress.type = current.type, workInProgress.stateNode = current.stateNode, workInProgress.alternate = current, current.alternate = workInProgress) : (workInProgress.pendingProps = pendingProps, workInProgress.type = current.type, workInProgress.flags = 0, workInProgress.subtreeFlags = 0, workInProgress.deletions = null);
  workInProgress.flags = current.flags & 65011712;
  workInProgress.childLanes = current.childLanes;
  workInProgress.lanes = current.lanes;
  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue;
  pendingProps = current.dependencies;
  workInProgress.dependencies = pendingProps === null ? null : { lanes: pendingProps.lanes, firstContext: pendingProps.firstContext };
  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;
  workInProgress.refCleanup = current.refCleanup;
  return workInProgress;
}
function resetWorkInProgress(workInProgress, renderLanes) {
  workInProgress.flags &= 65011714;
  var current = workInProgress.alternate;
  current === null ? (workInProgress.childLanes = 0, workInProgress.lanes = renderLanes, workInProgress.child = null, workInProgress.subtreeFlags = 0, workInProgress.memoizedProps = null, workInProgress.memoizedState = null, workInProgress.updateQueue = null, workInProgress.dependencies = null, workInProgress.stateNode = null) : (workInProgress.childLanes = current.childLanes, workInProgress.lanes = current.lanes, workInProgress.child = current.child, workInProgress.subtreeFlags = 0, workInProgress.deletions = null, workInProgress.memoizedProps = current.memoizedProps, workInProgress.memoizedState = current.memoizedState, workInProgress.updateQueue = current.updateQueue, workInProgress.type = current.type, renderLanes = current.dependencies, workInProgress.dependencies = renderLanes === null ? null : {
    lanes: renderLanes.lanes,
    firstContext: renderLanes.firstContext
  });
  return workInProgress;
}
function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
  var fiberTag = 0;
  owner = type;
  if (typeof type === "function")
    shouldConstruct(type) && (fiberTag = 1);
  else if (typeof type === "string")
    fiberTag = isHostHoistableType(type, pendingProps, contextStackCursor.current) ? 26 : type === "html" || type === "head" || type === "body" ? 27 : 5;
  else
    a:
      switch (type) {
        case REACT_ACTIVITY_TYPE:
          return type = createFiberImplClass(31, pendingProps, key, mode), type.elementType = REACT_ACTIVITY_TYPE, type.lanes = lanes, type;
        case REACT_FRAGMENT_TYPE2:
          return createFiberFromFragment(pendingProps.children, mode, lanes, key);
        case REACT_STRICT_MODE_TYPE2:
          fiberTag = 8;
          mode |= 24;
          break;
        case REACT_PROFILER_TYPE2:
          return type = createFiberImplClass(12, pendingProps, key, mode | 2), type.elementType = REACT_PROFILER_TYPE2, type.lanes = lanes, type;
        case REACT_SUSPENSE_TYPE2:
          return type = createFiberImplClass(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE2, type.lanes = lanes, type;
        case REACT_SUSPENSE_LIST_TYPE:
          return type = createFiberImplClass(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
        default:
          if (typeof type === "object" && type !== null)
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
              case REACT_CONTEXT_TYPE2:
                fiberTag = 10;
                break a;
              case REACT_CONSUMER_TYPE2:
                fiberTag = 9;
                break a;
              case REACT_FORWARD_REF_TYPE2:
                fiberTag = 11;
                break a;
              case REACT_MEMO_TYPE2:
                fiberTag = 14;
                break a;
              case REACT_LAZY_TYPE2:
                fiberTag = 16;
                owner = null;
                break a;
            }
          fiberTag = 29;
          pendingProps = Error(formatProdErrorMessage2(130, type === null ? "null" : typeof type, ""));
          owner = null;
      }
  key = createFiberImplClass(fiberTag, pendingProps, key, mode);
  key.elementType = type;
  key.type = owner;
  key.lanes = lanes;
  return key;
}
function createFiberFromFragment(elements, mode, lanes, key) {
  elements = createFiberImplClass(7, elements, key, mode);
  elements.lanes = lanes;
  return elements;
}
function createFiberFromText(content, mode, lanes) {
  content = createFiberImplClass(6, content, null, mode);
  content.lanes = lanes;
  return content;
}
function createFiberFromPortal(portal, mode, lanes) {
  mode = createFiberImplClass(4, portal.children !== null ? portal.children : [], portal.key, mode);
  mode.lanes = lanes;
  mode.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null,
    implementation: portal.implementation
  };
  return mode;
}
function pushTreeFork(workInProgress, totalChildren) {
  forkStack[forkStackIndex++] = treeForkCount;
  forkStack[forkStackIndex++] = treeForkProvider;
  treeForkProvider = workInProgress;
  treeForkCount = totalChildren;
}
function pushTreeId(workInProgress, totalChildren, index2) {
  idStack[idStackIndex++] = treeContextId;
  idStack[idStackIndex++] = treeContextOverflow;
  idStack[idStackIndex++] = treeContextProvider;
  treeContextProvider = workInProgress;
  var baseIdWithLeadingBit = treeContextId;
  workInProgress = treeContextOverflow;
  var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
  baseIdWithLeadingBit &= ~(1 << baseLength);
  index2 += 1;
  var length = 32 - clz32(totalChildren) + baseLength;
  if (30 < length) {
    var numberOfOverflowBits = baseLength - baseLength % 5;
    length = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
    baseIdWithLeadingBit >>= numberOfOverflowBits;
    baseLength -= numberOfOverflowBits;
    treeContextId = 1 << 32 - clz32(totalChildren) + baseLength | index2 << baseLength | baseIdWithLeadingBit;
    treeContextOverflow = length + workInProgress;
  } else
    treeContextId = 1 << length | index2 << baseLength | baseIdWithLeadingBit, treeContextOverflow = workInProgress;
}
function pushMaterializedTreeId(workInProgress) {
  workInProgress.return !== null && (pushTreeFork(workInProgress, 1), pushTreeId(workInProgress, 1, 0));
}
function popTreeContext(workInProgress) {
  for (;workInProgress === treeForkProvider; )
    treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
  for (;workInProgress === treeContextProvider; )
    treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
}
function throwOnHydrationMismatch(fiber) {
  var error = Error(formatProdErrorMessage2(418, ""));
  queueHydrationError(createCapturedValueAtFiber(error, fiber));
  throw HydrationMismatchException;
}
function prepareToHydrateHostInstance(fiber) {
  var { stateNode: instance, type, memoizedProps: props } = fiber;
  instance[internalInstanceKey] = fiber;
  instance[internalPropsKey] = props;
  switch (type) {
    case "dialog":
      listenToNonDelegatedEvent("cancel", instance);
      listenToNonDelegatedEvent("close", instance);
      break;
    case "iframe":
    case "object":
    case "embed":
      listenToNonDelegatedEvent("load", instance);
      break;
    case "video":
    case "audio":
      for (type = 0;type < mediaEventTypes.length; type++)
        listenToNonDelegatedEvent(mediaEventTypes[type], instance);
      break;
    case "source":
      listenToNonDelegatedEvent("error", instance);
      break;
    case "img":
    case "image":
    case "link":
      listenToNonDelegatedEvent("error", instance);
      listenToNonDelegatedEvent("load", instance);
      break;
    case "details":
      listenToNonDelegatedEvent("toggle", instance);
      break;
    case "input":
      listenToNonDelegatedEvent("invalid", instance);
      initInput(instance, props.value, props.defaultValue, props.checked, props.defaultChecked, props.type, props.name, true);
      track(instance);
      break;
    case "select":
      listenToNonDelegatedEvent("invalid", instance);
      break;
    case "textarea":
      listenToNonDelegatedEvent("invalid", instance), initTextarea(instance, props.value, props.defaultValue, props.children), track(instance);
  }
  type = props.children;
  typeof type !== "string" && typeof type !== "number" && typeof type !== "bigint" || instance.textContent === "" + type || props.suppressHydrationWarning === true || checkForUnmatchedText(instance.textContent, type) ? (props.popover != null && (listenToNonDelegatedEvent("beforetoggle", instance), listenToNonDelegatedEvent("toggle", instance)), props.onScroll != null && listenToNonDelegatedEvent("scroll", instance), props.onScrollEnd != null && listenToNonDelegatedEvent("scrollend", instance), props.onClick != null && (instance.onclick = noop$12), instance = true) : instance = false;
  instance || throwOnHydrationMismatch(fiber);
}
function popToNextHostParent(fiber) {
  for (hydrationParentFiber = fiber.return;hydrationParentFiber; )
    switch (hydrationParentFiber.tag) {
      case 5:
      case 13:
        rootOrSingletonContext = false;
        return;
      case 27:
      case 3:
        rootOrSingletonContext = true;
        return;
      default:
        hydrationParentFiber = hydrationParentFiber.return;
    }
}
function popHydrationState(fiber) {
  if (fiber !== hydrationParentFiber)
    return false;
  if (!isHydrating)
    return popToNextHostParent(fiber), isHydrating = true, false;
  var tag = fiber.tag, JSCompiler_temp;
  if (JSCompiler_temp = tag !== 3 && tag !== 27) {
    if (JSCompiler_temp = tag === 5)
      JSCompiler_temp = fiber.type, JSCompiler_temp = !(JSCompiler_temp !== "form" && JSCompiler_temp !== "button") || shouldSetTextContent(fiber.type, fiber.memoizedProps);
    JSCompiler_temp = !JSCompiler_temp;
  }
  JSCompiler_temp && nextHydratableInstance && throwOnHydrationMismatch(fiber);
  popToNextHostParent(fiber);
  if (tag === 13) {
    fiber = fiber.memoizedState;
    fiber = fiber !== null ? fiber.dehydrated : null;
    if (!fiber)
      throw Error(formatProdErrorMessage2(317));
    a: {
      fiber = fiber.nextSibling;
      for (tag = 0;fiber; ) {
        if (fiber.nodeType === 8)
          if (JSCompiler_temp = fiber.data, JSCompiler_temp === "/$") {
            if (tag === 0) {
              nextHydratableInstance = getNextHydratable(fiber.nextSibling);
              break a;
            }
            tag--;
          } else
            JSCompiler_temp !== "$" && JSCompiler_temp !== "$!" && JSCompiler_temp !== "$?" || tag++;
        fiber = fiber.nextSibling;
      }
      nextHydratableInstance = null;
    }
  } else
    tag === 27 ? (tag = nextHydratableInstance, isSingletonScope(fiber.type) ? (fiber = previousHydratableOnEnteringScopedSingleton, previousHydratableOnEnteringScopedSingleton = null, nextHydratableInstance = fiber) : nextHydratableInstance = tag) : nextHydratableInstance = hydrationParentFiber ? getNextHydratable(fiber.stateNode.nextSibling) : null;
  return true;
}
function resetHydrationState() {
  nextHydratableInstance = hydrationParentFiber = null;
  isHydrating = false;
}
function upgradeHydrationErrorsToRecoverable() {
  var queuedErrors = hydrationErrors;
  queuedErrors !== null && (workInProgressRootRecoverableErrors === null ? workInProgressRootRecoverableErrors = queuedErrors : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, queuedErrors), hydrationErrors = null);
  return queuedErrors;
}
function queueHydrationError(error) {
  hydrationErrors === null ? hydrationErrors = [error] : hydrationErrors.push(error);
}
function pushProvider(providerFiber, context, nextValue) {
  push2(valueCursor, context._currentValue);
  context._currentValue = nextValue;
}
function popProvider(context) {
  context._currentValue = valueCursor.current;
  pop2(valueCursor);
}
function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
  for (;parent !== null; ) {
    var alternate = parent.alternate;
    (parent.childLanes & renderLanes) !== renderLanes ? (parent.childLanes |= renderLanes, alternate !== null && (alternate.childLanes |= renderLanes)) : alternate !== null && (alternate.childLanes & renderLanes) !== renderLanes && (alternate.childLanes |= renderLanes);
    if (parent === propagationRoot)
      break;
    parent = parent.return;
  }
}
function propagateContextChanges(workInProgress, contexts, renderLanes, forcePropagateEntireTree) {
  var fiber = workInProgress.child;
  fiber !== null && (fiber.return = workInProgress);
  for (;fiber !== null; ) {
    var list = fiber.dependencies;
    if (list !== null) {
      var nextFiber = fiber.child;
      list = list.firstContext;
      a:
        for (;list !== null; ) {
          var dependency = list;
          list = fiber;
          for (var i = 0;i < contexts.length; i++)
            if (dependency.context === contexts[i]) {
              list.lanes |= renderLanes;
              dependency = list.alternate;
              dependency !== null && (dependency.lanes |= renderLanes);
              scheduleContextWorkOnParentPath(list.return, renderLanes, workInProgress);
              forcePropagateEntireTree || (nextFiber = null);
              break a;
            }
          list = dependency.next;
        }
    } else if (fiber.tag === 18) {
      nextFiber = fiber.return;
      if (nextFiber === null)
        throw Error(formatProdErrorMessage2(341));
      nextFiber.lanes |= renderLanes;
      list = nextFiber.alternate;
      list !== null && (list.lanes |= renderLanes);
      scheduleContextWorkOnParentPath(nextFiber, renderLanes, workInProgress);
      nextFiber = null;
    } else
      nextFiber = fiber.child;
    if (nextFiber !== null)
      nextFiber.return = fiber;
    else
      for (nextFiber = fiber;nextFiber !== null; ) {
        if (nextFiber === workInProgress) {
          nextFiber = null;
          break;
        }
        fiber = nextFiber.sibling;
        if (fiber !== null) {
          fiber.return = nextFiber.return;
          nextFiber = fiber;
          break;
        }
        nextFiber = nextFiber.return;
      }
    fiber = nextFiber;
  }
}
function propagateParentContextChanges(current, workInProgress, renderLanes, forcePropagateEntireTree) {
  current = null;
  for (var parent = workInProgress, isInsidePropagationBailout = false;parent !== null; ) {
    if (!isInsidePropagationBailout) {
      if ((parent.flags & 524288) !== 0)
        isInsidePropagationBailout = true;
      else if ((parent.flags & 262144) !== 0)
        break;
    }
    if (parent.tag === 10) {
      var currentParent = parent.alternate;
      if (currentParent === null)
        throw Error(formatProdErrorMessage2(387));
      currentParent = currentParent.memoizedProps;
      if (currentParent !== null) {
        var context = parent.type;
        objectIs(parent.pendingProps.value, currentParent.value) || (current !== null ? current.push(context) : current = [context]);
      }
    } else if (parent === hostTransitionProviderCursor.current) {
      currentParent = parent.alternate;
      if (currentParent === null)
        throw Error(formatProdErrorMessage2(387));
      currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (current !== null ? current.push(HostTransitionContext) : current = [HostTransitionContext]);
    }
    parent = parent.return;
  }
  current !== null && propagateContextChanges(workInProgress, current, renderLanes, forcePropagateEntireTree);
  workInProgress.flags |= 262144;
}
function checkIfContextChanged(currentDependencies) {
  for (currentDependencies = currentDependencies.firstContext;currentDependencies !== null; ) {
    if (!objectIs(currentDependencies.context._currentValue, currentDependencies.memoizedValue))
      return true;
    currentDependencies = currentDependencies.next;
  }
  return false;
}
function prepareToReadContext(workInProgress) {
  currentlyRenderingFiber$1 = workInProgress;
  lastContextDependency = null;
  workInProgress = workInProgress.dependencies;
  workInProgress !== null && (workInProgress.firstContext = null);
}
function readContext(context) {
  return readContextForConsumer(currentlyRenderingFiber$1, context);
}
function readContextDuringReconciliation(consumer, context) {
  currentlyRenderingFiber$1 === null && prepareToReadContext(consumer);
  return readContextForConsumer(consumer, context);
}
function readContextForConsumer(consumer, context) {
  var value = context._currentValue;
  context = { context, memoizedValue: value, next: null };
  if (lastContextDependency === null) {
    if (consumer === null)
      throw Error(formatProdErrorMessage2(308));
    lastContextDependency = context;
    consumer.dependencies = { lanes: 0, firstContext: context };
    consumer.flags |= 524288;
  } else
    lastContextDependency = lastContextDependency.next = context;
  return value;
}
function createCache() {
  return {
    controller: new AbortControllerLocal,
    data: new Map,
    refCount: 0
  };
}
function releaseCache(cache) {
  cache.refCount--;
  cache.refCount === 0 && scheduleCallback$2(NormalPriority, function() {
    cache.controller.abort();
  });
}
function entangleAsyncAction(transition, thenable) {
  if (currentEntangledListeners === null) {
    var entangledListeners = currentEntangledListeners = [];
    currentEntangledPendingCount = 0;
    currentEntangledLane = requestTransitionLane();
    currentEntangledActionThenable = {
      status: "pending",
      value: undefined,
      then: function(resolve) {
        entangledListeners.push(resolve);
      }
    };
  }
  currentEntangledPendingCount++;
  thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
  return thenable;
}
function pingEngtangledActionScope() {
  if (--currentEntangledPendingCount === 0 && currentEntangledListeners !== null) {
    currentEntangledActionThenable !== null && (currentEntangledActionThenable.status = "fulfilled");
    var listeners = currentEntangledListeners;
    currentEntangledListeners = null;
    currentEntangledLane = 0;
    currentEntangledActionThenable = null;
    for (var i = 0;i < listeners.length; i++)
      (0, listeners[i])();
  }
}
function chainThenableValue(thenable, result) {
  var listeners = [], thenableWithOverride = {
    status: "pending",
    value: null,
    reason: null,
    then: function(resolve) {
      listeners.push(resolve);
    }
  };
  thenable.then(function() {
    thenableWithOverride.status = "fulfilled";
    thenableWithOverride.value = result;
    for (var i = 0;i < listeners.length; i++)
      (0, listeners[i])(result);
  }, function(error) {
    thenableWithOverride.status = "rejected";
    thenableWithOverride.reason = error;
    for (error = 0;error < listeners.length; error++)
      (0, listeners[error])(undefined);
  });
  return thenableWithOverride;
}
function peekCacheFromPool() {
  var cacheResumedFromPreviousRender = resumedCache.current;
  return cacheResumedFromPreviousRender !== null ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
}
function pushTransition(offscreenWorkInProgress, prevCachePool) {
  prevCachePool === null ? push2(resumedCache, resumedCache.current) : push2(resumedCache, prevCachePool.pool);
}
function getSuspendedCache() {
  var cacheFromPool = peekCacheFromPool();
  return cacheFromPool === null ? null : { parent: CacheContext._currentValue, pool: cacheFromPool };
}
function isThenableResolved(thenable) {
  thenable = thenable.status;
  return thenable === "fulfilled" || thenable === "rejected";
}
function noop$3() {
}
function trackUsedThenable(thenableState, thenable, index2) {
  index2 = thenableState[index2];
  index2 === undefined ? thenableState.push(thenable) : index2 !== thenable && (thenable.then(noop$3, noop$3), thenable = index2);
  switch (thenable.status) {
    case "fulfilled":
      return thenable.value;
    case "rejected":
      throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
    default:
      if (typeof thenable.status === "string")
        thenable.then(noop$3, noop$3);
      else {
        thenableState = workInProgressRoot;
        if (thenableState !== null && 100 < thenableState.shellSuspendCounter)
          throw Error(formatProdErrorMessage2(482));
        thenableState = thenable;
        thenableState.status = "pending";
        thenableState.then(function(fulfilledValue) {
          if (thenable.status === "pending") {
            var fulfilledThenable = thenable;
            fulfilledThenable.status = "fulfilled";
            fulfilledThenable.value = fulfilledValue;
          }
        }, function(error) {
          if (thenable.status === "pending") {
            var rejectedThenable = thenable;
            rejectedThenable.status = "rejected";
            rejectedThenable.reason = error;
          }
        });
      }
      switch (thenable.status) {
        case "fulfilled":
          return thenable.value;
        case "rejected":
          throw thenableState = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState), thenableState;
      }
      suspendedThenable = thenable;
      throw SuspenseException;
  }
}
function getSuspendedThenable() {
  if (suspendedThenable === null)
    throw Error(formatProdErrorMessage2(459));
  var thenable = suspendedThenable;
  suspendedThenable = null;
  return thenable;
}
function checkIfUseWrappedInAsyncCatch(rejectedReason) {
  if (rejectedReason === SuspenseException || rejectedReason === SuspenseActionException)
    throw Error(formatProdErrorMessage2(483));
}
function initializeUpdateQueue(fiber) {
  fiber.updateQueue = {
    baseState: fiber.memoizedState,
    firstBaseUpdate: null,
    lastBaseUpdate: null,
    shared: { pending: null, lanes: 0, hiddenCallbacks: null },
    callbacks: null
  };
}
function cloneUpdateQueue(current, workInProgress) {
  current = current.updateQueue;
  workInProgress.updateQueue === current && (workInProgress.updateQueue = {
    baseState: current.baseState,
    firstBaseUpdate: current.firstBaseUpdate,
    lastBaseUpdate: current.lastBaseUpdate,
    shared: current.shared,
    callbacks: null
  });
}
function createUpdate(lane) {
  return { lane, tag: 0, payload: null, callback: null, next: null };
}
function enqueueUpdate(fiber, update, lane) {
  var updateQueue = fiber.updateQueue;
  if (updateQueue === null)
    return null;
  updateQueue = updateQueue.shared;
  if ((executionContext & 2) !== 0) {
    var pending = updateQueue.pending;
    pending === null ? update.next = update : (update.next = pending.next, pending.next = update);
    updateQueue.pending = update;
    update = getRootForUpdatedFiber(fiber);
    markUpdateLaneFromFiberToRoot(fiber, null, lane);
    return update;
  }
  enqueueUpdate$1(fiber, updateQueue, update, lane);
  return getRootForUpdatedFiber(fiber);
}
function entangleTransitions(root2, fiber, lane) {
  fiber = fiber.updateQueue;
  if (fiber !== null && (fiber = fiber.shared, (lane & 4194048) !== 0)) {
    var queueLanes = fiber.lanes;
    queueLanes &= root2.pendingLanes;
    lane |= queueLanes;
    fiber.lanes = lane;
    markRootEntangled(root2, lane);
  }
}
function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
  var { updateQueue: queue, alternate: current } = workInProgress;
  if (current !== null && (current = current.updateQueue, queue === current)) {
    var newFirst = null, newLast = null;
    queue = queue.firstBaseUpdate;
    if (queue !== null) {
      do {
        var clone = {
          lane: queue.lane,
          tag: queue.tag,
          payload: queue.payload,
          callback: null,
          next: null
        };
        newLast === null ? newFirst = newLast = clone : newLast = newLast.next = clone;
        queue = queue.next;
      } while (queue !== null);
      newLast === null ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
    } else
      newFirst = newLast = capturedUpdate;
    queue = {
      baseState: current.baseState,
      firstBaseUpdate: newFirst,
      lastBaseUpdate: newLast,
      shared: current.shared,
      callbacks: current.callbacks
    };
    workInProgress.updateQueue = queue;
    return;
  }
  workInProgress = queue.lastBaseUpdate;
  workInProgress === null ? queue.firstBaseUpdate = capturedUpdate : workInProgress.next = capturedUpdate;
  queue.lastBaseUpdate = capturedUpdate;
}
function suspendIfUpdateReadFromEntangledAsyncAction() {
  if (didReadFromEntangledAsyncAction) {
    var entangledActionThenable = currentEntangledActionThenable;
    if (entangledActionThenable !== null)
      throw entangledActionThenable;
  }
}
function processUpdateQueue(workInProgress$jscomp$0, props, instance$jscomp$0, renderLanes) {
  didReadFromEntangledAsyncAction = false;
  var queue = workInProgress$jscomp$0.updateQueue;
  hasForceUpdate = false;
  var { firstBaseUpdate, lastBaseUpdate } = queue, pendingQueue = queue.shared.pending;
  if (pendingQueue !== null) {
    queue.shared.pending = null;
    var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
    lastPendingUpdate.next = null;
    lastBaseUpdate === null ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
    lastBaseUpdate = lastPendingUpdate;
    var current = workInProgress$jscomp$0.alternate;
    current !== null && (current = current.updateQueue, pendingQueue = current.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (pendingQueue === null ? current.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current.lastBaseUpdate = lastPendingUpdate));
  }
  if (firstBaseUpdate !== null) {
    var newState = queue.baseState;
    lastBaseUpdate = 0;
    current = firstPendingUpdate = lastPendingUpdate = null;
    pendingQueue = firstBaseUpdate;
    do {
      var updateLane = pendingQueue.lane & -536870913, isHiddenUpdate = updateLane !== pendingQueue.lane;
      if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
        updateLane !== 0 && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = true);
        current !== null && (current = current.next = {
          lane: 0,
          tag: pendingQueue.tag,
          payload: pendingQueue.payload,
          callback: null,
          next: null
        });
        a: {
          var workInProgress = workInProgress$jscomp$0, update = pendingQueue;
          updateLane = props;
          var instance = instance$jscomp$0;
          switch (update.tag) {
            case 1:
              workInProgress = update.payload;
              if (typeof workInProgress === "function") {
                newState = workInProgress.call(instance, newState, updateLane);
                break a;
              }
              newState = workInProgress;
              break a;
            case 3:
              workInProgress.flags = workInProgress.flags & -65537 | 128;
            case 0:
              workInProgress = update.payload;
              updateLane = typeof workInProgress === "function" ? workInProgress.call(instance, newState, updateLane) : workInProgress;
              if (updateLane === null || updateLane === undefined)
                break a;
              newState = assign2({}, newState, updateLane);
              break a;
            case 2:
              hasForceUpdate = true;
          }
        }
        updateLane = pendingQueue.callback;
        updateLane !== null && (workInProgress$jscomp$0.flags |= 64, isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192), isHiddenUpdate = queue.callbacks, isHiddenUpdate === null ? queue.callbacks = [updateLane] : isHiddenUpdate.push(updateLane));
      } else
        isHiddenUpdate = {
          lane: updateLane,
          tag: pendingQueue.tag,
          payload: pendingQueue.payload,
          callback: pendingQueue.callback,
          next: null
        }, current === null ? (firstPendingUpdate = current = isHiddenUpdate, lastPendingUpdate = newState) : current = current.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
      pendingQueue = pendingQueue.next;
      if (pendingQueue === null)
        if (pendingQueue = queue.shared.pending, pendingQueue === null)
          break;
        else
          isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
    } while (1);
    current === null && (lastPendingUpdate = newState);
    queue.baseState = lastPendingUpdate;
    queue.firstBaseUpdate = firstPendingUpdate;
    queue.lastBaseUpdate = current;
    firstBaseUpdate === null && (queue.shared.lanes = 0);
    workInProgressRootSkippedLanes |= lastBaseUpdate;
    workInProgress$jscomp$0.lanes = lastBaseUpdate;
    workInProgress$jscomp$0.memoizedState = newState;
  }
}
function callCallback(callback, context) {
  if (typeof callback !== "function")
    throw Error(formatProdErrorMessage2(191, callback));
  callback.call(context);
}
function commitCallbacks(updateQueue, context) {
  var callbacks = updateQueue.callbacks;
  if (callbacks !== null)
    for (updateQueue.callbacks = null, updateQueue = 0;updateQueue < callbacks.length; updateQueue++)
      callCallback(callbacks[updateQueue], context);
}
function pushHiddenContext(fiber, context) {
  fiber = entangledRenderLanes;
  push2(prevEntangledRenderLanesCursor, fiber);
  push2(currentTreeHiddenStackCursor, context);
  entangledRenderLanes = fiber | context.baseLanes;
}
function reuseHiddenContextOnStack() {
  push2(prevEntangledRenderLanesCursor, entangledRenderLanes);
  push2(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);
}
function popHiddenContext() {
  entangledRenderLanes = prevEntangledRenderLanesCursor.current;
  pop2(currentTreeHiddenStackCursor);
  pop2(prevEntangledRenderLanesCursor);
}
function throwInvalidHookError() {
  throw Error(formatProdErrorMessage2(321));
}
function areHookInputsEqual(nextDeps, prevDeps) {
  if (prevDeps === null)
    return false;
  for (var i = 0;i < prevDeps.length && i < nextDeps.length; i++)
    if (!objectIs(nextDeps[i], prevDeps[i]))
      return false;
  return true;
}
function renderWithHooks(current, workInProgress, Component2, props, secondArg, nextRenderLanes) {
  renderLanes = nextRenderLanes;
  currentlyRenderingFiber = workInProgress;
  workInProgress.memoizedState = null;
  workInProgress.updateQueue = null;
  workInProgress.lanes = 0;
  ReactSharedInternals3.H = current === null || current.memoizedState === null ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
  shouldDoubleInvokeUserFnsInHooksDEV = false;
  nextRenderLanes = Component2(props, secondArg);
  shouldDoubleInvokeUserFnsInHooksDEV = false;
  didScheduleRenderPhaseUpdateDuringThisPass && (nextRenderLanes = renderWithHooksAgain(workInProgress, Component2, props, secondArg));
  finishRenderingHooks(current);
  return nextRenderLanes;
}
function finishRenderingHooks(current) {
  ReactSharedInternals3.H = ContextOnlyDispatcher;
  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
  renderLanes = 0;
  workInProgressHook = currentHook = currentlyRenderingFiber = null;
  didScheduleRenderPhaseUpdate = false;
  thenableIndexCounter$1 = 0;
  thenableState$1 = null;
  if (didRenderTooFewHooks)
    throw Error(formatProdErrorMessage2(300));
  current === null || didReceiveUpdate || (current = current.dependencies, current !== null && checkIfContextChanged(current) && (didReceiveUpdate = true));
}
function renderWithHooksAgain(workInProgress, Component2, props, secondArg) {
  currentlyRenderingFiber = workInProgress;
  var numberOfReRenders = 0;
  do {
    didScheduleRenderPhaseUpdateDuringThisPass && (thenableState$1 = null);
    thenableIndexCounter$1 = 0;
    didScheduleRenderPhaseUpdateDuringThisPass = false;
    if (25 <= numberOfReRenders)
      throw Error(formatProdErrorMessage2(301));
    numberOfReRenders += 1;
    workInProgressHook = currentHook = null;
    if (workInProgress.updateQueue != null) {
      var children = workInProgress.updateQueue;
      children.lastEffect = null;
      children.events = null;
      children.stores = null;
      children.memoCache != null && (children.memoCache.index = 0);
    }
    ReactSharedInternals3.H = HooksDispatcherOnRerender;
    children = Component2(props, secondArg);
  } while (didScheduleRenderPhaseUpdateDuringThisPass);
  return children;
}
function TransitionAwareHostComponent() {
  var dispatcher = ReactSharedInternals3.H, maybeThenable = dispatcher.useState()[0];
  maybeThenable = typeof maybeThenable.then === "function" ? useThenable(maybeThenable) : maybeThenable;
  dispatcher = dispatcher.useState()[0];
  (currentHook !== null ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber.flags |= 1024);
  return maybeThenable;
}
function checkDidRenderIdHook() {
  var didRenderIdHook = localIdCounter !== 0;
  localIdCounter = 0;
  return didRenderIdHook;
}
function bailoutHooks(current, workInProgress, lanes) {
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.flags &= -2053;
  current.lanes &= ~lanes;
}
function resetHooksOnUnwind(workInProgress) {
  if (didScheduleRenderPhaseUpdate) {
    for (workInProgress = workInProgress.memoizedState;workInProgress !== null; ) {
      var queue = workInProgress.queue;
      queue !== null && (queue.pending = null);
      workInProgress = workInProgress.next;
    }
    didScheduleRenderPhaseUpdate = false;
  }
  renderLanes = 0;
  workInProgressHook = currentHook = currentlyRenderingFiber = null;
  didScheduleRenderPhaseUpdateDuringThisPass = false;
  thenableIndexCounter$1 = localIdCounter = 0;
  thenableState$1 = null;
}
function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };
  workInProgressHook === null ? currentlyRenderingFiber.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
  return workInProgressHook;
}
function updateWorkInProgressHook() {
  if (currentHook === null) {
    var nextCurrentHook = currentlyRenderingFiber.alternate;
    nextCurrentHook = nextCurrentHook !== null ? nextCurrentHook.memoizedState : null;
  } else
    nextCurrentHook = currentHook.next;
  var nextWorkInProgressHook = workInProgressHook === null ? currentlyRenderingFiber.memoizedState : workInProgressHook.next;
  if (nextWorkInProgressHook !== null)
    workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
  else {
    if (nextCurrentHook === null) {
      if (currentlyRenderingFiber.alternate === null)
        throw Error(formatProdErrorMessage2(467));
      throw Error(formatProdErrorMessage2(310));
    }
    currentHook = nextCurrentHook;
    nextCurrentHook = {
      memoizedState: currentHook.memoizedState,
      baseState: currentHook.baseState,
      baseQueue: currentHook.baseQueue,
      queue: currentHook.queue,
      next: null
    };
    workInProgressHook === null ? currentlyRenderingFiber.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
  }
  return workInProgressHook;
}
function createFunctionComponentUpdateQueue() {
  return { lastEffect: null, events: null, stores: null, memoCache: null };
}
function useThenable(thenable) {
  var index2 = thenableIndexCounter$1;
  thenableIndexCounter$1 += 1;
  thenableState$1 === null && (thenableState$1 = []);
  thenable = trackUsedThenable(thenableState$1, thenable, index2);
  index2 = currentlyRenderingFiber;
  (workInProgressHook === null ? index2.memoizedState : workInProgressHook.next) === null && (index2 = index2.alternate, ReactSharedInternals3.H = index2 === null || index2.memoizedState === null ? HooksDispatcherOnMount : HooksDispatcherOnUpdate);
  return thenable;
}
function use(usable) {
  if (usable !== null && typeof usable === "object") {
    if (typeof usable.then === "function")
      return useThenable(usable);
    if (usable.$$typeof === REACT_CONTEXT_TYPE2)
      return readContext(usable);
  }
  throw Error(formatProdErrorMessage2(438, String(usable)));
}
function useMemoCache(size) {
  var memoCache = null, updateQueue = currentlyRenderingFiber.updateQueue;
  updateQueue !== null && (memoCache = updateQueue.memoCache);
  if (memoCache == null) {
    var current = currentlyRenderingFiber.alternate;
    current !== null && (current = current.updateQueue, current !== null && (current = current.memoCache, current != null && (memoCache = {
      data: current.data.map(function(array) {
        return array.slice();
      }),
      index: 0
    })));
  }
  memoCache == null && (memoCache = { data: [], index: 0 });
  updateQueue === null && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = updateQueue);
  updateQueue.memoCache = memoCache;
  updateQueue = memoCache.data[memoCache.index];
  if (updateQueue === undefined)
    for (updateQueue = memoCache.data[memoCache.index] = Array(size), current = 0;current < size; current++)
      updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
  memoCache.index++;
  return updateQueue;
}
function basicStateReducer(state, action) {
  return typeof action === "function" ? action(state) : action;
}
function updateReducer(reducer) {
  var hook = updateWorkInProgressHook();
  return updateReducerImpl(hook, currentHook, reducer);
}
function updateReducerImpl(hook, current, reducer) {
  var queue = hook.queue;
  if (queue === null)
    throw Error(formatProdErrorMessage2(311));
  queue.lastRenderedReducer = reducer;
  var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
  if (pendingQueue !== null) {
    if (baseQueue !== null) {
      var baseFirst = baseQueue.next;
      baseQueue.next = pendingQueue.next;
      pendingQueue.next = baseFirst;
    }
    current.baseQueue = baseQueue = pendingQueue;
    queue.pending = null;
  }
  pendingQueue = hook.baseState;
  if (baseQueue === null)
    hook.memoizedState = pendingQueue;
  else {
    current = baseQueue.next;
    var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current, didReadFromEntangledAsyncAction$32 = false;
    do {
      var updateLane = update.lane & -536870913;
      if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
        var revertLane = update.revertLane;
        if (revertLane === 0)
          newBaseQueueLast !== null && (newBaseQueueLast = newBaseQueueLast.next = {
            lane: 0,
            revertLane: 0,
            action: update.action,
            hasEagerState: update.hasEagerState,
            eagerState: update.eagerState,
            next: null
          }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction$32 = true);
        else if ((renderLanes & revertLane) === revertLane) {
          update = update.next;
          revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction$32 = true);
          continue;
        } else
          updateLane = {
            lane: 0,
            revertLane: update.revertLane,
            action: update.action,
            hasEagerState: update.hasEagerState,
            eagerState: update.eagerState,
            next: null
          }, newBaseQueueLast === null ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
        updateLane = update.action;
        shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
        pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
      } else
        revertLane = {
          lane: updateLane,
          revertLane: update.revertLane,
          action: update.action,
          hasEagerState: update.hasEagerState,
          eagerState: update.eagerState,
          next: null
        }, newBaseQueueLast === null ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
      update = update.next;
    } while (update !== null && update !== current);
    newBaseQueueLast === null ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
    if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = true, didReadFromEntangledAsyncAction$32 && (reducer = currentEntangledActionThenable, reducer !== null)))
      throw reducer;
    hook.memoizedState = pendingQueue;
    hook.baseState = baseFirst;
    hook.baseQueue = newBaseQueueLast;
    queue.lastRenderedState = pendingQueue;
  }
  baseQueue === null && (queue.lanes = 0);
  return [hook.memoizedState, queue.dispatch];
}
function rerenderReducer(reducer) {
  var hook = updateWorkInProgressHook(), queue = hook.queue;
  if (queue === null)
    throw Error(formatProdErrorMessage2(311));
  queue.lastRenderedReducer = reducer;
  var { dispatch, pending: lastRenderPhaseUpdate } = queue, newState = hook.memoizedState;
  if (lastRenderPhaseUpdate !== null) {
    queue.pending = null;
    var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
    do
      newState = reducer(newState, update.action), update = update.next;
    while (update !== lastRenderPhaseUpdate);
    objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
    hook.memoizedState = newState;
    hook.baseQueue === null && (hook.baseState = newState);
    queue.lastRenderedState = newState;
  }
  return [newState, dispatch];
}
function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
  var fiber = currentlyRenderingFiber, hook = updateWorkInProgressHook(), isHydrating$jscomp$0 = isHydrating;
  if (isHydrating$jscomp$0) {
    if (getServerSnapshot === undefined)
      throw Error(formatProdErrorMessage2(407));
    getServerSnapshot = getServerSnapshot();
  } else
    getServerSnapshot = getSnapshot();
  var snapshotChanged = !objectIs((currentHook || hook).memoizedState, getServerSnapshot);
  snapshotChanged && (hook.memoizedState = getServerSnapshot, didReceiveUpdate = true);
  hook = hook.queue;
  var create = subscribeToStore.bind(null, fiber, hook, subscribe);
  updateEffectImpl(2048, 8, create, [subscribe]);
  if (hook.getSnapshot !== getSnapshot || snapshotChanged || workInProgressHook !== null && workInProgressHook.memoizedState.tag & 1) {
    fiber.flags |= 2048;
    pushSimpleEffect(9, createEffectInstance(), updateStoreInstance.bind(null, fiber, hook, getServerSnapshot, getSnapshot), null);
    if (workInProgressRoot === null)
      throw Error(formatProdErrorMessage2(349));
    isHydrating$jscomp$0 || (renderLanes & 124) !== 0 || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
  }
  return getServerSnapshot;
}
function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
  fiber.flags |= 16384;
  fiber = { getSnapshot, value: renderedSnapshot };
  getSnapshot = currentlyRenderingFiber.updateQueue;
  getSnapshot === null ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, renderedSnapshot === null ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
}
function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
  inst.value = nextSnapshot;
  inst.getSnapshot = getSnapshot;
  checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
}
function subscribeToStore(fiber, inst, subscribe) {
  return subscribe(function() {
    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
  });
}
function checkIfSnapshotChanged(inst) {
  var latestGetSnapshot = inst.getSnapshot;
  inst = inst.value;
  try {
    var nextValue = latestGetSnapshot();
    return !objectIs(inst, nextValue);
  } catch (error) {
    return true;
  }
}
function forceStoreRerender(fiber) {
  var root2 = enqueueConcurrentRenderForLane(fiber, 2);
  root2 !== null && scheduleUpdateOnFiber(root2, fiber, 2);
}
function mountStateImpl(initialState) {
  var hook = mountWorkInProgressHook();
  if (typeof initialState === "function") {
    var initialStateInitializer = initialState;
    initialState = initialStateInitializer();
    if (shouldDoubleInvokeUserFnsInHooksDEV) {
      setIsStrictModeForDevtools(true);
      try {
        initialStateInitializer();
      } finally {
        setIsStrictModeForDevtools(false);
      }
    }
  }
  hook.memoizedState = hook.baseState = initialState;
  hook.queue = {
    pending: null,
    lanes: 0,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  return hook;
}
function updateOptimisticImpl(hook, current, passthrough, reducer) {
  hook.baseState = passthrough;
  return updateReducerImpl(hook, currentHook, typeof reducer === "function" ? reducer : basicStateReducer);
}
function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
  if (isRenderPhaseUpdate(fiber))
    throw Error(formatProdErrorMessage2(485));
  fiber = actionQueue.action;
  if (fiber !== null) {
    var actionNode = {
      payload,
      action: fiber,
      next: null,
      isTransition: true,
      status: "pending",
      value: null,
      reason: null,
      listeners: [],
      then: function(listener) {
        actionNode.listeners.push(listener);
      }
    };
    ReactSharedInternals3.T !== null ? setPendingState(true) : actionNode.isTransition = false;
    setState(actionNode);
    setPendingState = actionQueue.pending;
    setPendingState === null ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
  }
}
function runActionStateAction(actionQueue, node) {
  var { action, payload } = node, prevState = actionQueue.state;
  if (node.isTransition) {
    var prevTransition = ReactSharedInternals3.T, currentTransition = {};
    ReactSharedInternals3.T = currentTransition;
    try {
      var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals3.S;
      onStartTransitionFinish !== null && onStartTransitionFinish(currentTransition, returnValue);
      handleActionReturnValue(actionQueue, node, returnValue);
    } catch (error) {
      onActionError(actionQueue, node, error);
    } finally {
      ReactSharedInternals3.T = prevTransition;
    }
  } else
    try {
      prevTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node, prevTransition);
    } catch (error$38) {
      onActionError(actionQueue, node, error$38);
    }
}
function handleActionReturnValue(actionQueue, node, returnValue) {
  returnValue !== null && typeof returnValue === "object" && typeof returnValue.then === "function" ? returnValue.then(function(nextState) {
    onActionSuccess(actionQueue, node, nextState);
  }, function(error) {
    return onActionError(actionQueue, node, error);
  }) : onActionSuccess(actionQueue, node, returnValue);
}
function onActionSuccess(actionQueue, actionNode, nextState) {
  actionNode.status = "fulfilled";
  actionNode.value = nextState;
  notifyActionListeners(actionNode);
  actionQueue.state = nextState;
  actionNode = actionQueue.pending;
  actionNode !== null && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
}
function onActionError(actionQueue, actionNode, error) {
  var last = actionQueue.pending;
  actionQueue.pending = null;
  if (last !== null) {
    last = last.next;
    do
      actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
    while (actionNode !== last);
  }
  actionQueue.action = null;
}
function notifyActionListeners(actionNode) {
  actionNode = actionNode.listeners;
  for (var i = 0;i < actionNode.length; i++)
    (0, actionNode[i])();
}
function actionStateReducer(oldState, newState) {
  return newState;
}
function mountActionState(action, initialStateProp) {
  if (isHydrating) {
    var ssrFormState = workInProgressRoot.formState;
    if (ssrFormState !== null) {
      a: {
        var JSCompiler_inline_result = currentlyRenderingFiber;
        if (isHydrating) {
          if (nextHydratableInstance) {
            b: {
              var JSCompiler_inline_result$jscomp$0 = nextHydratableInstance;
              for (var inRootOrSingleton = rootOrSingletonContext;JSCompiler_inline_result$jscomp$0.nodeType !== 8; ) {
                if (!inRootOrSingleton) {
                  JSCompiler_inline_result$jscomp$0 = null;
                  break b;
                }
                JSCompiler_inline_result$jscomp$0 = getNextHydratable(JSCompiler_inline_result$jscomp$0.nextSibling);
                if (JSCompiler_inline_result$jscomp$0 === null) {
                  JSCompiler_inline_result$jscomp$0 = null;
                  break b;
                }
              }
              inRootOrSingleton = JSCompiler_inline_result$jscomp$0.data;
              JSCompiler_inline_result$jscomp$0 = inRootOrSingleton === "F!" || inRootOrSingleton === "F" ? JSCompiler_inline_result$jscomp$0 : null;
            }
            if (JSCompiler_inline_result$jscomp$0) {
              nextHydratableInstance = getNextHydratable(JSCompiler_inline_result$jscomp$0.nextSibling);
              JSCompiler_inline_result = JSCompiler_inline_result$jscomp$0.data === "F!";
              break a;
            }
          }
          throwOnHydrationMismatch(JSCompiler_inline_result);
        }
        JSCompiler_inline_result = false;
      }
      JSCompiler_inline_result && (initialStateProp = ssrFormState[0]);
    }
  }
  ssrFormState = mountWorkInProgressHook();
  ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
  JSCompiler_inline_result = {
    pending: null,
    lanes: 0,
    dispatch: null,
    lastRenderedReducer: actionStateReducer,
    lastRenderedState: initialStateProp
  };
  ssrFormState.queue = JSCompiler_inline_result;
  ssrFormState = dispatchSetState.bind(null, currentlyRenderingFiber, JSCompiler_inline_result);
  JSCompiler_inline_result.dispatch = ssrFormState;
  JSCompiler_inline_result = mountStateImpl(false);
  inRootOrSingleton = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber, false, JSCompiler_inline_result.queue);
  JSCompiler_inline_result = mountWorkInProgressHook();
  JSCompiler_inline_result$jscomp$0 = {
    state: initialStateProp,
    dispatch: null,
    action,
    pending: null
  };
  JSCompiler_inline_result.queue = JSCompiler_inline_result$jscomp$0;
  ssrFormState = dispatchActionState.bind(null, currentlyRenderingFiber, JSCompiler_inline_result$jscomp$0, inRootOrSingleton, ssrFormState);
  JSCompiler_inline_result$jscomp$0.dispatch = ssrFormState;
  JSCompiler_inline_result.memoizedState = action;
  return [initialStateProp, ssrFormState, false];
}
function updateActionState(action) {
  var stateHook = updateWorkInProgressHook();
  return updateActionStateImpl(stateHook, currentHook, action);
}
function updateActionStateImpl(stateHook, currentStateHook, action) {
  currentStateHook = updateReducerImpl(stateHook, currentStateHook, actionStateReducer)[0];
  stateHook = updateReducer(basicStateReducer)[0];
  if (typeof currentStateHook === "object" && currentStateHook !== null && typeof currentStateHook.then === "function")
    try {
      var state = useThenable(currentStateHook);
    } catch (x) {
      if (x === SuspenseException)
        throw SuspenseActionException;
      throw x;
    }
  else
    state = currentStateHook;
  currentStateHook = updateWorkInProgressHook();
  var actionQueue = currentStateHook.queue, dispatch = actionQueue.dispatch;
  action !== currentStateHook.memoizedState && (currentlyRenderingFiber.flags |= 2048, pushSimpleEffect(9, createEffectInstance(), actionStateActionEffect.bind(null, actionQueue, action), null));
  return [state, dispatch, stateHook];
}
function actionStateActionEffect(actionQueue, action) {
  actionQueue.action = action;
}
function rerenderActionState(action) {
  var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
  if (currentStateHook !== null)
    return updateActionStateImpl(stateHook, currentStateHook, action);
  updateWorkInProgressHook();
  stateHook = stateHook.memoizedState;
  currentStateHook = updateWorkInProgressHook();
  var dispatch = currentStateHook.queue.dispatch;
  currentStateHook.memoizedState = action;
  return [stateHook, dispatch, false];
}
function pushSimpleEffect(tag, inst, create, createDeps) {
  tag = { tag, create, deps: createDeps, inst, next: null };
  inst = currentlyRenderingFiber.updateQueue;
  inst === null && (inst = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = inst);
  create = inst.lastEffect;
  create === null ? inst.lastEffect = tag.next = tag : (createDeps = create.next, create.next = tag, tag.next = createDeps, inst.lastEffect = tag);
  return tag;
}
function createEffectInstance() {
  return { destroy: undefined, resource: undefined };
}
function updateRef() {
  return updateWorkInProgressHook().memoizedState;
}
function mountEffectImpl(fiberFlags, hookFlags, create, createDeps) {
  var hook = mountWorkInProgressHook();
  createDeps = createDeps === undefined ? null : createDeps;
  currentlyRenderingFiber.flags |= fiberFlags;
  hook.memoizedState = pushSimpleEffect(1 | hookFlags, createEffectInstance(), create, createDeps);
}
function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
  var hook = updateWorkInProgressHook();
  deps = deps === undefined ? null : deps;
  var inst = hook.memoizedState.inst;
  currentHook !== null && deps !== null && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushSimpleEffect(hookFlags, inst, create, deps) : (currentlyRenderingFiber.flags |= fiberFlags, hook.memoizedState = pushSimpleEffect(1 | hookFlags, inst, create, deps));
}
function mountEffect(create, createDeps) {
  mountEffectImpl(8390656, 8, create, createDeps);
}
function updateEffect(create, createDeps) {
  updateEffectImpl(2048, 8, create, createDeps);
}
function updateInsertionEffect(create, deps) {
  return updateEffectImpl(4, 2, create, deps);
}
function updateLayoutEffect(create, deps) {
  return updateEffectImpl(4, 4, create, deps);
}
function imperativeHandleEffect(create, ref) {
  if (typeof ref === "function") {
    create = create();
    var refCleanup = ref(create);
    return function() {
      typeof refCleanup === "function" ? refCleanup() : ref(null);
    };
  }
  if (ref !== null && ref !== undefined)
    return create = create(), ref.current = create, function() {
      ref.current = null;
    };
}
function updateImperativeHandle(ref, create, deps) {
  deps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
}
function mountDebugValue() {
}
function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  deps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;
  if (deps !== null && areHookInputsEqual(deps, prevState[1]))
    return prevState[0];
  hook.memoizedState = [callback, deps];
  return callback;
}
function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  deps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;
  if (deps !== null && areHookInputsEqual(deps, prevState[1]))
    return prevState[0];
  prevState = nextCreate();
  if (shouldDoubleInvokeUserFnsInHooksDEV) {
    setIsStrictModeForDevtools(true);
    try {
      nextCreate();
    } finally {
      setIsStrictModeForDevtools(false);
    }
  }
  hook.memoizedState = [prevState, deps];
  return prevState;
}
function mountDeferredValueImpl(hook, value, initialValue) {
  if (initialValue === undefined || (renderLanes & 1073741824) !== 0)
    return hook.memoizedState = value;
  hook.memoizedState = initialValue;
  hook = requestDeferredLane();
  currentlyRenderingFiber.lanes |= hook;
  workInProgressRootSkippedLanes |= hook;
  return initialValue;
}
function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
  if (objectIs(value, prevValue))
    return value;
  if (currentTreeHiddenStackCursor.current !== null)
    return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = true), hook;
  if ((renderLanes & 42) === 0)
    return didReceiveUpdate = true, hook.memoizedState = value;
  hook = requestDeferredLane();
  currentlyRenderingFiber.lanes |= hook;
  workInProgressRootSkippedLanes |= hook;
  return prevValue;
}
function startTransition(fiber, queue, pendingState, finishedState, callback) {
  var previousPriority = ReactDOMSharedInternals.p;
  ReactDOMSharedInternals.p = previousPriority !== 0 && 8 > previousPriority ? previousPriority : 8;
  var prevTransition = ReactSharedInternals3.T, currentTransition = {};
  ReactSharedInternals3.T = currentTransition;
  dispatchOptimisticSetState(fiber, false, queue, pendingState);
  try {
    var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals3.S;
    onStartTransitionFinish !== null && onStartTransitionFinish(currentTransition, returnValue);
    if (returnValue !== null && typeof returnValue === "object" && typeof returnValue.then === "function") {
      var thenableForFinishedState = chainThenableValue(returnValue, finishedState);
      dispatchSetStateInternal(fiber, queue, thenableForFinishedState, requestUpdateLane(fiber));
    } else
      dispatchSetStateInternal(fiber, queue, finishedState, requestUpdateLane(fiber));
  } catch (error) {
    dispatchSetStateInternal(fiber, queue, { then: function() {
    }, status: "rejected", reason: error }, requestUpdateLane());
  } finally {
    ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals3.T = prevTransition;
  }
}
function noop$2() {
}
function startHostTransition(formFiber, pendingState, action, formData) {
  if (formFiber.tag !== 5)
    throw Error(formatProdErrorMessage2(476));
  var queue = ensureFormComponentIsStateful(formFiber).queue;
  startTransition(formFiber, queue, pendingState, sharedNotPendingObject, action === null ? noop$2 : function() {
    requestFormReset$1(formFiber);
    return action(formData);
  });
}
function ensureFormComponentIsStateful(formFiber) {
  var existingStateHook = formFiber.memoizedState;
  if (existingStateHook !== null)
    return existingStateHook;
  existingStateHook = {
    memoizedState: sharedNotPendingObject,
    baseState: sharedNotPendingObject,
    baseQueue: null,
    queue: {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: sharedNotPendingObject
    },
    next: null
  };
  var initialResetState = {};
  existingStateHook.next = {
    memoizedState: initialResetState,
    baseState: initialResetState,
    baseQueue: null,
    queue: {
      pending: null,
      lanes: 0,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: initialResetState
    },
    next: null
  };
  formFiber.memoizedState = existingStateHook;
  formFiber = formFiber.alternate;
  formFiber !== null && (formFiber.memoizedState = existingStateHook);
  return existingStateHook;
}
function requestFormReset$1(formFiber) {
  var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;
  dispatchSetStateInternal(formFiber, resetStateQueue, {}, requestUpdateLane());
}
function useHostTransitionStatus() {
  return readContext(HostTransitionContext);
}
function updateId() {
  return updateWorkInProgressHook().memoizedState;
}
function updateRefresh() {
  return updateWorkInProgressHook().memoizedState;
}
function refreshCache(fiber) {
  for (var provider = fiber.return;provider !== null; ) {
    switch (provider.tag) {
      case 24:
      case 3:
        var lane = requestUpdateLane();
        fiber = createUpdate(lane);
        var root$41 = enqueueUpdate(provider, fiber, lane);
        root$41 !== null && (scheduleUpdateOnFiber(root$41, provider, lane), entangleTransitions(root$41, provider, lane));
        provider = { cache: createCache() };
        fiber.payload = provider;
        return;
    }
    provider = provider.return;
  }
}
function dispatchReducerAction(fiber, queue, action) {
  var lane = requestUpdateLane();
  action = {
    lane,
    revertLane: 0,
    action,
    hasEagerState: false,
    eagerState: null,
    next: null
  };
  isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, action) : (action = enqueueConcurrentHookUpdate(fiber, queue, action, lane), action !== null && (scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane)));
}
function dispatchSetState(fiber, queue, action) {
  var lane = requestUpdateLane();
  dispatchSetStateInternal(fiber, queue, action, lane);
}
function dispatchSetStateInternal(fiber, queue, action, lane) {
  var update = {
    lane,
    revertLane: 0,
    action,
    hasEagerState: false,
    eagerState: null,
    next: null
  };
  if (isRenderPhaseUpdate(fiber))
    enqueueRenderPhaseUpdate(queue, update);
  else {
    var alternate = fiber.alternate;
    if (fiber.lanes === 0 && (alternate === null || alternate.lanes === 0) && (alternate = queue.lastRenderedReducer, alternate !== null))
      try {
        var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
        update.hasEagerState = true;
        update.eagerState = eagerState;
        if (objectIs(eagerState, currentState))
          return enqueueUpdate$1(fiber, queue, update, 0), workInProgressRoot === null && finishQueueingConcurrentUpdates(), false;
      } catch (error) {
      } finally {
      }
    action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
    if (action !== null)
      return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), true;
  }
  return false;
}
function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
  action = {
    lane: 2,
    revertLane: requestTransitionLane(),
    action,
    hasEagerState: false,
    eagerState: null,
    next: null
  };
  if (isRenderPhaseUpdate(fiber)) {
    if (throwIfDuringRender)
      throw Error(formatProdErrorMessage2(479));
  } else
    throwIfDuringRender = enqueueConcurrentHookUpdate(fiber, queue, action, 2), throwIfDuringRender !== null && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
}
function isRenderPhaseUpdate(fiber) {
  var alternate = fiber.alternate;
  return fiber === currentlyRenderingFiber || alternate !== null && alternate === currentlyRenderingFiber;
}
function enqueueRenderPhaseUpdate(queue, update) {
  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
  var pending = queue.pending;
  pending === null ? update.next = update : (update.next = pending.next, pending.next = update);
  queue.pending = update;
}
function entangleTransitionUpdate(root2, queue, lane) {
  if ((lane & 4194048) !== 0) {
    var queueLanes = queue.lanes;
    queueLanes &= root2.pendingLanes;
    lane |= queueLanes;
    queue.lanes = lane;
    markRootEntangled(root2, lane);
  }
}
function unwrapThenable(thenable) {
  var index2 = thenableIndexCounter;
  thenableIndexCounter += 1;
  thenableState === null && (thenableState = []);
  return trackUsedThenable(thenableState, thenable, index2);
}
function coerceRef(workInProgress, element) {
  element = element.props.ref;
  workInProgress.ref = element !== undefined ? element : null;
}
function throwOnInvalidObjectType(returnFiber, newChild) {
  if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
    throw Error(formatProdErrorMessage2(525));
  returnFiber = Object.prototype.toString.call(newChild);
  throw Error(formatProdErrorMessage2(31, returnFiber === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber));
}
function resolveLazy(lazyType) {
  var init = lazyType._init;
  return init(lazyType._payload);
}
function createChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (shouldTrackSideEffects) {
      var deletions = returnFiber.deletions;
      deletions === null ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
    }
  }
  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects)
      return null;
    for (;currentFirstChild !== null; )
      deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
    return null;
  }
  function mapRemainingChildren(currentFirstChild) {
    for (var existingChildren = new Map;currentFirstChild !== null; )
      currentFirstChild.key !== null ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
    return existingChildren;
  }
  function useFiber(fiber, pendingProps) {
    fiber = createWorkInProgress(fiber, pendingProps);
    fiber.index = 0;
    fiber.sibling = null;
    return fiber;
  }
  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;
    if (!shouldTrackSideEffects)
      return newFiber.flags |= 1048576, lastPlacedIndex;
    newIndex = newFiber.alternate;
    if (newIndex !== null)
      return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 67108866, lastPlacedIndex) : newIndex;
    newFiber.flags |= 67108866;
    return lastPlacedIndex;
  }
  function placeSingleChild(newFiber) {
    shouldTrackSideEffects && newFiber.alternate === null && (newFiber.flags |= 67108866);
    return newFiber;
  }
  function updateTextNode(returnFiber, current, textContent, lanes) {
    if (current === null || current.tag !== 6)
      return current = createFiberFromText(textContent, returnFiber.mode, lanes), current.return = returnFiber, current;
    current = useFiber(current, textContent);
    current.return = returnFiber;
    return current;
  }
  function updateElement(returnFiber, current, element, lanes) {
    var elementType = element.type;
    if (elementType === REACT_FRAGMENT_TYPE2)
      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
    if (current !== null && (current.elementType === elementType || typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE2 && resolveLazy(elementType) === current.type))
      return current = useFiber(current, element.props), coerceRef(current, element), current.return = returnFiber, current;
    current = createFiberFromTypeAndProps(element.type, element.key, element.props, null, returnFiber.mode, lanes);
    coerceRef(current, element);
    current.return = returnFiber;
    return current;
  }
  function updatePortal(returnFiber, current, portal, lanes) {
    if (current === null || current.tag !== 4 || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation)
      return current = createFiberFromPortal(portal, returnFiber.mode, lanes), current.return = returnFiber, current;
    current = useFiber(current, portal.children || []);
    current.return = returnFiber;
    return current;
  }
  function updateFragment(returnFiber, current, fragment, lanes, key) {
    if (current === null || current.tag !== 7)
      return current = createFiberFromFragment(fragment, returnFiber.mode, lanes, key), current.return = returnFiber, current;
    current = useFiber(current, fragment);
    current.return = returnFiber;
    return current;
  }
  function createChild(returnFiber, newChild, lanes) {
    if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number" || typeof newChild === "bigint")
      return newChild = createFiberFromText("" + newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
    if (typeof newChild === "object" && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE2:
          return lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes;
        case REACT_PORTAL_TYPE3:
          return newChild = createFiberFromPortal(newChild, returnFiber.mode, lanes), newChild.return = returnFiber, newChild;
        case REACT_LAZY_TYPE2:
          var init = newChild._init;
          newChild = init(newChild._payload);
          return createChild(returnFiber, newChild, lanes);
      }
      if (isArrayImpl2(newChild) || getIteratorFn2(newChild))
        return newChild = createFiberFromFragment(newChild, returnFiber.mode, lanes, null), newChild.return = returnFiber, newChild;
      if (typeof newChild.then === "function")
        return createChild(returnFiber, unwrapThenable(newChild), lanes);
      if (newChild.$$typeof === REACT_CONTEXT_TYPE2)
        return createChild(returnFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
      throwOnInvalidObjectType(returnFiber, newChild);
    }
    return null;
  }
  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
    var key = oldFiber !== null ? oldFiber.key : null;
    if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number" || typeof newChild === "bigint")
      return key !== null ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
    if (typeof newChild === "object" && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE2:
          return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
        case REACT_PORTAL_TYPE3:
          return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
        case REACT_LAZY_TYPE2:
          return key = newChild._init, newChild = key(newChild._payload), updateSlot(returnFiber, oldFiber, newChild, lanes);
      }
      if (isArrayImpl2(newChild) || getIteratorFn2(newChild))
        return key !== null ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
      if (typeof newChild.then === "function")
        return updateSlot(returnFiber, oldFiber, unwrapThenable(newChild), lanes);
      if (newChild.$$typeof === REACT_CONTEXT_TYPE2)
        return updateSlot(returnFiber, oldFiber, readContextDuringReconciliation(returnFiber, newChild), lanes);
      throwOnInvalidObjectType(returnFiber, newChild);
    }
    return null;
  }
  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
    if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number" || typeof newChild === "bigint")
      return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
    if (typeof newChild === "object" && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE2:
          return existingChildren = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
        case REACT_PORTAL_TYPE3:
          return existingChildren = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
        case REACT_LAZY_TYPE2:
          var init = newChild._init;
          newChild = init(newChild._payload);
          return updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes);
      }
      if (isArrayImpl2(newChild) || getIteratorFn2(newChild))
        return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
      if (typeof newChild.then === "function")
        return updateFromMap(existingChildren, returnFiber, newIdx, unwrapThenable(newChild), lanes);
      if (newChild.$$typeof === REACT_CONTEXT_TYPE2)
        return updateFromMap(existingChildren, returnFiber, newIdx, readContextDuringReconciliation(returnFiber, newChild), lanes);
      throwOnInvalidObjectType(returnFiber, newChild);
    }
    return null;
  }
  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
    for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null;oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
      if (newFiber === null) {
        oldFiber === null && (oldFiber = nextOldFiber);
        break;
      }
      shouldTrackSideEffects && oldFiber && newFiber.alternate === null && deleteChild(returnFiber, oldFiber);
      currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
      previousNewFiber === null ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }
    if (newIdx === newChildren.length)
      return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
    if (oldFiber === null) {
      for (;newIdx < newChildren.length; newIdx++)
        oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), oldFiber !== null && (currentFirstChild = placeChild(oldFiber, currentFirstChild, newIdx), previousNewFiber === null ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
      isHydrating && pushTreeFork(returnFiber, newIdx);
      return resultingFirstChild;
    }
    for (oldFiber = mapRemainingChildren(oldFiber);newIdx < newChildren.length; newIdx++)
      nextOldFiber = updateFromMap(oldFiber, returnFiber, newIdx, newChildren[newIdx], lanes), nextOldFiber !== null && (shouldTrackSideEffects && nextOldFiber.alternate !== null && oldFiber.delete(nextOldFiber.key === null ? newIdx : nextOldFiber.key), currentFirstChild = placeChild(nextOldFiber, currentFirstChild, newIdx), previousNewFiber === null ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
    shouldTrackSideEffects && oldFiber.forEach(function(child) {
      return deleteChild(returnFiber, child);
    });
    isHydrating && pushTreeFork(returnFiber, newIdx);
    return resultingFirstChild;
  }
  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
    if (newChildren == null)
      throw Error(formatProdErrorMessage2(151));
    for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildren.next();oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
      if (newFiber === null) {
        oldFiber === null && (oldFiber = nextOldFiber);
        break;
      }
      shouldTrackSideEffects && oldFiber && newFiber.alternate === null && deleteChild(returnFiber, oldFiber);
      currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
      previousNewFiber === null ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }
    if (step.done)
      return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
    if (oldFiber === null) {
      for (;!step.done; newIdx++, step = newChildren.next())
        step = createChild(returnFiber, step.value, lanes), step !== null && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), previousNewFiber === null ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
      isHydrating && pushTreeFork(returnFiber, newIdx);
      return resultingFirstChild;
    }
    for (oldFiber = mapRemainingChildren(oldFiber);!step.done; newIdx++, step = newChildren.next())
      step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), step !== null && (shouldTrackSideEffects && step.alternate !== null && oldFiber.delete(step.key === null ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), previousNewFiber === null ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
    shouldTrackSideEffects && oldFiber.forEach(function(child) {
      return deleteChild(returnFiber, child);
    });
    isHydrating && pushTreeFork(returnFiber, newIdx);
    return resultingFirstChild;
  }
  function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
    typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE2 && newChild.key === null && (newChild = newChild.props.children);
    if (typeof newChild === "object" && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE2:
          a: {
            for (var key = newChild.key;currentFirstChild !== null; ) {
              if (currentFirstChild.key === key) {
                key = newChild.type;
                if (key === REACT_FRAGMENT_TYPE2) {
                  if (currentFirstChild.tag === 7) {
                    deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                    lanes = useFiber(currentFirstChild, newChild.props.children);
                    lanes.return = returnFiber;
                    returnFiber = lanes;
                    break a;
                  }
                } else if (currentFirstChild.elementType === key || typeof key === "object" && key !== null && key.$$typeof === REACT_LAZY_TYPE2 && resolveLazy(key) === currentFirstChild.type) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  lanes = useFiber(currentFirstChild, newChild.props);
                  coerceRef(lanes, newChild);
                  lanes.return = returnFiber;
                  returnFiber = lanes;
                  break a;
                }
                deleteRemainingChildren(returnFiber, currentFirstChild);
                break;
              } else
                deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }
            newChild.type === REACT_FRAGMENT_TYPE2 ? (lanes = createFiberFromFragment(newChild.props.children, returnFiber.mode, lanes, newChild.key), lanes.return = returnFiber, returnFiber = lanes) : (lanes = createFiberFromTypeAndProps(newChild.type, newChild.key, newChild.props, null, returnFiber.mode, lanes), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = lanes);
          }
          return placeSingleChild(returnFiber);
        case REACT_PORTAL_TYPE3:
          a: {
            for (key = newChild.key;currentFirstChild !== null; ) {
              if (currentFirstChild.key === key)
                if (currentFirstChild.tag === 4 && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                  deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                  lanes = useFiber(currentFirstChild, newChild.children || []);
                  lanes.return = returnFiber;
                  returnFiber = lanes;
                  break a;
                } else {
                  deleteRemainingChildren(returnFiber, currentFirstChild);
                  break;
                }
              else
                deleteChild(returnFiber, currentFirstChild);
              currentFirstChild = currentFirstChild.sibling;
            }
            lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);
            lanes.return = returnFiber;
            returnFiber = lanes;
          }
          return placeSingleChild(returnFiber);
        case REACT_LAZY_TYPE2:
          return key = newChild._init, newChild = key(newChild._payload), reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
      }
      if (isArrayImpl2(newChild))
        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
      if (getIteratorFn2(newChild)) {
        key = getIteratorFn2(newChild);
        if (typeof key !== "function")
          throw Error(formatProdErrorMessage2(150));
        newChild = key.call(newChild);
        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
      }
      if (typeof newChild.then === "function")
        return reconcileChildFibersImpl(returnFiber, currentFirstChild, unwrapThenable(newChild), lanes);
      if (newChild.$$typeof === REACT_CONTEXT_TYPE2)
        return reconcileChildFibersImpl(returnFiber, currentFirstChild, readContextDuringReconciliation(returnFiber, newChild), lanes);
      throwOnInvalidObjectType(returnFiber, newChild);
    }
    return typeof newChild === "string" && newChild !== "" || typeof newChild === "number" || typeof newChild === "bigint" ? (newChild = "" + newChild, currentFirstChild !== null && currentFirstChild.tag === 6 ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), lanes = useFiber(currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(newChild, returnFiber.mode, lanes), lanes.return = returnFiber, returnFiber = lanes), placeSingleChild(returnFiber)) : deleteRemainingChildren(returnFiber, currentFirstChild);
  }
  return function(returnFiber, currentFirstChild, newChild, lanes) {
    try {
      thenableIndexCounter = 0;
      var firstChildFiber = reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes);
      thenableState = null;
      return firstChildFiber;
    } catch (x) {
      if (x === SuspenseException || x === SuspenseActionException)
        throw x;
      var fiber = createFiberImplClass(29, x, null, returnFiber.mode);
      fiber.lanes = lanes;
      fiber.return = returnFiber;
      return fiber;
    } finally {
    }
  };
}
function pushPrimaryTreeSuspenseHandler(handler) {
  var current = handler.alternate;
  push2(suspenseStackCursor, suspenseStackCursor.current & 1);
  push2(suspenseHandlerStackCursor, handler);
  shellBoundary === null && (current === null || currentTreeHiddenStackCursor.current !== null ? shellBoundary = handler : current.memoizedState !== null && (shellBoundary = handler));
}
function pushOffscreenSuspenseHandler(fiber) {
  if (fiber.tag === 22) {
    if (push2(suspenseStackCursor, suspenseStackCursor.current), push2(suspenseHandlerStackCursor, fiber), shellBoundary === null) {
      var current = fiber.alternate;
      current !== null && current.memoizedState !== null && (shellBoundary = fiber);
    }
  } else
    reuseSuspenseHandlerOnStack(fiber);
}
function reuseSuspenseHandlerOnStack() {
  push2(suspenseStackCursor, suspenseStackCursor.current);
  push2(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);
}
function popSuspenseHandler(fiber) {
  pop2(suspenseHandlerStackCursor);
  shellBoundary === fiber && (shellBoundary = null);
  pop2(suspenseStackCursor);
}
function findFirstSuspended(row) {
  for (var node = row;node !== null; ) {
    if (node.tag === 13) {
      var state = node.memoizedState;
      if (state !== null && (state = state.dehydrated, state === null || state.data === "$?" || isSuspenseInstanceFallback(state)))
        return node;
    } else if (node.tag === 19 && node.memoizedProps.revealOrder !== undefined) {
      if ((node.flags & 128) !== 0)
        return node;
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }
    if (node === row)
      break;
    for (;node.sibling === null; ) {
      if (node.return === null || node.return === row)
        return null;
      node = node.return;
    }
    node.sibling.return = node.return;
    node = node.sibling;
  }
  return null;
}
function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  ctor = workInProgress.memoizedState;
  getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
  getDerivedStateFromProps = getDerivedStateFromProps === null || getDerivedStateFromProps === undefined ? ctor : assign2({}, ctor, getDerivedStateFromProps);
  workInProgress.memoizedState = getDerivedStateFromProps;
  workInProgress.lanes === 0 && (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
}
function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
  workInProgress = workInProgress.stateNode;
  return typeof workInProgress.shouldComponentUpdate === "function" ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) : true;
}
function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
  workInProgress = instance.state;
  typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps(newProps, nextContext);
  typeof instance.UNSAFE_componentWillReceiveProps === "function" && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  instance.state !== workInProgress && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
}
function resolveClassComponentProps(Component2, baseProps) {
  var newProps = baseProps;
  if ("ref" in baseProps) {
    newProps = {};
    for (var propName in baseProps)
      propName !== "ref" && (newProps[propName] = baseProps[propName]);
  }
  if (Component2 = Component2.defaultProps) {
    newProps === baseProps && (newProps = assign2({}, newProps));
    for (var propName$73 in Component2)
      newProps[propName$73] === undefined && (newProps[propName$73] = Component2[propName$73]);
  }
  return newProps;
}
function defaultOnUncaughtError(error) {
  reportGlobalError2(error);
}
function defaultOnCaughtError(error) {
  console.error(error);
}
function defaultOnRecoverableError(error) {
  reportGlobalError2(error);
}
function logUncaughtError(root2, errorInfo) {
  try {
    var onUncaughtError = root2.onUncaughtError;
    onUncaughtError(errorInfo.value, { componentStack: errorInfo.stack });
  } catch (e$74) {
    setTimeout(function() {
      throw e$74;
    });
  }
}
function logCaughtError(root2, boundary, errorInfo) {
  try {
    var onCaughtError = root2.onCaughtError;
    onCaughtError(errorInfo.value, {
      componentStack: errorInfo.stack,
      errorBoundary: boundary.tag === 1 ? boundary.stateNode : null
    });
  } catch (e$75) {
    setTimeout(function() {
      throw e$75;
    });
  }
}
function createRootErrorUpdate(root2, errorInfo, lane) {
  lane = createUpdate(lane);
  lane.tag = 3;
  lane.payload = { element: null };
  lane.callback = function() {
    logUncaughtError(root2, errorInfo);
  };
  return lane;
}
function createClassErrorUpdate(lane) {
  lane = createUpdate(lane);
  lane.tag = 3;
  return lane;
}
function initializeClassErrorUpdate(update, root2, fiber, errorInfo) {
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
  if (typeof getDerivedStateFromError === "function") {
    var error = errorInfo.value;
    update.payload = function() {
      return getDerivedStateFromError(error);
    };
    update.callback = function() {
      logCaughtError(root2, fiber, errorInfo);
    };
  }
  var inst = fiber.stateNode;
  inst !== null && typeof inst.componentDidCatch === "function" && (update.callback = function() {
    logCaughtError(root2, fiber, errorInfo);
    typeof getDerivedStateFromError !== "function" && (legacyErrorBoundariesThatAlreadyFailed === null ? legacyErrorBoundariesThatAlreadyFailed = new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
    var stack = errorInfo.stack;
    this.componentDidCatch(errorInfo.value, {
      componentStack: stack !== null ? stack : ""
    });
  });
}
function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
  sourceFiber.flags |= 32768;
  if (value !== null && typeof value === "object" && typeof value.then === "function") {
    returnFiber = sourceFiber.alternate;
    returnFiber !== null && propagateParentContextChanges(returnFiber, sourceFiber, rootRenderLanes, true);
    sourceFiber = suspenseHandlerStackCursor.current;
    if (sourceFiber !== null) {
      switch (sourceFiber.tag) {
        case 13:
          return shellBoundary === null ? renderDidSuspendDelayIfPossible() : sourceFiber.alternate === null && workInProgressRootExitStatus === 0 && (workInProgressRootExitStatus = 3), sourceFiber.flags &= -257, sourceFiber.flags |= 65536, sourceFiber.lanes = rootRenderLanes, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, returnFiber === null ? sourceFiber.updateQueue = new Set([value]) : returnFiber.add(value), attachPingListener(root2, value, rootRenderLanes)), false;
        case 22:
          return sourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, returnFiber === null ? (returnFiber = {
            transitions: null,
            markerInstances: null,
            retryQueue: new Set([value])
          }, sourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, sourceFiber === null ? returnFiber.retryQueue = new Set([value]) : sourceFiber.add(value)), attachPingListener(root2, value, rootRenderLanes)), false;
      }
      throw Error(formatProdErrorMessage2(435, sourceFiber.tag));
    }
    attachPingListener(root2, value, rootRenderLanes);
    renderDidSuspendDelayIfPossible();
    return false;
  }
  if (isHydrating)
    return returnFiber = suspenseHandlerStackCursor.current, returnFiber !== null ? ((returnFiber.flags & 65536) === 0 && (returnFiber.flags |= 256), returnFiber.flags |= 65536, returnFiber.lanes = rootRenderLanes, value !== HydrationMismatchException && (root2 = Error(formatProdErrorMessage2(422), { cause: value }), queueHydrationError(createCapturedValueAtFiber(root2, sourceFiber)))) : (value !== HydrationMismatchException && (returnFiber = Error(formatProdErrorMessage2(423), {
      cause: value
    }), queueHydrationError(createCapturedValueAtFiber(returnFiber, sourceFiber))), root2 = root2.current.alternate, root2.flags |= 65536, rootRenderLanes &= -rootRenderLanes, root2.lanes |= rootRenderLanes, value = createCapturedValueAtFiber(value, sourceFiber), rootRenderLanes = createRootErrorUpdate(root2.stateNode, value, rootRenderLanes), enqueueCapturedUpdate(root2, rootRenderLanes), workInProgressRootExitStatus !== 4 && (workInProgressRootExitStatus = 2)), false;
  var wrapperError = Error(formatProdErrorMessage2(520), { cause: value });
  wrapperError = createCapturedValueAtFiber(wrapperError, sourceFiber);
  workInProgressRootConcurrentErrors === null ? workInProgressRootConcurrentErrors = [wrapperError] : workInProgressRootConcurrentErrors.push(wrapperError);
  workInProgressRootExitStatus !== 4 && (workInProgressRootExitStatus = 2);
  if (returnFiber === null)
    return true;
  value = createCapturedValueAtFiber(value, sourceFiber);
  sourceFiber = returnFiber;
  do {
    switch (sourceFiber.tag) {
      case 3:
        return sourceFiber.flags |= 65536, root2 = rootRenderLanes & -rootRenderLanes, sourceFiber.lanes |= root2, root2 = createRootErrorUpdate(sourceFiber.stateNode, value, root2), enqueueCapturedUpdate(sourceFiber, root2), false;
      case 1:
        if (returnFiber = sourceFiber.type, wrapperError = sourceFiber.stateNode, (sourceFiber.flags & 128) === 0 && (typeof returnFiber.getDerivedStateFromError === "function" || wrapperError !== null && typeof wrapperError.componentDidCatch === "function" && (legacyErrorBoundariesThatAlreadyFailed === null || !legacyErrorBoundariesThatAlreadyFailed.has(wrapperError))))
          return sourceFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, sourceFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(rootRenderLanes, root2, sourceFiber, value), enqueueCapturedUpdate(sourceFiber, rootRenderLanes), false;
    }
    sourceFiber = sourceFiber.return;
  } while (sourceFiber !== null);
  return false;
}
function reconcileChildren(current, workInProgress, nextChildren, renderLanes2) {
  workInProgress.child = current === null ? mountChildFibers(workInProgress, null, nextChildren, renderLanes2) : reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes2);
}
function updateForwardRef(current, workInProgress, Component2, nextProps, renderLanes2) {
  Component2 = Component2.render;
  var ref = workInProgress.ref;
  if ("ref" in nextProps) {
    var propsWithoutRef = {};
    for (var key in nextProps)
      key !== "ref" && (propsWithoutRef[key] = nextProps[key]);
  } else
    propsWithoutRef = nextProps;
  prepareToReadContext(workInProgress);
  nextProps = renderWithHooks(current, workInProgress, Component2, propsWithoutRef, ref, renderLanes2);
  key = checkDidRenderIdHook();
  if (current !== null && !didReceiveUpdate)
    return bailoutHooks(current, workInProgress, renderLanes2), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes2);
  isHydrating && key && pushMaterializedTreeId(workInProgress);
  workInProgress.flags |= 1;
  reconcileChildren(current, workInProgress, nextProps, renderLanes2);
  return workInProgress.child;
}
function updateMemoComponent(current, workInProgress, Component2, nextProps, renderLanes2) {
  if (current === null) {
    var type = Component2.type;
    if (typeof type === "function" && !shouldConstruct(type) && type.defaultProps === undefined && Component2.compare === null)
      return workInProgress.tag = 15, workInProgress.type = type, updateSimpleMemoComponent(current, workInProgress, type, nextProps, renderLanes2);
    current = createFiberFromTypeAndProps(Component2.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes2);
    current.ref = workInProgress.ref;
    current.return = workInProgress;
    return workInProgress.child = current;
  }
  type = current.child;
  if (!checkScheduledUpdateOrContext(current, renderLanes2)) {
    var prevProps = type.memoizedProps;
    Component2 = Component2.compare;
    Component2 = Component2 !== null ? Component2 : shallowEqual;
    if (Component2(prevProps, nextProps) && current.ref === workInProgress.ref)
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes2);
  }
  workInProgress.flags |= 1;
  current = createWorkInProgress(type, nextProps);
  current.ref = workInProgress.ref;
  current.return = workInProgress;
  return workInProgress.child = current;
}
function updateSimpleMemoComponent(current, workInProgress, Component2, nextProps, renderLanes2) {
  if (current !== null) {
    var prevProps = current.memoizedProps;
    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref)
      if (didReceiveUpdate = false, workInProgress.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current, renderLanes2))
        (current.flags & 131072) !== 0 && (didReceiveUpdate = true);
      else
        return workInProgress.lanes = current.lanes, bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes2);
  }
  return updateFunctionComponent(current, workInProgress, Component2, nextProps, renderLanes2);
}
function updateOffscreenComponent(current, workInProgress, renderLanes2) {
  var nextProps = workInProgress.pendingProps, nextChildren = nextProps.children, prevState = current !== null ? current.memoizedState : null;
  if (nextProps.mode === "hidden") {
    if ((workInProgress.flags & 128) !== 0) {
      nextProps = prevState !== null ? prevState.baseLanes | renderLanes2 : renderLanes2;
      if (current !== null) {
        nextChildren = workInProgress.child = current.child;
        for (prevState = 0;nextChildren !== null; )
          prevState = prevState | nextChildren.lanes | nextChildren.childLanes, nextChildren = nextChildren.sibling;
        workInProgress.childLanes = prevState & ~nextProps;
      } else
        workInProgress.childLanes = 0, workInProgress.child = null;
      return deferHiddenOffscreenComponent(current, workInProgress, nextProps, renderLanes2);
    }
    if ((renderLanes2 & 536870912) !== 0)
      workInProgress.memoizedState = { baseLanes: 0, cachePool: null }, current !== null && pushTransition(workInProgress, prevState !== null ? prevState.cachePool : null), prevState !== null ? pushHiddenContext(workInProgress, prevState) : reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress);
    else
      return workInProgress.lanes = workInProgress.childLanes = 536870912, deferHiddenOffscreenComponent(current, workInProgress, prevState !== null ? prevState.baseLanes | renderLanes2 : renderLanes2, renderLanes2);
  } else
    prevState !== null ? (pushTransition(workInProgress, prevState.cachePool), pushHiddenContext(workInProgress, prevState), reuseSuspenseHandlerOnStack(workInProgress), workInProgress.memoizedState = null) : (current !== null && pushTransition(workInProgress, null), reuseHiddenContextOnStack(), reuseSuspenseHandlerOnStack(workInProgress));
  reconcileChildren(current, workInProgress, nextChildren, renderLanes2);
  return workInProgress.child;
}
function deferHiddenOffscreenComponent(current, workInProgress, nextBaseLanes, renderLanes2) {
  var JSCompiler_inline_result = peekCacheFromPool();
  JSCompiler_inline_result = JSCompiler_inline_result === null ? null : { parent: CacheContext._currentValue, pool: JSCompiler_inline_result };
  workInProgress.memoizedState = {
    baseLanes: nextBaseLanes,
    cachePool: JSCompiler_inline_result
  };
  current !== null && pushTransition(workInProgress, null);
  reuseHiddenContextOnStack();
  pushOffscreenSuspenseHandler(workInProgress);
  current !== null && propagateParentContextChanges(current, workInProgress, renderLanes2, true);
  return null;
}
function markRef(current, workInProgress) {
  var ref = workInProgress.ref;
  if (ref === null)
    current !== null && current.ref !== null && (workInProgress.flags |= 4194816);
  else {
    if (typeof ref !== "function" && typeof ref !== "object")
      throw Error(formatProdErrorMessage2(284));
    if (current === null || current.ref !== ref)
      workInProgress.flags |= 4194816;
  }
}
function updateFunctionComponent(current, workInProgress, Component2, nextProps, renderLanes2) {
  prepareToReadContext(workInProgress);
  Component2 = renderWithHooks(current, workInProgress, Component2, nextProps, undefined, renderLanes2);
  nextProps = checkDidRenderIdHook();
  if (current !== null && !didReceiveUpdate)
    return bailoutHooks(current, workInProgress, renderLanes2), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes2);
  isHydrating && nextProps && pushMaterializedTreeId(workInProgress);
  workInProgress.flags |= 1;
  reconcileChildren(current, workInProgress, Component2, renderLanes2);
  return workInProgress.child;
}
function replayFunctionComponent(current, workInProgress, nextProps, Component2, secondArg, renderLanes2) {
  prepareToReadContext(workInProgress);
  workInProgress.updateQueue = null;
  nextProps = renderWithHooksAgain(workInProgress, Component2, nextProps, secondArg);
  finishRenderingHooks(current);
  Component2 = checkDidRenderIdHook();
  if (current !== null && !didReceiveUpdate)
    return bailoutHooks(current, workInProgress, renderLanes2), bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes2);
  isHydrating && Component2 && pushMaterializedTreeId(workInProgress);
  workInProgress.flags |= 1;
  reconcileChildren(current, workInProgress, nextProps, renderLanes2);
  return workInProgress.child;
}
function updateClassComponent(current, workInProgress, Component2, nextProps, renderLanes2) {
  prepareToReadContext(workInProgress);
  if (workInProgress.stateNode === null) {
    var context = emptyContextObject, contextType = Component2.contextType;
    typeof contextType === "object" && contextType !== null && (context = readContext(contextType));
    context = new Component2(nextProps, context);
    workInProgress.memoizedState = context.state !== null && context.state !== undefined ? context.state : null;
    context.updater = classComponentUpdater;
    workInProgress.stateNode = context;
    context._reactInternals = workInProgress;
    context = workInProgress.stateNode;
    context.props = nextProps;
    context.state = workInProgress.memoizedState;
    context.refs = {};
    initializeUpdateQueue(workInProgress);
    contextType = Component2.contextType;
    context.context = typeof contextType === "object" && contextType !== null ? readContext(contextType) : emptyContextObject;
    context.state = workInProgress.memoizedState;
    contextType = Component2.getDerivedStateFromProps;
    typeof contextType === "function" && (applyDerivedStateFromProps(workInProgress, Component2, contextType, nextProps), context.state = workInProgress.memoizedState);
    typeof Component2.getDerivedStateFromProps === "function" || typeof context.getSnapshotBeforeUpdate === "function" || typeof context.UNSAFE_componentWillMount !== "function" && typeof context.componentWillMount !== "function" || (contextType = context.state, typeof context.componentWillMount === "function" && context.componentWillMount(), typeof context.UNSAFE_componentWillMount === "function" && context.UNSAFE_componentWillMount(), contextType !== context.state && classComponentUpdater.enqueueReplaceState(context, context.state, null), processUpdateQueue(workInProgress, nextProps, context, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction(), context.state = workInProgress.memoizedState);
    typeof context.componentDidMount === "function" && (workInProgress.flags |= 4194308);
    nextProps = true;
  } else if (current === null) {
    context = workInProgress.stateNode;
    var unresolvedOldProps = workInProgress.memoizedProps, oldProps = resolveClassComponentProps(Component2, unresolvedOldProps);
    context.props = oldProps;
    var oldContext = context.context, contextType$jscomp$0 = Component2.contextType;
    contextType = emptyContextObject;
    typeof contextType$jscomp$0 === "object" && contextType$jscomp$0 !== null && (contextType = readContext(contextType$jscomp$0));
    var getDerivedStateFromProps = Component2.getDerivedStateFromProps;
    contextType$jscomp$0 = typeof getDerivedStateFromProps === "function" || typeof context.getSnapshotBeforeUpdate === "function";
    unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
    contextType$jscomp$0 || typeof context.UNSAFE_componentWillReceiveProps !== "function" && typeof context.componentWillReceiveProps !== "function" || (unresolvedOldProps || oldContext !== contextType) && callComponentWillReceiveProps(workInProgress, context, nextProps, contextType);
    hasForceUpdate = false;
    var oldState = workInProgress.memoizedState;
    context.state = oldState;
    processUpdateQueue(workInProgress, nextProps, context, renderLanes2);
    suspendIfUpdateReadFromEntangledAsyncAction();
    oldContext = workInProgress.memoizedState;
    unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? (typeof getDerivedStateFromProps === "function" && (applyDerivedStateFromProps(workInProgress, Component2, getDerivedStateFromProps, nextProps), oldContext = workInProgress.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component2, oldProps, nextProps, oldState, oldContext, contextType)) ? (contextType$jscomp$0 || typeof context.UNSAFE_componentWillMount !== "function" && typeof context.componentWillMount !== "function" || (typeof context.componentWillMount === "function" && context.componentWillMount(), typeof context.UNSAFE_componentWillMount === "function" && context.UNSAFE_componentWillMount()), typeof context.componentDidMount === "function" && (workInProgress.flags |= 4194308)) : (typeof context.componentDidMount === "function" && (workInProgress.flags |= 4194308), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = oldContext), context.props = nextProps, context.state = oldContext, context.context = contextType, nextProps = oldProps) : (typeof context.componentDidMount === "function" && (workInProgress.flags |= 4194308), nextProps = false);
  } else {
    context = workInProgress.stateNode;
    cloneUpdateQueue(current, workInProgress);
    contextType = workInProgress.memoizedProps;
    contextType$jscomp$0 = resolveClassComponentProps(Component2, contextType);
    context.props = contextType$jscomp$0;
    getDerivedStateFromProps = workInProgress.pendingProps;
    oldState = context.context;
    oldContext = Component2.contextType;
    oldProps = emptyContextObject;
    typeof oldContext === "object" && oldContext !== null && (oldProps = readContext(oldContext));
    unresolvedOldProps = Component2.getDerivedStateFromProps;
    (oldContext = typeof unresolvedOldProps === "function" || typeof context.getSnapshotBeforeUpdate === "function") || typeof context.UNSAFE_componentWillReceiveProps !== "function" && typeof context.componentWillReceiveProps !== "function" || (contextType !== getDerivedStateFromProps || oldState !== oldProps) && callComponentWillReceiveProps(workInProgress, context, nextProps, oldProps);
    hasForceUpdate = false;
    oldState = workInProgress.memoizedState;
    context.state = oldState;
    processUpdateQueue(workInProgress, nextProps, context, renderLanes2);
    suspendIfUpdateReadFromEntangledAsyncAction();
    var newState = workInProgress.memoizedState;
    contextType !== getDerivedStateFromProps || oldState !== newState || hasForceUpdate || current !== null && current.dependencies !== null && checkIfContextChanged(current.dependencies) ? (typeof unresolvedOldProps === "function" && (applyDerivedStateFromProps(workInProgress, Component2, unresolvedOldProps, nextProps), newState = workInProgress.memoizedState), (contextType$jscomp$0 = hasForceUpdate || checkShouldComponentUpdate(workInProgress, Component2, contextType$jscomp$0, nextProps, oldState, newState, oldProps) || current !== null && current.dependencies !== null && checkIfContextChanged(current.dependencies)) ? (oldContext || typeof context.UNSAFE_componentWillUpdate !== "function" && typeof context.componentWillUpdate !== "function" || (typeof context.componentWillUpdate === "function" && context.componentWillUpdate(nextProps, newState, oldProps), typeof context.UNSAFE_componentWillUpdate === "function" && context.UNSAFE_componentWillUpdate(nextProps, newState, oldProps)), typeof context.componentDidUpdate === "function" && (workInProgress.flags |= 4), typeof context.getSnapshotBeforeUpdate === "function" && (workInProgress.flags |= 1024)) : (typeof context.componentDidUpdate !== "function" || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), typeof context.getSnapshotBeforeUpdate !== "function" || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), workInProgress.memoizedProps = nextProps, workInProgress.memoizedState = newState), context.props = nextProps, context.state = newState, context.context = oldProps, nextProps = contextType$jscomp$0) : (typeof context.componentDidUpdate !== "function" || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 4), typeof context.getSnapshotBeforeUpdate !== "function" || contextType === current.memoizedProps && oldState === current.memoizedState || (workInProgress.flags |= 1024), nextProps = false);
  }
  context = nextProps;
  markRef(current, workInProgress);
  nextProps = (workInProgress.flags & 128) !== 0;
  context || nextProps ? (context = workInProgress.stateNode, Component2 = nextProps && typeof Component2.getDerivedStateFromError !== "function" ? null : context.render(), workInProgress.flags |= 1, current !== null && nextProps ? (workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes2), workInProgress.child = reconcileChildFibers(workInProgress, null, Component2, renderLanes2)) : reconcileChildren(current, workInProgress, Component2, renderLanes2), workInProgress.memoizedState = context.state, current = workInProgress.child) : current = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes2);
  return current;
}
function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes2) {
  resetHydrationState();
  workInProgress.flags |= 256;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes2);
  return workInProgress.child;
}
function mountSuspenseOffscreenState(renderLanes2) {
  return { baseLanes: renderLanes2, cachePool: getSuspendedCache() };
}
function getRemainingWorkInPrimaryTree(current, primaryTreeDidDefer, renderLanes2) {
  current = current !== null ? current.childLanes & ~renderLanes2 : 0;
  primaryTreeDidDefer && (current |= workInProgressDeferredLane);
  return current;
}
function updateSuspenseComponent(current, workInProgress, renderLanes2) {
  var nextProps = workInProgress.pendingProps, showFallback = false, didSuspend = (workInProgress.flags & 128) !== 0, JSCompiler_temp;
  (JSCompiler_temp = didSuspend) || (JSCompiler_temp = current !== null && current.memoizedState === null ? false : (suspenseStackCursor.current & 2) !== 0);
  JSCompiler_temp && (showFallback = true, workInProgress.flags &= -129);
  JSCompiler_temp = (workInProgress.flags & 32) !== 0;
  workInProgress.flags &= -33;
  if (current === null) {
    if (isHydrating) {
      showFallback ? pushPrimaryTreeSuspenseHandler(workInProgress) : reuseSuspenseHandlerOnStack(workInProgress);
      if (isHydrating) {
        var nextInstance = nextHydratableInstance, JSCompiler_temp$jscomp$0;
        if (JSCompiler_temp$jscomp$0 = nextInstance) {
          c: {
            JSCompiler_temp$jscomp$0 = nextInstance;
            for (nextInstance = rootOrSingletonContext;JSCompiler_temp$jscomp$0.nodeType !== 8; ) {
              if (!nextInstance) {
                nextInstance = null;
                break c;
              }
              JSCompiler_temp$jscomp$0 = getNextHydratable(JSCompiler_temp$jscomp$0.nextSibling);
              if (JSCompiler_temp$jscomp$0 === null) {
                nextInstance = null;
                break c;
              }
            }
            nextInstance = JSCompiler_temp$jscomp$0;
          }
          nextInstance !== null ? (workInProgress.memoizedState = {
            dehydrated: nextInstance,
            treeContext: treeContextProvider !== null ? { id: treeContextId, overflow: treeContextOverflow } : null,
            retryLane: 536870912,
            hydrationErrors: null
          }, JSCompiler_temp$jscomp$0 = createFiberImplClass(18, null, null, 0), JSCompiler_temp$jscomp$0.stateNode = nextInstance, JSCompiler_temp$jscomp$0.return = workInProgress, workInProgress.child = JSCompiler_temp$jscomp$0, hydrationParentFiber = workInProgress, nextHydratableInstance = null, JSCompiler_temp$jscomp$0 = true) : JSCompiler_temp$jscomp$0 = false;
        }
        JSCompiler_temp$jscomp$0 || throwOnHydrationMismatch(workInProgress);
      }
      nextInstance = workInProgress.memoizedState;
      if (nextInstance !== null && (nextInstance = nextInstance.dehydrated, nextInstance !== null))
        return isSuspenseInstanceFallback(nextInstance) ? workInProgress.lanes = 32 : workInProgress.lanes = 536870912, null;
      popSuspenseHandler(workInProgress);
    }
    nextInstance = nextProps.children;
    nextProps = nextProps.fallback;
    if (showFallback)
      return reuseSuspenseHandlerOnStack(workInProgress), showFallback = workInProgress.mode, nextInstance = mountWorkInProgressOffscreenFiber({ mode: "hidden", children: nextInstance }, showFallback), nextProps = createFiberFromFragment(nextProps, showFallback, renderLanes2, null), nextInstance.return = workInProgress, nextProps.return = workInProgress, nextInstance.sibling = nextProps, workInProgress.child = nextInstance, showFallback = workInProgress.child, showFallback.memoizedState = mountSuspenseOffscreenState(renderLanes2), showFallback.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes2), workInProgress.memoizedState = SUSPENDED_MARKER, nextProps;
    pushPrimaryTreeSuspenseHandler(workInProgress);
    return mountSuspensePrimaryChildren(workInProgress, nextInstance);
  }
  JSCompiler_temp$jscomp$0 = current.memoizedState;
  if (JSCompiler_temp$jscomp$0 !== null && (nextInstance = JSCompiler_temp$jscomp$0.dehydrated, nextInstance !== null)) {
    if (didSuspend)
      workInProgress.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags &= -257, workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes2)) : workInProgress.memoizedState !== null ? (reuseSuspenseHandlerOnStack(workInProgress), workInProgress.child = current.child, workInProgress.flags |= 128, workInProgress = null) : (reuseSuspenseHandlerOnStack(workInProgress), showFallback = nextProps.fallback, nextInstance = workInProgress.mode, nextProps = mountWorkInProgressOffscreenFiber({ mode: "visible", children: nextProps.children }, nextInstance), showFallback = createFiberFromFragment(showFallback, nextInstance, renderLanes2, null), showFallback.flags |= 2, nextProps.return = workInProgress, showFallback.return = workInProgress, nextProps.sibling = showFallback, workInProgress.child = nextProps, reconcileChildFibers(workInProgress, current.child, null, renderLanes2), nextProps = workInProgress.child, nextProps.memoizedState = mountSuspenseOffscreenState(renderLanes2), nextProps.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes2), workInProgress.memoizedState = SUSPENDED_MARKER, workInProgress = showFallback);
    else if (pushPrimaryTreeSuspenseHandler(workInProgress), isSuspenseInstanceFallback(nextInstance)) {
      JSCompiler_temp = nextInstance.nextSibling && nextInstance.nextSibling.dataset;
      if (JSCompiler_temp)
        var digest = JSCompiler_temp.dgst;
      JSCompiler_temp = digest;
      nextProps = Error(formatProdErrorMessage2(419));
      nextProps.stack = "";
      nextProps.digest = JSCompiler_temp;
      queueHydrationError({ value: nextProps, source: null, stack: null });
      workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes2);
    } else if (didReceiveUpdate || propagateParentContextChanges(current, workInProgress, renderLanes2, false), JSCompiler_temp = (renderLanes2 & current.childLanes) !== 0, didReceiveUpdate || JSCompiler_temp) {
      JSCompiler_temp = workInProgressRoot;
      if (JSCompiler_temp !== null && (nextProps = renderLanes2 & -renderLanes2, nextProps = (nextProps & 42) !== 0 ? 1 : getBumpedLaneForHydrationByLane(nextProps), nextProps = (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes2)) !== 0 ? 0 : nextProps, nextProps !== 0 && nextProps !== JSCompiler_temp$jscomp$0.retryLane))
        throw JSCompiler_temp$jscomp$0.retryLane = nextProps, enqueueConcurrentRenderForLane(current, nextProps), scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps), SelectiveHydrationException;
      nextInstance.data === "$?" || renderDidSuspendDelayIfPossible();
      workInProgress = retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes2);
    } else
      nextInstance.data === "$?" ? (workInProgress.flags |= 192, workInProgress.child = current.child, workInProgress = null) : (current = JSCompiler_temp$jscomp$0.treeContext, nextHydratableInstance = getNextHydratable(nextInstance.nextSibling), hydrationParentFiber = workInProgress, isHydrating = true, hydrationErrors = null, rootOrSingletonContext = false, current !== null && (idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextId = current.id, treeContextOverflow = current.overflow, treeContextProvider = workInProgress), workInProgress = mountSuspensePrimaryChildren(workInProgress, nextProps.children), workInProgress.flags |= 4096);
    return workInProgress;
  }
  if (showFallback)
    return reuseSuspenseHandlerOnStack(workInProgress), showFallback = nextProps.fallback, nextInstance = workInProgress.mode, JSCompiler_temp$jscomp$0 = current.child, digest = JSCompiler_temp$jscomp$0.sibling, nextProps = createWorkInProgress(JSCompiler_temp$jscomp$0, {
      mode: "hidden",
      children: nextProps.children
    }), nextProps.subtreeFlags = JSCompiler_temp$jscomp$0.subtreeFlags & 65011712, digest !== null ? showFallback = createWorkInProgress(digest, showFallback) : (showFallback = createFiberFromFragment(showFallback, nextInstance, renderLanes2, null), showFallback.flags |= 2), showFallback.return = workInProgress, nextProps.return = workInProgress, nextProps.sibling = showFallback, workInProgress.child = nextProps, nextProps = showFallback, showFallback = workInProgress.child, nextInstance = current.child.memoizedState, nextInstance === null ? nextInstance = mountSuspenseOffscreenState(renderLanes2) : (JSCompiler_temp$jscomp$0 = nextInstance.cachePool, JSCompiler_temp$jscomp$0 !== null ? (digest = CacheContext._currentValue, JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0.parent !== digest ? { parent: digest, pool: digest } : JSCompiler_temp$jscomp$0) : JSCompiler_temp$jscomp$0 = getSuspendedCache(), nextInstance = {
      baseLanes: nextInstance.baseLanes | renderLanes2,
      cachePool: JSCompiler_temp$jscomp$0
    }), showFallback.memoizedState = nextInstance, showFallback.childLanes = getRemainingWorkInPrimaryTree(current, JSCompiler_temp, renderLanes2), workInProgress.memoizedState = SUSPENDED_MARKER, nextProps;
  pushPrimaryTreeSuspenseHandler(workInProgress);
  renderLanes2 = current.child;
  current = renderLanes2.sibling;
  renderLanes2 = createWorkInProgress(renderLanes2, {
    mode: "visible",
    children: nextProps.children
  });
  renderLanes2.return = workInProgress;
  renderLanes2.sibling = null;
  current !== null && (JSCompiler_temp = workInProgress.deletions, JSCompiler_temp === null ? (workInProgress.deletions = [current], workInProgress.flags |= 16) : JSCompiler_temp.push(current));
  workInProgress.child = renderLanes2;
  workInProgress.memoizedState = null;
  return renderLanes2;
}
function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
  primaryChildren = mountWorkInProgressOffscreenFiber({ mode: "visible", children: primaryChildren }, workInProgress.mode);
  primaryChildren.return = workInProgress;
  return workInProgress.child = primaryChildren;
}
function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
  offscreenProps = createFiberImplClass(22, offscreenProps, null, mode);
  offscreenProps.lanes = 0;
  offscreenProps.stateNode = {
    _visibility: 1,
    _pendingMarkers: null,
    _retryCache: null,
    _transitions: null
  };
  return offscreenProps;
}
function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes2) {
  reconcileChildFibers(workInProgress, current.child, null, renderLanes2);
  current = mountSuspensePrimaryChildren(workInProgress, workInProgress.pendingProps.children);
  current.flags |= 2;
  workInProgress.memoizedState = null;
  return current;
}
function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
  fiber.lanes |= renderLanes2;
  var alternate = fiber.alternate;
  alternate !== null && (alternate.lanes |= renderLanes2);
  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
}
function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
  var renderState = workInProgress.memoizedState;
  renderState === null ? workInProgress.memoizedState = {
    isBackwards,
    rendering: null,
    renderingStartTime: 0,
    last: lastContentRow,
    tail,
    tailMode
  } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
}
function updateSuspenseListComponent(current, workInProgress, renderLanes2) {
  var nextProps = workInProgress.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail;
  reconcileChildren(current, workInProgress, nextProps.children, renderLanes2);
  nextProps = suspenseStackCursor.current;
  if ((nextProps & 2) !== 0)
    nextProps = nextProps & 1 | 2, workInProgress.flags |= 128;
  else {
    if (current !== null && (current.flags & 128) !== 0)
      a:
        for (current = workInProgress.child;current !== null; ) {
          if (current.tag === 13)
            current.memoizedState !== null && scheduleSuspenseWorkOnFiber(current, renderLanes2, workInProgress);
          else if (current.tag === 19)
            scheduleSuspenseWorkOnFiber(current, renderLanes2, workInProgress);
          else if (current.child !== null) {
            current.child.return = current;
            current = current.child;
            continue;
          }
          if (current === workInProgress)
            break a;
          for (;current.sibling === null; ) {
            if (current.return === null || current.return === workInProgress)
              break a;
            current = current.return;
          }
          current.sibling.return = current.return;
          current = current.sibling;
        }
    nextProps &= 1;
  }
  push2(suspenseStackCursor, nextProps);
  switch (revealOrder) {
    case "forwards":
      renderLanes2 = workInProgress.child;
      for (revealOrder = null;renderLanes2 !== null; )
        current = renderLanes2.alternate, current !== null && findFirstSuspended(current) === null && (revealOrder = renderLanes2), renderLanes2 = renderLanes2.sibling;
      renderLanes2 = revealOrder;
      renderLanes2 === null ? (revealOrder = workInProgress.child, workInProgress.child = null) : (revealOrder = renderLanes2.sibling, renderLanes2.sibling = null);
      initSuspenseListRenderState(workInProgress, false, revealOrder, renderLanes2, tailMode);
      break;
    case "backwards":
      renderLanes2 = null;
      revealOrder = workInProgress.child;
      for (workInProgress.child = null;revealOrder !== null; ) {
        current = revealOrder.alternate;
        if (current !== null && findFirstSuspended(current) === null) {
          workInProgress.child = revealOrder;
          break;
        }
        current = revealOrder.sibling;
        revealOrder.sibling = renderLanes2;
        renderLanes2 = revealOrder;
        revealOrder = current;
      }
      initSuspenseListRenderState(workInProgress, true, renderLanes2, null, tailMode);
      break;
    case "together":
      initSuspenseListRenderState(workInProgress, false, null, null, undefined);
      break;
    default:
      workInProgress.memoizedState = null;
  }
  return workInProgress.child;
}
function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes2) {
  current !== null && (workInProgress.dependencies = current.dependencies);
  workInProgressRootSkippedLanes |= workInProgress.lanes;
  if ((renderLanes2 & workInProgress.childLanes) === 0)
    if (current !== null) {
      if (propagateParentContextChanges(current, workInProgress, renderLanes2, false), (renderLanes2 & workInProgress.childLanes) === 0)
        return null;
    } else
      return null;
  if (current !== null && workInProgress.child !== current.child)
    throw Error(formatProdErrorMessage2(153));
  if (workInProgress.child !== null) {
    current = workInProgress.child;
    renderLanes2 = createWorkInProgress(current, current.pendingProps);
    workInProgress.child = renderLanes2;
    for (renderLanes2.return = workInProgress;current.sibling !== null; )
      current = current.sibling, renderLanes2 = renderLanes2.sibling = createWorkInProgress(current, current.pendingProps), renderLanes2.return = workInProgress;
    renderLanes2.sibling = null;
  }
  return workInProgress.child;
}
function checkScheduledUpdateOrContext(current, renderLanes2) {
  if ((current.lanes & renderLanes2) !== 0)
    return true;
  current = current.dependencies;
  return current !== null && checkIfContextChanged(current) ? true : false;
}
function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes2) {
  switch (workInProgress.tag) {
    case 3:
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
      resetHydrationState();
      break;
    case 27:
    case 5:
      pushHostContext(workInProgress);
      break;
    case 4:
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      break;
    case 10:
      pushProvider(workInProgress, workInProgress.type, workInProgress.memoizedProps.value);
      break;
    case 13:
      var state = workInProgress.memoizedState;
      if (state !== null) {
        if (state.dehydrated !== null)
          return pushPrimaryTreeSuspenseHandler(workInProgress), workInProgress.flags |= 128, null;
        if ((renderLanes2 & workInProgress.child.childLanes) !== 0)
          return updateSuspenseComponent(current, workInProgress, renderLanes2);
        pushPrimaryTreeSuspenseHandler(workInProgress);
        current = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes2);
        return current !== null ? current.sibling : null;
      }
      pushPrimaryTreeSuspenseHandler(workInProgress);
      break;
    case 19:
      var didSuspendBefore = (current.flags & 128) !== 0;
      state = (renderLanes2 & workInProgress.childLanes) !== 0;
      state || (propagateParentContextChanges(current, workInProgress, renderLanes2, false), state = (renderLanes2 & workInProgress.childLanes) !== 0);
      if (didSuspendBefore) {
        if (state)
          return updateSuspenseListComponent(current, workInProgress, renderLanes2);
        workInProgress.flags |= 128;
      }
      didSuspendBefore = workInProgress.memoizedState;
      didSuspendBefore !== null && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
      push2(suspenseStackCursor, suspenseStackCursor.current);
      if (state)
        break;
      else
        return null;
    case 22:
    case 23:
      return workInProgress.lanes = 0, updateOffscreenComponent(current, workInProgress, renderLanes2);
    case 24:
      pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
  }
  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes2);
}
function beginWork(current, workInProgress, renderLanes2) {
  if (current !== null)
    if (current.memoizedProps !== workInProgress.pendingProps)
      didReceiveUpdate = true;
    else {
      if (!checkScheduledUpdateOrContext(current, renderLanes2) && (workInProgress.flags & 128) === 0)
        return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes2);
      didReceiveUpdate = (current.flags & 131072) !== 0 ? true : false;
    }
  else
    didReceiveUpdate = false, isHydrating && (workInProgress.flags & 1048576) !== 0 && pushTreeId(workInProgress, treeForkCount, workInProgress.index);
  workInProgress.lanes = 0;
  switch (workInProgress.tag) {
    case 16:
      a: {
        current = workInProgress.pendingProps;
        var lazyComponent = workInProgress.elementType, init = lazyComponent._init;
        lazyComponent = init(lazyComponent._payload);
        workInProgress.type = lazyComponent;
        if (typeof lazyComponent === "function")
          shouldConstruct(lazyComponent) ? (current = resolveClassComponentProps(lazyComponent, current), workInProgress.tag = 1, workInProgress = updateClassComponent(null, workInProgress, lazyComponent, current, renderLanes2)) : (workInProgress.tag = 0, workInProgress = updateFunctionComponent(null, workInProgress, lazyComponent, current, renderLanes2));
        else {
          if (lazyComponent !== undefined && lazyComponent !== null) {
            if (init = lazyComponent.$$typeof, init === REACT_FORWARD_REF_TYPE2) {
              workInProgress.tag = 11;
              workInProgress = updateForwardRef(null, workInProgress, lazyComponent, current, renderLanes2);
              break a;
            } else if (init === REACT_MEMO_TYPE2) {
              workInProgress.tag = 14;
              workInProgress = updateMemoComponent(null, workInProgress, lazyComponent, current, renderLanes2);
              break a;
            }
          }
          workInProgress = getComponentNameFromType(lazyComponent) || lazyComponent;
          throw Error(formatProdErrorMessage2(306, workInProgress, ""));
        }
      }
      return workInProgress;
    case 0:
      return updateFunctionComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes2);
    case 1:
      return lazyComponent = workInProgress.type, init = resolveClassComponentProps(lazyComponent, workInProgress.pendingProps), updateClassComponent(current, workInProgress, lazyComponent, init, renderLanes2);
    case 3:
      a: {
        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
        if (current === null)
          throw Error(formatProdErrorMessage2(387));
        lazyComponent = workInProgress.pendingProps;
        var prevState = workInProgress.memoizedState;
        init = prevState.element;
        cloneUpdateQueue(current, workInProgress);
        processUpdateQueue(workInProgress, lazyComponent, null, renderLanes2);
        var nextState = workInProgress.memoizedState;
        lazyComponent = nextState.cache;
        pushProvider(workInProgress, CacheContext, lazyComponent);
        lazyComponent !== prevState.cache && propagateContextChanges(workInProgress, [CacheContext], renderLanes2, true);
        suspendIfUpdateReadFromEntangledAsyncAction();
        lazyComponent = nextState.element;
        if (prevState.isDehydrated)
          if (prevState = {
            element: lazyComponent,
            isDehydrated: false,
            cache: nextState.cache
          }, workInProgress.updateQueue.baseState = prevState, workInProgress.memoizedState = prevState, workInProgress.flags & 256) {
            workInProgress = mountHostRootWithoutHydrating(current, workInProgress, lazyComponent, renderLanes2);
            break a;
          } else if (lazyComponent !== init) {
            init = createCapturedValueAtFiber(Error(formatProdErrorMessage2(424)), workInProgress);
            queueHydrationError(init);
            workInProgress = mountHostRootWithoutHydrating(current, workInProgress, lazyComponent, renderLanes2);
            break a;
          } else {
            current = workInProgress.stateNode.containerInfo;
            switch (current.nodeType) {
              case 9:
                current = current.body;
                break;
              default:
                current = current.nodeName === "HTML" ? current.ownerDocument.body : current;
            }
            nextHydratableInstance = getNextHydratable(current.firstChild);
            hydrationParentFiber = workInProgress;
            isHydrating = true;
            hydrationErrors = null;
            rootOrSingletonContext = true;
            renderLanes2 = mountChildFibers(workInProgress, null, lazyComponent, renderLanes2);
            for (workInProgress.child = renderLanes2;renderLanes2; )
              renderLanes2.flags = renderLanes2.flags & -3 | 4096, renderLanes2 = renderLanes2.sibling;
          }
        else {
          resetHydrationState();
          if (lazyComponent === init) {
            workInProgress = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes2);
            break a;
          }
          reconcileChildren(current, workInProgress, lazyComponent, renderLanes2);
        }
        workInProgress = workInProgress.child;
      }
      return workInProgress;
    case 26:
      return markRef(current, workInProgress), current === null ? (renderLanes2 = getResource(workInProgress.type, null, workInProgress.pendingProps, null)) ? workInProgress.memoizedState = renderLanes2 : isHydrating || (renderLanes2 = workInProgress.type, current = workInProgress.pendingProps, lazyComponent = getOwnerDocumentFromRootContainer(rootInstanceStackCursor.current).createElement(renderLanes2), lazyComponent[internalInstanceKey] = workInProgress, lazyComponent[internalPropsKey] = current, setInitialProperties(lazyComponent, renderLanes2, current), markNodeAsHoistable(lazyComponent), workInProgress.stateNode = lazyComponent) : workInProgress.memoizedState = getResource(workInProgress.type, current.memoizedProps, workInProgress.pendingProps, current.memoizedState), null;
    case 27:
      return pushHostContext(workInProgress), current === null && isHydrating && (lazyComponent = workInProgress.stateNode = resolveSingletonInstance(workInProgress.type, workInProgress.pendingProps, rootInstanceStackCursor.current), hydrationParentFiber = workInProgress, rootOrSingletonContext = true, init = nextHydratableInstance, isSingletonScope(workInProgress.type) ? (previousHydratableOnEnteringScopedSingleton = init, nextHydratableInstance = getNextHydratable(lazyComponent.firstChild)) : nextHydratableInstance = init), reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes2), markRef(current, workInProgress), current === null && (workInProgress.flags |= 4194304), workInProgress.child;
    case 5:
      if (current === null && isHydrating) {
        if (init = lazyComponent = nextHydratableInstance)
          lazyComponent = canHydrateInstance(lazyComponent, workInProgress.type, workInProgress.pendingProps, rootOrSingletonContext), lazyComponent !== null ? (workInProgress.stateNode = lazyComponent, hydrationParentFiber = workInProgress, nextHydratableInstance = getNextHydratable(lazyComponent.firstChild), rootOrSingletonContext = false, init = true) : init = false;
        init || throwOnHydrationMismatch(workInProgress);
      }
      pushHostContext(workInProgress);
      init = workInProgress.type;
      prevState = workInProgress.pendingProps;
      nextState = current !== null ? current.memoizedProps : null;
      lazyComponent = prevState.children;
      shouldSetTextContent(init, prevState) ? lazyComponent = null : nextState !== null && shouldSetTextContent(init, nextState) && (workInProgress.flags |= 32);
      workInProgress.memoizedState !== null && (init = renderWithHooks(current, workInProgress, TransitionAwareHostComponent, null, null, renderLanes2), HostTransitionContext._currentValue = init);
      markRef(current, workInProgress);
      reconcileChildren(current, workInProgress, lazyComponent, renderLanes2);
      return workInProgress.child;
    case 6:
      if (current === null && isHydrating) {
        if (current = renderLanes2 = nextHydratableInstance)
          renderLanes2 = canHydrateTextInstance(renderLanes2, workInProgress.pendingProps, rootOrSingletonContext), renderLanes2 !== null ? (workInProgress.stateNode = renderLanes2, hydrationParentFiber = workInProgress, nextHydratableInstance = null, current = true) : current = false;
        current || throwOnHydrationMismatch(workInProgress);
      }
      return null;
    case 13:
      return updateSuspenseComponent(current, workInProgress, renderLanes2);
    case 4:
      return pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo), lazyComponent = workInProgress.pendingProps, current === null ? workInProgress.child = reconcileChildFibers(workInProgress, null, lazyComponent, renderLanes2) : reconcileChildren(current, workInProgress, lazyComponent, renderLanes2), workInProgress.child;
    case 11:
      return updateForwardRef(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes2);
    case 7:
      return reconcileChildren(current, workInProgress, workInProgress.pendingProps, renderLanes2), workInProgress.child;
    case 8:
      return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes2), workInProgress.child;
    case 12:
      return reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes2), workInProgress.child;
    case 10:
      return lazyComponent = workInProgress.pendingProps, pushProvider(workInProgress, workInProgress.type, lazyComponent.value), reconcileChildren(current, workInProgress, lazyComponent.children, renderLanes2), workInProgress.child;
    case 9:
      return init = workInProgress.type._context, lazyComponent = workInProgress.pendingProps.children, prepareToReadContext(workInProgress), init = readContext(init), lazyComponent = lazyComponent(init), workInProgress.flags |= 1, reconcileChildren(current, workInProgress, lazyComponent, renderLanes2), workInProgress.child;
    case 14:
      return updateMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes2);
    case 15:
      return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes2);
    case 19:
      return updateSuspenseListComponent(current, workInProgress, renderLanes2);
    case 31:
      return lazyComponent = workInProgress.pendingProps, renderLanes2 = workInProgress.mode, lazyComponent = {
        mode: lazyComponent.mode,
        children: lazyComponent.children
      }, current === null ? (renderLanes2 = mountWorkInProgressOffscreenFiber(lazyComponent, renderLanes2), renderLanes2.ref = workInProgress.ref, workInProgress.child = renderLanes2, renderLanes2.return = workInProgress, workInProgress = renderLanes2) : (renderLanes2 = createWorkInProgress(current.child, lazyComponent), renderLanes2.ref = workInProgress.ref, workInProgress.child = renderLanes2, renderLanes2.return = workInProgress, workInProgress = renderLanes2), workInProgress;
    case 22:
      return updateOffscreenComponent(current, workInProgress, renderLanes2);
    case 24:
      return prepareToReadContext(workInProgress), lazyComponent = readContext(CacheContext), current === null ? (init = peekCacheFromPool(), init === null && (init = workInProgressRoot, prevState = createCache(), init.pooledCache = prevState, prevState.refCount++, prevState !== null && (init.pooledCacheLanes |= renderLanes2), init = prevState), workInProgress.memoizedState = {
        parent: lazyComponent,
        cache: init
      }, initializeUpdateQueue(workInProgress), pushProvider(workInProgress, CacheContext, init)) : ((current.lanes & renderLanes2) !== 0 && (cloneUpdateQueue(current, workInProgress), processUpdateQueue(workInProgress, null, null, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction()), init = current.memoizedState, prevState = workInProgress.memoizedState, init.parent !== lazyComponent ? (init = { parent: lazyComponent, cache: lazyComponent }, workInProgress.memoizedState = init, workInProgress.lanes === 0 && (workInProgress.memoizedState = workInProgress.updateQueue.baseState = init), pushProvider(workInProgress, CacheContext, lazyComponent)) : (lazyComponent = prevState.cache, pushProvider(workInProgress, CacheContext, lazyComponent), lazyComponent !== init.cache && propagateContextChanges(workInProgress, [CacheContext], renderLanes2, true))), reconcileChildren(current, workInProgress, workInProgress.pendingProps.children, renderLanes2), workInProgress.child;
    case 29:
      throw workInProgress.pendingProps;
  }
  throw Error(formatProdErrorMessage2(156, workInProgress.tag));
}
function markUpdate(workInProgress) {
  workInProgress.flags |= 4;
}
function preloadResourceAndSuspendIfNeeded(workInProgress, resource) {
  if (resource.type !== "stylesheet" || (resource.state.loading & 4) !== 0)
    workInProgress.flags &= -16777217;
  else if (workInProgress.flags |= 16777216, !preloadResource(resource)) {
    resource = suspenseHandlerStackCursor.current;
    if (resource !== null && ((workInProgressRootRenderLanes & 4194048) === workInProgressRootRenderLanes ? shellBoundary !== null : (workInProgressRootRenderLanes & 62914560) !== workInProgressRootRenderLanes && (workInProgressRootRenderLanes & 536870912) === 0 || resource !== shellBoundary))
      throw suspendedThenable = noopSuspenseyCommitThenable, SuspenseyCommitException;
    workInProgress.flags |= 8192;
  }
}
function scheduleRetryEffect(workInProgress, retryQueue) {
  retryQueue !== null && (workInProgress.flags |= 4);
  workInProgress.flags & 16384 && (retryQueue = workInProgress.tag !== 22 ? claimNextRetryLane() : 536870912, workInProgress.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
}
function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
  if (!isHydrating)
    switch (renderState.tailMode) {
      case "hidden":
        hasRenderedATailFallback = renderState.tail;
        for (var lastTailNode = null;hasRenderedATailFallback !== null; )
          hasRenderedATailFallback.alternate !== null && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
        lastTailNode === null ? renderState.tail = null : lastTailNode.sibling = null;
        break;
      case "collapsed":
        lastTailNode = renderState.tail;
        for (var lastTailNode$113 = null;lastTailNode !== null; )
          lastTailNode.alternate !== null && (lastTailNode$113 = lastTailNode), lastTailNode = lastTailNode.sibling;
        lastTailNode$113 === null ? hasRenderedATailFallback || renderState.tail === null ? renderState.tail = null : renderState.tail.sibling = null : lastTailNode$113.sibling = null;
    }
}
function bubbleProperties(completedWork) {
  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
  if (didBailout)
    for (var child$114 = completedWork.child;child$114 !== null; )
      newChildLanes |= child$114.lanes | child$114.childLanes, subtreeFlags |= child$114.subtreeFlags & 65011712, subtreeFlags |= child$114.flags & 65011712, child$114.return = completedWork, child$114 = child$114.sibling;
  else
    for (child$114 = completedWork.child;child$114 !== null; )
      newChildLanes |= child$114.lanes | child$114.childLanes, subtreeFlags |= child$114.subtreeFlags, subtreeFlags |= child$114.flags, child$114.return = completedWork, child$114 = child$114.sibling;
  completedWork.subtreeFlags |= subtreeFlags;
  completedWork.childLanes = newChildLanes;
  return didBailout;
}
function completeWork(current, workInProgress, renderLanes2) {
  var newProps = workInProgress.pendingProps;
  popTreeContext(workInProgress);
  switch (workInProgress.tag) {
    case 31:
    case 16:
    case 15:
    case 0:
    case 11:
    case 7:
    case 8:
    case 12:
    case 9:
    case 14:
      return bubbleProperties(workInProgress), null;
    case 1:
      return bubbleProperties(workInProgress), null;
    case 3:
      renderLanes2 = workInProgress.stateNode;
      newProps = null;
      current !== null && (newProps = current.memoizedState.cache);
      workInProgress.memoizedState.cache !== newProps && (workInProgress.flags |= 2048);
      popProvider(CacheContext);
      popHostContainer();
      renderLanes2.pendingContext && (renderLanes2.context = renderLanes2.pendingContext, renderLanes2.pendingContext = null);
      if (current === null || current.child === null)
        popHydrationState(workInProgress) ? markUpdate(workInProgress) : current === null || current.memoizedState.isDehydrated && (workInProgress.flags & 256) === 0 || (workInProgress.flags |= 1024, upgradeHydrationErrorsToRecoverable());
      bubbleProperties(workInProgress);
      return null;
    case 26:
      return renderLanes2 = workInProgress.memoizedState, current === null ? (markUpdate(workInProgress), renderLanes2 !== null ? (bubbleProperties(workInProgress), preloadResourceAndSuspendIfNeeded(workInProgress, renderLanes2)) : (bubbleProperties(workInProgress), workInProgress.flags &= -16777217)) : renderLanes2 ? renderLanes2 !== current.memoizedState ? (markUpdate(workInProgress), bubbleProperties(workInProgress), preloadResourceAndSuspendIfNeeded(workInProgress, renderLanes2)) : (bubbleProperties(workInProgress), workInProgress.flags &= -16777217) : (current.memoizedProps !== newProps && markUpdate(workInProgress), bubbleProperties(workInProgress), workInProgress.flags &= -16777217), null;
    case 27:
      popHostContext(workInProgress);
      renderLanes2 = rootInstanceStackCursor.current;
      var type = workInProgress.type;
      if (current !== null && workInProgress.stateNode != null)
        current.memoizedProps !== newProps && markUpdate(workInProgress);
      else {
        if (!newProps) {
          if (workInProgress.stateNode === null)
            throw Error(formatProdErrorMessage2(166));
          bubbleProperties(workInProgress);
          return null;
        }
        current = contextStackCursor.current;
        popHydrationState(workInProgress) ? prepareToHydrateHostInstance(workInProgress, current) : (current = resolveSingletonInstance(type, newProps, renderLanes2), workInProgress.stateNode = current, markUpdate(workInProgress));
      }
      bubbleProperties(workInProgress);
      return null;
    case 5:
      popHostContext(workInProgress);
      renderLanes2 = workInProgress.type;
      if (current !== null && workInProgress.stateNode != null)
        current.memoizedProps !== newProps && markUpdate(workInProgress);
      else {
        if (!newProps) {
          if (workInProgress.stateNode === null)
            throw Error(formatProdErrorMessage2(166));
          bubbleProperties(workInProgress);
          return null;
        }
        current = contextStackCursor.current;
        if (popHydrationState(workInProgress))
          prepareToHydrateHostInstance(workInProgress, current);
        else {
          type = getOwnerDocumentFromRootContainer(rootInstanceStackCursor.current);
          switch (current) {
            case 1:
              current = type.createElementNS("http://www.w3.org/2000/svg", renderLanes2);
              break;
            case 2:
              current = type.createElementNS("http://www.w3.org/1998/Math/MathML", renderLanes2);
              break;
            default:
              switch (renderLanes2) {
                case "svg":
                  current = type.createElementNS("http://www.w3.org/2000/svg", renderLanes2);
                  break;
                case "math":
                  current = type.createElementNS("http://www.w3.org/1998/Math/MathML", renderLanes2);
                  break;
                case "script":
                  current = type.createElement("div");
                  current.innerHTML = "<script></script>";
                  current = current.removeChild(current.firstChild);
                  break;
                case "select":
                  current = typeof newProps.is === "string" ? type.createElement("select", { is: newProps.is }) : type.createElement("select");
                  newProps.multiple ? current.multiple = true : newProps.size && (current.size = newProps.size);
                  break;
                default:
                  current = typeof newProps.is === "string" ? type.createElement(renderLanes2, { is: newProps.is }) : type.createElement(renderLanes2);
              }
          }
          current[internalInstanceKey] = workInProgress;
          current[internalPropsKey] = newProps;
          a:
            for (type = workInProgress.child;type !== null; ) {
              if (type.tag === 5 || type.tag === 6)
                current.appendChild(type.stateNode);
              else if (type.tag !== 4 && type.tag !== 27 && type.child !== null) {
                type.child.return = type;
                type = type.child;
                continue;
              }
              if (type === workInProgress)
                break a;
              for (;type.sibling === null; ) {
                if (type.return === null || type.return === workInProgress)
                  break a;
                type = type.return;
              }
              type.sibling.return = type.return;
              type = type.sibling;
            }
          workInProgress.stateNode = current;
          a:
            switch (setInitialProperties(current, renderLanes2, newProps), renderLanes2) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                current = !!newProps.autoFocus;
                break a;
              case "img":
                current = true;
                break a;
              default:
                current = false;
            }
          current && markUpdate(workInProgress);
        }
      }
      bubbleProperties(workInProgress);
      workInProgress.flags &= -16777217;
      return null;
    case 6:
      if (current && workInProgress.stateNode != null)
        current.memoizedProps !== newProps && markUpdate(workInProgress);
      else {
        if (typeof newProps !== "string" && workInProgress.stateNode === null)
          throw Error(formatProdErrorMessage2(166));
        current = rootInstanceStackCursor.current;
        if (popHydrationState(workInProgress)) {
          current = workInProgress.stateNode;
          renderLanes2 = workInProgress.memoizedProps;
          newProps = null;
          type = hydrationParentFiber;
          if (type !== null)
            switch (type.tag) {
              case 27:
              case 5:
                newProps = type.memoizedProps;
            }
          current[internalInstanceKey] = workInProgress;
          current = current.nodeValue === renderLanes2 || newProps !== null && newProps.suppressHydrationWarning === true || checkForUnmatchedText(current.nodeValue, renderLanes2) ? true : false;
          current || throwOnHydrationMismatch(workInProgress);
        } else
          current = getOwnerDocumentFromRootContainer(current).createTextNode(newProps), current[internalInstanceKey] = workInProgress, workInProgress.stateNode = current;
      }
      bubbleProperties(workInProgress);
      return null;
    case 13:
      newProps = workInProgress.memoizedState;
      if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {
        type = popHydrationState(workInProgress);
        if (newProps !== null && newProps.dehydrated !== null) {
          if (current === null) {
            if (!type)
              throw Error(formatProdErrorMessage2(318));
            type = workInProgress.memoizedState;
            type = type !== null ? type.dehydrated : null;
            if (!type)
              throw Error(formatProdErrorMessage2(317));
            type[internalInstanceKey] = workInProgress;
          } else
            resetHydrationState(), (workInProgress.flags & 128) === 0 && (workInProgress.memoizedState = null), workInProgress.flags |= 4;
          bubbleProperties(workInProgress);
          type = false;
        } else
          type = upgradeHydrationErrorsToRecoverable(), current !== null && current.memoizedState !== null && (current.memoizedState.hydrationErrors = type), type = true;
        if (!type) {
          if (workInProgress.flags & 256)
            return popSuspenseHandler(workInProgress), workInProgress;
          popSuspenseHandler(workInProgress);
          return null;
        }
      }
      popSuspenseHandler(workInProgress);
      if ((workInProgress.flags & 128) !== 0)
        return workInProgress.lanes = renderLanes2, workInProgress;
      renderLanes2 = newProps !== null;
      current = current !== null && current.memoizedState !== null;
      if (renderLanes2) {
        newProps = workInProgress.child;
        type = null;
        newProps.alternate !== null && newProps.alternate.memoizedState !== null && newProps.alternate.memoizedState.cachePool !== null && (type = newProps.alternate.memoizedState.cachePool.pool);
        var cache$127 = null;
        newProps.memoizedState !== null && newProps.memoizedState.cachePool !== null && (cache$127 = newProps.memoizedState.cachePool.pool);
        cache$127 !== type && (newProps.flags |= 2048);
      }
      renderLanes2 !== current && renderLanes2 && (workInProgress.child.flags |= 8192);
      scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
      bubbleProperties(workInProgress);
      return null;
    case 4:
      return popHostContainer(), current === null && listenToAllSupportedEvents(workInProgress.stateNode.containerInfo), bubbleProperties(workInProgress), null;
    case 10:
      return popProvider(workInProgress.type), bubbleProperties(workInProgress), null;
    case 19:
      pop2(suspenseStackCursor);
      type = workInProgress.memoizedState;
      if (type === null)
        return bubbleProperties(workInProgress), null;
      newProps = (workInProgress.flags & 128) !== 0;
      cache$127 = type.rendering;
      if (cache$127 === null)
        if (newProps)
          cutOffTailIfNeeded(type, false);
        else {
          if (workInProgressRootExitStatus !== 0 || current !== null && (current.flags & 128) !== 0)
            for (current = workInProgress.child;current !== null; ) {
              cache$127 = findFirstSuspended(current);
              if (cache$127 !== null) {
                workInProgress.flags |= 128;
                cutOffTailIfNeeded(type, false);
                current = cache$127.updateQueue;
                workInProgress.updateQueue = current;
                scheduleRetryEffect(workInProgress, current);
                workInProgress.subtreeFlags = 0;
                current = renderLanes2;
                for (renderLanes2 = workInProgress.child;renderLanes2 !== null; )
                  resetWorkInProgress(renderLanes2, current), renderLanes2 = renderLanes2.sibling;
                push2(suspenseStackCursor, suspenseStackCursor.current & 1 | 2);
                return workInProgress.child;
              }
              current = current.sibling;
            }
          type.tail !== null && now() > workInProgressRootRenderTargetTime && (workInProgress.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress.lanes = 4194304);
        }
      else {
        if (!newProps)
          if (current = findFirstSuspended(cache$127), current !== null) {
            if (workInProgress.flags |= 128, newProps = true, current = current.updateQueue, workInProgress.updateQueue = current, scheduleRetryEffect(workInProgress, current), cutOffTailIfNeeded(type, true), type.tail === null && type.tailMode === "hidden" && !cache$127.alternate && !isHydrating)
              return bubbleProperties(workInProgress), null;
          } else
            2 * now() - type.renderingStartTime > workInProgressRootRenderTargetTime && renderLanes2 !== 536870912 && (workInProgress.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress.lanes = 4194304);
        type.isBackwards ? (cache$127.sibling = workInProgress.child, workInProgress.child = cache$127) : (current = type.last, current !== null ? current.sibling = cache$127 : workInProgress.child = cache$127, type.last = cache$127);
      }
      if (type.tail !== null)
        return workInProgress = type.tail, type.rendering = workInProgress, type.tail = workInProgress.sibling, type.renderingStartTime = now(), workInProgress.sibling = null, current = suspenseStackCursor.current, push2(suspenseStackCursor, newProps ? current & 1 | 2 : current & 1), workInProgress;
      bubbleProperties(workInProgress);
      return null;
    case 22:
    case 23:
      return popSuspenseHandler(workInProgress), popHiddenContext(), newProps = workInProgress.memoizedState !== null, current !== null ? current.memoizedState !== null !== newProps && (workInProgress.flags |= 8192) : newProps && (workInProgress.flags |= 8192), newProps ? (renderLanes2 & 536870912) !== 0 && (workInProgress.flags & 128) === 0 && (bubbleProperties(workInProgress), workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192)) : bubbleProperties(workInProgress), renderLanes2 = workInProgress.updateQueue, renderLanes2 !== null && scheduleRetryEffect(workInProgress, renderLanes2.retryQueue), renderLanes2 = null, current !== null && current.memoizedState !== null && current.memoizedState.cachePool !== null && (renderLanes2 = current.memoizedState.cachePool.pool), newProps = null, workInProgress.memoizedState !== null && workInProgress.memoizedState.cachePool !== null && (newProps = workInProgress.memoizedState.cachePool.pool), newProps !== renderLanes2 && (workInProgress.flags |= 2048), current !== null && pop2(resumedCache), null;
    case 24:
      return renderLanes2 = null, current !== null && (renderLanes2 = current.memoizedState.cache), workInProgress.memoizedState.cache !== renderLanes2 && (workInProgress.flags |= 2048), popProvider(CacheContext), bubbleProperties(workInProgress), null;
    case 25:
      return null;
    case 30:
      return null;
  }
  throw Error(formatProdErrorMessage2(156, workInProgress.tag));
}
function unwindWork(current, workInProgress) {
  popTreeContext(workInProgress);
  switch (workInProgress.tag) {
    case 1:
      return current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
    case 3:
      return popProvider(CacheContext), popHostContainer(), current = workInProgress.flags, (current & 65536) !== 0 && (current & 128) === 0 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
    case 26:
    case 27:
    case 5:
      return popHostContext(workInProgress), null;
    case 13:
      popSuspenseHandler(workInProgress);
      current = workInProgress.memoizedState;
      if (current !== null && current.dehydrated !== null) {
        if (workInProgress.alternate === null)
          throw Error(formatProdErrorMessage2(340));
        resetHydrationState();
      }
      current = workInProgress.flags;
      return current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
    case 19:
      return pop2(suspenseStackCursor), null;
    case 4:
      return popHostContainer(), null;
    case 10:
      return popProvider(workInProgress.type), null;
    case 22:
    case 23:
      return popSuspenseHandler(workInProgress), popHiddenContext(), current !== null && pop2(resumedCache), current = workInProgress.flags, current & 65536 ? (workInProgress.flags = current & -65537 | 128, workInProgress) : null;
    case 24:
      return popProvider(CacheContext), null;
    case 25:
      return null;
    default:
      return null;
  }
}
function unwindInterruptedWork(current, interruptedWork) {
  popTreeContext(interruptedWork);
  switch (interruptedWork.tag) {
    case 3:
      popProvider(CacheContext);
      popHostContainer();
      break;
    case 26:
    case 27:
    case 5:
      popHostContext(interruptedWork);
      break;
    case 4:
      popHostContainer();
      break;
    case 13:
      popSuspenseHandler(interruptedWork);
      break;
    case 19:
      pop2(suspenseStackCursor);
      break;
    case 10:
      popProvider(interruptedWork.type);
      break;
    case 22:
    case 23:
      popSuspenseHandler(interruptedWork);
      popHiddenContext();
      current !== null && pop2(resumedCache);
      break;
    case 24:
      popProvider(CacheContext);
  }
}
function commitHookEffectListMount(flags, finishedWork) {
  try {
    var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
    if (lastEffect !== null) {
      var firstEffect = lastEffect.next;
      updateQueue = firstEffect;
      do {
        if ((updateQueue.tag & flags) === flags) {
          lastEffect = undefined;
          var { create, inst } = updateQueue;
          lastEffect = create();
          inst.destroy = lastEffect;
        }
        updateQueue = updateQueue.next;
      } while (updateQueue !== firstEffect);
    }
  } catch (error) {
    captureCommitPhaseError(finishedWork, finishedWork.return, error);
  }
}
function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor$jscomp$0) {
  try {
    var updateQueue = finishedWork.updateQueue, lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
    if (lastEffect !== null) {
      var firstEffect = lastEffect.next;
      updateQueue = firstEffect;
      do {
        if ((updateQueue.tag & flags) === flags) {
          var inst = updateQueue.inst, destroy = inst.destroy;
          if (destroy !== undefined) {
            inst.destroy = undefined;
            lastEffect = finishedWork;
            var nearestMountedAncestor = nearestMountedAncestor$jscomp$0, destroy_ = destroy;
            try {
              destroy_();
            } catch (error) {
              captureCommitPhaseError(lastEffect, nearestMountedAncestor, error);
            }
          }
        }
        updateQueue = updateQueue.next;
      } while (updateQueue !== firstEffect);
    }
  } catch (error) {
    captureCommitPhaseError(finishedWork, finishedWork.return, error);
  }
}
function commitClassCallbacks(finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  if (updateQueue !== null) {
    var instance = finishedWork.stateNode;
    try {
      commitCallbacks(updateQueue, instance);
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
  }
}
function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
  instance.props = resolveClassComponentProps(current.type, current.memoizedProps);
  instance.state = current.memoizedState;
  try {
    instance.componentWillUnmount();
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
}
function safelyAttachRef(current, nearestMountedAncestor) {
  try {
    var ref = current.ref;
    if (ref !== null) {
      switch (current.tag) {
        case 26:
        case 27:
        case 5:
          var instanceToUse = current.stateNode;
          break;
        case 30:
          instanceToUse = current.stateNode;
          break;
        default:
          instanceToUse = current.stateNode;
      }
      typeof ref === "function" ? current.refCleanup = ref(instanceToUse) : ref.current = instanceToUse;
    }
  } catch (error) {
    captureCommitPhaseError(current, nearestMountedAncestor, error);
  }
}
function safelyDetachRef(current, nearestMountedAncestor) {
  var { ref, refCleanup } = current;
  if (ref !== null)
    if (typeof refCleanup === "function")
      try {
        refCleanup();
      } catch (error) {
        captureCommitPhaseError(current, nearestMountedAncestor, error);
      } finally {
        current.refCleanup = null, current = current.alternate, current != null && (current.refCleanup = null);
      }
    else if (typeof ref === "function")
      try {
        ref(null);
      } catch (error$143) {
        captureCommitPhaseError(current, nearestMountedAncestor, error$143);
      }
    else
      ref.current = null;
}
function commitHostMount(finishedWork) {
  var { type, memoizedProps: props, stateNode: instance } = finishedWork;
  try {
    a:
      switch (type) {
        case "button":
        case "input":
        case "select":
        case "textarea":
          props.autoFocus && instance.focus();
          break a;
        case "img":
          props.src ? instance.src = props.src : props.srcSet && (instance.srcset = props.srcSet);
      }
  } catch (error) {
    captureCommitPhaseError(finishedWork, finishedWork.return, error);
  }
}
function commitHostUpdate(finishedWork, newProps, oldProps) {
  try {
    var domElement = finishedWork.stateNode;
    updateProperties(domElement, finishedWork.type, oldProps, newProps);
    domElement[internalPropsKey] = newProps;
  } catch (error) {
    captureCommitPhaseError(finishedWork, finishedWork.return, error);
  }
}
function isHostParent(fiber) {
  return fiber.tag === 5 || fiber.tag === 3 || fiber.tag === 26 || fiber.tag === 27 && isSingletonScope(fiber.type) || fiber.tag === 4;
}
function getHostSibling(fiber) {
  a:
    for (;; ) {
      for (;fiber.sibling === null; ) {
        if (fiber.return === null || isHostParent(fiber.return))
          return null;
        fiber = fiber.return;
      }
      fiber.sibling.return = fiber.return;
      for (fiber = fiber.sibling;fiber.tag !== 5 && fiber.tag !== 6 && fiber.tag !== 18; ) {
        if (fiber.tag === 27 && isSingletonScope(fiber.type))
          continue a;
        if (fiber.flags & 2)
          continue a;
        if (fiber.child === null || fiber.tag === 4)
          continue a;
        else
          fiber.child.return = fiber, fiber = fiber.child;
      }
      if (!(fiber.flags & 2))
        return fiber.stateNode;
    }
}
function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
  var tag = node.tag;
  if (tag === 5 || tag === 6)
    node = node.stateNode, before ? (parent.nodeType === 9 ? parent.body : parent.nodeName === "HTML" ? parent.ownerDocument.body : parent).insertBefore(node, before) : (before = parent.nodeType === 9 ? parent.body : parent.nodeName === "HTML" ? parent.ownerDocument.body : parent, before.appendChild(node), parent = parent._reactRootContainer, parent !== null && parent !== undefined || before.onclick !== null || (before.onclick = noop$12));
  else if (tag !== 4 && (tag === 27 && isSingletonScope(node.type) && (parent = node.stateNode, before = null), node = node.child, node !== null))
    for (insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;node !== null; )
      insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
}
function insertOrAppendPlacementNode(node, before, parent) {
  var tag = node.tag;
  if (tag === 5 || tag === 6)
    node = node.stateNode, before ? parent.insertBefore(node, before) : parent.appendChild(node);
  else if (tag !== 4 && (tag === 27 && isSingletonScope(node.type) && (parent = node.stateNode), node = node.child, node !== null))
    for (insertOrAppendPlacementNode(node, before, parent), node = node.sibling;node !== null; )
      insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
}
function commitHostSingletonAcquisition(finishedWork) {
  var { stateNode: singleton, memoizedProps: props } = finishedWork;
  try {
    for (var type = finishedWork.type, attributes = singleton.attributes;attributes.length; )
      singleton.removeAttributeNode(attributes[0]);
    setInitialProperties(singleton, type, props);
    singleton[internalInstanceKey] = finishedWork;
    singleton[internalPropsKey] = props;
  } catch (error) {
    captureCommitPhaseError(finishedWork, finishedWork.return, error);
  }
}
function commitBeforeMutationEffects(root2, firstChild) {
  root2 = root2.containerInfo;
  eventsEnabled = _enabled;
  root2 = getActiveElementDeep(root2);
  if (hasSelectionCapabilities(root2)) {
    if ("selectionStart" in root2)
      var JSCompiler_temp = {
        start: root2.selectionStart,
        end: root2.selectionEnd
      };
    else
      a: {
        JSCompiler_temp = (JSCompiler_temp = root2.ownerDocument) && JSCompiler_temp.defaultView || window;
        var selection = JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
        if (selection && selection.rangeCount !== 0) {
          JSCompiler_temp = selection.anchorNode;
          var { anchorOffset, focusNode } = selection;
          selection = selection.focusOffset;
          try {
            JSCompiler_temp.nodeType, focusNode.nodeType;
          } catch (e$20) {
            JSCompiler_temp = null;
            break a;
          }
          var length = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = root2, parentNode = null;
          b:
            for (;; ) {
              for (var next;; ) {
                node !== JSCompiler_temp || anchorOffset !== 0 && node.nodeType !== 3 || (start = length + anchorOffset);
                node !== focusNode || selection !== 0 && node.nodeType !== 3 || (end = length + selection);
                node.nodeType === 3 && (length += node.nodeValue.length);
                if ((next = node.firstChild) === null)
                  break;
                parentNode = node;
                node = next;
              }
              for (;; ) {
                if (node === root2)
                  break b;
                parentNode === JSCompiler_temp && ++indexWithinAnchor === anchorOffset && (start = length);
                parentNode === focusNode && ++indexWithinFocus === selection && (end = length);
                if ((next = node.nextSibling) !== null)
                  break;
                node = parentNode;
                parentNode = node.parentNode;
              }
              node = next;
            }
          JSCompiler_temp = start === -1 || end === -1 ? null : { start, end };
        } else
          JSCompiler_temp = null;
      }
    JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
  } else
    JSCompiler_temp = null;
  selectionInformation = { focusedElem: root2, selectionRange: JSCompiler_temp };
  _enabled = false;
  for (nextEffect = firstChild;nextEffect !== null; )
    if (firstChild = nextEffect, root2 = firstChild.child, (firstChild.subtreeFlags & 1024) !== 0 && root2 !== null)
      root2.return = firstChild, nextEffect = root2;
    else
      for (;nextEffect !== null; ) {
        firstChild = nextEffect;
        focusNode = firstChild.alternate;
        root2 = firstChild.flags;
        switch (firstChild.tag) {
          case 0:
            break;
          case 11:
          case 15:
            break;
          case 1:
            if ((root2 & 1024) !== 0 && focusNode !== null) {
              root2 = undefined;
              JSCompiler_temp = firstChild;
              anchorOffset = focusNode.memoizedProps;
              focusNode = focusNode.memoizedState;
              selection = JSCompiler_temp.stateNode;
              try {
                var resolvedPrevProps = resolveClassComponentProps(JSCompiler_temp.type, anchorOffset, JSCompiler_temp.elementType === JSCompiler_temp.type);
                root2 = selection.getSnapshotBeforeUpdate(resolvedPrevProps, focusNode);
                selection.__reactInternalSnapshotBeforeUpdate = root2;
              } catch (error) {
                captureCommitPhaseError(JSCompiler_temp, JSCompiler_temp.return, error);
              }
            }
            break;
          case 3:
            if ((root2 & 1024) !== 0) {
              if (root2 = firstChild.stateNode.containerInfo, JSCompiler_temp = root2.nodeType, JSCompiler_temp === 9)
                clearContainerSparingly(root2);
              else if (JSCompiler_temp === 1)
                switch (root2.nodeName) {
                  case "HEAD":
                  case "HTML":
                  case "BODY":
                    clearContainerSparingly(root2);
                    break;
                  default:
                    root2.textContent = "";
                }
            }
            break;
          case 5:
          case 26:
          case 27:
          case 6:
          case 4:
          case 17:
            break;
          default:
            if ((root2 & 1024) !== 0)
              throw Error(formatProdErrorMessage2(163));
        }
        root2 = firstChild.sibling;
        if (root2 !== null) {
          root2.return = firstChild.return;
          nextEffect = root2;
          break;
        }
        nextEffect = firstChild.return;
      }
}
function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
  var flags = finishedWork.flags;
  switch (finishedWork.tag) {
    case 0:
    case 11:
    case 15:
      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      flags & 4 && commitHookEffectListMount(5, finishedWork);
      break;
    case 1:
      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      if (flags & 4)
        if (finishedRoot = finishedWork.stateNode, current === null)
          try {
            finishedRoot.componentDidMount();
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        else {
          var prevProps = resolveClassComponentProps(finishedWork.type, current.memoizedProps);
          current = current.memoizedState;
          try {
            finishedRoot.componentDidUpdate(prevProps, current, finishedRoot.__reactInternalSnapshotBeforeUpdate);
          } catch (error$142) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error$142);
          }
        }
      flags & 64 && commitClassCallbacks(finishedWork);
      flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
      break;
    case 3:
      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      if (flags & 64 && (finishedRoot = finishedWork.updateQueue, finishedRoot !== null)) {
        current = null;
        if (finishedWork.child !== null)
          switch (finishedWork.child.tag) {
            case 27:
            case 5:
              current = finishedWork.child.stateNode;
              break;
            case 1:
              current = finishedWork.child.stateNode;
          }
        try {
          commitCallbacks(finishedRoot, current);
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      break;
    case 27:
      current === null && flags & 4 && commitHostSingletonAcquisition(finishedWork);
    case 26:
    case 5:
      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      current === null && flags & 4 && commitHostMount(finishedWork);
      flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
      break;
    case 12:
      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      break;
    case 13:
      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
      flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
      flags & 64 && (finishedRoot = finishedWork.memoizedState, finishedRoot !== null && (finishedRoot = finishedRoot.dehydrated, finishedRoot !== null && (finishedWork = retryDehydratedSuspenseBoundary.bind(null, finishedWork), registerSuspenseInstanceRetry(finishedRoot, finishedWork))));
      break;
    case 22:
      flags = finishedWork.memoizedState !== null || offscreenSubtreeIsHidden;
      if (!flags) {
        current = current !== null && current.memoizedState !== null || offscreenSubtreeWasHidden;
        prevProps = offscreenSubtreeIsHidden;
        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
        offscreenSubtreeIsHidden = flags;
        (offscreenSubtreeWasHidden = current) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, (finishedWork.subtreeFlags & 8772) !== 0) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        offscreenSubtreeIsHidden = prevProps;
        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
      }
      break;
    case 30:
      break;
    default:
      recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
  }
}
function detachFiberAfterEffects(fiber) {
  var alternate = fiber.alternate;
  alternate !== null && (fiber.alternate = null, detachFiberAfterEffects(alternate));
  fiber.child = null;
  fiber.deletions = null;
  fiber.sibling = null;
  fiber.tag === 5 && (alternate = fiber.stateNode, alternate !== null && detachDeletedInstance(alternate));
  fiber.stateNode = null;
  fiber.return = null;
  fiber.dependencies = null;
  fiber.memoizedProps = null;
  fiber.memoizedState = null;
  fiber.pendingProps = null;
  fiber.stateNode = null;
  fiber.updateQueue = null;
}
function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
  for (parent = parent.child;parent !== null; )
    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
}
function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function")
    try {
      injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
    } catch (err) {
    }
  switch (deletedFiber.tag) {
    case 26:
      offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
      recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
      deletedFiber.memoizedState ? deletedFiber.memoizedState.count-- : deletedFiber.stateNode && (deletedFiber = deletedFiber.stateNode, deletedFiber.parentNode.removeChild(deletedFiber));
      break;
    case 27:
      offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
      var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
      isSingletonScope(deletedFiber.type) && (hostParent = deletedFiber.stateNode, hostParentIsContainer = false);
      recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
      releaseSingletonInstance(deletedFiber.stateNode);
      hostParent = prevHostParent;
      hostParentIsContainer = prevHostParentIsContainer;
      break;
    case 5:
      offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
    case 6:
      prevHostParent = hostParent;
      prevHostParentIsContainer = hostParentIsContainer;
      hostParent = null;
      recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
      hostParent = prevHostParent;
      hostParentIsContainer = prevHostParentIsContainer;
      if (hostParent !== null)
        if (hostParentIsContainer)
          try {
            (hostParent.nodeType === 9 ? hostParent.body : hostParent.nodeName === "HTML" ? hostParent.ownerDocument.body : hostParent).removeChild(deletedFiber.stateNode);
          } catch (error) {
            captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
          }
        else
          try {
            hostParent.removeChild(deletedFiber.stateNode);
          } catch (error) {
            captureCommitPhaseError(deletedFiber, nearestMountedAncestor, error);
          }
      break;
    case 18:
      hostParent !== null && (hostParentIsContainer ? (finishedRoot = hostParent, clearSuspenseBoundary(finishedRoot.nodeType === 9 ? finishedRoot.body : finishedRoot.nodeName === "HTML" ? finishedRoot.ownerDocument.body : finishedRoot, deletedFiber.stateNode), retryIfBlockedOn(finishedRoot)) : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
      break;
    case 4:
      prevHostParent = hostParent;
      prevHostParentIsContainer = hostParentIsContainer;
      hostParent = deletedFiber.stateNode.containerInfo;
      hostParentIsContainer = true;
      recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
      hostParent = prevHostParent;
      hostParentIsContainer = prevHostParentIsContainer;
      break;
    case 0:
    case 11:
    case 14:
    case 15:
      offscreenSubtreeWasHidden || commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);
      offscreenSubtreeWasHidden || commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);
      recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
      break;
    case 1:
      offscreenSubtreeWasHidden || (safelyDetachRef(deletedFiber, nearestMountedAncestor), prevHostParent = deletedFiber.stateNode, typeof prevHostParent.componentWillUnmount === "function" && safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, prevHostParent));
      recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
      break;
    case 21:
      recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
      break;
    case 22:
      offscreenSubtreeWasHidden = (prevHostParent = offscreenSubtreeWasHidden) || deletedFiber.memoizedState !== null;
      recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
      offscreenSubtreeWasHidden = prevHostParent;
      break;
    default:
      recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
  }
}
function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
  if (finishedWork.memoizedState === null && (finishedRoot = finishedWork.alternate, finishedRoot !== null && (finishedRoot = finishedRoot.memoizedState, finishedRoot !== null && (finishedRoot = finishedRoot.dehydrated, finishedRoot !== null))))
    try {
      retryIfBlockedOn(finishedRoot);
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
}
function getRetryCache(finishedWork) {
  switch (finishedWork.tag) {
    case 13:
    case 19:
      var retryCache = finishedWork.stateNode;
      retryCache === null && (retryCache = finishedWork.stateNode = new PossiblyWeakSet);
      return retryCache;
    case 22:
      return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, retryCache === null && (retryCache = finishedWork._retryCache = new PossiblyWeakSet), retryCache;
    default:
      throw Error(formatProdErrorMessage2(435, finishedWork.tag));
  }
}
function attachSuspenseRetryListeners(finishedWork, wakeables) {
  var retryCache = getRetryCache(finishedWork);
  wakeables.forEach(function(wakeable) {
    var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
    retryCache.has(wakeable) || (retryCache.add(wakeable), wakeable.then(retry, retry));
  });
}
function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
  var deletions = parentFiber.deletions;
  if (deletions !== null)
    for (var i = 0;i < deletions.length; i++) {
      var childToDelete = deletions[i], root2 = root$jscomp$0, returnFiber = parentFiber, parent = returnFiber;
      a:
        for (;parent !== null; ) {
          switch (parent.tag) {
            case 27:
              if (isSingletonScope(parent.type)) {
                hostParent = parent.stateNode;
                hostParentIsContainer = false;
                break a;
              }
              break;
            case 5:
              hostParent = parent.stateNode;
              hostParentIsContainer = false;
              break a;
            case 3:
            case 4:
              hostParent = parent.stateNode.containerInfo;
              hostParentIsContainer = true;
              break a;
          }
          parent = parent.return;
        }
      if (hostParent === null)
        throw Error(formatProdErrorMessage2(160));
      commitDeletionEffectsOnFiber(root2, returnFiber, childToDelete);
      hostParent = null;
      hostParentIsContainer = false;
      root2 = childToDelete.alternate;
      root2 !== null && (root2.return = null);
      childToDelete.return = null;
    }
  if (parentFiber.subtreeFlags & 13878)
    for (parentFiber = parentFiber.child;parentFiber !== null; )
      commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
}
function commitMutationEffectsOnFiber(finishedWork, root2) {
  var { alternate: current, flags } = finishedWork;
  switch (finishedWork.tag) {
    case 0:
    case 11:
    case 14:
    case 15:
      recursivelyTraverseMutationEffects(root2, finishedWork);
      commitReconciliationEffects(finishedWork);
      flags & 4 && (commitHookEffectListUnmount(3, finishedWork, finishedWork.return), commitHookEffectListMount(3, finishedWork), commitHookEffectListUnmount(5, finishedWork, finishedWork.return));
      break;
    case 1:
      recursivelyTraverseMutationEffects(root2, finishedWork);
      commitReconciliationEffects(finishedWork);
      flags & 512 && (offscreenSubtreeWasHidden || current === null || safelyDetachRef(current, current.return));
      flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, finishedWork !== null && (flags = finishedWork.callbacks, flags !== null && (current = finishedWork.shared.hiddenCallbacks, finishedWork.shared.hiddenCallbacks = current === null ? flags : current.concat(flags))));
      break;
    case 26:
      var hoistableRoot = currentHoistableRoot;
      recursivelyTraverseMutationEffects(root2, finishedWork);
      commitReconciliationEffects(finishedWork);
      flags & 512 && (offscreenSubtreeWasHidden || current === null || safelyDetachRef(current, current.return));
      if (flags & 4) {
        var currentResource = current !== null ? current.memoizedState : null;
        flags = finishedWork.memoizedState;
        if (current === null)
          if (flags === null)
            if (finishedWork.stateNode === null) {
              a: {
                flags = finishedWork.type;
                current = finishedWork.memoizedProps;
                hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
                b:
                  switch (flags) {
                    case "title":
                      currentResource = hoistableRoot.getElementsByTagName("title")[0];
                      if (!currentResource || currentResource[internalHoistableMarker] || currentResource[internalInstanceKey] || currentResource.namespaceURI === "http://www.w3.org/2000/svg" || currentResource.hasAttribute("itemprop"))
                        currentResource = hoistableRoot.createElement(flags), hoistableRoot.head.insertBefore(currentResource, hoistableRoot.querySelector("head > title"));
                      setInitialProperties(currentResource, flags, current);
                      currentResource[internalInstanceKey] = finishedWork;
                      markNodeAsHoistable(currentResource);
                      flags = currentResource;
                      break a;
                    case "link":
                      var maybeNodes = getHydratableHoistableCache("link", "href", hoistableRoot).get(flags + (current.href || ""));
                      if (maybeNodes) {
                        for (var i = 0;i < maybeNodes.length; i++)
                          if (currentResource = maybeNodes[i], currentResource.getAttribute("href") === (current.href == null || current.href === "" ? null : current.href) && currentResource.getAttribute("rel") === (current.rel == null ? null : current.rel) && currentResource.getAttribute("title") === (current.title == null ? null : current.title) && currentResource.getAttribute("crossorigin") === (current.crossOrigin == null ? null : current.crossOrigin)) {
                            maybeNodes.splice(i, 1);
                            break b;
                          }
                      }
                      currentResource = hoistableRoot.createElement(flags);
                      setInitialProperties(currentResource, flags, current);
                      hoistableRoot.head.appendChild(currentResource);
                      break;
                    case "meta":
                      if (maybeNodes = getHydratableHoistableCache("meta", "content", hoistableRoot).get(flags + (current.content || ""))) {
                        for (i = 0;i < maybeNodes.length; i++)
                          if (currentResource = maybeNodes[i], currentResource.getAttribute("content") === (current.content == null ? null : "" + current.content) && currentResource.getAttribute("name") === (current.name == null ? null : current.name) && currentResource.getAttribute("property") === (current.property == null ? null : current.property) && currentResource.getAttribute("http-equiv") === (current.httpEquiv == null ? null : current.httpEquiv) && currentResource.getAttribute("charset") === (current.charSet == null ? null : current.charSet)) {
                            maybeNodes.splice(i, 1);
                            break b;
                          }
                      }
                      currentResource = hoistableRoot.createElement(flags);
                      setInitialProperties(currentResource, flags, current);
                      hoistableRoot.head.appendChild(currentResource);
                      break;
                    default:
                      throw Error(formatProdErrorMessage2(468, flags));
                  }
                currentResource[internalInstanceKey] = finishedWork;
                markNodeAsHoistable(currentResource);
                flags = currentResource;
              }
              finishedWork.stateNode = flags;
            } else
              mountHoistable(hoistableRoot, finishedWork.type, finishedWork.stateNode);
          else
            finishedWork.stateNode = acquireResource(hoistableRoot, flags, finishedWork.memoizedProps);
        else
          currentResource !== flags ? (currentResource === null ? current.stateNode !== null && (current = current.stateNode, current.parentNode.removeChild(current)) : currentResource.count--, flags === null ? mountHoistable(hoistableRoot, finishedWork.type, finishedWork.stateNode) : acquireResource(hoistableRoot, flags, finishedWork.memoizedProps)) : flags === null && finishedWork.stateNode !== null && commitHostUpdate(finishedWork, finishedWork.memoizedProps, current.memoizedProps);
      }
      break;
    case 27:
      recursivelyTraverseMutationEffects(root2, finishedWork);
      commitReconciliationEffects(finishedWork);
      flags & 512 && (offscreenSubtreeWasHidden || current === null || safelyDetachRef(current, current.return));
      current !== null && flags & 4 && commitHostUpdate(finishedWork, finishedWork.memoizedProps, current.memoizedProps);
      break;
    case 5:
      recursivelyTraverseMutationEffects(root2, finishedWork);
      commitReconciliationEffects(finishedWork);
      flags & 512 && (offscreenSubtreeWasHidden || current === null || safelyDetachRef(current, current.return));
      if (finishedWork.flags & 32) {
        hoistableRoot = finishedWork.stateNode;
        try {
          setTextContent(hoistableRoot, "");
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      flags & 4 && finishedWork.stateNode != null && (hoistableRoot = finishedWork.memoizedProps, commitHostUpdate(finishedWork, hoistableRoot, current !== null ? current.memoizedProps : hoistableRoot));
      flags & 1024 && (needsFormReset = true);
      break;
    case 6:
      recursivelyTraverseMutationEffects(root2, finishedWork);
      commitReconciliationEffects(finishedWork);
      if (flags & 4) {
        if (finishedWork.stateNode === null)
          throw Error(formatProdErrorMessage2(162));
        flags = finishedWork.memoizedProps;
        current = finishedWork.stateNode;
        try {
          current.nodeValue = flags;
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      break;
    case 3:
      tagCaches = null;
      hoistableRoot = currentHoistableRoot;
      currentHoistableRoot = getHoistableRoot(root2.containerInfo);
      recursivelyTraverseMutationEffects(root2, finishedWork);
      currentHoistableRoot = hoistableRoot;
      commitReconciliationEffects(finishedWork);
      if (flags & 4 && current !== null && current.memoizedState.isDehydrated)
        try {
          retryIfBlockedOn(root2.containerInfo);
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      needsFormReset && (needsFormReset = false, recursivelyResetForms(finishedWork));
      break;
    case 4:
      flags = currentHoistableRoot;
      currentHoistableRoot = getHoistableRoot(finishedWork.stateNode.containerInfo);
      recursivelyTraverseMutationEffects(root2, finishedWork);
      commitReconciliationEffects(finishedWork);
      currentHoistableRoot = flags;
      break;
    case 12:
      recursivelyTraverseMutationEffects(root2, finishedWork);
      commitReconciliationEffects(finishedWork);
      break;
    case 13:
      recursivelyTraverseMutationEffects(root2, finishedWork);
      commitReconciliationEffects(finishedWork);
      finishedWork.child.flags & 8192 && finishedWork.memoizedState !== null !== (current !== null && current.memoizedState !== null) && (globalMostRecentFallbackTime = now());
      flags & 4 && (flags = finishedWork.updateQueue, flags !== null && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
      break;
    case 22:
      hoistableRoot = finishedWork.memoizedState !== null;
      var wasHidden = current !== null && current.memoizedState !== null, prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
      offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || hoistableRoot;
      offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
      recursivelyTraverseMutationEffects(root2, finishedWork);
      offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
      offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
      commitReconciliationEffects(finishedWork);
      if (flags & 8192)
        a:
          for (root2 = finishedWork.stateNode, root2._visibility = hoistableRoot ? root2._visibility & -2 : root2._visibility | 1, hoistableRoot && (current === null || wasHidden || offscreenSubtreeIsHidden || offscreenSubtreeWasHidden || recursivelyTraverseDisappearLayoutEffects(finishedWork)), current = null, root2 = finishedWork;; ) {
            if (root2.tag === 5 || root2.tag === 26) {
              if (current === null) {
                wasHidden = current = root2;
                try {
                  if (currentResource = wasHidden.stateNode, hoistableRoot)
                    maybeNodes = currentResource.style, typeof maybeNodes.setProperty === "function" ? maybeNodes.setProperty("display", "none", "important") : maybeNodes.display = "none";
                  else {
                    i = wasHidden.stateNode;
                    var styleProp = wasHidden.memoizedProps.style, display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
                    i.style.display = display == null || typeof display === "boolean" ? "" : ("" + display).trim();
                  }
                } catch (error) {
                  captureCommitPhaseError(wasHidden, wasHidden.return, error);
                }
              }
            } else if (root2.tag === 6) {
              if (current === null) {
                wasHidden = root2;
                try {
                  wasHidden.stateNode.nodeValue = hoistableRoot ? "" : wasHidden.memoizedProps;
                } catch (error) {
                  captureCommitPhaseError(wasHidden, wasHidden.return, error);
                }
              }
            } else if ((root2.tag !== 22 && root2.tag !== 23 || root2.memoizedState === null || root2 === finishedWork) && root2.child !== null) {
              root2.child.return = root2;
              root2 = root2.child;
              continue;
            }
            if (root2 === finishedWork)
              break a;
            for (;root2.sibling === null; ) {
              if (root2.return === null || root2.return === finishedWork)
                break a;
              current === root2 && (current = null);
              root2 = root2.return;
            }
            current === root2 && (current = null);
            root2.sibling.return = root2.return;
            root2 = root2.sibling;
          }
      flags & 4 && (flags = finishedWork.updateQueue, flags !== null && (current = flags.retryQueue, current !== null && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, current))));
      break;
    case 19:
      recursivelyTraverseMutationEffects(root2, finishedWork);
      commitReconciliationEffects(finishedWork);
      flags & 4 && (flags = finishedWork.updateQueue, flags !== null && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
      break;
    case 30:
      break;
    case 21:
      break;
    default:
      recursivelyTraverseMutationEffects(root2, finishedWork), commitReconciliationEffects(finishedWork);
  }
}
function commitReconciliationEffects(finishedWork) {
  var flags = finishedWork.flags;
  if (flags & 2) {
    try {
      for (var hostParentFiber, parentFiber = finishedWork.return;parentFiber !== null; ) {
        if (isHostParent(parentFiber)) {
          hostParentFiber = parentFiber;
          break;
        }
        parentFiber = parentFiber.return;
      }
      if (hostParentFiber == null)
        throw Error(formatProdErrorMessage2(160));
      switch (hostParentFiber.tag) {
        case 27:
          var parent = hostParentFiber.stateNode, before = getHostSibling(finishedWork);
          insertOrAppendPlacementNode(finishedWork, before, parent);
          break;
        case 5:
          var parent$144 = hostParentFiber.stateNode;
          hostParentFiber.flags & 32 && (setTextContent(parent$144, ""), hostParentFiber.flags &= -33);
          var before$145 = getHostSibling(finishedWork);
          insertOrAppendPlacementNode(finishedWork, before$145, parent$144);
          break;
        case 3:
        case 4:
          var parent$146 = hostParentFiber.stateNode.containerInfo, before$147 = getHostSibling(finishedWork);
          insertOrAppendPlacementNodeIntoContainer(finishedWork, before$147, parent$146);
          break;
        default:
          throw Error(formatProdErrorMessage2(161));
      }
    } catch (error) {
      captureCommitPhaseError(finishedWork, finishedWork.return, error);
    }
    finishedWork.flags &= -3;
  }
  flags & 4096 && (finishedWork.flags &= -4097);
}
function recursivelyResetForms(parentFiber) {
  if (parentFiber.subtreeFlags & 1024)
    for (parentFiber = parentFiber.child;parentFiber !== null; ) {
      var fiber = parentFiber;
      recursivelyResetForms(fiber);
      fiber.tag === 5 && fiber.flags & 1024 && fiber.stateNode.reset();
      parentFiber = parentFiber.sibling;
    }
}
function recursivelyTraverseLayoutEffects(root2, parentFiber) {
  if (parentFiber.subtreeFlags & 8772)
    for (parentFiber = parentFiber.child;parentFiber !== null; )
      commitLayoutEffectOnFiber(root2, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
}
function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
  for (parentFiber = parentFiber.child;parentFiber !== null; ) {
    var finishedWork = parentFiber;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 14:
      case 15:
        commitHookEffectListUnmount(4, finishedWork, finishedWork.return);
        recursivelyTraverseDisappearLayoutEffects(finishedWork);
        break;
      case 1:
        safelyDetachRef(finishedWork, finishedWork.return);
        var instance = finishedWork.stateNode;
        typeof instance.componentWillUnmount === "function" && safelyCallComponentWillUnmount(finishedWork, finishedWork.return, instance);
        recursivelyTraverseDisappearLayoutEffects(finishedWork);
        break;
      case 27:
        releaseSingletonInstance(finishedWork.stateNode);
      case 26:
      case 5:
        safelyDetachRef(finishedWork, finishedWork.return);
        recursivelyTraverseDisappearLayoutEffects(finishedWork);
        break;
      case 22:
        finishedWork.memoizedState === null && recursivelyTraverseDisappearLayoutEffects(finishedWork);
        break;
      case 30:
        recursivelyTraverseDisappearLayoutEffects(finishedWork);
        break;
      default:
        recursivelyTraverseDisappearLayoutEffects(finishedWork);
    }
    parentFiber = parentFiber.sibling;
  }
}
function recursivelyTraverseReappearLayoutEffects(finishedRoot$jscomp$0, parentFiber, includeWorkInProgressEffects) {
  includeWorkInProgressEffects = includeWorkInProgressEffects && (parentFiber.subtreeFlags & 8772) !== 0;
  for (parentFiber = parentFiber.child;parentFiber !== null; ) {
    var current = parentFiber.alternate, finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
        commitHookEffectListMount(4, finishedWork);
        break;
      case 1:
        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
        current = finishedWork;
        finishedRoot = current.stateNode;
        if (typeof finishedRoot.componentDidMount === "function")
          try {
            finishedRoot.componentDidMount();
          } catch (error) {
            captureCommitPhaseError(current, current.return, error);
          }
        current = finishedWork;
        finishedRoot = current.updateQueue;
        if (finishedRoot !== null) {
          var instance = current.stateNode;
          try {
            var hiddenCallbacks = finishedRoot.shared.hiddenCallbacks;
            if (hiddenCallbacks !== null)
              for (finishedRoot.shared.hiddenCallbacks = null, finishedRoot = 0;finishedRoot < hiddenCallbacks.length; finishedRoot++)
                callCallback(hiddenCallbacks[finishedRoot], instance);
          } catch (error) {
            captureCommitPhaseError(current, current.return, error);
          }
        }
        includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
        safelyAttachRef(finishedWork, finishedWork.return);
        break;
      case 27:
        commitHostSingletonAcquisition(finishedWork);
      case 26:
      case 5:
        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
        includeWorkInProgressEffects && current === null && flags & 4 && commitHostMount(finishedWork);
        safelyAttachRef(finishedWork, finishedWork.return);
        break;
      case 12:
        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
        break;
      case 13:
        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
        includeWorkInProgressEffects && flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
        break;
      case 22:
        finishedWork.memoizedState === null && recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
        safelyAttachRef(finishedWork, finishedWork.return);
        break;
      case 30:
        break;
      default:
        recursivelyTraverseReappearLayoutEffects(finishedRoot, finishedWork, includeWorkInProgressEffects);
    }
    parentFiber = parentFiber.sibling;
  }
}
function commitOffscreenPassiveMountEffects(current, finishedWork) {
  var previousCache = null;
  current !== null && current.memoizedState !== null && current.memoizedState.cachePool !== null && (previousCache = current.memoizedState.cachePool.pool);
  current = null;
  finishedWork.memoizedState !== null && finishedWork.memoizedState.cachePool !== null && (current = finishedWork.memoizedState.cachePool.pool);
  current !== previousCache && (current != null && current.refCount++, previousCache != null && releaseCache(previousCache));
}
function commitCachePassiveMountEffect(current, finishedWork) {
  current = null;
  finishedWork.alternate !== null && (current = finishedWork.alternate.memoizedState.cache);
  finishedWork = finishedWork.memoizedState.cache;
  finishedWork !== current && (finishedWork.refCount++, current != null && releaseCache(current));
}
function recursivelyTraversePassiveMountEffects(root2, parentFiber, committedLanes, committedTransitions) {
  if (parentFiber.subtreeFlags & 10256)
    for (parentFiber = parentFiber.child;parentFiber !== null; )
      commitPassiveMountOnFiber(root2, parentFiber, committedLanes, committedTransitions), parentFiber = parentFiber.sibling;
}
function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
  var flags = finishedWork.flags;
  switch (finishedWork.tag) {
    case 0:
    case 11:
    case 15:
      recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
      flags & 2048 && commitHookEffectListMount(9, finishedWork);
      break;
    case 1:
      recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
      break;
    case 3:
      recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
      flags & 2048 && (finishedRoot = null, finishedWork.alternate !== null && (finishedRoot = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== finishedRoot && (finishedWork.refCount++, finishedRoot != null && releaseCache(finishedRoot)));
      break;
    case 12:
      if (flags & 2048) {
        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
        finishedRoot = finishedWork.stateNode;
        try {
          var _finishedWork$memoize2 = finishedWork.memoizedProps, id = _finishedWork$memoize2.id, onPostCommit = _finishedWork$memoize2.onPostCommit;
          typeof onPostCommit === "function" && onPostCommit(id, finishedWork.alternate === null ? "mount" : "update", finishedRoot.passiveEffectDuration, -0);
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      } else
        recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
      break;
    case 13:
      recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
      break;
    case 23:
      break;
    case 22:
      _finishedWork$memoize2 = finishedWork.stateNode;
      id = finishedWork.alternate;
      finishedWork.memoizedState !== null ? _finishedWork$memoize2._visibility & 2 ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : _finishedWork$memoize2._visibility & 2 ? recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions) : (_finishedWork$memoize2._visibility |= 2, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, (finishedWork.subtreeFlags & 10256) !== 0));
      flags & 2048 && commitOffscreenPassiveMountEffects(id, finishedWork);
      break;
    case 24:
      recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
      flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
      break;
    default:
      recursivelyTraversePassiveMountEffects(finishedRoot, finishedWork, committedLanes, committedTransitions);
  }
}
function recursivelyTraverseReconnectPassiveEffects(finishedRoot$jscomp$0, parentFiber, committedLanes$jscomp$0, committedTransitions$jscomp$0, includeWorkInProgressEffects) {
  includeWorkInProgressEffects = includeWorkInProgressEffects && (parentFiber.subtreeFlags & 10256) !== 0;
  for (parentFiber = parentFiber.child;parentFiber !== null; ) {
    var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, committedLanes = committedLanes$jscomp$0, committedTransitions = committedTransitions$jscomp$0, flags = finishedWork.flags;
    switch (finishedWork.tag) {
      case 0:
      case 11:
      case 15:
        recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
        commitHookEffectListMount(8, finishedWork);
        break;
      case 23:
        break;
      case 22:
        var instance = finishedWork.stateNode;
        finishedWork.memoizedState !== null ? instance._visibility & 2 ? recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects) : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : (instance._visibility |= 2, recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects));
        includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
        break;
      case 24:
        recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
        includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
        break;
      default:
        recursivelyTraverseReconnectPassiveEffects(finishedRoot, finishedWork, committedLanes, committedTransitions, includeWorkInProgressEffects);
    }
    parentFiber = parentFiber.sibling;
  }
}
function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
  if (parentFiber.subtreeFlags & 10256)
    for (parentFiber = parentFiber.child;parentFiber !== null; ) {
      var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
      switch (finishedWork.tag) {
        case 22:
          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
          flags & 2048 && commitOffscreenPassiveMountEffects(finishedWork.alternate, finishedWork);
          break;
        case 24:
          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
          flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
          break;
        default:
          recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
      }
      parentFiber = parentFiber.sibling;
    }
}
function recursivelyAccumulateSuspenseyCommit(parentFiber) {
  if (parentFiber.subtreeFlags & suspenseyCommitFlag)
    for (parentFiber = parentFiber.child;parentFiber !== null; )
      accumulateSuspenseyCommitOnFiber(parentFiber), parentFiber = parentFiber.sibling;
}
function accumulateSuspenseyCommitOnFiber(fiber) {
  switch (fiber.tag) {
    case 26:
      recursivelyAccumulateSuspenseyCommit(fiber);
      fiber.flags & suspenseyCommitFlag && fiber.memoizedState !== null && suspendResource(currentHoistableRoot, fiber.memoizedState, fiber.memoizedProps);
      break;
    case 5:
      recursivelyAccumulateSuspenseyCommit(fiber);
      break;
    case 3:
    case 4:
      var previousHoistableRoot = currentHoistableRoot;
      currentHoistableRoot = getHoistableRoot(fiber.stateNode.containerInfo);
      recursivelyAccumulateSuspenseyCommit(fiber);
      currentHoistableRoot = previousHoistableRoot;
      break;
    case 22:
      fiber.memoizedState === null && (previousHoistableRoot = fiber.alternate, previousHoistableRoot !== null && previousHoistableRoot.memoizedState !== null ? (previousHoistableRoot = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber), suspenseyCommitFlag = previousHoistableRoot) : recursivelyAccumulateSuspenseyCommit(fiber));
      break;
    default:
      recursivelyAccumulateSuspenseyCommit(fiber);
  }
}
function detachAlternateSiblings(parentFiber) {
  var previousFiber = parentFiber.alternate;
  if (previousFiber !== null && (parentFiber = previousFiber.child, parentFiber !== null)) {
    previousFiber.child = null;
    do
      previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
    while (parentFiber !== null);
  }
}
function recursivelyTraversePassiveUnmountEffects(parentFiber) {
  var deletions = parentFiber.deletions;
  if ((parentFiber.flags & 16) !== 0) {
    if (deletions !== null)
      for (var i = 0;i < deletions.length; i++) {
        var childToDelete = deletions[i];
        nextEffect = childToDelete;
        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
      }
    detachAlternateSiblings(parentFiber);
  }
  if (parentFiber.subtreeFlags & 10256)
    for (parentFiber = parentFiber.child;parentFiber !== null; )
      commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
}
function commitPassiveUnmountOnFiber(finishedWork) {
  switch (finishedWork.tag) {
    case 0:
    case 11:
    case 15:
      recursivelyTraversePassiveUnmountEffects(finishedWork);
      finishedWork.flags & 2048 && commitHookEffectListUnmount(9, finishedWork, finishedWork.return);
      break;
    case 3:
      recursivelyTraversePassiveUnmountEffects(finishedWork);
      break;
    case 12:
      recursivelyTraversePassiveUnmountEffects(finishedWork);
      break;
    case 22:
      var instance = finishedWork.stateNode;
      finishedWork.memoizedState !== null && instance._visibility & 2 && (finishedWork.return === null || finishedWork.return.tag !== 13) ? (instance._visibility &= -3, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
      break;
    default:
      recursivelyTraversePassiveUnmountEffects(finishedWork);
  }
}
function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
  var deletions = parentFiber.deletions;
  if ((parentFiber.flags & 16) !== 0) {
    if (deletions !== null)
      for (var i = 0;i < deletions.length; i++) {
        var childToDelete = deletions[i];
        nextEffect = childToDelete;
        commitPassiveUnmountEffectsInsideOfDeletedTree_begin(childToDelete, parentFiber);
      }
    detachAlternateSiblings(parentFiber);
  }
  for (parentFiber = parentFiber.child;parentFiber !== null; ) {
    deletions = parentFiber;
    switch (deletions.tag) {
      case 0:
      case 11:
      case 15:
        commitHookEffectListUnmount(8, deletions, deletions.return);
        recursivelyTraverseDisconnectPassiveEffects(deletions);
        break;
      case 22:
        i = deletions.stateNode;
        i._visibility & 2 && (i._visibility &= -3, recursivelyTraverseDisconnectPassiveEffects(deletions));
        break;
      default:
        recursivelyTraverseDisconnectPassiveEffects(deletions);
    }
    parentFiber = parentFiber.sibling;
  }
}
function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
  for (;nextEffect !== null; ) {
    var fiber = nextEffect;
    switch (fiber.tag) {
      case 0:
      case 11:
      case 15:
        commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);
        break;
      case 23:
      case 22:
        if (fiber.memoizedState !== null && fiber.memoizedState.cachePool !== null) {
          var cache = fiber.memoizedState.cachePool.pool;
          cache != null && cache.refCount++;
        }
        break;
      case 24:
        releaseCache(fiber.memoizedState.cache);
    }
    cache = fiber.child;
    if (cache !== null)
      cache.return = fiber, nextEffect = cache;
    else
      a:
        for (fiber = deletedSubtreeRoot;nextEffect !== null; ) {
          cache = nextEffect;
          var { sibling, return: returnFiber } = cache;
          detachFiberAfterEffects(cache);
          if (cache === fiber) {
            nextEffect = null;
            break a;
          }
          if (sibling !== null) {
            sibling.return = returnFiber;
            nextEffect = sibling;
            break a;
          }
          nextEffect = returnFiber;
        }
  }
}
function requestUpdateLane() {
  if ((executionContext & 2) !== 0 && workInProgressRootRenderLanes !== 0)
    return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
  if (ReactSharedInternals3.T !== null) {
    var actionScopeLane = currentEntangledLane;
    return actionScopeLane !== 0 ? actionScopeLane : requestTransitionLane();
  }
  return resolveUpdatePriority();
}
function requestDeferredLane() {
  workInProgressDeferredLane === 0 && (workInProgressDeferredLane = (workInProgressRootRenderLanes & 536870912) === 0 || isHydrating ? claimNextTransitionLane() : 536870912);
  var suspenseHandler = suspenseHandlerStackCursor.current;
  suspenseHandler !== null && (suspenseHandler.flags |= 32);
  return workInProgressDeferredLane;
}
function scheduleUpdateOnFiber(root2, fiber, lane) {
  if (root2 === workInProgressRoot && (workInProgressSuspendedReason === 2 || workInProgressSuspendedReason === 9) || root2.cancelPendingCommit !== null)
    prepareFreshStack(root2, 0), markRootSuspended(root2, workInProgressRootRenderLanes, workInProgressDeferredLane, false);
  markRootUpdated$1(root2, lane);
  if ((executionContext & 2) === 0 || root2 !== workInProgressRoot)
    root2 === workInProgressRoot && ((executionContext & 2) === 0 && (workInProgressRootInterleavedUpdatedLanes |= lane), workInProgressRootExitStatus === 4 && markRootSuspended(root2, workInProgressRootRenderLanes, workInProgressDeferredLane, false)), ensureRootIsScheduled(root2);
}
function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
  if ((executionContext & 6) !== 0)
    throw Error(formatProdErrorMessage2(327));
  var shouldTimeSlice = !forceSync && (lanes & 124) === 0 && (lanes & root$jscomp$0.expiredLanes) === 0 || checkIfRootIsPrerendering(root$jscomp$0, lanes), exitStatus = shouldTimeSlice ? renderRootConcurrent(root$jscomp$0, lanes) : renderRootSync(root$jscomp$0, lanes, true), renderWasConcurrent = shouldTimeSlice;
  do {
    if (exitStatus === 0) {
      workInProgressRootIsPrerendering && !shouldTimeSlice && markRootSuspended(root$jscomp$0, lanes, 0, false);
      break;
    } else {
      forceSync = root$jscomp$0.current.alternate;
      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
        exitStatus = renderRootSync(root$jscomp$0, lanes, false);
        renderWasConcurrent = false;
        continue;
      }
      if (exitStatus === 2) {
        renderWasConcurrent = lanes;
        if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent)
          var JSCompiler_inline_result = 0;
        else
          JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913, JSCompiler_inline_result = JSCompiler_inline_result !== 0 ? JSCompiler_inline_result : JSCompiler_inline_result & 536870912 ? 536870912 : 0;
        if (JSCompiler_inline_result !== 0) {
          lanes = JSCompiler_inline_result;
          a: {
            var root2 = root$jscomp$0;
            exitStatus = workInProgressRootConcurrentErrors;
            var wasRootDehydrated = root2.current.memoizedState.isDehydrated;
            wasRootDehydrated && (prepareFreshStack(root2, JSCompiler_inline_result).flags |= 256);
            JSCompiler_inline_result = renderRootSync(root2, JSCompiler_inline_result, false);
            if (JSCompiler_inline_result !== 2) {
              if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {
                root2.errorRecoveryDisabledLanes |= renderWasConcurrent;
                workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent;
                exitStatus = 4;
                break a;
              }
              renderWasConcurrent = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = exitStatus;
              renderWasConcurrent !== null && (workInProgressRootRecoverableErrors === null ? workInProgressRootRecoverableErrors = renderWasConcurrent : workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, renderWasConcurrent));
            }
            exitStatus = JSCompiler_inline_result;
          }
          renderWasConcurrent = false;
          if (exitStatus !== 2)
            continue;
        }
      }
      if (exitStatus === 1) {
        prepareFreshStack(root$jscomp$0, 0);
        markRootSuspended(root$jscomp$0, lanes, 0, true);
        break;
      }
      a: {
        shouldTimeSlice = root$jscomp$0;
        renderWasConcurrent = exitStatus;
        switch (renderWasConcurrent) {
          case 0:
          case 1:
            throw Error(formatProdErrorMessage2(345));
          case 4:
            if ((lanes & 4194048) !== lanes)
              break;
          case 6:
            markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
            break a;
          case 2:
            workInProgressRootRecoverableErrors = null;
            break;
          case 3:
          case 5:
            break;
          default:
            throw Error(formatProdErrorMessage2(329));
        }
        if ((lanes & 62914560) === lanes && (exitStatus = globalMostRecentFallbackTime + 300 - now(), 10 < exitStatus)) {
          markRootSuspended(shouldTimeSlice, lanes, workInProgressDeferredLane, !workInProgressRootDidSkipSuspendedSiblings);
          if (getNextLanes(shouldTimeSlice, 0, true) !== 0)
            break a;
          shouldTimeSlice.timeoutHandle = scheduleTimeout(commitRootWhenReady.bind(null, shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, renderWasConcurrent, 2, -0, 0), exitStatus);
          break a;
        }
        commitRootWhenReady(shouldTimeSlice, forceSync, workInProgressRootRecoverableErrors, workInProgressTransitions, workInProgressRootDidIncludeRecursiveRenderUpdate, lanes, workInProgressDeferredLane, workInProgressRootInterleavedUpdatedLanes, workInProgressSuspendedRetryLanes, workInProgressRootDidSkipSuspendedSiblings, renderWasConcurrent, 0, -0, 0);
      }
    }
    break;
  } while (1);
  ensureRootIsScheduled(root$jscomp$0);
}
function commitRootWhenReady(root2, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, exitStatus, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
  root2.timeoutHandle = -1;
  suspendedCommitReason = finishedWork.subtreeFlags;
  if (suspendedCommitReason & 8192 || (suspendedCommitReason & 16785408) === 16785408) {
    if (suspendedState = { stylesheets: null, count: 0, unsuspend: noop3 }, accumulateSuspenseyCommitOnFiber(finishedWork), suspendedCommitReason = waitForCommitToBeReady(), suspendedCommitReason !== null) {
      root2.cancelPendingCommit = suspendedCommitReason(commitRoot.bind(null, root2, finishedWork, lanes, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes, exitStatus, 1, completedRenderStartTime, completedRenderEndTime));
      markRootSuspended(root2, lanes, spawnedLane, !didSkipSuspendedSiblings);
      return;
    }
  }
  commitRoot(root2, finishedWork, lanes, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes);
}
function isRenderConsistentWithExternalStores(finishedWork) {
  for (var node = finishedWork;; ) {
    var tag = node.tag;
    if ((tag === 0 || tag === 11 || tag === 15) && node.flags & 16384 && (tag = node.updateQueue, tag !== null && (tag = tag.stores, tag !== null)))
      for (var i = 0;i < tag.length; i++) {
        var check = tag[i], getSnapshot = check.getSnapshot;
        check = check.value;
        try {
          if (!objectIs(getSnapshot(), check))
            return false;
        } catch (error) {
          return false;
        }
      }
    tag = node.child;
    if (node.subtreeFlags & 16384 && tag !== null)
      tag.return = node, node = tag;
    else {
      if (node === finishedWork)
        break;
      for (;node.sibling === null; ) {
        if (node.return === null || node.return === finishedWork)
          return true;
        node = node.return;
      }
      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
  return true;
}
function markRootSuspended(root2, suspendedLanes, spawnedLane, didAttemptEntireTree) {
  suspendedLanes &= ~workInProgressRootPingedLanes;
  suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
  root2.suspendedLanes |= suspendedLanes;
  root2.pingedLanes &= ~suspendedLanes;
  didAttemptEntireTree && (root2.warmLanes |= suspendedLanes);
  didAttemptEntireTree = root2.expirationTimes;
  for (var lanes = suspendedLanes;0 < lanes; ) {
    var index$4 = 31 - clz32(lanes), lane = 1 << index$4;
    didAttemptEntireTree[index$4] = -1;
    lanes &= ~lane;
  }
  spawnedLane !== 0 && markSpawnedDeferredLane(root2, spawnedLane, suspendedLanes);
}
function flushSyncWork$1() {
  return (executionContext & 6) === 0 ? (flushSyncWorkAcrossRoots_impl(0, false), false) : true;
}
function resetWorkInProgressStack() {
  if (workInProgress !== null) {
    if (workInProgressSuspendedReason === 0)
      var interruptedWork = workInProgress.return;
    else
      interruptedWork = workInProgress, lastContextDependency = currentlyRenderingFiber$1 = null, resetHooksOnUnwind(interruptedWork), thenableState = null, thenableIndexCounter = 0, interruptedWork = workInProgress;
    for (;interruptedWork !== null; )
      unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
    workInProgress = null;
  }
}
function prepareFreshStack(root2, lanes) {
  var timeoutHandle = root2.timeoutHandle;
  timeoutHandle !== -1 && (root2.timeoutHandle = -1, cancelTimeout(timeoutHandle));
  timeoutHandle = root2.cancelPendingCommit;
  timeoutHandle !== null && (root2.cancelPendingCommit = null, timeoutHandle());
  resetWorkInProgressStack();
  workInProgressRoot = root2;
  workInProgress = timeoutHandle = createWorkInProgress(root2.current, null);
  workInProgressRootRenderLanes = lanes;
  workInProgressSuspendedReason = 0;
  workInProgressThrownValue = null;
  workInProgressRootDidSkipSuspendedSiblings = false;
  workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root2, lanes);
  workInProgressRootDidAttachPingListener = false;
  workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = workInProgressRootExitStatus = 0;
  workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
  workInProgressRootDidIncludeRecursiveRenderUpdate = false;
  (lanes & 8) !== 0 && (lanes |= lanes & 32);
  var allEntangledLanes = root2.entangledLanes;
  if (allEntangledLanes !== 0)
    for (root2 = root2.entanglements, allEntangledLanes &= lanes;0 < allEntangledLanes; ) {
      var index$2 = 31 - clz32(allEntangledLanes), lane = 1 << index$2;
      lanes |= root2[index$2];
      allEntangledLanes &= ~lane;
    }
  entangledRenderLanes = lanes;
  finishQueueingConcurrentUpdates();
  return timeoutHandle;
}
function handleThrow(root2, thrownValue) {
  currentlyRenderingFiber = null;
  ReactSharedInternals3.H = ContextOnlyDispatcher;
  thrownValue === SuspenseException || thrownValue === SuspenseActionException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 3) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 4) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? 8 : thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function" ? 6 : 1;
  workInProgressThrownValue = thrownValue;
  workInProgress === null && (workInProgressRootExitStatus = 1, logUncaughtError(root2, createCapturedValueAtFiber(thrownValue, root2.current)));
}
function pushDispatcher() {
  var prevDispatcher = ReactSharedInternals3.H;
  ReactSharedInternals3.H = ContextOnlyDispatcher;
  return prevDispatcher === null ? ContextOnlyDispatcher : prevDispatcher;
}
function pushAsyncDispatcher() {
  var prevAsyncDispatcher = ReactSharedInternals3.A;
  ReactSharedInternals3.A = DefaultAsyncDispatcher;
  return prevAsyncDispatcher;
}
function renderDidSuspendDelayIfPossible() {
  workInProgressRootExitStatus = 4;
  workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194048) !== workInProgressRootRenderLanes && suspenseHandlerStackCursor.current !== null || (workInProgressRootIsPrerendering = true);
  (workInProgressRootSkippedLanes & 134217727) === 0 && (workInProgressRootInterleavedUpdatedLanes & 134217727) === 0 || workInProgressRoot === null || markRootSuspended(workInProgressRoot, workInProgressRootRenderLanes, workInProgressDeferredLane, false);
}
function renderRootSync(root2, lanes, shouldYieldForPrerendering) {
  var prevExecutionContext = executionContext;
  executionContext |= 2;
  var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
  if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes)
    workInProgressTransitions = null, prepareFreshStack(root2, lanes);
  lanes = false;
  var exitStatus = workInProgressRootExitStatus;
  a:
    do
      try {
        if (workInProgressSuspendedReason !== 0 && workInProgress !== null) {
          var unitOfWork = workInProgress, thrownValue = workInProgressThrownValue;
          switch (workInProgressSuspendedReason) {
            case 8:
              resetWorkInProgressStack();
              exitStatus = 6;
              break a;
            case 3:
            case 2:
            case 9:
            case 6:
              suspenseHandlerStackCursor.current === null && (lanes = true);
              var reason = workInProgressSuspendedReason;
              workInProgressSuspendedReason = 0;
              workInProgressThrownValue = null;
              throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason);
              if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                exitStatus = 0;
                break a;
              }
              break;
            default:
              reason = workInProgressSuspendedReason, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, reason);
          }
        }
        workLoopSync();
        exitStatus = workInProgressRootExitStatus;
        break;
      } catch (thrownValue$167) {
        handleThrow(root2, thrownValue$167);
      }
    while (1);
  lanes && root2.shellSuspendCounter++;
  lastContextDependency = currentlyRenderingFiber$1 = null;
  executionContext = prevExecutionContext;
  ReactSharedInternals3.H = prevDispatcher;
  ReactSharedInternals3.A = prevAsyncDispatcher;
  workInProgress === null && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
  return exitStatus;
}
function workLoopSync() {
  for (;workInProgress !== null; )
    performUnitOfWork(workInProgress);
}
function renderRootConcurrent(root2, lanes) {
  var prevExecutionContext = executionContext;
  executionContext |= 2;
  var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
  workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes ? (workInProgressTransitions = null, workInProgressRootRenderTargetTime = now() + 500, prepareFreshStack(root2, lanes)) : workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root2, lanes);
  a:
    do
      try {
        if (workInProgressSuspendedReason !== 0 && workInProgress !== null) {
          lanes = workInProgress;
          var thrownValue = workInProgressThrownValue;
          b:
            switch (workInProgressSuspendedReason) {
              case 1:
                workInProgressSuspendedReason = 0;
                workInProgressThrownValue = null;
                throwAndUnwindWorkLoop(root2, lanes, thrownValue, 1);
                break;
              case 2:
              case 9:
                if (isThenableResolved(thrownValue)) {
                  workInProgressSuspendedReason = 0;
                  workInProgressThrownValue = null;
                  replaySuspendedUnitOfWork(lanes);
                  break;
                }
                lanes = function() {
                  workInProgressSuspendedReason !== 2 && workInProgressSuspendedReason !== 9 || workInProgressRoot !== root2 || (workInProgressSuspendedReason = 7);
                  ensureRootIsScheduled(root2);
                };
                thrownValue.then(lanes, lanes);
                break a;
              case 3:
                workInProgressSuspendedReason = 7;
                break a;
              case 4:
                workInProgressSuspendedReason = 5;
                break a;
              case 7:
                isThenableResolved(thrownValue) ? (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root2, lanes, thrownValue, 7));
                break;
              case 5:
                var resource = null;
                switch (workInProgress.tag) {
                  case 26:
                    resource = workInProgress.memoizedState;
                  case 5:
                  case 27:
                    var hostFiber = workInProgress;
                    if (resource ? preloadResource(resource) : 1) {
                      workInProgressSuspendedReason = 0;
                      workInProgressThrownValue = null;
                      var sibling = hostFiber.sibling;
                      if (sibling !== null)
                        workInProgress = sibling;
                      else {
                        var returnFiber = hostFiber.return;
                        returnFiber !== null ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                      }
                      break b;
                    }
                }
                workInProgressSuspendedReason = 0;
                workInProgressThrownValue = null;
                throwAndUnwindWorkLoop(root2, lanes, thrownValue, 5);
                break;
              case 6:
                workInProgressSuspendedReason = 0;
                workInProgressThrownValue = null;
                throwAndUnwindWorkLoop(root2, lanes, thrownValue, 6);
                break;
              case 8:
                resetWorkInProgressStack();
                workInProgressRootExitStatus = 6;
                break a;
              default:
                throw Error(formatProdErrorMessage2(462));
            }
        }
        workLoopConcurrentByScheduler();
        break;
      } catch (thrownValue$169) {
        handleThrow(root2, thrownValue$169);
      }
    while (1);
  lastContextDependency = currentlyRenderingFiber$1 = null;
  ReactSharedInternals3.H = prevDispatcher;
  ReactSharedInternals3.A = prevAsyncDispatcher;
  executionContext = prevExecutionContext;
  if (workInProgress !== null)
    return 0;
  workInProgressRoot = null;
  workInProgressRootRenderLanes = 0;
  finishQueueingConcurrentUpdates();
  return workInProgressRootExitStatus;
}
function workLoopConcurrentByScheduler() {
  for (;workInProgress !== null && !shouldYield(); )
    performUnitOfWork(workInProgress);
}
function performUnitOfWork(unitOfWork) {
  var next = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes);
  unitOfWork.memoizedProps = unitOfWork.pendingProps;
  next === null ? completeUnitOfWork(unitOfWork) : workInProgress = next;
}
function replaySuspendedUnitOfWork(unitOfWork) {
  var next = unitOfWork;
  var current = next.alternate;
  switch (next.tag) {
    case 15:
    case 0:
      next = replayFunctionComponent(current, next, next.pendingProps, next.type, undefined, workInProgressRootRenderLanes);
      break;
    case 11:
      next = replayFunctionComponent(current, next, next.pendingProps, next.type.render, next.ref, workInProgressRootRenderLanes);
      break;
    case 5:
      resetHooksOnUnwind(next);
    default:
      unwindInterruptedWork(current, next), next = workInProgress = resetWorkInProgress(next, entangledRenderLanes), next = beginWork(current, next, entangledRenderLanes);
  }
  unitOfWork.memoizedProps = unitOfWork.pendingProps;
  next === null ? completeUnitOfWork(unitOfWork) : workInProgress = next;
}
function throwAndUnwindWorkLoop(root2, unitOfWork, thrownValue, suspendedReason) {
  lastContextDependency = currentlyRenderingFiber$1 = null;
  resetHooksOnUnwind(unitOfWork);
  thenableState = null;
  thenableIndexCounter = 0;
  var returnFiber = unitOfWork.return;
  try {
    if (throwException(root2, returnFiber, unitOfWork, thrownValue, workInProgressRootRenderLanes)) {
      workInProgressRootExitStatus = 1;
      logUncaughtError(root2, createCapturedValueAtFiber(thrownValue, root2.current));
      workInProgress = null;
      return;
    }
  } catch (error) {
    if (returnFiber !== null)
      throw workInProgress = returnFiber, error;
    workInProgressRootExitStatus = 1;
    logUncaughtError(root2, createCapturedValueAtFiber(thrownValue, root2.current));
    workInProgress = null;
    return;
  }
  if (unitOfWork.flags & 32768) {
    if (isHydrating || suspendedReason === 1)
      root2 = true;
    else if (workInProgressRootIsPrerendering || (workInProgressRootRenderLanes & 536870912) !== 0)
      root2 = false;
    else if (workInProgressRootDidSkipSuspendedSiblings = root2 = true, suspendedReason === 2 || suspendedReason === 9 || suspendedReason === 3 || suspendedReason === 6)
      suspendedReason = suspenseHandlerStackCursor.current, suspendedReason !== null && suspendedReason.tag === 13 && (suspendedReason.flags |= 16384);
    unwindUnitOfWork(unitOfWork, root2);
  } else
    completeUnitOfWork(unitOfWork);
}
function completeUnitOfWork(unitOfWork) {
  var completedWork = unitOfWork;
  do {
    if ((completedWork.flags & 32768) !== 0) {
      unwindUnitOfWork(completedWork, workInProgressRootDidSkipSuspendedSiblings);
      return;
    }
    unitOfWork = completedWork.return;
    var next = completeWork(completedWork.alternate, completedWork, entangledRenderLanes);
    if (next !== null) {
      workInProgress = next;
      return;
    }
    completedWork = completedWork.sibling;
    if (completedWork !== null) {
      workInProgress = completedWork;
      return;
    }
    workInProgress = completedWork = unitOfWork;
  } while (completedWork !== null);
  workInProgressRootExitStatus === 0 && (workInProgressRootExitStatus = 5);
}
function unwindUnitOfWork(unitOfWork, skipSiblings) {
  do {
    var next = unwindWork(unitOfWork.alternate, unitOfWork);
    if (next !== null) {
      next.flags &= 32767;
      workInProgress = next;
      return;
    }
    next = unitOfWork.return;
    next !== null && (next.flags |= 32768, next.subtreeFlags = 0, next.deletions = null);
    if (!skipSiblings && (unitOfWork = unitOfWork.sibling, unitOfWork !== null)) {
      workInProgress = unitOfWork;
      return;
    }
    workInProgress = unitOfWork = next;
  } while (unitOfWork !== null);
  workInProgressRootExitStatus = 6;
  workInProgress = null;
}
function commitRoot(root2, finishedWork, lanes, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes) {
  root2.cancelPendingCommit = null;
  do
    flushPendingEffects();
  while (pendingEffectsStatus !== 0);
  if ((executionContext & 6) !== 0)
    throw Error(formatProdErrorMessage2(327));
  if (finishedWork !== null) {
    if (finishedWork === root2.current)
      throw Error(formatProdErrorMessage2(177));
    didIncludeRenderPhaseUpdate = finishedWork.lanes | finishedWork.childLanes;
    didIncludeRenderPhaseUpdate |= concurrentlyUpdatedLanes;
    markRootFinished(root2, lanes, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes);
    root2 === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
    pendingFinishedWork = finishedWork;
    pendingEffectsRoot = root2;
    pendingEffectsLanes = lanes;
    pendingEffectsRemainingLanes = didIncludeRenderPhaseUpdate;
    pendingPassiveTransitions = transitions;
    pendingRecoverableErrors = recoverableErrors;
    (finishedWork.subtreeFlags & 10256) !== 0 || (finishedWork.flags & 10256) !== 0 ? (root2.callbackNode = null, root2.callbackPriority = 0, scheduleCallback$1(NormalPriority$1, function() {
      flushPassiveEffects(true);
      return null;
    })) : (root2.callbackNode = null, root2.callbackPriority = 0);
    recoverableErrors = (finishedWork.flags & 13878) !== 0;
    if ((finishedWork.subtreeFlags & 13878) !== 0 || recoverableErrors) {
      recoverableErrors = ReactSharedInternals3.T;
      ReactSharedInternals3.T = null;
      transitions = ReactDOMSharedInternals.p;
      ReactDOMSharedInternals.p = 2;
      spawnedLane = executionContext;
      executionContext |= 4;
      try {
        commitBeforeMutationEffects(root2, finishedWork, lanes);
      } finally {
        executionContext = spawnedLane, ReactDOMSharedInternals.p = transitions, ReactSharedInternals3.T = recoverableErrors;
      }
    }
    pendingEffectsStatus = 1;
    flushMutationEffects();
    flushLayoutEffects();
    flushSpawnedWork();
  }
}
function flushMutationEffects() {
  if (pendingEffectsStatus === 1) {
    pendingEffectsStatus = 0;
    var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, rootMutationHasEffect = (finishedWork.flags & 13878) !== 0;
    if ((finishedWork.subtreeFlags & 13878) !== 0 || rootMutationHasEffect) {
      rootMutationHasEffect = ReactSharedInternals3.T;
      ReactSharedInternals3.T = null;
      var previousPriority = ReactDOMSharedInternals.p;
      ReactDOMSharedInternals.p = 2;
      var prevExecutionContext = executionContext;
      executionContext |= 4;
      try {
        commitMutationEffectsOnFiber(finishedWork, root2);
        var priorSelectionInformation = selectionInformation, curFocusedElem = getActiveElementDeep(root2.containerInfo), priorFocusedElem = priorSelectionInformation.focusedElem, priorSelectionRange = priorSelectionInformation.selectionRange;
        if (curFocusedElem !== priorFocusedElem && priorFocusedElem && priorFocusedElem.ownerDocument && containsNode(priorFocusedElem.ownerDocument.documentElement, priorFocusedElem)) {
          if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
            var { start, end } = priorSelectionRange;
            end === undefined && (end = start);
            if ("selectionStart" in priorFocusedElem)
              priorFocusedElem.selectionStart = start, priorFocusedElem.selectionEnd = Math.min(end, priorFocusedElem.value.length);
            else {
              var doc = priorFocusedElem.ownerDocument || document, win = doc && doc.defaultView || window;
              if (win.getSelection) {
                var selection = win.getSelection(), length = priorFocusedElem.textContent.length, start$jscomp$0 = Math.min(priorSelectionRange.start, length), end$jscomp$0 = priorSelectionRange.end === undefined ? start$jscomp$0 : Math.min(priorSelectionRange.end, length);
                !selection.extend && start$jscomp$0 > end$jscomp$0 && (curFocusedElem = end$jscomp$0, end$jscomp$0 = start$jscomp$0, start$jscomp$0 = curFocusedElem);
                var startMarker = getNodeForCharacterOffset(priorFocusedElem, start$jscomp$0), endMarker = getNodeForCharacterOffset(priorFocusedElem, end$jscomp$0);
                if (startMarker && endMarker && (selection.rangeCount !== 1 || selection.anchorNode !== startMarker.node || selection.anchorOffset !== startMarker.offset || selection.focusNode !== endMarker.node || selection.focusOffset !== endMarker.offset)) {
                  var range = doc.createRange();
                  range.setStart(startMarker.node, startMarker.offset);
                  selection.removeAllRanges();
                  start$jscomp$0 > end$jscomp$0 ? (selection.addRange(range), selection.extend(endMarker.node, endMarker.offset)) : (range.setEnd(endMarker.node, endMarker.offset), selection.addRange(range));
                }
              }
            }
          }
          doc = [];
          for (selection = priorFocusedElem;selection = selection.parentNode; )
            selection.nodeType === 1 && doc.push({
              element: selection,
              left: selection.scrollLeft,
              top: selection.scrollTop
            });
          typeof priorFocusedElem.focus === "function" && priorFocusedElem.focus();
          for (priorFocusedElem = 0;priorFocusedElem < doc.length; priorFocusedElem++) {
            var info = doc[priorFocusedElem];
            info.element.scrollLeft = info.left;
            info.element.scrollTop = info.top;
          }
        }
        _enabled = !!eventsEnabled;
        selectionInformation = eventsEnabled = null;
      } finally {
        executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals3.T = rootMutationHasEffect;
      }
    }
    root2.current = finishedWork;
    pendingEffectsStatus = 2;
  }
}
function flushLayoutEffects() {
  if (pendingEffectsStatus === 2) {
    pendingEffectsStatus = 0;
    var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, rootHasLayoutEffect = (finishedWork.flags & 8772) !== 0;
    if ((finishedWork.subtreeFlags & 8772) !== 0 || rootHasLayoutEffect) {
      rootHasLayoutEffect = ReactSharedInternals3.T;
      ReactSharedInternals3.T = null;
      var previousPriority = ReactDOMSharedInternals.p;
      ReactDOMSharedInternals.p = 2;
      var prevExecutionContext = executionContext;
      executionContext |= 4;
      try {
        commitLayoutEffectOnFiber(root2, finishedWork.alternate, finishedWork);
      } finally {
        executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals3.T = rootHasLayoutEffect;
      }
    }
    pendingEffectsStatus = 3;
  }
}
function flushSpawnedWork() {
  if (pendingEffectsStatus === 4 || pendingEffectsStatus === 3) {
    pendingEffectsStatus = 0;
    requestPaint();
    var root2 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, recoverableErrors = pendingRecoverableErrors;
    (finishedWork.subtreeFlags & 10256) !== 0 || (finishedWork.flags & 10256) !== 0 ? pendingEffectsStatus = 5 : (pendingEffectsStatus = 0, pendingFinishedWork = pendingEffectsRoot = null, releaseRootPooledCache(root2, root2.pendingLanes));
    var remainingLanes = root2.pendingLanes;
    remainingLanes === 0 && (legacyErrorBoundariesThatAlreadyFailed = null);
    lanesToEventPriority(lanes);
    finishedWork = finishedWork.stateNode;
    if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function")
      try {
        injectedHook.onCommitFiberRoot(rendererID, finishedWork, undefined, (finishedWork.current.flags & 128) === 128);
      } catch (err) {
      }
    if (recoverableErrors !== null) {
      finishedWork = ReactSharedInternals3.T;
      remainingLanes = ReactDOMSharedInternals.p;
      ReactDOMSharedInternals.p = 2;
      ReactSharedInternals3.T = null;
      try {
        for (var onRecoverableError = root2.onRecoverableError, i = 0;i < recoverableErrors.length; i++) {
          var recoverableError = recoverableErrors[i];
          onRecoverableError(recoverableError.value, {
            componentStack: recoverableError.stack
          });
        }
      } finally {
        ReactSharedInternals3.T = finishedWork, ReactDOMSharedInternals.p = remainingLanes;
      }
    }
    (pendingEffectsLanes & 3) !== 0 && flushPendingEffects();
    ensureRootIsScheduled(root2);
    remainingLanes = root2.pendingLanes;
    (lanes & 4194090) !== 0 && (remainingLanes & 42) !== 0 ? root2 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root2) : nestedUpdateCount = 0;
    flushSyncWorkAcrossRoots_impl(0, false);
  }
}
function releaseRootPooledCache(root2, remainingLanes) {
  (root2.pooledCacheLanes &= remainingLanes) === 0 && (remainingLanes = root2.pooledCache, remainingLanes != null && (root2.pooledCache = null, releaseCache(remainingLanes)));
}
function flushPendingEffects(wasDelayedCommit) {
  flushMutationEffects();
  flushLayoutEffects();
  flushSpawnedWork();
  return flushPassiveEffects(wasDelayedCommit);
}
function flushPassiveEffects() {
  if (pendingEffectsStatus !== 5)
    return false;
  var root2 = pendingEffectsRoot, remainingLanes = pendingEffectsRemainingLanes;
  pendingEffectsRemainingLanes = 0;
  var renderPriority = lanesToEventPriority(pendingEffectsLanes), prevTransition = ReactSharedInternals3.T, previousPriority = ReactDOMSharedInternals.p;
  try {
    ReactDOMSharedInternals.p = 32 > renderPriority ? 32 : renderPriority;
    ReactSharedInternals3.T = null;
    renderPriority = pendingPassiveTransitions;
    pendingPassiveTransitions = null;
    var root$jscomp$0 = pendingEffectsRoot, lanes = pendingEffectsLanes;
    pendingEffectsStatus = 0;
    pendingFinishedWork = pendingEffectsRoot = null;
    pendingEffectsLanes = 0;
    if ((executionContext & 6) !== 0)
      throw Error(formatProdErrorMessage2(331));
    var prevExecutionContext = executionContext;
    executionContext |= 4;
    commitPassiveUnmountOnFiber(root$jscomp$0.current);
    commitPassiveMountOnFiber(root$jscomp$0, root$jscomp$0.current, lanes, renderPriority);
    executionContext = prevExecutionContext;
    flushSyncWorkAcrossRoots_impl(0, false);
    if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function")
      try {
        injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
      } catch (err) {
      }
    return true;
  } finally {
    ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals3.T = prevTransition, releaseRootPooledCache(root2, remainingLanes);
  }
}
function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
  sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
  sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
  rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
  rootFiber !== null && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
}
function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
  if (sourceFiber.tag === 3)
    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
  else
    for (;nearestMountedAncestor !== null; ) {
      if (nearestMountedAncestor.tag === 3) {
        captureCommitPhaseErrorOnRoot(nearestMountedAncestor, sourceFiber, error);
        break;
      } else if (nearestMountedAncestor.tag === 1) {
        var instance = nearestMountedAncestor.stateNode;
        if (typeof nearestMountedAncestor.type.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && (legacyErrorBoundariesThatAlreadyFailed === null || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
          sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
          error = createClassErrorUpdate(2);
          instance = enqueueUpdate(nearestMountedAncestor, error, 2);
          instance !== null && (initializeClassErrorUpdate(error, instance, nearestMountedAncestor, sourceFiber), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
          break;
        }
      }
      nearestMountedAncestor = nearestMountedAncestor.return;
    }
}
function attachPingListener(root2, wakeable, lanes) {
  var pingCache = root2.pingCache;
  if (pingCache === null) {
    pingCache = root2.pingCache = new PossiblyWeakMap;
    var threadIDs = new Set;
    pingCache.set(wakeable, threadIDs);
  } else
    threadIDs = pingCache.get(wakeable), threadIDs === undefined && (threadIDs = new Set, pingCache.set(wakeable, threadIDs));
  threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = true, threadIDs.add(lanes), root2 = pingSuspendedRoot.bind(null, root2, wakeable, lanes), wakeable.then(root2, root2));
}
function pingSuspendedRoot(root2, wakeable, pingedLanes) {
  var pingCache = root2.pingCache;
  pingCache !== null && pingCache.delete(wakeable);
  root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
  root2.warmLanes &= ~pingedLanes;
  workInProgressRoot === root2 && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (workInProgressRootExitStatus === 4 || workInProgressRootExitStatus === 3 && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && 300 > now() - globalMostRecentFallbackTime ? (executionContext & 2) === 0 && prepareFreshStack(root2, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
  ensureRootIsScheduled(root2);
}
function retryTimedOutBoundary(boundaryFiber, retryLane) {
  retryLane === 0 && (retryLane = claimNextRetryLane());
  boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
  boundaryFiber !== null && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
}
function retryDehydratedSuspenseBoundary(boundaryFiber) {
  var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
  suspenseState !== null && (retryLane = suspenseState.retryLane);
  retryTimedOutBoundary(boundaryFiber, retryLane);
}
function resolveRetryWakeable(boundaryFiber, wakeable) {
  var retryLane = 0;
  switch (boundaryFiber.tag) {
    case 13:
      var retryCache = boundaryFiber.stateNode;
      var suspenseState = boundaryFiber.memoizedState;
      suspenseState !== null && (retryLane = suspenseState.retryLane);
      break;
    case 19:
      retryCache = boundaryFiber.stateNode;
      break;
    case 22:
      retryCache = boundaryFiber.stateNode._retryCache;
      break;
    default:
      throw Error(formatProdErrorMessage2(314));
  }
  retryCache !== null && retryCache.delete(wakeable);
  retryTimedOutBoundary(boundaryFiber, retryLane);
}
function scheduleCallback$1(priorityLevel, callback) {
  return scheduleCallback$3(priorityLevel, callback);
}
function ensureRootIsScheduled(root2) {
  root2 !== lastScheduledRoot && root2.next === null && (lastScheduledRoot === null ? firstScheduledRoot = lastScheduledRoot = root2 : lastScheduledRoot = lastScheduledRoot.next = root2);
  mightHavePendingSyncWork = true;
  didScheduleMicrotask || (didScheduleMicrotask = true, scheduleImmediateRootScheduleTask());
}
function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
  if (!isFlushingWork && mightHavePendingSyncWork) {
    isFlushingWork = true;
    do {
      var didPerformSomeWork = false;
      for (var root$174 = firstScheduledRoot;root$174 !== null; ) {
        if (!onlyLegacy)
          if (syncTransitionLanes !== 0) {
            var pendingLanes = root$174.pendingLanes;
            if (pendingLanes === 0)
              var JSCompiler_inline_result = 0;
            else {
              var { suspendedLanes, pingedLanes } = root$174;
              JSCompiler_inline_result = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
              JSCompiler_inline_result &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
              JSCompiler_inline_result = JSCompiler_inline_result & 201326741 ? JSCompiler_inline_result & 201326741 | 1 : JSCompiler_inline_result ? JSCompiler_inline_result | 2 : 0;
            }
            JSCompiler_inline_result !== 0 && (didPerformSomeWork = true, performSyncWorkOnRoot(root$174, JSCompiler_inline_result));
          } else
            JSCompiler_inline_result = workInProgressRootRenderLanes, JSCompiler_inline_result = getNextLanes(root$174, root$174 === workInProgressRoot ? JSCompiler_inline_result : 0, root$174.cancelPendingCommit !== null || root$174.timeoutHandle !== -1), (JSCompiler_inline_result & 3) === 0 || checkIfRootIsPrerendering(root$174, JSCompiler_inline_result) || (didPerformSomeWork = true, performSyncWorkOnRoot(root$174, JSCompiler_inline_result));
        root$174 = root$174.next;
      }
    } while (didPerformSomeWork);
    isFlushingWork = false;
  }
}
function processRootScheduleInImmediateTask() {
  processRootScheduleInMicrotask();
}
function processRootScheduleInMicrotask() {
  mightHavePendingSyncWork = didScheduleMicrotask = false;
  var syncTransitionLanes = 0;
  currentEventTransitionLane !== 0 && (shouldAttemptEagerTransition() && (syncTransitionLanes = currentEventTransitionLane), currentEventTransitionLane = 0);
  for (var currentTime = now(), prev = null, root2 = firstScheduledRoot;root2 !== null; ) {
    var next = root2.next, nextLanes = scheduleTaskForRootDuringMicrotask(root2, currentTime);
    if (nextLanes === 0)
      root2.next = null, prev === null ? firstScheduledRoot = next : prev.next = next, next === null && (lastScheduledRoot = prev);
    else if (prev = root2, syncTransitionLanes !== 0 || (nextLanes & 3) !== 0)
      mightHavePendingSyncWork = true;
    root2 = next;
  }
  flushSyncWorkAcrossRoots_impl(syncTransitionLanes, false);
}
function scheduleTaskForRootDuringMicrotask(root2, currentTime) {
  for (var { suspendedLanes, pingedLanes, expirationTimes } = root2, lanes = root2.pendingLanes & -62914561;0 < lanes; ) {
    var index$3 = 31 - clz32(lanes), lane = 1 << index$3, expirationTime = expirationTimes[index$3];
    if (expirationTime === -1) {
      if ((lane & suspendedLanes) === 0 || (lane & pingedLanes) !== 0)
        expirationTimes[index$3] = computeExpirationTime(lane, currentTime);
    } else
      expirationTime <= currentTime && (root2.expiredLanes |= lane);
    lanes &= ~lane;
  }
  currentTime = workInProgressRoot;
  suspendedLanes = workInProgressRootRenderLanes;
  suspendedLanes = getNextLanes(root2, root2 === currentTime ? suspendedLanes : 0, root2.cancelPendingCommit !== null || root2.timeoutHandle !== -1);
  pingedLanes = root2.callbackNode;
  if (suspendedLanes === 0 || root2 === currentTime && (workInProgressSuspendedReason === 2 || workInProgressSuspendedReason === 9) || root2.cancelPendingCommit !== null)
    return pingedLanes !== null && pingedLanes !== null && cancelCallback$1(pingedLanes), root2.callbackNode = null, root2.callbackPriority = 0;
  if ((suspendedLanes & 3) === 0 || checkIfRootIsPrerendering(root2, suspendedLanes)) {
    currentTime = suspendedLanes & -suspendedLanes;
    if (currentTime === root2.callbackPriority)
      return currentTime;
    pingedLanes !== null && cancelCallback$1(pingedLanes);
    switch (lanesToEventPriority(suspendedLanes)) {
      case 2:
      case 8:
        suspendedLanes = UserBlockingPriority;
        break;
      case 32:
        suspendedLanes = NormalPriority$1;
        break;
      case 268435456:
        suspendedLanes = IdlePriority;
        break;
      default:
        suspendedLanes = NormalPriority$1;
    }
    pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root2);
    suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
    root2.callbackPriority = currentTime;
    root2.callbackNode = suspendedLanes;
    return currentTime;
  }
  pingedLanes !== null && pingedLanes !== null && cancelCallback$1(pingedLanes);
  root2.callbackPriority = 2;
  root2.callbackNode = null;
  return 2;
}
function performWorkOnRootViaSchedulerTask(root2, didTimeout) {
  if (pendingEffectsStatus !== 0 && pendingEffectsStatus !== 5)
    return root2.callbackNode = null, root2.callbackPriority = 0, null;
  var originalCallbackNode = root2.callbackNode;
  if (flushPendingEffects(true) && root2.callbackNode !== originalCallbackNode)
    return null;
  var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
  workInProgressRootRenderLanes$jscomp$0 = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0, root2.cancelPendingCommit !== null || root2.timeoutHandle !== -1);
  if (workInProgressRootRenderLanes$jscomp$0 === 0)
    return null;
  performWorkOnRoot(root2, workInProgressRootRenderLanes$jscomp$0, didTimeout);
  scheduleTaskForRootDuringMicrotask(root2, now());
  return root2.callbackNode != null && root2.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root2) : null;
}
function performSyncWorkOnRoot(root2, lanes) {
  if (flushPendingEffects())
    return null;
  performWorkOnRoot(root2, lanes, true);
}
function scheduleImmediateRootScheduleTask() {
  scheduleMicrotask(function() {
    (executionContext & 6) !== 0 ? scheduleCallback$3(ImmediatePriority, processRootScheduleInImmediateTask) : processRootScheduleInMicrotask();
  });
}
function requestTransitionLane() {
  currentEventTransitionLane === 0 && (currentEventTransitionLane = claimNextTransitionLane());
  return currentEventTransitionLane;
}
function coerceFormActionProp(actionProp) {
  return actionProp == null || typeof actionProp === "symbol" || typeof actionProp === "boolean" ? null : typeof actionProp === "function" ? actionProp : sanitizeURL("" + actionProp);
}
function createFormDataWithSubmitter(form, submitter) {
  var temp = submitter.ownerDocument.createElement("input");
  temp.name = submitter.name;
  temp.value = submitter.value;
  form.id && temp.setAttribute("form", form.id);
  submitter.parentNode.insertBefore(temp, submitter);
  form = new FormData(form);
  temp.parentNode.removeChild(temp);
  return form;
}
function extractEvents$1(dispatchQueue, domEventName, maybeTargetInst, nativeEvent, nativeEventTarget) {
  if (domEventName === "submit" && maybeTargetInst && maybeTargetInst.stateNode === nativeEventTarget) {
    var action = coerceFormActionProp((nativeEventTarget[internalPropsKey] || null).action), submitter = nativeEvent.submitter;
    submitter && (domEventName = (domEventName = submitter[internalPropsKey] || null) ? coerceFormActionProp(domEventName.formAction) : submitter.getAttribute("formAction"), domEventName !== null && (action = domEventName, submitter = null));
    var event = new SyntheticEvent("action", "action", null, nativeEvent, nativeEventTarget);
    dispatchQueue.push({
      event,
      listeners: [
        {
          instance: null,
          listener: function() {
            if (nativeEvent.defaultPrevented) {
              if (currentEventTransitionLane !== 0) {
                var formData = submitter ? createFormDataWithSubmitter(nativeEventTarget, submitter) : new FormData(nativeEventTarget);
                startHostTransition(maybeTargetInst, {
                  pending: true,
                  data: formData,
                  method: nativeEventTarget.method,
                  action
                }, null, formData);
              }
            } else
              typeof action === "function" && (event.preventDefault(), formData = submitter ? createFormDataWithSubmitter(nativeEventTarget, submitter) : new FormData(nativeEventTarget), startHostTransition(maybeTargetInst, {
                pending: true,
                data: formData,
                method: nativeEventTarget.method,
                action
              }, action, formData));
          },
          currentTarget: nativeEventTarget
        }
      ]
    });
  }
}
function processDispatchQueue(dispatchQueue, eventSystemFlags) {
  eventSystemFlags = (eventSystemFlags & 4) !== 0;
  for (var i = 0;i < dispatchQueue.length; i++) {
    var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event;
    _dispatchQueue$i = _dispatchQueue$i.listeners;
    a: {
      var previousInstance = undefined;
      if (eventSystemFlags)
        for (var i$jscomp$0 = _dispatchQueue$i.length - 1;0 <= i$jscomp$0; i$jscomp$0--) {
          var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget;
          _dispatchListeners$i = _dispatchListeners$i.listener;
          if (instance !== previousInstance && event.isPropagationStopped())
            break a;
          previousInstance = _dispatchListeners$i;
          event.currentTarget = currentTarget;
          try {
            previousInstance(event);
          } catch (error) {
            reportGlobalError2(error);
          }
          event.currentTarget = null;
          previousInstance = instance;
        }
      else
        for (i$jscomp$0 = 0;i$jscomp$0 < _dispatchQueue$i.length; i$jscomp$0++) {
          _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
          instance = _dispatchListeners$i.instance;
          currentTarget = _dispatchListeners$i.currentTarget;
          _dispatchListeners$i = _dispatchListeners$i.listener;
          if (instance !== previousInstance && event.isPropagationStopped())
            break a;
          previousInstance = _dispatchListeners$i;
          event.currentTarget = currentTarget;
          try {
            previousInstance(event);
          } catch (error) {
            reportGlobalError2(error);
          }
          event.currentTarget = null;
          previousInstance = instance;
        }
    }
  }
}
function listenToNonDelegatedEvent(domEventName, targetElement) {
  var JSCompiler_inline_result = targetElement[internalEventHandlersKey];
  JSCompiler_inline_result === undefined && (JSCompiler_inline_result = targetElement[internalEventHandlersKey] = new Set);
  var listenerSetKey = domEventName + "__bubble";
  JSCompiler_inline_result.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, 2, false), JSCompiler_inline_result.add(listenerSetKey));
}
function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
  var eventSystemFlags = 0;
  isCapturePhaseListener && (eventSystemFlags |= 4);
  addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
}
function listenToAllSupportedEvents(rootContainerElement) {
  if (!rootContainerElement[listeningMarker]) {
    rootContainerElement[listeningMarker] = true;
    allNativeEvents.forEach(function(domEventName) {
      domEventName !== "selectionchange" && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, false, rootContainerElement), listenToNativeEvent(domEventName, true, rootContainerElement));
    });
    var ownerDocument = rootContainerElement.nodeType === 9 ? rootContainerElement : rootContainerElement.ownerDocument;
    ownerDocument === null || ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = true, listenToNativeEvent("selectionchange", false, ownerDocument));
  }
}
function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener) {
  switch (getEventPriority(domEventName)) {
    case 2:
      var listenerWrapper = dispatchDiscreteEvent;
      break;
    case 8:
      listenerWrapper = dispatchContinuousEvent;
      break;
    default:
      listenerWrapper = dispatchEvent;
  }
  eventSystemFlags = listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
  listenerWrapper = undefined;
  !passiveBrowserEventsSupported || domEventName !== "touchstart" && domEventName !== "touchmove" && domEventName !== "wheel" || (listenerWrapper = true);
  isCapturePhaseListener ? listenerWrapper !== undefined ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
    capture: true,
    passive: listenerWrapper
  }) : targetContainer.addEventListener(domEventName, eventSystemFlags, true) : listenerWrapper !== undefined ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
    passive: listenerWrapper
  }) : targetContainer.addEventListener(domEventName, eventSystemFlags, false);
}
function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst$jscomp$0, targetContainer) {
  var ancestorInst = targetInst$jscomp$0;
  if ((eventSystemFlags & 1) === 0 && (eventSystemFlags & 2) === 0 && targetInst$jscomp$0 !== null)
    a:
      for (;; ) {
        if (targetInst$jscomp$0 === null)
          return;
        var nodeTag = targetInst$jscomp$0.tag;
        if (nodeTag === 3 || nodeTag === 4) {
          var container = targetInst$jscomp$0.stateNode.containerInfo;
          if (container === targetContainer)
            break;
          if (nodeTag === 4)
            for (nodeTag = targetInst$jscomp$0.return;nodeTag !== null; ) {
              var grandTag = nodeTag.tag;
              if ((grandTag === 3 || grandTag === 4) && nodeTag.stateNode.containerInfo === targetContainer)
                return;
              nodeTag = nodeTag.return;
            }
          for (;container !== null; ) {
            nodeTag = getClosestInstanceFromNode(container);
            if (nodeTag === null)
              return;
            grandTag = nodeTag.tag;
            if (grandTag === 5 || grandTag === 6 || grandTag === 26 || grandTag === 27) {
              targetInst$jscomp$0 = ancestorInst = nodeTag;
              continue a;
            }
            container = container.parentNode;
          }
        }
        targetInst$jscomp$0 = targetInst$jscomp$0.return;
      }
  batchedUpdates$1(function() {
    var targetInst = ancestorInst, nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
    a: {
      var reactName = topLevelEventsToReactNames.get(domEventName);
      if (reactName !== undefined) {
        var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
        switch (domEventName) {
          case "keypress":
            if (getEventCharCode(nativeEvent) === 0)
              break a;
          case "keydown":
          case "keyup":
            SyntheticEventCtor = SyntheticKeyboardEvent;
            break;
          case "focusin":
            reactEventType = "focus";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "focusout":
            reactEventType = "blur";
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "beforeblur":
          case "afterblur":
            SyntheticEventCtor = SyntheticFocusEvent;
            break;
          case "click":
            if (nativeEvent.button === 2)
              break a;
          case "auxclick":
          case "dblclick":
          case "mousedown":
          case "mousemove":
          case "mouseup":
          case "mouseout":
          case "mouseover":
          case "contextmenu":
            SyntheticEventCtor = SyntheticMouseEvent;
            break;
          case "drag":
          case "dragend":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "dragstart":
          case "drop":
            SyntheticEventCtor = SyntheticDragEvent;
            break;
          case "touchcancel":
          case "touchend":
          case "touchmove":
          case "touchstart":
            SyntheticEventCtor = SyntheticTouchEvent;
            break;
          case ANIMATION_END:
          case ANIMATION_ITERATION:
          case ANIMATION_START:
            SyntheticEventCtor = SyntheticAnimationEvent;
            break;
          case TRANSITION_END:
            SyntheticEventCtor = SyntheticTransitionEvent;
            break;
          case "scroll":
          case "scrollend":
            SyntheticEventCtor = SyntheticUIEvent;
            break;
          case "wheel":
            SyntheticEventCtor = SyntheticWheelEvent;
            break;
          case "copy":
          case "cut":
          case "paste":
            SyntheticEventCtor = SyntheticClipboardEvent;
            break;
          case "gotpointercapture":
          case "lostpointercapture":
          case "pointercancel":
          case "pointerdown":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "pointerup":
            SyntheticEventCtor = SyntheticPointerEvent;
            break;
          case "toggle":
          case "beforetoggle":
            SyntheticEventCtor = SyntheticToggleEvent;
        }
        var inCapturePhase = (eventSystemFlags & 4) !== 0, accumulateTargetOnly = !inCapturePhase && (domEventName === "scroll" || domEventName === "scrollend"), reactEventName = inCapturePhase ? reactName !== null ? reactName + "Capture" : null : reactName;
        inCapturePhase = [];
        for (var instance = targetInst, lastHostComponent;instance !== null; ) {
          var _instance = instance;
          lastHostComponent = _instance.stateNode;
          _instance = _instance.tag;
          _instance !== 5 && _instance !== 26 && _instance !== 27 || lastHostComponent === null || reactEventName === null || (_instance = getListener(instance, reactEventName), _instance != null && inCapturePhase.push(createDispatchListener(instance, _instance, lastHostComponent)));
          if (accumulateTargetOnly)
            break;
          instance = instance.return;
        }
        0 < inCapturePhase.length && (reactName = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget), dispatchQueue.push({ event: reactName, listeners: inCapturePhase }));
      }
    }
    if ((eventSystemFlags & 7) === 0) {
      a: {
        reactName = domEventName === "mouseover" || domEventName === "pointerover";
        SyntheticEventCtor = domEventName === "mouseout" || domEventName === "pointerout";
        if (reactName && nativeEvent !== currentReplayingEvent && (reactEventType = nativeEvent.relatedTarget || nativeEvent.fromElement) && (getClosestInstanceFromNode(reactEventType) || reactEventType[internalContainerInstanceKey]))
          break a;
        if (SyntheticEventCtor || reactName) {
          reactName = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget : (reactName = nativeEventTarget.ownerDocument) ? reactName.defaultView || reactName.parentWindow : window;
          if (SyntheticEventCtor) {
            if (reactEventType = nativeEvent.relatedTarget || nativeEvent.toElement, SyntheticEventCtor = targetInst, reactEventType = reactEventType ? getClosestInstanceFromNode(reactEventType) : null, reactEventType !== null && (accumulateTargetOnly = getNearestMountedFiber(reactEventType), inCapturePhase = reactEventType.tag, reactEventType !== accumulateTargetOnly || inCapturePhase !== 5 && inCapturePhase !== 27 && inCapturePhase !== 6))
              reactEventType = null;
          } else
            SyntheticEventCtor = null, reactEventType = targetInst;
          if (SyntheticEventCtor !== reactEventType) {
            inCapturePhase = SyntheticMouseEvent;
            _instance = "onMouseLeave";
            reactEventName = "onMouseEnter";
            instance = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover")
              inCapturePhase = SyntheticPointerEvent, _instance = "onPointerLeave", reactEventName = "onPointerEnter", instance = "pointer";
            accumulateTargetOnly = SyntheticEventCtor == null ? reactName : getNodeFromInstance(SyntheticEventCtor);
            lastHostComponent = reactEventType == null ? reactName : getNodeFromInstance(reactEventType);
            reactName = new inCapturePhase(_instance, instance + "leave", SyntheticEventCtor, nativeEvent, nativeEventTarget);
            reactName.target = accumulateTargetOnly;
            reactName.relatedTarget = lastHostComponent;
            _instance = null;
            getClosestInstanceFromNode(nativeEventTarget) === targetInst && (inCapturePhase = new inCapturePhase(reactEventName, instance + "enter", reactEventType, nativeEvent, nativeEventTarget), inCapturePhase.target = lastHostComponent, inCapturePhase.relatedTarget = accumulateTargetOnly, _instance = inCapturePhase);
            accumulateTargetOnly = _instance;
            if (SyntheticEventCtor && reactEventType)
              b: {
                inCapturePhase = SyntheticEventCtor;
                reactEventName = reactEventType;
                instance = 0;
                for (lastHostComponent = inCapturePhase;lastHostComponent; lastHostComponent = getParent(lastHostComponent))
                  instance++;
                lastHostComponent = 0;
                for (_instance = reactEventName;_instance; _instance = getParent(_instance))
                  lastHostComponent++;
                for (;0 < instance - lastHostComponent; )
                  inCapturePhase = getParent(inCapturePhase), instance--;
                for (;0 < lastHostComponent - instance; )
                  reactEventName = getParent(reactEventName), lastHostComponent--;
                for (;instance--; ) {
                  if (inCapturePhase === reactEventName || reactEventName !== null && inCapturePhase === reactEventName.alternate)
                    break b;
                  inCapturePhase = getParent(inCapturePhase);
                  reactEventName = getParent(reactEventName);
                }
                inCapturePhase = null;
              }
            else
              inCapturePhase = null;
            SyntheticEventCtor !== null && accumulateEnterLeaveListenersForEvent(dispatchQueue, reactName, SyntheticEventCtor, inCapturePhase, false);
            reactEventType !== null && accumulateTargetOnly !== null && accumulateEnterLeaveListenersForEvent(dispatchQueue, accumulateTargetOnly, reactEventType, inCapturePhase, true);
          }
        }
      }
      a: {
        reactName = targetInst ? getNodeFromInstance(targetInst) : window;
        SyntheticEventCtor = reactName.nodeName && reactName.nodeName.toLowerCase();
        if (SyntheticEventCtor === "select" || SyntheticEventCtor === "input" && reactName.type === "file")
          var getTargetInstFunc = getTargetInstForChangeEvent;
        else if (isTextInputElement(reactName))
          if (isInputEventSupported)
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            var handleEventFunc = handleEventsForInputEventPolyfill;
          }
        else
          SyntheticEventCtor = reactName.nodeName, !SyntheticEventCtor || SyntheticEventCtor.toLowerCase() !== "input" || reactName.type !== "checkbox" && reactName.type !== "radio" ? targetInst && isCustomElement(targetInst.elementType) && (getTargetInstFunc = getTargetInstForChangeEvent) : getTargetInstFunc = getTargetInstForClickEvent;
        if (getTargetInstFunc && (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))) {
          createAndAccumulateChangeEvent(dispatchQueue, getTargetInstFunc, nativeEvent, nativeEventTarget);
          break a;
        }
        handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
        domEventName === "focusout" && targetInst && reactName.type === "number" && targetInst.memoizedProps.value != null && setDefaultValue(reactName, "number", reactName.value);
      }
      handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
      switch (domEventName) {
        case "focusin":
          if (isTextInputElement(handleEventFunc) || handleEventFunc.contentEditable === "true")
            activeElement = handleEventFunc, activeElementInst = targetInst, lastSelection = null;
          break;
        case "focusout":
          lastSelection = activeElementInst = activeElement = null;
          break;
        case "mousedown":
          mouseDown = true;
          break;
        case "contextmenu":
        case "mouseup":
        case "dragend":
          mouseDown = false;
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          break;
        case "selectionchange":
          if (skipSelectionChangeEvent)
            break;
        case "keydown":
        case "keyup":
          constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
      }
      var fallbackData;
      if (canUseCompositionEvent)
        b: {
          switch (domEventName) {
            case "compositionstart":
              var eventType = "onCompositionStart";
              break b;
            case "compositionend":
              eventType = "onCompositionEnd";
              break b;
            case "compositionupdate":
              eventType = "onCompositionUpdate";
              break b;
          }
          eventType = undefined;
        }
      else
        isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : domEventName === "keydown" && nativeEvent.keyCode === 229 && (eventType = "onCompositionStart");
      eventType && (useFallbackCompositionData && nativeEvent.locale !== "ko" && (isComposing || eventType !== "onCompositionStart" ? eventType === "onCompositionEnd" && isComposing && (fallbackData = getData()) : (root = nativeEventTarget, startText = ("value" in root) ? root.value : root.textContent, isComposing = true)), handleEventFunc = accumulateTwoPhaseListeners(targetInst, eventType), 0 < handleEventFunc.length && (eventType = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget), dispatchQueue.push({ event: eventType, listeners: handleEventFunc }), fallbackData ? eventType.data = fallbackData : (fallbackData = getDataFromCustomEvent(nativeEvent), fallbackData !== null && (eventType.data = fallbackData))));
      if (fallbackData = canUseTextInputEvent ? getNativeBeforeInputChars(domEventName, nativeEvent) : getFallbackBeforeInputChars(domEventName, nativeEvent))
        eventType = accumulateTwoPhaseListeners(targetInst, "onBeforeInput"), 0 < eventType.length && (handleEventFunc = new SyntheticCompositionEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget), dispatchQueue.push({
          event: handleEventFunc,
          listeners: eventType
        }), handleEventFunc.data = fallbackData);
      extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    }
    processDispatchQueue(dispatchQueue, eventSystemFlags);
  });
}
function createDispatchListener(instance, listener, currentTarget) {
  return {
    instance,
    listener,
    currentTarget
  };
}
function accumulateTwoPhaseListeners(targetFiber, reactName) {
  for (var captureName = reactName + "Capture", listeners = [];targetFiber !== null; ) {
    var _instance2 = targetFiber, stateNode = _instance2.stateNode;
    _instance2 = _instance2.tag;
    _instance2 !== 5 && _instance2 !== 26 && _instance2 !== 27 || stateNode === null || (_instance2 = getListener(targetFiber, captureName), _instance2 != null && listeners.unshift(createDispatchListener(targetFiber, _instance2, stateNode)), _instance2 = getListener(targetFiber, reactName), _instance2 != null && listeners.push(createDispatchListener(targetFiber, _instance2, stateNode)));
    if (targetFiber.tag === 3)
      return listeners;
    targetFiber = targetFiber.return;
  }
  return [];
}
function getParent(inst) {
  if (inst === null)
    return null;
  do
    inst = inst.return;
  while (inst && inst.tag !== 5 && inst.tag !== 27);
  return inst ? inst : null;
}
function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
  for (var registrationName = event._reactName, listeners = [];target !== null && target !== common; ) {
    var _instance3 = target, alternate = _instance3.alternate, stateNode = _instance3.stateNode;
    _instance3 = _instance3.tag;
    if (alternate !== null && alternate === common)
      break;
    _instance3 !== 5 && _instance3 !== 26 && _instance3 !== 27 || stateNode === null || (alternate = stateNode, inCapturePhase ? (stateNode = getListener(target, registrationName), stateNode != null && listeners.unshift(createDispatchListener(target, stateNode, alternate))) : inCapturePhase || (stateNode = getListener(target, registrationName), stateNode != null && listeners.push(createDispatchListener(target, stateNode, alternate))));
    target = target.return;
  }
  listeners.length !== 0 && dispatchQueue.push({ event, listeners });
}
function normalizeMarkupForTextOrAttribute(markup) {
  return (typeof markup === "string" ? markup : "" + markup).replace(NORMALIZE_NEWLINES_REGEX, `
`).replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
}
function checkForUnmatchedText(serverText, clientText) {
  clientText = normalizeMarkupForTextOrAttribute(clientText);
  return normalizeMarkupForTextOrAttribute(serverText) === clientText ? true : false;
}
function noop$12() {
}
function setProp(domElement, tag, key, value, props, prevValue) {
  switch (key) {
    case "children":
      typeof value === "string" ? tag === "body" || tag === "textarea" && value === "" || setTextContent(domElement, value) : (typeof value === "number" || typeof value === "bigint") && tag !== "body" && setTextContent(domElement, "" + value);
      break;
    case "className":
      setValueForKnownAttribute(domElement, "class", value);
      break;
    case "tabIndex":
      setValueForKnownAttribute(domElement, "tabindex", value);
      break;
    case "dir":
    case "role":
    case "viewBox":
    case "width":
    case "height":
      setValueForKnownAttribute(domElement, key, value);
      break;
    case "style":
      setValueForStyles(domElement, value, prevValue);
      break;
    case "data":
      if (tag !== "object") {
        setValueForKnownAttribute(domElement, "data", value);
        break;
      }
    case "src":
    case "href":
      if (value === "" && (tag !== "a" || key !== "href")) {
        domElement.removeAttribute(key);
        break;
      }
      if (value == null || typeof value === "function" || typeof value === "symbol" || typeof value === "boolean") {
        domElement.removeAttribute(key);
        break;
      }
      value = sanitizeURL("" + value);
      domElement.setAttribute(key, value);
      break;
    case "action":
    case "formAction":
      if (typeof value === "function") {
        domElement.setAttribute(key, "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')");
        break;
      } else
        typeof prevValue === "function" && (key === "formAction" ? (tag !== "input" && setProp(domElement, tag, "name", props.name, props, null), setProp(domElement, tag, "formEncType", props.formEncType, props, null), setProp(domElement, tag, "formMethod", props.formMethod, props, null), setProp(domElement, tag, "formTarget", props.formTarget, props, null)) : (setProp(domElement, tag, "encType", props.encType, props, null), setProp(domElement, tag, "method", props.method, props, null), setProp(domElement, tag, "target", props.target, props, null)));
      if (value == null || typeof value === "symbol" || typeof value === "boolean") {
        domElement.removeAttribute(key);
        break;
      }
      value = sanitizeURL("" + value);
      domElement.setAttribute(key, value);
      break;
    case "onClick":
      value != null && (domElement.onclick = noop$12);
      break;
    case "onScroll":
      value != null && listenToNonDelegatedEvent("scroll", domElement);
      break;
    case "onScrollEnd":
      value != null && listenToNonDelegatedEvent("scrollend", domElement);
      break;
    case "dangerouslySetInnerHTML":
      if (value != null) {
        if (typeof value !== "object" || !("__html" in value))
          throw Error(formatProdErrorMessage2(61));
        key = value.__html;
        if (key != null) {
          if (props.children != null)
            throw Error(formatProdErrorMessage2(60));
          domElement.innerHTML = key;
        }
      }
      break;
    case "multiple":
      domElement.multiple = value && typeof value !== "function" && typeof value !== "symbol";
      break;
    case "muted":
      domElement.muted = value && typeof value !== "function" && typeof value !== "symbol";
      break;
    case "suppressContentEditableWarning":
    case "suppressHydrationWarning":
    case "defaultValue":
    case "defaultChecked":
    case "innerHTML":
    case "ref":
      break;
    case "autoFocus":
      break;
    case "xlinkHref":
      if (value == null || typeof value === "function" || typeof value === "boolean" || typeof value === "symbol") {
        domElement.removeAttribute("xlink:href");
        break;
      }
      key = sanitizeURL("" + value);
      domElement.setAttributeNS("http://www.w3.org/1999/xlink", "xlink:href", key);
      break;
    case "contentEditable":
    case "spellCheck":
    case "draggable":
    case "value":
    case "autoReverse":
    case "externalResourcesRequired":
    case "focusable":
    case "preserveAlpha":
      value != null && typeof value !== "function" && typeof value !== "symbol" ? domElement.setAttribute(key, "" + value) : domElement.removeAttribute(key);
      break;
    case "inert":
    case "allowFullScreen":
    case "async":
    case "autoPlay":
    case "controls":
    case "default":
    case "defer":
    case "disabled":
    case "disablePictureInPicture":
    case "disableRemotePlayback":
    case "formNoValidate":
    case "hidden":
    case "loop":
    case "noModule":
    case "noValidate":
    case "open":
    case "playsInline":
    case "readOnly":
    case "required":
    case "reversed":
    case "scoped":
    case "seamless":
    case "itemScope":
      value && typeof value !== "function" && typeof value !== "symbol" ? domElement.setAttribute(key, "") : domElement.removeAttribute(key);
      break;
    case "capture":
    case "download":
      value === true ? domElement.setAttribute(key, "") : value !== false && value != null && typeof value !== "function" && typeof value !== "symbol" ? domElement.setAttribute(key, value) : domElement.removeAttribute(key);
      break;
    case "cols":
    case "rows":
    case "size":
    case "span":
      value != null && typeof value !== "function" && typeof value !== "symbol" && !isNaN(value) && 1 <= value ? domElement.setAttribute(key, value) : domElement.removeAttribute(key);
      break;
    case "rowSpan":
    case "start":
      value == null || typeof value === "function" || typeof value === "symbol" || isNaN(value) ? domElement.removeAttribute(key) : domElement.setAttribute(key, value);
      break;
    case "popover":
      listenToNonDelegatedEvent("beforetoggle", domElement);
      listenToNonDelegatedEvent("toggle", domElement);
      setValueForAttribute(domElement, "popover", value);
      break;
    case "xlinkActuate":
      setValueForNamespacedAttribute(domElement, "http://www.w3.org/1999/xlink", "xlink:actuate", value);
      break;
    case "xlinkArcrole":
      setValueForNamespacedAttribute(domElement, "http://www.w3.org/1999/xlink", "xlink:arcrole", value);
      break;
    case "xlinkRole":
      setValueForNamespacedAttribute(domElement, "http://www.w3.org/1999/xlink", "xlink:role", value);
      break;
    case "xlinkShow":
      setValueForNamespacedAttribute(domElement, "http://www.w3.org/1999/xlink", "xlink:show", value);
      break;
    case "xlinkTitle":
      setValueForNamespacedAttribute(domElement, "http://www.w3.org/1999/xlink", "xlink:title", value);
      break;
    case "xlinkType":
      setValueForNamespacedAttribute(domElement, "http://www.w3.org/1999/xlink", "xlink:type", value);
      break;
    case "xmlBase":
      setValueForNamespacedAttribute(domElement, "http://www.w3.org/XML/1998/namespace", "xml:base", value);
      break;
    case "xmlLang":
      setValueForNamespacedAttribute(domElement, "http://www.w3.org/XML/1998/namespace", "xml:lang", value);
      break;
    case "xmlSpace":
      setValueForNamespacedAttribute(domElement, "http://www.w3.org/XML/1998/namespace", "xml:space", value);
      break;
    case "is":
      setValueForAttribute(domElement, "is", value);
      break;
    case "innerText":
    case "textContent":
      break;
    default:
      if (!(2 < key.length) || key[0] !== "o" && key[0] !== "O" || key[1] !== "n" && key[1] !== "N")
        key = aliases.get(key) || key, setValueForAttribute(domElement, key, value);
  }
}
function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
  switch (key) {
    case "style":
      setValueForStyles(domElement, value, prevValue);
      break;
    case "dangerouslySetInnerHTML":
      if (value != null) {
        if (typeof value !== "object" || !("__html" in value))
          throw Error(formatProdErrorMessage2(61));
        key = value.__html;
        if (key != null) {
          if (props.children != null)
            throw Error(formatProdErrorMessage2(60));
          domElement.innerHTML = key;
        }
      }
      break;
    case "children":
      typeof value === "string" ? setTextContent(domElement, value) : (typeof value === "number" || typeof value === "bigint") && setTextContent(domElement, "" + value);
      break;
    case "onScroll":
      value != null && listenToNonDelegatedEvent("scroll", domElement);
      break;
    case "onScrollEnd":
      value != null && listenToNonDelegatedEvent("scrollend", domElement);
      break;
    case "onClick":
      value != null && (domElement.onclick = noop$12);
      break;
    case "suppressContentEditableWarning":
    case "suppressHydrationWarning":
    case "innerHTML":
    case "ref":
      break;
    case "innerText":
    case "textContent":
      break;
    default:
      if (!registrationNameDependencies.hasOwnProperty(key))
        a: {
          if (key[0] === "o" && key[1] === "n" && (props = key.endsWith("Capture"), tag = key.slice(2, props ? key.length - 7 : undefined), prevValue = domElement[internalPropsKey] || null, prevValue = prevValue != null ? prevValue[key] : null, typeof prevValue === "function" && domElement.removeEventListener(tag, prevValue, props), typeof value === "function")) {
            typeof prevValue !== "function" && prevValue !== null && (key in domElement ? domElement[key] = null : domElement.hasAttribute(key) && domElement.removeAttribute(key));
            domElement.addEventListener(tag, value, props);
            break a;
          }
          key in domElement ? domElement[key] = value : value === true ? domElement.setAttribute(key, "") : setValueForAttribute(domElement, key, value);
        }
  }
}
function setInitialProperties(domElement, tag, props) {
  switch (tag) {
    case "div":
    case "span":
    case "svg":
    case "path":
    case "a":
    case "g":
    case "p":
    case "li":
      break;
    case "img":
      listenToNonDelegatedEvent("error", domElement);
      listenToNonDelegatedEvent("load", domElement);
      var hasSrc = false, hasSrcSet = false, propKey;
      for (propKey in props)
        if (props.hasOwnProperty(propKey)) {
          var propValue = props[propKey];
          if (propValue != null)
            switch (propKey) {
              case "src":
                hasSrc = true;
                break;
              case "srcSet":
                hasSrcSet = true;
                break;
              case "children":
              case "dangerouslySetInnerHTML":
                throw Error(formatProdErrorMessage2(137, tag));
              default:
                setProp(domElement, tag, propKey, propValue, props, null);
            }
        }
      hasSrcSet && setProp(domElement, tag, "srcSet", props.srcSet, props, null);
      hasSrc && setProp(domElement, tag, "src", props.src, props, null);
      return;
    case "input":
      listenToNonDelegatedEvent("invalid", domElement);
      var defaultValue = propKey = propValue = hasSrcSet = null, checked = null, defaultChecked = null;
      for (hasSrc in props)
        if (props.hasOwnProperty(hasSrc)) {
          var propValue$188 = props[hasSrc];
          if (propValue$188 != null)
            switch (hasSrc) {
              case "name":
                hasSrcSet = propValue$188;
                break;
              case "type":
                propValue = propValue$188;
                break;
              case "checked":
                checked = propValue$188;
                break;
              case "defaultChecked":
                defaultChecked = propValue$188;
                break;
              case "value":
                propKey = propValue$188;
                break;
              case "defaultValue":
                defaultValue = propValue$188;
                break;
              case "children":
              case "dangerouslySetInnerHTML":
                if (propValue$188 != null)
                  throw Error(formatProdErrorMessage2(137, tag));
                break;
              default:
                setProp(domElement, tag, hasSrc, propValue$188, props, null);
            }
        }
      initInput(domElement, propKey, defaultValue, checked, defaultChecked, propValue, hasSrcSet, false);
      track(domElement);
      return;
    case "select":
      listenToNonDelegatedEvent("invalid", domElement);
      hasSrc = propValue = propKey = null;
      for (hasSrcSet in props)
        if (props.hasOwnProperty(hasSrcSet) && (defaultValue = props[hasSrcSet], defaultValue != null))
          switch (hasSrcSet) {
            case "value":
              propKey = defaultValue;
              break;
            case "defaultValue":
              propValue = defaultValue;
              break;
            case "multiple":
              hasSrc = defaultValue;
            default:
              setProp(domElement, tag, hasSrcSet, defaultValue, props, null);
          }
      tag = propKey;
      props = propValue;
      domElement.multiple = !!hasSrc;
      tag != null ? updateOptions(domElement, !!hasSrc, tag, false) : props != null && updateOptions(domElement, !!hasSrc, props, true);
      return;
    case "textarea":
      listenToNonDelegatedEvent("invalid", domElement);
      propKey = hasSrcSet = hasSrc = null;
      for (propValue in props)
        if (props.hasOwnProperty(propValue) && (defaultValue = props[propValue], defaultValue != null))
          switch (propValue) {
            case "value":
              hasSrc = defaultValue;
              break;
            case "defaultValue":
              hasSrcSet = defaultValue;
              break;
            case "children":
              propKey = defaultValue;
              break;
            case "dangerouslySetInnerHTML":
              if (defaultValue != null)
                throw Error(formatProdErrorMessage2(91));
              break;
            default:
              setProp(domElement, tag, propValue, defaultValue, props, null);
          }
      initTextarea(domElement, hasSrc, hasSrcSet, propKey);
      track(domElement);
      return;
    case "option":
      for (checked in props)
        if (props.hasOwnProperty(checked) && (hasSrc = props[checked], hasSrc != null))
          switch (checked) {
            case "selected":
              domElement.selected = hasSrc && typeof hasSrc !== "function" && typeof hasSrc !== "symbol";
              break;
            default:
              setProp(domElement, tag, checked, hasSrc, props, null);
          }
      return;
    case "dialog":
      listenToNonDelegatedEvent("beforetoggle", domElement);
      listenToNonDelegatedEvent("toggle", domElement);
      listenToNonDelegatedEvent("cancel", domElement);
      listenToNonDelegatedEvent("close", domElement);
      break;
    case "iframe":
    case "object":
      listenToNonDelegatedEvent("load", domElement);
      break;
    case "video":
    case "audio":
      for (hasSrc = 0;hasSrc < mediaEventTypes.length; hasSrc++)
        listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
      break;
    case "image":
      listenToNonDelegatedEvent("error", domElement);
      listenToNonDelegatedEvent("load", domElement);
      break;
    case "details":
      listenToNonDelegatedEvent("toggle", domElement);
      break;
    case "embed":
    case "source":
    case "link":
      listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
    case "area":
    case "base":
    case "br":
    case "col":
    case "hr":
    case "keygen":
    case "meta":
    case "param":
    case "track":
    case "wbr":
    case "menuitem":
      for (defaultChecked in props)
        if (props.hasOwnProperty(defaultChecked) && (hasSrc = props[defaultChecked], hasSrc != null))
          switch (defaultChecked) {
            case "children":
            case "dangerouslySetInnerHTML":
              throw Error(formatProdErrorMessage2(137, tag));
            default:
              setProp(domElement, tag, defaultChecked, hasSrc, props, null);
          }
      return;
    default:
      if (isCustomElement(tag)) {
        for (propValue$188 in props)
          props.hasOwnProperty(propValue$188) && (hasSrc = props[propValue$188], hasSrc !== undefined && setPropOnCustomElement(domElement, tag, propValue$188, hasSrc, props, undefined));
        return;
      }
  }
  for (defaultValue in props)
    props.hasOwnProperty(defaultValue) && (hasSrc = props[defaultValue], hasSrc != null && setProp(domElement, tag, defaultValue, hasSrc, props, null));
}
function updateProperties(domElement, tag, lastProps, nextProps) {
  switch (tag) {
    case "div":
    case "span":
    case "svg":
    case "path":
    case "a":
    case "g":
    case "p":
    case "li":
      break;
    case "input":
      var name = null, type = null, value = null, defaultValue = null, lastDefaultValue = null, checked = null, defaultChecked = null;
      for (propKey in lastProps) {
        var lastProp = lastProps[propKey];
        if (lastProps.hasOwnProperty(propKey) && lastProp != null)
          switch (propKey) {
            case "checked":
              break;
            case "value":
              break;
            case "defaultValue":
              lastDefaultValue = lastProp;
            default:
              nextProps.hasOwnProperty(propKey) || setProp(domElement, tag, propKey, null, nextProps, lastProp);
          }
      }
      for (var propKey$205 in nextProps) {
        var propKey = nextProps[propKey$205];
        lastProp = lastProps[propKey$205];
        if (nextProps.hasOwnProperty(propKey$205) && (propKey != null || lastProp != null))
          switch (propKey$205) {
            case "type":
              type = propKey;
              break;
            case "name":
              name = propKey;
              break;
            case "checked":
              checked = propKey;
              break;
            case "defaultChecked":
              defaultChecked = propKey;
              break;
            case "value":
              value = propKey;
              break;
            case "defaultValue":
              defaultValue = propKey;
              break;
            case "children":
            case "dangerouslySetInnerHTML":
              if (propKey != null)
                throw Error(formatProdErrorMessage2(137, tag));
              break;
            default:
              propKey !== lastProp && setProp(domElement, tag, propKey$205, propKey, nextProps, lastProp);
          }
      }
      updateInput(domElement, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name);
      return;
    case "select":
      propKey = value = defaultValue = propKey$205 = null;
      for (type in lastProps)
        if (lastDefaultValue = lastProps[type], lastProps.hasOwnProperty(type) && lastDefaultValue != null)
          switch (type) {
            case "value":
              break;
            case "multiple":
              propKey = lastDefaultValue;
            default:
              nextProps.hasOwnProperty(type) || setProp(domElement, tag, type, null, nextProps, lastDefaultValue);
          }
      for (name in nextProps)
        if (type = nextProps[name], lastDefaultValue = lastProps[name], nextProps.hasOwnProperty(name) && (type != null || lastDefaultValue != null))
          switch (name) {
            case "value":
              propKey$205 = type;
              break;
            case "defaultValue":
              defaultValue = type;
              break;
            case "multiple":
              value = type;
            default:
              type !== lastDefaultValue && setProp(domElement, tag, name, type, nextProps, lastDefaultValue);
          }
      tag = defaultValue;
      lastProps = value;
      nextProps = propKey;
      propKey$205 != null ? updateOptions(domElement, !!lastProps, propKey$205, false) : !!nextProps !== !!lastProps && (tag != null ? updateOptions(domElement, !!lastProps, tag, true) : updateOptions(domElement, !!lastProps, lastProps ? [] : "", false));
      return;
    case "textarea":
      propKey = propKey$205 = null;
      for (defaultValue in lastProps)
        if (name = lastProps[defaultValue], lastProps.hasOwnProperty(defaultValue) && name != null && !nextProps.hasOwnProperty(defaultValue))
          switch (defaultValue) {
            case "value":
              break;
            case "children":
              break;
            default:
              setProp(domElement, tag, defaultValue, null, nextProps, name);
          }
      for (value in nextProps)
        if (name = nextProps[value], type = lastProps[value], nextProps.hasOwnProperty(value) && (name != null || type != null))
          switch (value) {
            case "value":
              propKey$205 = name;
              break;
            case "defaultValue":
              propKey = name;
              break;
            case "children":
              break;
            case "dangerouslySetInnerHTML":
              if (name != null)
                throw Error(formatProdErrorMessage2(91));
              break;
            default:
              name !== type && setProp(domElement, tag, value, name, nextProps, type);
          }
      updateTextarea(domElement, propKey$205, propKey);
      return;
    case "option":
      for (var propKey$221 in lastProps)
        if (propKey$205 = lastProps[propKey$221], lastProps.hasOwnProperty(propKey$221) && propKey$205 != null && !nextProps.hasOwnProperty(propKey$221))
          switch (propKey$221) {
            case "selected":
              domElement.selected = false;
              break;
            default:
              setProp(domElement, tag, propKey$221, null, nextProps, propKey$205);
          }
      for (lastDefaultValue in nextProps)
        if (propKey$205 = nextProps[lastDefaultValue], propKey = lastProps[lastDefaultValue], nextProps.hasOwnProperty(lastDefaultValue) && propKey$205 !== propKey && (propKey$205 != null || propKey != null))
          switch (lastDefaultValue) {
            case "selected":
              domElement.selected = propKey$205 && typeof propKey$205 !== "function" && typeof propKey$205 !== "symbol";
              break;
            default:
              setProp(domElement, tag, lastDefaultValue, propKey$205, nextProps, propKey);
          }
      return;
    case "img":
    case "link":
    case "area":
    case "base":
    case "br":
    case "col":
    case "embed":
    case "hr":
    case "keygen":
    case "meta":
    case "param":
    case "source":
    case "track":
    case "wbr":
    case "menuitem":
      for (var propKey$226 in lastProps)
        propKey$205 = lastProps[propKey$226], lastProps.hasOwnProperty(propKey$226) && propKey$205 != null && !nextProps.hasOwnProperty(propKey$226) && setProp(domElement, tag, propKey$226, null, nextProps, propKey$205);
      for (checked in nextProps)
        if (propKey$205 = nextProps[checked], propKey = lastProps[checked], nextProps.hasOwnProperty(checked) && propKey$205 !== propKey && (propKey$205 != null || propKey != null))
          switch (checked) {
            case "children":
            case "dangerouslySetInnerHTML":
              if (propKey$205 != null)
                throw Error(formatProdErrorMessage2(137, tag));
              break;
            default:
              setProp(domElement, tag, checked, propKey$205, nextProps, propKey);
          }
      return;
    default:
      if (isCustomElement(tag)) {
        for (var propKey$231 in lastProps)
          propKey$205 = lastProps[propKey$231], lastProps.hasOwnProperty(propKey$231) && propKey$205 !== undefined && !nextProps.hasOwnProperty(propKey$231) && setPropOnCustomElement(domElement, tag, propKey$231, undefined, nextProps, propKey$205);
        for (defaultChecked in nextProps)
          propKey$205 = nextProps[defaultChecked], propKey = lastProps[defaultChecked], !nextProps.hasOwnProperty(defaultChecked) || propKey$205 === propKey || propKey$205 === undefined && propKey === undefined || setPropOnCustomElement(domElement, tag, defaultChecked, propKey$205, nextProps, propKey);
        return;
      }
  }
  for (var propKey$236 in lastProps)
    propKey$205 = lastProps[propKey$236], lastProps.hasOwnProperty(propKey$236) && propKey$205 != null && !nextProps.hasOwnProperty(propKey$236) && setProp(domElement, tag, propKey$236, null, nextProps, propKey$205);
  for (lastProp in nextProps)
    propKey$205 = nextProps[lastProp], propKey = lastProps[lastProp], !nextProps.hasOwnProperty(lastProp) || propKey$205 === propKey || propKey$205 == null && propKey == null || setProp(domElement, tag, lastProp, propKey$205, nextProps, propKey);
}
function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === 9 ? rootContainerElement : rootContainerElement.ownerDocument;
}
function getOwnHostContext(namespaceURI) {
  switch (namespaceURI) {
    case "http://www.w3.org/2000/svg":
      return 1;
    case "http://www.w3.org/1998/Math/MathML":
      return 2;
    default:
      return 0;
  }
}
function getChildHostContextProd(parentNamespace, type) {
  if (parentNamespace === 0)
    switch (type) {
      case "svg":
        return 1;
      case "math":
        return 2;
      default:
        return 0;
    }
  return parentNamespace === 1 && type === "foreignObject" ? 0 : parentNamespace;
}
function shouldSetTextContent(type, props) {
  return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.children === "bigint" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
}
function shouldAttemptEagerTransition() {
  var event = window.event;
  if (event && event.type === "popstate") {
    if (event === currentPopstateTransitionEvent)
      return false;
    currentPopstateTransitionEvent = event;
    return true;
  }
  currentPopstateTransitionEvent = null;
  return false;
}
function handleErrorInNextTick(error) {
  setTimeout(function() {
    throw error;
  });
}
function isSingletonScope(type) {
  return type === "head";
}
function clearSuspenseBoundary(parentInstance, suspenseInstance) {
  var node = suspenseInstance, possiblePreambleContribution = 0, depth = 0;
  do {
    var nextNode = node.nextSibling;
    parentInstance.removeChild(node);
    if (nextNode && nextNode.nodeType === 8)
      if (node = nextNode.data, node === "/$") {
        if (0 < possiblePreambleContribution && 8 > possiblePreambleContribution) {
          node = possiblePreambleContribution;
          var ownerDocument = parentInstance.ownerDocument;
          node & 1 && releaseSingletonInstance(ownerDocument.documentElement);
          node & 2 && releaseSingletonInstance(ownerDocument.body);
          if (node & 4)
            for (node = ownerDocument.head, releaseSingletonInstance(node), ownerDocument = node.firstChild;ownerDocument; ) {
              var { nextSibling: nextNode$jscomp$0, nodeName } = ownerDocument;
              ownerDocument[internalHoistableMarker] || nodeName === "SCRIPT" || nodeName === "STYLE" || nodeName === "LINK" && ownerDocument.rel.toLowerCase() === "stylesheet" || node.removeChild(ownerDocument);
              ownerDocument = nextNode$jscomp$0;
            }
        }
        if (depth === 0) {
          parentInstance.removeChild(nextNode);
          retryIfBlockedOn(suspenseInstance);
          return;
        }
        depth--;
      } else
        node === "$" || node === "$?" || node === "$!" ? depth++ : possiblePreambleContribution = node.charCodeAt(0) - 48;
    else
      possiblePreambleContribution = 0;
    node = nextNode;
  } while (node);
  retryIfBlockedOn(suspenseInstance);
}
function clearContainerSparingly(container) {
  var nextNode = container.firstChild;
  nextNode && nextNode.nodeType === 10 && (nextNode = nextNode.nextSibling);
  for (;nextNode; ) {
    var node = nextNode;
    nextNode = nextNode.nextSibling;
    switch (node.nodeName) {
      case "HTML":
      case "HEAD":
      case "BODY":
        clearContainerSparingly(node);
        detachDeletedInstance(node);
        continue;
      case "SCRIPT":
      case "STYLE":
        continue;
      case "LINK":
        if (node.rel.toLowerCase() === "stylesheet")
          continue;
    }
    container.removeChild(node);
  }
}
function canHydrateInstance(instance, type, props, inRootOrSingleton) {
  for (;instance.nodeType === 1; ) {
    var anyProps = props;
    if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
      if (!inRootOrSingleton && (instance.nodeName !== "INPUT" || instance.type !== "hidden"))
        break;
    } else if (!inRootOrSingleton)
      if (type === "input" && instance.type === "hidden") {
        var name = anyProps.name == null ? null : "" + anyProps.name;
        if (anyProps.type === "hidden" && instance.getAttribute("name") === name)
          return instance;
      } else
        return instance;
    else if (!instance[internalHoistableMarker])
      switch (type) {
        case "meta":
          if (!instance.hasAttribute("itemprop"))
            break;
          return instance;
        case "link":
          name = instance.getAttribute("rel");
          if (name === "stylesheet" && instance.hasAttribute("data-precedence"))
            break;
          else if (name !== anyProps.rel || instance.getAttribute("href") !== (anyProps.href == null || anyProps.href === "" ? null : anyProps.href) || instance.getAttribute("crossorigin") !== (anyProps.crossOrigin == null ? null : anyProps.crossOrigin) || instance.getAttribute("title") !== (anyProps.title == null ? null : anyProps.title))
            break;
          return instance;
        case "style":
          if (instance.hasAttribute("data-precedence"))
            break;
          return instance;
        case "script":
          name = instance.getAttribute("src");
          if ((name !== (anyProps.src == null ? null : anyProps.src) || instance.getAttribute("type") !== (anyProps.type == null ? null : anyProps.type) || instance.getAttribute("crossorigin") !== (anyProps.crossOrigin == null ? null : anyProps.crossOrigin)) && name && instance.hasAttribute("async") && !instance.hasAttribute("itemprop"))
            break;
          return instance;
        default:
          return instance;
      }
    instance = getNextHydratable(instance.nextSibling);
    if (instance === null)
      break;
  }
  return null;
}
function canHydrateTextInstance(instance, text, inRootOrSingleton) {
  if (text === "")
    return null;
  for (;instance.nodeType !== 3; ) {
    if ((instance.nodeType !== 1 || instance.nodeName !== "INPUT" || instance.type !== "hidden") && !inRootOrSingleton)
      return null;
    instance = getNextHydratable(instance.nextSibling);
    if (instance === null)
      return null;
  }
  return instance;
}
function isSuspenseInstanceFallback(instance) {
  return instance.data === "$!" || instance.data === "$?" && instance.ownerDocument.readyState === "complete";
}
function registerSuspenseInstanceRetry(instance, callback) {
  var ownerDocument = instance.ownerDocument;
  if (instance.data !== "$?" || ownerDocument.readyState === "complete")
    callback();
  else {
    var listener = function() {
      callback();
      ownerDocument.removeEventListener("DOMContentLoaded", listener);
    };
    ownerDocument.addEventListener("DOMContentLoaded", listener);
    instance._reactRetry = listener;
  }
}
function getNextHydratable(node) {
  for (;node != null; node = node.nextSibling) {
    var nodeType = node.nodeType;
    if (nodeType === 1 || nodeType === 3)
      break;
    if (nodeType === 8) {
      nodeType = node.data;
      if (nodeType === "$" || nodeType === "$!" || nodeType === "$?" || nodeType === "F!" || nodeType === "F")
        break;
      if (nodeType === "/$")
        return null;
    }
  }
  return node;
}
function getParentSuspenseInstance(targetInstance) {
  targetInstance = targetInstance.previousSibling;
  for (var depth = 0;targetInstance; ) {
    if (targetInstance.nodeType === 8) {
      var data = targetInstance.data;
      if (data === "$" || data === "$!" || data === "$?") {
        if (depth === 0)
          return targetInstance;
        depth--;
      } else
        data === "/$" && depth++;
    }
    targetInstance = targetInstance.previousSibling;
  }
  return null;
}
function resolveSingletonInstance(type, props, rootContainerInstance) {
  props = getOwnerDocumentFromRootContainer(rootContainerInstance);
  switch (type) {
    case "html":
      type = props.documentElement;
      if (!type)
        throw Error(formatProdErrorMessage2(452));
      return type;
    case "head":
      type = props.head;
      if (!type)
        throw Error(formatProdErrorMessage2(453));
      return type;
    case "body":
      type = props.body;
      if (!type)
        throw Error(formatProdErrorMessage2(454));
      return type;
    default:
      throw Error(formatProdErrorMessage2(451));
  }
}
function releaseSingletonInstance(instance) {
  for (var attributes = instance.attributes;attributes.length; )
    instance.removeAttributeNode(attributes[0]);
  detachDeletedInstance(instance);
}
function getHoistableRoot(container) {
  return typeof container.getRootNode === "function" ? container.getRootNode() : container.nodeType === 9 ? container : container.ownerDocument;
}
function flushSyncWork() {
  var previousWasRendering = previousDispatcher.f(), wasRendering = flushSyncWork$1();
  return previousWasRendering || wasRendering;
}
function requestFormReset(form) {
  var formInst = getInstanceFromNode(form);
  formInst !== null && formInst.tag === 5 && formInst.type === "form" ? requestFormReset$1(formInst) : previousDispatcher.r(form);
}
function preconnectAs(rel, href, crossOrigin) {
  var ownerDocument = globalDocument;
  if (ownerDocument && typeof href === "string" && href) {
    var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
    limitedEscapedHref = 'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
    typeof crossOrigin === "string" && (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
    preconnectsSet.has(limitedEscapedHref) || (preconnectsSet.add(limitedEscapedHref), rel = { rel, crossOrigin, href }, ownerDocument.querySelector(limitedEscapedHref) === null && (href = ownerDocument.createElement("link"), setInitialProperties(href, "link", rel), markNodeAsHoistable(href), ownerDocument.head.appendChild(href)));
  }
}
function prefetchDNS(href) {
  previousDispatcher.D(href);
  preconnectAs("dns-prefetch", href, null);
}
function preconnect(href, crossOrigin) {
  previousDispatcher.C(href, crossOrigin);
  preconnectAs("preconnect", href, crossOrigin);
}
function preload(href, as, options) {
  previousDispatcher.L(href, as, options);
  var ownerDocument = globalDocument;
  if (ownerDocument && href && as) {
    var preloadSelector = 'link[rel="preload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"]';
    as === "image" ? options && options.imageSrcSet ? (preloadSelector += '[imagesrcset="' + escapeSelectorAttributeValueInsideDoubleQuotes(options.imageSrcSet) + '"]', typeof options.imageSizes === "string" && (preloadSelector += '[imagesizes="' + escapeSelectorAttributeValueInsideDoubleQuotes(options.imageSizes) + '"]')) : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]' : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]';
    var key = preloadSelector;
    switch (as) {
      case "style":
        key = getStyleKey(href);
        break;
      case "script":
        key = getScriptKey(href);
    }
    preloadPropsMap.has(key) || (href = assign2({
      rel: "preload",
      href: as === "image" && options && options.imageSrcSet ? undefined : href,
      as
    }, options), preloadPropsMap.set(key, href), ownerDocument.querySelector(preloadSelector) !== null || as === "style" && ownerDocument.querySelector(getStylesheetSelectorFromKey(key)) || as === "script" && ownerDocument.querySelector(getScriptSelectorFromKey(key)) || (as = ownerDocument.createElement("link"), setInitialProperties(as, "link", href), markNodeAsHoistable(as), ownerDocument.head.appendChild(as)));
  }
}
function preloadModule(href, options) {
  previousDispatcher.m(href, options);
  var ownerDocument = globalDocument;
  if (ownerDocument && href) {
    var as = options && typeof options.as === "string" ? options.as : "script", preloadSelector = 'link[rel="modulepreload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"][href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]', key = preloadSelector;
    switch (as) {
      case "audioworklet":
      case "paintworklet":
      case "serviceworker":
      case "sharedworker":
      case "worker":
      case "script":
        key = getScriptKey(href);
    }
    if (!preloadPropsMap.has(key) && (href = assign2({ rel: "modulepreload", href }, options), preloadPropsMap.set(key, href), ownerDocument.querySelector(preloadSelector) === null)) {
      switch (as) {
        case "audioworklet":
        case "paintworklet":
        case "serviceworker":
        case "sharedworker":
        case "worker":
        case "script":
          if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
            return;
      }
      as = ownerDocument.createElement("link");
      setInitialProperties(as, "link", href);
      markNodeAsHoistable(as);
      ownerDocument.head.appendChild(as);
    }
  }
}
function preinitStyle(href, precedence, options) {
  previousDispatcher.S(href, precedence, options);
  var ownerDocument = globalDocument;
  if (ownerDocument && href) {
    var styles = getResourcesFromRoot(ownerDocument).hoistableStyles, key = getStyleKey(href);
    precedence = precedence || "default";
    var resource = styles.get(key);
    if (!resource) {
      var state = { loading: 0, preload: null };
      if (resource = ownerDocument.querySelector(getStylesheetSelectorFromKey(key)))
        state.loading = 5;
      else {
        href = assign2({ rel: "stylesheet", href, "data-precedence": precedence }, options);
        (options = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(href, options);
        var link = resource = ownerDocument.createElement("link");
        markNodeAsHoistable(link);
        setInitialProperties(link, "link", href);
        link._p = new Promise(function(resolve, reject) {
          link.onload = resolve;
          link.onerror = reject;
        });
        link.addEventListener("load", function() {
          state.loading |= 1;
        });
        link.addEventListener("error", function() {
          state.loading |= 2;
        });
        state.loading |= 4;
        insertStylesheet(resource, precedence, ownerDocument);
      }
      resource = {
        type: "stylesheet",
        instance: resource,
        count: 1,
        state
      };
      styles.set(key, resource);
    }
  }
}
function preinitScript(src, options) {
  previousDispatcher.X(src, options);
  var ownerDocument = globalDocument;
  if (ownerDocument && src) {
    var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
    resource || (resource = ownerDocument.querySelector(getScriptSelectorFromKey(key)), resource || (src = assign2({ src, async: true }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
      type: "script",
      instance: resource,
      count: 1,
      state: null
    }, scripts.set(key, resource));
  }
}
function preinitModuleScript(src, options) {
  previousDispatcher.M(src, options);
  var ownerDocument = globalDocument;
  if (ownerDocument && src) {
    var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
    resource || (resource = ownerDocument.querySelector(getScriptSelectorFromKey(key)), resource || (src = assign2({ src, async: true, type: "module" }, options), (options = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
      type: "script",
      instance: resource,
      count: 1,
      state: null
    }, scripts.set(key, resource));
  }
}
function getResource(type, currentProps, pendingProps, currentResource) {
  var JSCompiler_inline_result = (JSCompiler_inline_result = rootInstanceStackCursor.current) ? getHoistableRoot(JSCompiler_inline_result) : null;
  if (!JSCompiler_inline_result)
    throw Error(formatProdErrorMessage2(446));
  switch (type) {
    case "meta":
    case "title":
      return null;
    case "style":
      return typeof pendingProps.precedence === "string" && typeof pendingProps.href === "string" ? (currentProps = getStyleKey(pendingProps.href), pendingProps = getResourcesFromRoot(JSCompiler_inline_result).hoistableStyles, currentResource = pendingProps.get(currentProps), currentResource || (currentResource = {
        type: "style",
        instance: null,
        count: 0,
        state: null
      }, pendingProps.set(currentProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
    case "link":
      if (pendingProps.rel === "stylesheet" && typeof pendingProps.href === "string" && typeof pendingProps.precedence === "string") {
        type = getStyleKey(pendingProps.href);
        var styles$244 = getResourcesFromRoot(JSCompiler_inline_result).hoistableStyles, resource$245 = styles$244.get(type);
        resource$245 || (JSCompiler_inline_result = JSCompiler_inline_result.ownerDocument || JSCompiler_inline_result, resource$245 = {
          type: "stylesheet",
          instance: null,
          count: 0,
          state: { loading: 0, preload: null }
        }, styles$244.set(type, resource$245), (styles$244 = JSCompiler_inline_result.querySelector(getStylesheetSelectorFromKey(type))) && !styles$244._p && (resource$245.instance = styles$244, resource$245.state.loading = 5), preloadPropsMap.has(type) || (pendingProps = {
          rel: "preload",
          as: "style",
          href: pendingProps.href,
          crossOrigin: pendingProps.crossOrigin,
          integrity: pendingProps.integrity,
          media: pendingProps.media,
          hrefLang: pendingProps.hrefLang,
          referrerPolicy: pendingProps.referrerPolicy
        }, preloadPropsMap.set(type, pendingProps), styles$244 || preloadStylesheet(JSCompiler_inline_result, type, pendingProps, resource$245.state)));
        if (currentProps && currentResource === null)
          throw Error(formatProdErrorMessage2(528, ""));
        return resource$245;
      }
      if (currentProps && currentResource !== null)
        throw Error(formatProdErrorMessage2(529, ""));
      return null;
    case "script":
      return currentProps = pendingProps.async, pendingProps = pendingProps.src, typeof pendingProps === "string" && currentProps && typeof currentProps !== "function" && typeof currentProps !== "symbol" ? (currentProps = getScriptKey(pendingProps), pendingProps = getResourcesFromRoot(JSCompiler_inline_result).hoistableScripts, currentResource = pendingProps.get(currentProps), currentResource || (currentResource = {
        type: "script",
        instance: null,
        count: 0,
        state: null
      }, pendingProps.set(currentProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
    default:
      throw Error(formatProdErrorMessage2(444, type));
  }
}
function getStyleKey(href) {
  return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"';
}
function getStylesheetSelectorFromKey(key) {
  return 'link[rel="stylesheet"][' + key + "]";
}
function stylesheetPropsFromRawProps(rawProps) {
  return assign2({}, rawProps, {
    "data-precedence": rawProps.precedence,
    precedence: null
  });
}
function preloadStylesheet(ownerDocument, key, preloadProps, state) {
  ownerDocument.querySelector('link[rel="preload"][as="style"][' + key + "]") ? state.loading = 1 : (key = ownerDocument.createElement("link"), state.preload = key, key.addEventListener("load", function() {
    return state.loading |= 1;
  }), key.addEventListener("error", function() {
    return state.loading |= 2;
  }), setInitialProperties(key, "link", preloadProps), markNodeAsHoistable(key), ownerDocument.head.appendChild(key));
}
function getScriptKey(src) {
  return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]';
}
function getScriptSelectorFromKey(key) {
  return "script[async]" + key;
}
function acquireResource(hoistableRoot, resource, props) {
  resource.count++;
  if (resource.instance === null)
    switch (resource.type) {
      case "style":
        var instance = hoistableRoot.querySelector('style[data-href~="' + escapeSelectorAttributeValueInsideDoubleQuotes(props.href) + '"]');
        if (instance)
          return resource.instance = instance, markNodeAsHoistable(instance), instance;
        var styleProps = assign2({}, props, {
          "data-href": props.href,
          "data-precedence": props.precedence,
          href: null,
          precedence: null
        });
        instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement("style");
        markNodeAsHoistable(instance);
        setInitialProperties(instance, "style", styleProps);
        insertStylesheet(instance, props.precedence, hoistableRoot);
        return resource.instance = instance;
      case "stylesheet":
        styleProps = getStyleKey(props.href);
        var instance$250 = hoistableRoot.querySelector(getStylesheetSelectorFromKey(styleProps));
        if (instance$250)
          return resource.state.loading |= 4, resource.instance = instance$250, markNodeAsHoistable(instance$250), instance$250;
        instance = stylesheetPropsFromRawProps(props);
        (styleProps = preloadPropsMap.get(styleProps)) && adoptPreloadPropsForStylesheet(instance, styleProps);
        instance$250 = (hoistableRoot.ownerDocument || hoistableRoot).createElement("link");
        markNodeAsHoistable(instance$250);
        var linkInstance = instance$250;
        linkInstance._p = new Promise(function(resolve, reject) {
          linkInstance.onload = resolve;
          linkInstance.onerror = reject;
        });
        setInitialProperties(instance$250, "link", instance);
        resource.state.loading |= 4;
        insertStylesheet(instance$250, props.precedence, hoistableRoot);
        return resource.instance = instance$250;
      case "script":
        instance$250 = getScriptKey(props.src);
        if (styleProps = hoistableRoot.querySelector(getScriptSelectorFromKey(instance$250)))
          return resource.instance = styleProps, markNodeAsHoistable(styleProps), styleProps;
        instance = props;
        if (styleProps = preloadPropsMap.get(instance$250))
          instance = assign2({}, props), adoptPreloadPropsForScript(instance, styleProps);
        hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
        styleProps = hoistableRoot.createElement("script");
        markNodeAsHoistable(styleProps);
        setInitialProperties(styleProps, "link", instance);
        hoistableRoot.head.appendChild(styleProps);
        return resource.instance = styleProps;
      case "void":
        return null;
      default:
        throw Error(formatProdErrorMessage2(443, resource.type));
    }
  else
    resource.type === "stylesheet" && (resource.state.loading & 4) === 0 && (instance = resource.instance, resource.state.loading |= 4, insertStylesheet(instance, props.precedence, hoistableRoot));
  return resource.instance;
}
function insertStylesheet(instance, precedence, root2) {
  for (var nodes = root2.querySelectorAll('link[rel="stylesheet"][data-precedence],style[data-precedence]'), last = nodes.length ? nodes[nodes.length - 1] : null, prior = last, i = 0;i < nodes.length; i++) {
    var node = nodes[i];
    if (node.dataset.precedence === precedence)
      prior = node;
    else if (prior !== last)
      break;
  }
  prior ? prior.parentNode.insertBefore(instance, prior.nextSibling) : (precedence = root2.nodeType === 9 ? root2.head : root2, precedence.insertBefore(instance, precedence.firstChild));
}
function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
  stylesheetProps.crossOrigin == null && (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
  stylesheetProps.referrerPolicy == null && (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
  stylesheetProps.title == null && (stylesheetProps.title = preloadProps.title);
}
function adoptPreloadPropsForScript(scriptProps, preloadProps) {
  scriptProps.crossOrigin == null && (scriptProps.crossOrigin = preloadProps.crossOrigin);
  scriptProps.referrerPolicy == null && (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
  scriptProps.integrity == null && (scriptProps.integrity = preloadProps.integrity);
}
function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
  if (tagCaches === null) {
    var cache = new Map;
    var caches = tagCaches = new Map;
    caches.set(ownerDocument, cache);
  } else
    caches = tagCaches, cache = caches.get(ownerDocument), cache || (cache = new Map, caches.set(ownerDocument, cache));
  if (cache.has(type))
    return cache;
  cache.set(type, null);
  ownerDocument = ownerDocument.getElementsByTagName(type);
  for (caches = 0;caches < ownerDocument.length; caches++) {
    var node = ownerDocument[caches];
    if (!(node[internalHoistableMarker] || node[internalInstanceKey] || type === "link" && node.getAttribute("rel") === "stylesheet") && node.namespaceURI !== "http://www.w3.org/2000/svg") {
      var nodeKey = node.getAttribute(keyAttribute) || "";
      nodeKey = type + nodeKey;
      var existing = cache.get(nodeKey);
      existing ? existing.push(node) : cache.set(nodeKey, [node]);
    }
  }
  return cache;
}
function mountHoistable(hoistableRoot, type, instance) {
  hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
  hoistableRoot.head.insertBefore(instance, type === "title" ? hoistableRoot.querySelector("head > title") : null);
}
function isHostHoistableType(type, props, hostContext) {
  if (hostContext === 1 || props.itemProp != null)
    return false;
  switch (type) {
    case "meta":
    case "title":
      return true;
    case "style":
      if (typeof props.precedence !== "string" || typeof props.href !== "string" || props.href === "")
        break;
      return true;
    case "link":
      if (typeof props.rel !== "string" || typeof props.href !== "string" || props.href === "" || props.onLoad || props.onError)
        break;
      switch (props.rel) {
        case "stylesheet":
          return type = props.disabled, typeof props.precedence === "string" && type == null;
        default:
          return true;
      }
    case "script":
      if (props.async && typeof props.async !== "function" && typeof props.async !== "symbol" && !props.onLoad && !props.onError && props.src && typeof props.src === "string")
        return true;
  }
  return false;
}
function preloadResource(resource) {
  return resource.type === "stylesheet" && (resource.state.loading & 3) === 0 ? false : true;
}
function noop3() {
}
function suspendResource(hoistableRoot, resource, props) {
  if (suspendedState === null)
    throw Error(formatProdErrorMessage2(475));
  var state = suspendedState;
  if (resource.type === "stylesheet" && (typeof props.media !== "string" || matchMedia(props.media).matches !== false) && (resource.state.loading & 4) === 0) {
    if (resource.instance === null) {
      var key = getStyleKey(props.href), instance = hoistableRoot.querySelector(getStylesheetSelectorFromKey(key));
      if (instance) {
        hoistableRoot = instance._p;
        hoistableRoot !== null && typeof hoistableRoot === "object" && typeof hoistableRoot.then === "function" && (state.count++, state = onUnsuspend.bind(state), hoistableRoot.then(state, state));
        resource.state.loading |= 4;
        resource.instance = instance;
        markNodeAsHoistable(instance);
        return;
      }
      instance = hoistableRoot.ownerDocument || hoistableRoot;
      props = stylesheetPropsFromRawProps(props);
      (key = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(props, key);
      instance = instance.createElement("link");
      markNodeAsHoistable(instance);
      var linkInstance = instance;
      linkInstance._p = new Promise(function(resolve, reject) {
        linkInstance.onload = resolve;
        linkInstance.onerror = reject;
      });
      setInitialProperties(instance, "link", props);
      resource.instance = instance;
    }
    state.stylesheets === null && (state.stylesheets = new Map);
    state.stylesheets.set(resource, hoistableRoot);
    (hoistableRoot = resource.state.preload) && (resource.state.loading & 3) === 0 && (state.count++, resource = onUnsuspend.bind(state), hoistableRoot.addEventListener("load", resource), hoistableRoot.addEventListener("error", resource));
  }
}
function waitForCommitToBeReady() {
  if (suspendedState === null)
    throw Error(formatProdErrorMessage2(475));
  var state = suspendedState;
  state.stylesheets && state.count === 0 && insertSuspendedStylesheets(state, state.stylesheets);
  return 0 < state.count ? function(commit) {
    var stylesheetTimer = setTimeout(function() {
      state.stylesheets && insertSuspendedStylesheets(state, state.stylesheets);
      if (state.unsuspend) {
        var unsuspend = state.unsuspend;
        state.unsuspend = null;
        unsuspend();
      }
    }, 60000);
    state.unsuspend = commit;
    return function() {
      state.unsuspend = null;
      clearTimeout(stylesheetTimer);
    };
  } : null;
}
function onUnsuspend() {
  this.count--;
  if (this.count === 0) {
    if (this.stylesheets)
      insertSuspendedStylesheets(this, this.stylesheets);
    else if (this.unsuspend) {
      var unsuspend = this.unsuspend;
      this.unsuspend = null;
      unsuspend();
    }
  }
}
function insertSuspendedStylesheets(state, resources) {
  state.stylesheets = null;
  state.unsuspend !== null && (state.count++, precedencesByRoot = new Map, resources.forEach(insertStylesheetIntoRoot, state), precedencesByRoot = null, onUnsuspend.call(state));
}
function insertStylesheetIntoRoot(root2, resource) {
  if (!(resource.state.loading & 4)) {
    var precedences = precedencesByRoot.get(root2);
    if (precedences)
      var last = precedences.get(null);
    else {
      precedences = new Map;
      precedencesByRoot.set(root2, precedences);
      for (var nodes = root2.querySelectorAll("link[data-precedence],style[data-precedence]"), i = 0;i < nodes.length; i++) {
        var node = nodes[i];
        if (node.nodeName === "LINK" || node.getAttribute("media") !== "not all")
          precedences.set(node.dataset.precedence, node), last = node;
      }
      last && precedences.set(null, last);
    }
    nodes = resource.instance;
    node = nodes.getAttribute("data-precedence");
    i = precedences.get(node) || last;
    i === last && precedences.set(null, nodes);
    precedences.set(node, nodes);
    this.count++;
    last = onUnsuspend.bind(this);
    nodes.addEventListener("load", last);
    nodes.addEventListener("error", last);
    i ? i.parentNode.insertBefore(nodes, i.nextSibling) : (root2 = root2.nodeType === 9 ? root2.head : root2, root2.insertBefore(nodes, root2.firstChild));
    resource.state.loading |= 4;
  }
}
function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {
  this.tag = 1;
  this.containerInfo = containerInfo;
  this.pingCache = this.current = this.pendingChildren = null;
  this.timeoutHandle = -1;
  this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
  this.callbackPriority = 0;
  this.expirationTimes = createLaneMap(-1);
  this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
  this.entanglements = createLaneMap(0);
  this.hiddenUpdates = createLaneMap(null);
  this.identifierPrefix = identifierPrefix;
  this.onUncaughtError = onUncaughtError;
  this.onCaughtError = onCaughtError;
  this.onRecoverableError = onRecoverableError;
  this.pooledCache = null;
  this.pooledCacheLanes = 0;
  this.formState = formState;
  this.incompleteTransitions = new Map;
}
function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState) {
  containerInfo = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState);
  tag = 1;
  isStrictMode === true && (tag |= 24);
  isStrictMode = createFiberImplClass(3, null, null, tag);
  containerInfo.current = isStrictMode;
  isStrictMode.stateNode = containerInfo;
  tag = createCache();
  tag.refCount++;
  containerInfo.pooledCache = tag;
  tag.refCount++;
  isStrictMode.memoizedState = {
    element: initialChildren,
    isDehydrated: hydrate,
    cache: tag
  };
  initializeUpdateQueue(isStrictMode);
  return containerInfo;
}
function getContextForSubtree(parentComponent) {
  if (!parentComponent)
    return emptyContextObject;
  parentComponent = emptyContextObject;
  return parentComponent;
}
function updateContainerImpl(rootFiber, lane, element, container, parentComponent, callback) {
  parentComponent = getContextForSubtree(parentComponent);
  container.context === null ? container.context = parentComponent : container.pendingContext = parentComponent;
  container = createUpdate(lane);
  container.payload = { element };
  callback = callback === undefined ? null : callback;
  callback !== null && (container.callback = callback);
  element = enqueueUpdate(rootFiber, container, lane);
  element !== null && (scheduleUpdateOnFiber(element, rootFiber, lane), entangleTransitions(element, rootFiber, lane));
}
function markRetryLaneImpl(fiber, retryLane) {
  fiber = fiber.memoizedState;
  if (fiber !== null && fiber.dehydrated !== null) {
    var a = fiber.retryLane;
    fiber.retryLane = a !== 0 && a < retryLane ? a : retryLane;
  }
}
function markRetryLaneIfNotHydrated(fiber, retryLane) {
  markRetryLaneImpl(fiber, retryLane);
  (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
}
function attemptContinuousHydration(fiber) {
  if (fiber.tag === 13) {
    var root2 = enqueueConcurrentRenderForLane(fiber, 67108864);
    root2 !== null && scheduleUpdateOnFiber(root2, fiber, 67108864);
    markRetryLaneIfNotHydrated(fiber, 67108864);
  }
}
function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
  var prevTransition = ReactSharedInternals3.T;
  ReactSharedInternals3.T = null;
  var previousPriority = ReactDOMSharedInternals.p;
  try {
    ReactDOMSharedInternals.p = 2, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
  } finally {
    ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals3.T = prevTransition;
  }
}
function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
  var prevTransition = ReactSharedInternals3.T;
  ReactSharedInternals3.T = null;
  var previousPriority = ReactDOMSharedInternals.p;
  try {
    ReactDOMSharedInternals.p = 8, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
  } finally {
    ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals3.T = prevTransition;
  }
}
function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  if (_enabled) {
    var blockedOn = findInstanceBlockingEvent(nativeEvent);
    if (blockedOn === null)
      dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer), clearIfContinuousEvent(domEventName, nativeEvent);
    else if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent))
      nativeEvent.stopPropagation();
    else if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & 4 && -1 < discreteReplayableEvents.indexOf(domEventName)) {
      for (;blockedOn !== null; ) {
        var fiber = getInstanceFromNode(blockedOn);
        if (fiber !== null)
          switch (fiber.tag) {
            case 3:
              fiber = fiber.stateNode;
              if (fiber.current.memoizedState.isDehydrated) {
                var lanes = getHighestPriorityLanes(fiber.pendingLanes);
                if (lanes !== 0) {
                  var root2 = fiber;
                  root2.pendingLanes |= 2;
                  for (root2.entangledLanes |= 2;lanes; ) {
                    var lane = 1 << 31 - clz32(lanes);
                    root2.entanglements[1] |= lane;
                    lanes &= ~lane;
                  }
                  ensureRootIsScheduled(fiber);
                  (executionContext & 6) === 0 && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0, false));
                }
              }
              break;
            case 13:
              root2 = enqueueConcurrentRenderForLane(fiber, 2), root2 !== null && scheduleUpdateOnFiber(root2, fiber, 2), flushSyncWork$1(), markRetryLaneIfNotHydrated(fiber, 2);
          }
        fiber = findInstanceBlockingEvent(nativeEvent);
        fiber === null && dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
        if (fiber === blockedOn)
          break;
        blockedOn = fiber;
      }
      blockedOn !== null && nativeEvent.stopPropagation();
    } else
      dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
  }
}
function findInstanceBlockingEvent(nativeEvent) {
  nativeEvent = getEventTarget(nativeEvent);
  return findInstanceBlockingTarget(nativeEvent);
}
function findInstanceBlockingTarget(targetNode) {
  return_targetInst = null;
  targetNode = getClosestInstanceFromNode(targetNode);
  if (targetNode !== null) {
    var nearestMounted = getNearestMountedFiber(targetNode);
    if (nearestMounted === null)
      targetNode = null;
    else {
      var tag = nearestMounted.tag;
      if (tag === 13) {
        targetNode = getSuspenseInstanceFromFiber(nearestMounted);
        if (targetNode !== null)
          return targetNode;
        targetNode = null;
      } else if (tag === 3) {
        if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
          return nearestMounted.tag === 3 ? nearestMounted.stateNode.containerInfo : null;
        targetNode = null;
      } else
        nearestMounted !== targetNode && (targetNode = null);
    }
  }
  return_targetInst = targetNode;
  return null;
}
function getEventPriority(domEventName) {
  switch (domEventName) {
    case "beforetoggle":
    case "cancel":
    case "click":
    case "close":
    case "contextmenu":
    case "copy":
    case "cut":
    case "auxclick":
    case "dblclick":
    case "dragend":
    case "dragstart":
    case "drop":
    case "focusin":
    case "focusout":
    case "input":
    case "invalid":
    case "keydown":
    case "keypress":
    case "keyup":
    case "mousedown":
    case "mouseup":
    case "paste":
    case "pause":
    case "play":
    case "pointercancel":
    case "pointerdown":
    case "pointerup":
    case "ratechange":
    case "reset":
    case "resize":
    case "seeked":
    case "submit":
    case "toggle":
    case "touchcancel":
    case "touchend":
    case "touchstart":
    case "volumechange":
    case "change":
    case "selectionchange":
    case "textInput":
    case "compositionstart":
    case "compositionend":
    case "compositionupdate":
    case "beforeblur":
    case "afterblur":
    case "beforeinput":
    case "blur":
    case "fullscreenchange":
    case "focus":
    case "hashchange":
    case "popstate":
    case "select":
    case "selectstart":
      return 2;
    case "drag":
    case "dragenter":
    case "dragexit":
    case "dragleave":
    case "dragover":
    case "mousemove":
    case "mouseout":
    case "mouseover":
    case "pointermove":
    case "pointerout":
    case "pointerover":
    case "scroll":
    case "touchmove":
    case "wheel":
    case "mouseenter":
    case "mouseleave":
    case "pointerenter":
    case "pointerleave":
      return 8;
    case "message":
      switch (getCurrentPriorityLevel()) {
        case ImmediatePriority:
          return 2;
        case UserBlockingPriority:
          return 8;
        case NormalPriority$1:
        case LowPriority:
          return 32;
        case IdlePriority:
          return 268435456;
        default:
          return 32;
      }
    default:
      return 32;
  }
}
function clearIfContinuousEvent(domEventName, nativeEvent) {
  switch (domEventName) {
    case "focusin":
    case "focusout":
      queuedFocus = null;
      break;
    case "dragenter":
    case "dragleave":
      queuedDrag = null;
      break;
    case "mouseover":
    case "mouseout":
      queuedMouse = null;
      break;
    case "pointerover":
    case "pointerout":
      queuedPointers.delete(nativeEvent.pointerId);
      break;
    case "gotpointercapture":
    case "lostpointercapture":
      queuedPointerCaptures.delete(nativeEvent.pointerId);
  }
}
function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent)
    return existingQueuedEvent = {
      blockedOn,
      domEventName,
      eventSystemFlags,
      nativeEvent,
      targetContainers: [targetContainer]
    }, blockedOn !== null && (blockedOn = getInstanceFromNode(blockedOn), blockedOn !== null && attemptContinuousHydration(blockedOn)), existingQueuedEvent;
  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
  blockedOn = existingQueuedEvent.targetContainers;
  targetContainer !== null && blockedOn.indexOf(targetContainer) === -1 && blockedOn.push(targetContainer);
  return existingQueuedEvent;
}
function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  switch (domEventName) {
    case "focusin":
      return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent), true;
    case "dragenter":
      return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent), true;
    case "mouseover":
      return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent), true;
    case "pointerover":
      var pointerId = nativeEvent.pointerId;
      queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent));
      return true;
    case "gotpointercapture":
      return pointerId = nativeEvent.pointerId, queuedPointerCaptures.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)), true;
  }
  return false;
}
function attemptExplicitHydrationTarget(queuedTarget) {
  var targetInst = getClosestInstanceFromNode(queuedTarget.target);
  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);
    if (nearestMounted !== null) {
      if (targetInst = nearestMounted.tag, targetInst === 13) {
        if (targetInst = getSuspenseInstanceFromFiber(nearestMounted), targetInst !== null) {
          queuedTarget.blockedOn = targetInst;
          runWithPriority(queuedTarget.priority, function() {
            if (nearestMounted.tag === 13) {
              var lane = requestUpdateLane();
              lane = getBumpedLaneForHydrationByLane(lane);
              var root2 = enqueueConcurrentRenderForLane(nearestMounted, lane);
              root2 !== null && scheduleUpdateOnFiber(root2, nearestMounted, lane);
              markRetryLaneIfNotHydrated(nearestMounted, lane);
            }
          });
          return;
        }
      } else if (targetInst === 3 && nearestMounted.stateNode.current.memoizedState.isDehydrated) {
        queuedTarget.blockedOn = nearestMounted.tag === 3 ? nearestMounted.stateNode.containerInfo : null;
        return;
      }
    }
  }
  queuedTarget.blockedOn = null;
}
function attemptReplayContinuousQueuedEvent(queuedEvent) {
  if (queuedEvent.blockedOn !== null)
    return false;
  for (var targetContainers = queuedEvent.targetContainers;0 < targetContainers.length; ) {
    var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
    if (nextBlockedOn === null) {
      nextBlockedOn = queuedEvent.nativeEvent;
      var nativeEventClone = new nextBlockedOn.constructor(nextBlockedOn.type, nextBlockedOn);
      currentReplayingEvent = nativeEventClone;
      nextBlockedOn.target.dispatchEvent(nativeEventClone);
      currentReplayingEvent = null;
    } else
      return targetContainers = getInstanceFromNode(nextBlockedOn), targetContainers !== null && attemptContinuousHydration(targetContainers), queuedEvent.blockedOn = nextBlockedOn, false;
    targetContainers.shift();
  }
  return true;
}
function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
  attemptReplayContinuousQueuedEvent(queuedEvent) && map.delete(key);
}
function replayUnblockedEvents() {
  hasScheduledReplayAttempt = false;
  queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null);
  queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null);
  queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null);
  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
}
function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
  queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = true, Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents)));
}
function scheduleReplayQueueIfNeeded(formReplayingQueue) {
  lastScheduledReplayQueue !== formReplayingQueue && (lastScheduledReplayQueue = formReplayingQueue, Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, function() {
    lastScheduledReplayQueue === formReplayingQueue && (lastScheduledReplayQueue = null);
    for (var i = 0;i < formReplayingQueue.length; i += 3) {
      var form = formReplayingQueue[i], submitterOrAction = formReplayingQueue[i + 1], formData = formReplayingQueue[i + 2];
      if (typeof submitterOrAction !== "function")
        if (findInstanceBlockingTarget(submitterOrAction || form) === null)
          continue;
        else
          break;
      var formInst = getInstanceFromNode(form);
      formInst !== null && (formReplayingQueue.splice(i, 3), i -= 3, startHostTransition(formInst, {
        pending: true,
        data: formData,
        method: form.method,
        action: submitterOrAction
      }, submitterOrAction, formData));
    }
  }));
}
function retryIfBlockedOn(unblocked) {
  function unblock(queuedEvent) {
    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
  }
  queuedFocus !== null && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
  queuedDrag !== null && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
  queuedMouse !== null && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
  queuedPointers.forEach(unblock);
  queuedPointerCaptures.forEach(unblock);
  for (var i = 0;i < queuedExplicitHydrationTargets.length; i++) {
    var queuedTarget = queuedExplicitHydrationTargets[i];
    queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
  }
  for (;0 < queuedExplicitHydrationTargets.length && (i = queuedExplicitHydrationTargets[0], i.blockedOn === null); )
    attemptExplicitHydrationTarget(i), i.blockedOn === null && queuedExplicitHydrationTargets.shift();
  i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
  if (i != null)
    for (queuedTarget = 0;queuedTarget < i.length; queuedTarget += 3) {
      var form = i[queuedTarget], submitterOrAction = i[queuedTarget + 1], formProps = form[internalPropsKey] || null;
      if (typeof submitterOrAction === "function")
        formProps || scheduleReplayQueueIfNeeded(i);
      else if (formProps) {
        var action = null;
        if (submitterOrAction && submitterOrAction.hasAttribute("formAction"))
          if (form = submitterOrAction, formProps = submitterOrAction[internalPropsKey] || null)
            action = formProps.formAction;
          else {
            if (findInstanceBlockingTarget(form) !== null)
              continue;
          }
        else
          action = formProps.action;
        typeof action === "function" ? i[queuedTarget + 1] = action : (i.splice(queuedTarget, 3), queuedTarget -= 3);
        scheduleReplayQueueIfNeeded(i);
      }
    }
}
function ReactDOMRoot(internalRoot) {
  this._internalRoot = internalRoot;
}
function ReactDOMHydrationRoot(internalRoot) {
  this._internalRoot = internalRoot;
}
var Scheduler, React2, ReactDOM, assign2, REACT_LEGACY_ELEMENT_TYPE, REACT_ELEMENT_TYPE2, REACT_PORTAL_TYPE3, REACT_FRAGMENT_TYPE2, REACT_STRICT_MODE_TYPE2, REACT_PROFILER_TYPE2, REACT_PROVIDER_TYPE, REACT_CONSUMER_TYPE2, REACT_CONTEXT_TYPE2, REACT_FORWARD_REF_TYPE2, REACT_SUSPENSE_TYPE2, REACT_SUSPENSE_LIST_TYPE, REACT_MEMO_TYPE2, REACT_LAZY_TYPE2, REACT_ACTIVITY_TYPE, REACT_MEMO_CACHE_SENTINEL, MAYBE_ITERATOR_SYMBOL2, REACT_CLIENT_REFERENCE, isArrayImpl2, ReactSharedInternals3, ReactDOMSharedInternals, sharedNotPendingObject, valueStack, index = -1, contextStackCursor, contextFiberStackCursor, rootInstanceStackCursor, hostTransitionProviderCursor, hasOwnProperty2, scheduleCallback$3, cancelCallback$1, shouldYield, requestPaint, now, getCurrentPriorityLevel, ImmediatePriority, UserBlockingPriority, NormalPriority$1, LowPriority, IdlePriority, log$1, unstable_setDisableYieldValue2, rendererID = null, injectedHook = null, clz32, log2, LN2, nextTransitionLane = 256, nextRetryLane = 4194304, randomKey, internalInstanceKey, internalPropsKey, internalContainerInstanceKey, internalEventHandlersKey, internalEventHandlerListenersKey, internalEventHandlesSetKey, internalRootNodeResourcesKey, internalHoistableMarker, allNativeEvents, registrationNameDependencies, VALID_ATTRIBUTE_NAME_REGEX, illegalAttributeNameCache, validatedAttributeNameCache, prefix, suffix, reentry = false, escapeSelectorAttributeValueInsideDoubleQuotesRegex, unitlessNumbers, aliases, isJavaScriptProtocol, currentReplayingEvent = null, restoreTarget = null, restoreQueue = null, isInsideEventHandler = false, canUseDOM, passiveBrowserEventsSupported = false, options, root = null, startText = null, fallbackText = null, EventInterface, SyntheticEvent, UIEventInterface, SyntheticUIEvent, lastMovementX, lastMovementY, lastMouseEvent, MouseEventInterface, SyntheticMouseEvent, DragEventInterface, SyntheticDragEvent, FocusEventInterface, SyntheticFocusEvent, AnimationEventInterface, SyntheticAnimationEvent, ClipboardEventInterface, SyntheticClipboardEvent, CompositionEventInterface, SyntheticCompositionEvent, normalizeKey, translateToKey, modifierKeyToProp, KeyboardEventInterface, SyntheticKeyboardEvent, PointerEventInterface, SyntheticPointerEvent, TouchEventInterface, SyntheticTouchEvent, TransitionEventInterface, SyntheticTransitionEvent, WheelEventInterface, SyntheticWheelEvent, ToggleEventInterface, SyntheticToggleEvent, END_KEYCODES, canUseCompositionEvent, documentMode = null, canUseTextInputEvent, useFallbackCompositionData, SPACEBAR_CHAR, hasSpaceKeypress = false, isComposing = false, supportedInputTypes, activeElement$1 = null, activeElementInst$1 = null, isInputEventSupported = false, JSCompiler_inline_result$jscomp$282, isSupported$jscomp$inline_417, element$jscomp$inline_418, objectIs, skipSelectionChangeEvent, activeElement = null, activeElementInst = null, lastSelection = null, mouseDown = false, vendorPrefixes, prefixedEventNames, style, ANIMATION_END, ANIMATION_ITERATION, ANIMATION_START, TRANSITION_RUN, TRANSITION_START, TRANSITION_CANCEL, TRANSITION_END, topLevelEventsToReactNames, simpleEventPluginEvents, CapturedStacks, concurrentQueues, concurrentQueuesIndex = 0, concurrentlyUpdatedLanes = 0, emptyContextObject, forkStack, forkStackIndex = 0, treeForkProvider = null, treeForkCount = 0, idStack, idStackIndex = 0, treeContextProvider = null, treeContextId = 1, treeContextOverflow = "", hydrationParentFiber = null, nextHydratableInstance = null, isHydrating = false, hydrationErrors = null, rootOrSingletonContext = false, HydrationMismatchException, valueCursor, currentlyRenderingFiber$1 = null, lastContextDependency = null, AbortControllerLocal, scheduleCallback$2, NormalPriority, CacheContext, currentEntangledListeners = null, currentEntangledPendingCount = 0, currentEntangledLane = 0, currentEntangledActionThenable = null, prevOnStartTransitionFinish, resumedCache, SuspenseException, SuspenseyCommitException, SuspenseActionException, noopSuspenseyCommitThenable, suspendedThenable = null, hasForceUpdate = false, didReadFromEntangledAsyncAction = false, currentTreeHiddenStackCursor, prevEntangledRenderLanesCursor, renderLanes = 0, currentlyRenderingFiber = null, currentHook = null, workInProgressHook = null, didScheduleRenderPhaseUpdate = false, didScheduleRenderPhaseUpdateDuringThisPass = false, shouldDoubleInvokeUserFnsInHooksDEV = false, localIdCounter = 0, thenableIndexCounter$1 = 0, thenableState$1 = null, globalClientIdCounter = 0, ContextOnlyDispatcher, HooksDispatcherOnMount, HooksDispatcherOnUpdate, HooksDispatcherOnRerender, thenableState = null, thenableIndexCounter = 0, reconcileChildFibers, mountChildFibers, suspenseHandlerStackCursor, shellBoundary = null, suspenseStackCursor, classComponentUpdater, reportGlobalError2, SelectiveHydrationException, didReceiveUpdate = false, SUSPENDED_MARKER, offscreenSubtreeIsHidden = false, offscreenSubtreeWasHidden = false, needsFormReset = false, PossiblyWeakSet, nextEffect = null, hostParent = null, hostParentIsContainer = false, currentHoistableRoot = null, suspenseyCommitFlag = 8192, DefaultAsyncDispatcher, PossiblyWeakMap, executionContext = 0, workInProgressRoot = null, workInProgress = null, workInProgressRootRenderLanes = 0, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, workInProgressRootDidSkipSuspendedSiblings = false, workInProgressRootIsPrerendering = false, workInProgressRootDidAttachPingListener = false, entangledRenderLanes = 0, workInProgressRootExitStatus = 0, workInProgressRootSkippedLanes = 0, workInProgressRootInterleavedUpdatedLanes = 0, workInProgressRootPingedLanes = 0, workInProgressDeferredLane = 0, workInProgressSuspendedRetryLanes = 0, workInProgressRootConcurrentErrors = null, workInProgressRootRecoverableErrors = null, workInProgressRootDidIncludeRecursiveRenderUpdate = false, globalMostRecentFallbackTime = 0, workInProgressRootRenderTargetTime = Infinity, workInProgressTransitions = null, legacyErrorBoundariesThatAlreadyFailed = null, pendingEffectsStatus = 0, pendingEffectsRoot = null, pendingFinishedWork = null, pendingEffectsLanes = 0, pendingEffectsRemainingLanes = 0, pendingPassiveTransitions = null, pendingRecoverableErrors = null, nestedUpdateCount = 0, rootWithNestedUpdates = null, firstScheduledRoot = null, lastScheduledRoot = null, didScheduleMicrotask = false, mightHavePendingSyncWork = false, isFlushingWork = false, currentEventTransitionLane = 0, eventName$jscomp$inline_1529, domEventName$jscomp$inline_1530, capitalizedEvent$jscomp$inline_1531, i$jscomp$inline_1528, mediaEventTypes, nonDelegatedEvents, listeningMarker, NORMALIZE_NEWLINES_REGEX, NORMALIZE_NULL_AND_REPLACEMENT_REGEX, eventsEnabled = null, selectionInformation = null, currentPopstateTransitionEvent = null, scheduleTimeout, cancelTimeout, localPromise, scheduleMicrotask, previousHydratableOnEnteringScopedSingleton = null, preloadPropsMap, preconnectsSet, previousDispatcher, globalDocument, tagCaches = null, suspendedState = null, precedencesByRoot = null, HostTransitionContext, _enabled = true, return_targetInst = null, hasScheduledReplayAttempt = false, queuedFocus = null, queuedDrag = null, queuedMouse = null, queuedPointers, queuedPointerCaptures, queuedExplicitHydrationTargets, discreteReplayableEvents, lastScheduledReplayQueue = null, isomorphicReactPackageVersion$jscomp$inline_1785, internals$jscomp$inline_2256, hook$jscomp$inline_2257, $createRoot = function(container, options) {
  if (!isValidContainer(container))
    throw Error(formatProdErrorMessage2(299));
  var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null;
  options !== null && options !== undefined && (options.unstable_strictMode === true && (isStrictMode = true), options.identifierPrefix !== undefined && (identifierPrefix = options.identifierPrefix), options.onUncaughtError !== undefined && (onUncaughtError = options.onUncaughtError), options.onCaughtError !== undefined && (onCaughtError = options.onCaughtError), options.onRecoverableError !== undefined && (onRecoverableError = options.onRecoverableError), options.unstable_transitionCallbacks !== undefined && (transitionCallbacks = options.unstable_transitionCallbacks));
  options = createFiberRoot(container, 1, false, null, null, isStrictMode, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, null);
  container[internalContainerInstanceKey] = options.current;
  listenToAllSupportedEvents(container);
  return new ReactDOMRoot(options);
}, $hydrateRoot = function(container, initialChildren, options) {
  if (!isValidContainer(container))
    throw Error(formatProdErrorMessage2(299));
  var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null, formState = null;
  options !== null && options !== undefined && (options.unstable_strictMode === true && (isStrictMode = true), options.identifierPrefix !== undefined && (identifierPrefix = options.identifierPrefix), options.onUncaughtError !== undefined && (onUncaughtError = options.onUncaughtError), options.onCaughtError !== undefined && (onCaughtError = options.onCaughtError), options.onRecoverableError !== undefined && (onRecoverableError = options.onRecoverableError), options.unstable_transitionCallbacks !== undefined && (transitionCallbacks = options.unstable_transitionCallbacks), options.formState !== undefined && (formState = options.formState));
  initialChildren = createFiberRoot(container, 1, true, initialChildren, options != null ? options : null, isStrictMode, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState);
  initialChildren.context = getContextForSubtree(null);
  options = initialChildren.current;
  isStrictMode = requestUpdateLane();
  isStrictMode = getBumpedLaneForHydrationByLane(isStrictMode);
  identifierPrefix = createUpdate(isStrictMode);
  identifierPrefix.callback = null;
  enqueueUpdate(options, identifierPrefix, isStrictMode);
  options = isStrictMode;
  initialChildren.current.lanes = options;
  markRootUpdated$1(initialChildren, options);
  ensureRootIsScheduled(initialChildren);
  container[internalContainerInstanceKey] = initialChildren.current;
  listenToAllSupportedEvents(container);
  return new ReactDOMHydrationRoot(initialChildren);
}, $version3 = "19.1.0";
var init_react_dom_client_production = __esm(() => {
  Scheduler = __toESM(require_scheduler(), 1);
  React2 = __toESM(require_react(), 1);
  ReactDOM = __toESM(require_react_dom(), 1);
  assign2 = Object.assign;
  REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element");
  REACT_ELEMENT_TYPE2 = Symbol.for("react.transitional.element");
  REACT_PORTAL_TYPE3 = Symbol.for("react.portal");
  REACT_FRAGMENT_TYPE2 = Symbol.for("react.fragment");
  REACT_STRICT_MODE_TYPE2 = Symbol.for("react.strict_mode");
  REACT_PROFILER_TYPE2 = Symbol.for("react.profiler");
  REACT_PROVIDER_TYPE = Symbol.for("react.provider");
  REACT_CONSUMER_TYPE2 = Symbol.for("react.consumer");
  REACT_CONTEXT_TYPE2 = Symbol.for("react.context");
  REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
  REACT_SUSPENSE_TYPE2 = Symbol.for("react.suspense");
  REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
  REACT_MEMO_TYPE2 = Symbol.for("react.memo");
  REACT_LAZY_TYPE2 = Symbol.for("react.lazy");
  Symbol.for("react.scope");
  REACT_ACTIVITY_TYPE = Symbol.for("react.activity");
  Symbol.for("react.legacy_hidden");
  Symbol.for("react.tracing_marker");
  REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
  Symbol.for("react.view_transition");
  MAYBE_ITERATOR_SYMBOL2 = Symbol.iterator;
  REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
  isArrayImpl2 = Array.isArray;
  ReactSharedInternals3 = React2.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
  ReactDOMSharedInternals = ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
  sharedNotPendingObject = {
    pending: false,
    data: null,
    method: null,
    action: null
  };
  valueStack = [];
  contextStackCursor = createCursor(null);
  contextFiberStackCursor = createCursor(null);
  rootInstanceStackCursor = createCursor(null);
  hostTransitionProviderCursor = createCursor(null);
  hasOwnProperty2 = Object.prototype.hasOwnProperty;
  scheduleCallback$3 = Scheduler.unstable_scheduleCallback;
  cancelCallback$1 = Scheduler.unstable_cancelCallback;
  shouldYield = Scheduler.unstable_shouldYield;
  requestPaint = Scheduler.unstable_requestPaint;
  now = Scheduler.unstable_now;
  getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
  ImmediatePriority = Scheduler.unstable_ImmediatePriority;
  UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
  NormalPriority$1 = Scheduler.unstable_NormalPriority;
  LowPriority = Scheduler.unstable_LowPriority;
  IdlePriority = Scheduler.unstable_IdlePriority;
  log$1 = Scheduler.log;
  unstable_setDisableYieldValue2 = Scheduler.unstable_setDisableYieldValue;
  clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
  log2 = Math.log;
  LN2 = Math.LN2;
  randomKey = Math.random().toString(36).slice(2);
  internalInstanceKey = "__reactFiber$" + randomKey;
  internalPropsKey = "__reactProps$" + randomKey;
  internalContainerInstanceKey = "__reactContainer$" + randomKey;
  internalEventHandlersKey = "__reactEvents$" + randomKey;
  internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
  internalEventHandlesSetKey = "__reactHandles$" + randomKey;
  internalRootNodeResourcesKey = "__reactResources$" + randomKey;
  internalHoistableMarker = "__reactMarker$" + randomKey;
  allNativeEvents = new Set;
  registrationNameDependencies = {};
  VALID_ATTRIBUTE_NAME_REGEX = RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$");
  illegalAttributeNameCache = {};
  validatedAttributeNameCache = {};
  escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g;
  unitlessNumbers = new Set("animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(" "));
  aliases = new Map([
    ["acceptCharset", "accept-charset"],
    ["htmlFor", "for"],
    ["httpEquiv", "http-equiv"],
    ["crossOrigin", "crossorigin"],
    ["accentHeight", "accent-height"],
    ["alignmentBaseline", "alignment-baseline"],
    ["arabicForm", "arabic-form"],
    ["baselineShift", "baseline-shift"],
    ["capHeight", "cap-height"],
    ["clipPath", "clip-path"],
    ["clipRule", "clip-rule"],
    ["colorInterpolation", "color-interpolation"],
    ["colorInterpolationFilters", "color-interpolation-filters"],
    ["colorProfile", "color-profile"],
    ["colorRendering", "color-rendering"],
    ["dominantBaseline", "dominant-baseline"],
    ["enableBackground", "enable-background"],
    ["fillOpacity", "fill-opacity"],
    ["fillRule", "fill-rule"],
    ["floodColor", "flood-color"],
    ["floodOpacity", "flood-opacity"],
    ["fontFamily", "font-family"],
    ["fontSize", "font-size"],
    ["fontSizeAdjust", "font-size-adjust"],
    ["fontStretch", "font-stretch"],
    ["fontStyle", "font-style"],
    ["fontVariant", "font-variant"],
    ["fontWeight", "font-weight"],
    ["glyphName", "glyph-name"],
    ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
    ["glyphOrientationVertical", "glyph-orientation-vertical"],
    ["horizAdvX", "horiz-adv-x"],
    ["horizOriginX", "horiz-origin-x"],
    ["imageRendering", "image-rendering"],
    ["letterSpacing", "letter-spacing"],
    ["lightingColor", "lighting-color"],
    ["markerEnd", "marker-end"],
    ["markerMid", "marker-mid"],
    ["markerStart", "marker-start"],
    ["overlinePosition", "overline-position"],
    ["overlineThickness", "overline-thickness"],
    ["paintOrder", "paint-order"],
    ["panose-1", "panose-1"],
    ["pointerEvents", "pointer-events"],
    ["renderingIntent", "rendering-intent"],
    ["shapeRendering", "shape-rendering"],
    ["stopColor", "stop-color"],
    ["stopOpacity", "stop-opacity"],
    ["strikethroughPosition", "strikethrough-position"],
    ["strikethroughThickness", "strikethrough-thickness"],
    ["strokeDasharray", "stroke-dasharray"],
    ["strokeDashoffset", "stroke-dashoffset"],
    ["strokeLinecap", "stroke-linecap"],
    ["strokeLinejoin", "stroke-linejoin"],
    ["strokeMiterlimit", "stroke-miterlimit"],
    ["strokeOpacity", "stroke-opacity"],
    ["strokeWidth", "stroke-width"],
    ["textAnchor", "text-anchor"],
    ["textDecoration", "text-decoration"],
    ["textRendering", "text-rendering"],
    ["transformOrigin", "transform-origin"],
    ["underlinePosition", "underline-position"],
    ["underlineThickness", "underline-thickness"],
    ["unicodeBidi", "unicode-bidi"],
    ["unicodeRange", "unicode-range"],
    ["unitsPerEm", "units-per-em"],
    ["vAlphabetic", "v-alphabetic"],
    ["vHanging", "v-hanging"],
    ["vIdeographic", "v-ideographic"],
    ["vMathematical", "v-mathematical"],
    ["vectorEffect", "vector-effect"],
    ["vertAdvY", "vert-adv-y"],
    ["vertOriginX", "vert-origin-x"],
    ["vertOriginY", "vert-origin-y"],
    ["wordSpacing", "word-spacing"],
    ["writingMode", "writing-mode"],
    ["xmlnsXlink", "xmlns:xlink"],
    ["xHeight", "x-height"]
  ]);
  isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;
  canUseDOM = !(typeof window === "undefined" || typeof window.document === "undefined" || typeof window.document.createElement === "undefined");
  if (canUseDOM)
    try {
      options = {};
      Object.defineProperty(options, "passive", {
        get: function() {
          passiveBrowserEventsSupported = true;
        }
      });
      window.addEventListener("test", options, options);
      window.removeEventListener("test", options, options);
    } catch (e) {
      passiveBrowserEventsSupported = false;
    }
  EventInterface = {
    eventPhase: 0,
    bubbles: 0,
    cancelable: 0,
    timeStamp: function(event) {
      return event.timeStamp || Date.now();
    },
    defaultPrevented: 0,
    isTrusted: 0
  };
  SyntheticEvent = createSyntheticEvent(EventInterface);
  UIEventInterface = assign2({}, EventInterface, { view: 0, detail: 0 });
  SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
  MouseEventInterface = assign2({}, UIEventInterface, {
    screenX: 0,
    screenY: 0,
    clientX: 0,
    clientY: 0,
    pageX: 0,
    pageY: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    getModifierState: getEventModifierState,
    button: 0,
    buttons: 0,
    relatedTarget: function(event) {
      return event.relatedTarget === undefined ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
    },
    movementX: function(event) {
      if ("movementX" in event)
        return event.movementX;
      event !== lastMouseEvent && (lastMouseEvent && event.type === "mousemove" ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : lastMovementY = lastMovementX = 0, lastMouseEvent = event);
      return lastMovementX;
    },
    movementY: function(event) {
      return "movementY" in event ? event.movementY : lastMovementY;
    }
  });
  SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
  DragEventInterface = assign2({}, MouseEventInterface, { dataTransfer: 0 });
  SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
  FocusEventInterface = assign2({}, UIEventInterface, { relatedTarget: 0 });
  SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
  AnimationEventInterface = assign2({}, EventInterface, {
    animationName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  });
  SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
  ClipboardEventInterface = assign2({}, EventInterface, {
    clipboardData: function(event) {
      return "clipboardData" in event ? event.clipboardData : window.clipboardData;
    }
  });
  SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
  CompositionEventInterface = assign2({}, EventInterface, { data: 0 });
  SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
  normalizeKey = {
    Esc: "Escape",
    Spacebar: " ",
    Left: "ArrowLeft",
    Up: "ArrowUp",
    Right: "ArrowRight",
    Down: "ArrowDown",
    Del: "Delete",
    Win: "OS",
    Menu: "ContextMenu",
    Apps: "ContextMenu",
    Scroll: "ScrollLock",
    MozPrintableKey: "Unidentified"
  };
  translateToKey = {
    8: "Backspace",
    9: "Tab",
    12: "Clear",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    19: "Pause",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    45: "Insert",
    46: "Delete",
    112: "F1",
    113: "F2",
    114: "F3",
    115: "F4",
    116: "F5",
    117: "F6",
    118: "F7",
    119: "F8",
    120: "F9",
    121: "F10",
    122: "F11",
    123: "F12",
    144: "NumLock",
    145: "ScrollLock",
    224: "Meta"
  };
  modifierKeyToProp = {
    Alt: "altKey",
    Control: "ctrlKey",
    Meta: "metaKey",
    Shift: "shiftKey"
  };
  KeyboardEventInterface = assign2({}, UIEventInterface, {
    key: function(nativeEvent) {
      if (nativeEvent.key) {
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
        if (key !== "Unidentified")
          return key;
      }
      return nativeEvent.type === "keypress" ? (nativeEvent = getEventCharCode(nativeEvent), nativeEvent === 13 ? "Enter" : String.fromCharCode(nativeEvent)) : nativeEvent.type === "keydown" || nativeEvent.type === "keyup" ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
    },
    code: 0,
    location: 0,
    ctrlKey: 0,
    shiftKey: 0,
    altKey: 0,
    metaKey: 0,
    repeat: 0,
    locale: 0,
    getModifierState: getEventModifierState,
    charCode: function(event) {
      return event.type === "keypress" ? getEventCharCode(event) : 0;
    },
    keyCode: function(event) {
      return event.type === "keydown" || event.type === "keyup" ? event.keyCode : 0;
    },
    which: function(event) {
      return event.type === "keypress" ? getEventCharCode(event) : event.type === "keydown" || event.type === "keyup" ? event.keyCode : 0;
    }
  });
  SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
  PointerEventInterface = assign2({}, MouseEventInterface, {
    pointerId: 0,
    width: 0,
    height: 0,
    pressure: 0,
    tangentialPressure: 0,
    tiltX: 0,
    tiltY: 0,
    twist: 0,
    pointerType: 0,
    isPrimary: 0
  });
  SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
  TouchEventInterface = assign2({}, UIEventInterface, {
    touches: 0,
    targetTouches: 0,
    changedTouches: 0,
    altKey: 0,
    metaKey: 0,
    ctrlKey: 0,
    shiftKey: 0,
    getModifierState: getEventModifierState
  });
  SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
  TransitionEventInterface = assign2({}, EventInterface, {
    propertyName: 0,
    elapsedTime: 0,
    pseudoElement: 0
  });
  SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
  WheelEventInterface = assign2({}, MouseEventInterface, {
    deltaX: function(event) {
      return "deltaX" in event ? event.deltaX : ("wheelDeltaX" in event) ? -event.wheelDeltaX : 0;
    },
    deltaY: function(event) {
      return "deltaY" in event ? event.deltaY : ("wheelDeltaY" in event) ? -event.wheelDeltaY : ("wheelDelta" in event) ? -event.wheelDelta : 0;
    },
    deltaZ: 0,
    deltaMode: 0
  });
  SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
  ToggleEventInterface = assign2({}, EventInterface, {
    newState: 0,
    oldState: 0
  });
  SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface);
  END_KEYCODES = [9, 13, 27, 32];
  canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
  canUseDOM && "documentMode" in document && (documentMode = document.documentMode);
  canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
  useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && 8 < documentMode && 11 >= documentMode);
  SPACEBAR_CHAR = String.fromCharCode(32);
  supportedInputTypes = {
    color: true,
    date: true,
    datetime: true,
    "datetime-local": true,
    email: true,
    month: true,
    number: true,
    password: true,
    range: true,
    search: true,
    tel: true,
    text: true,
    time: true,
    url: true,
    week: true
  };
  if (canUseDOM) {
    if (canUseDOM) {
      isSupported$jscomp$inline_417 = "oninput" in document;
      if (!isSupported$jscomp$inline_417) {
        element$jscomp$inline_418 = document.createElement("div");
        element$jscomp$inline_418.setAttribute("oninput", "return;");
        isSupported$jscomp$inline_417 = typeof element$jscomp$inline_418.oninput === "function";
      }
      JSCompiler_inline_result$jscomp$282 = isSupported$jscomp$inline_417;
    } else
      JSCompiler_inline_result$jscomp$282 = false;
    isInputEventSupported = JSCompiler_inline_result$jscomp$282 && (!document.documentMode || 9 < document.documentMode);
  }
  objectIs = typeof Object.is === "function" ? Object.is : is;
  skipSelectionChangeEvent = canUseDOM && "documentMode" in document && 11 >= document.documentMode;
  vendorPrefixes = {
    animationend: makePrefixMap("Animation", "AnimationEnd"),
    animationiteration: makePrefixMap("Animation", "AnimationIteration"),
    animationstart: makePrefixMap("Animation", "AnimationStart"),
    transitionrun: makePrefixMap("Transition", "TransitionRun"),
    transitionstart: makePrefixMap("Transition", "TransitionStart"),
    transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
    transitionend: makePrefixMap("Transition", "TransitionEnd")
  };
  prefixedEventNames = {};
  style = {};
  canUseDOM && (style = document.createElement("div").style, ("AnimationEvent" in window) || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), ("TransitionEvent" in window) || delete vendorPrefixes.transitionend.transition);
  ANIMATION_END = getVendorPrefixedEventName("animationend");
  ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
  ANIMATION_START = getVendorPrefixedEventName("animationstart");
  TRANSITION_RUN = getVendorPrefixedEventName("transitionrun");
  TRANSITION_START = getVendorPrefixedEventName("transitionstart");
  TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel");
  TRANSITION_END = getVendorPrefixedEventName("transitionend");
  topLevelEventsToReactNames = new Map;
  simpleEventPluginEvents = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");
  simpleEventPluginEvents.push("scrollEnd");
  CapturedStacks = new WeakMap;
  concurrentQueues = [];
  emptyContextObject = {};
  forkStack = [];
  idStack = [];
  HydrationMismatchException = Error(formatProdErrorMessage2(519));
  valueCursor = createCursor(null);
  AbortControllerLocal = typeof AbortController !== "undefined" ? AbortController : function() {
    var listeners = [], signal = this.signal = {
      aborted: false,
      addEventListener: function(type, listener) {
        listeners.push(listener);
      }
    };
    this.abort = function() {
      signal.aborted = true;
      listeners.forEach(function(listener) {
        return listener();
      });
    };
  };
  scheduleCallback$2 = Scheduler.unstable_scheduleCallback;
  NormalPriority = Scheduler.unstable_NormalPriority;
  CacheContext = {
    $$typeof: REACT_CONTEXT_TYPE2,
    Consumer: null,
    Provider: null,
    _currentValue: null,
    _currentValue2: null,
    _threadCount: 0
  };
  prevOnStartTransitionFinish = ReactSharedInternals3.S;
  ReactSharedInternals3.S = function(transition, returnValue) {
    typeof returnValue === "object" && returnValue !== null && typeof returnValue.then === "function" && entangleAsyncAction(transition, returnValue);
    prevOnStartTransitionFinish !== null && prevOnStartTransitionFinish(transition, returnValue);
  };
  resumedCache = createCursor(null);
  SuspenseException = Error(formatProdErrorMessage2(460));
  SuspenseyCommitException = Error(formatProdErrorMessage2(474));
  SuspenseActionException = Error(formatProdErrorMessage2(542));
  noopSuspenseyCommitThenable = { then: function() {
  } };
  currentTreeHiddenStackCursor = createCursor(null);
  prevEntangledRenderLanesCursor = createCursor(0);
  ContextOnlyDispatcher = {
    readContext,
    use,
    useCallback: throwInvalidHookError,
    useContext: throwInvalidHookError,
    useEffect: throwInvalidHookError,
    useImperativeHandle: throwInvalidHookError,
    useLayoutEffect: throwInvalidHookError,
    useInsertionEffect: throwInvalidHookError,
    useMemo: throwInvalidHookError,
    useReducer: throwInvalidHookError,
    useRef: throwInvalidHookError,
    useState: throwInvalidHookError,
    useDebugValue: throwInvalidHookError,
    useDeferredValue: throwInvalidHookError,
    useTransition: throwInvalidHookError,
    useSyncExternalStore: throwInvalidHookError,
    useId: throwInvalidHookError,
    useHostTransitionStatus: throwInvalidHookError,
    useFormState: throwInvalidHookError,
    useActionState: throwInvalidHookError,
    useOptimistic: throwInvalidHookError,
    useMemoCache: throwInvalidHookError,
    useCacheRefresh: throwInvalidHookError
  };
  HooksDispatcherOnMount = {
    readContext,
    use,
    useCallback: function(callback, deps) {
      mountWorkInProgressHook().memoizedState = [
        callback,
        deps === undefined ? null : deps
      ];
      return callback;
    },
    useContext: readContext,
    useEffect: mountEffect,
    useImperativeHandle: function(ref, create, deps) {
      deps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
      mountEffectImpl(4194308, 4, imperativeHandleEffect.bind(null, create, ref), deps);
    },
    useLayoutEffect: function(create, deps) {
      return mountEffectImpl(4194308, 4, create, deps);
    },
    useInsertionEffect: function(create, deps) {
      mountEffectImpl(4, 2, create, deps);
    },
    useMemo: function(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      deps = deps === undefined ? null : deps;
      var nextValue = nextCreate();
      if (shouldDoubleInvokeUserFnsInHooksDEV) {
        setIsStrictModeForDevtools(true);
        try {
          nextCreate();
        } finally {
          setIsStrictModeForDevtools(false);
        }
      }
      hook.memoizedState = [nextValue, deps];
      return nextValue;
    },
    useReducer: function(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      if (init !== undefined) {
        var initialState = init(initialArg);
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          setIsStrictModeForDevtools(true);
          try {
            init(initialArg);
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
      } else
        initialState = initialArg;
      hook.memoizedState = hook.baseState = initialState;
      reducer = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState
      };
      hook.queue = reducer;
      reducer = reducer.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber, reducer);
      return [hook.memoizedState, reducer];
    },
    useRef: function(initialValue) {
      var hook = mountWorkInProgressHook();
      initialValue = { current: initialValue };
      return hook.memoizedState = initialValue;
    },
    useState: function(initialState) {
      initialState = mountStateImpl(initialState);
      var queue = initialState.queue, dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
      queue.dispatch = dispatch;
      return [initialState.memoizedState, dispatch];
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
      var hook = mountWorkInProgressHook();
      return mountDeferredValueImpl(hook, value, initialValue);
    },
    useTransition: function() {
      var stateHook = mountStateImpl(false);
      stateHook = startTransition.bind(null, currentlyRenderingFiber, stateHook.queue, true, false);
      mountWorkInProgressHook().memoizedState = stateHook;
      return [false, stateHook];
    },
    useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
      var fiber = currentlyRenderingFiber, hook = mountWorkInProgressHook();
      if (isHydrating) {
        if (getServerSnapshot === undefined)
          throw Error(formatProdErrorMessage2(407));
        getServerSnapshot = getServerSnapshot();
      } else {
        getServerSnapshot = getSnapshot();
        if (workInProgressRoot === null)
          throw Error(formatProdErrorMessage2(349));
        (workInProgressRootRenderLanes & 124) !== 0 || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
      }
      hook.memoizedState = getServerSnapshot;
      var inst = { value: getServerSnapshot, getSnapshot };
      hook.queue = inst;
      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
        subscribe
      ]);
      fiber.flags |= 2048;
      pushSimpleEffect(9, createEffectInstance(), updateStoreInstance.bind(null, fiber, inst, getServerSnapshot, getSnapshot), null);
      return getServerSnapshot;
    },
    useId: function() {
      var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix;
      if (isHydrating) {
        var JSCompiler_inline_result = treeContextOverflow;
        var idWithLeadingBit = treeContextId;
        JSCompiler_inline_result = (idWithLeadingBit & ~(1 << 32 - clz32(idWithLeadingBit) - 1)).toString(32) + JSCompiler_inline_result;
        identifierPrefix = "«" + identifierPrefix + "R" + JSCompiler_inline_result;
        JSCompiler_inline_result = localIdCounter++;
        0 < JSCompiler_inline_result && (identifierPrefix += "H" + JSCompiler_inline_result.toString(32));
        identifierPrefix += "»";
      } else
        JSCompiler_inline_result = globalClientIdCounter++, identifierPrefix = "«" + identifierPrefix + "r" + JSCompiler_inline_result.toString(32) + "»";
      return hook.memoizedState = identifierPrefix;
    },
    useHostTransitionStatus,
    useFormState: mountActionState,
    useActionState: mountActionState,
    useOptimistic: function(passthrough) {
      var hook = mountWorkInProgressHook();
      hook.memoizedState = hook.baseState = passthrough;
      var queue = {
        pending: null,
        lanes: 0,
        dispatch: null,
        lastRenderedReducer: null,
        lastRenderedState: null
      };
      hook.queue = queue;
      hook = dispatchOptimisticSetState.bind(null, currentlyRenderingFiber, true, queue);
      queue.dispatch = hook;
      return [passthrough, hook];
    },
    useMemoCache,
    useCacheRefresh: function() {
      return mountWorkInProgressHook().memoizedState = refreshCache.bind(null, currentlyRenderingFiber);
    }
  };
  HooksDispatcherOnUpdate = {
    readContext,
    use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: updateReducer,
    useRef: updateRef,
    useState: function() {
      return updateReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
      var hook = updateWorkInProgressHook();
      return updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    },
    useTransition: function() {
      var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
      return [
        typeof booleanOrThenable === "boolean" ? booleanOrThenable : useThenable(booleanOrThenable),
        start
      ];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId,
    useHostTransitionStatus,
    useFormState: updateActionState,
    useActionState: updateActionState,
    useOptimistic: function(passthrough, reducer) {
      var hook = updateWorkInProgressHook();
      return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
    },
    useMemoCache,
    useCacheRefresh: updateRefresh
  };
  HooksDispatcherOnRerender = {
    readContext,
    use,
    useCallback: updateCallback,
    useContext: readContext,
    useEffect: updateEffect,
    useImperativeHandle: updateImperativeHandle,
    useInsertionEffect: updateInsertionEffect,
    useLayoutEffect: updateLayoutEffect,
    useMemo: updateMemo,
    useReducer: rerenderReducer,
    useRef: updateRef,
    useState: function() {
      return rerenderReducer(basicStateReducer);
    },
    useDebugValue: mountDebugValue,
    useDeferredValue: function(value, initialValue) {
      var hook = updateWorkInProgressHook();
      return currentHook === null ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(hook, currentHook.memoizedState, value, initialValue);
    },
    useTransition: function() {
      var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
      return [
        typeof booleanOrThenable === "boolean" ? booleanOrThenable : useThenable(booleanOrThenable),
        start
      ];
    },
    useSyncExternalStore: updateSyncExternalStore,
    useId: updateId,
    useHostTransitionStatus,
    useFormState: rerenderActionState,
    useActionState: rerenderActionState,
    useOptimistic: function(passthrough, reducer) {
      var hook = updateWorkInProgressHook();
      if (currentHook !== null)
        return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
      hook.baseState = passthrough;
      return [passthrough, hook.queue.dispatch];
    },
    useMemoCache,
    useCacheRefresh: updateRefresh
  };
  reconcileChildFibers = createChildReconciler(true);
  mountChildFibers = createChildReconciler(false);
  suspenseHandlerStackCursor = createCursor(null);
  suspenseStackCursor = createCursor(0);
  classComponentUpdater = {
    enqueueSetState: function(inst, payload, callback) {
      inst = inst._reactInternals;
      var lane = requestUpdateLane(), update = createUpdate(lane);
      update.payload = payload;
      callback !== undefined && callback !== null && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      payload !== null && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueReplaceState: function(inst, payload, callback) {
      inst = inst._reactInternals;
      var lane = requestUpdateLane(), update = createUpdate(lane);
      update.tag = 1;
      update.payload = payload;
      callback !== undefined && callback !== null && (update.callback = callback);
      payload = enqueueUpdate(inst, update, lane);
      payload !== null && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
    },
    enqueueForceUpdate: function(inst, callback) {
      inst = inst._reactInternals;
      var lane = requestUpdateLane(), update = createUpdate(lane);
      update.tag = 2;
      callback !== undefined && callback !== null && (update.callback = callback);
      callback = enqueueUpdate(inst, update, lane);
      callback !== null && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
    }
  };
  reportGlobalError2 = typeof reportError === "function" ? reportError : function(error) {
    if (typeof window === "object" && typeof window.ErrorEvent === "function") {
      var event = new window.ErrorEvent("error", {
        bubbles: true,
        cancelable: true,
        message: typeof error === "object" && error !== null && typeof error.message === "string" ? String(error.message) : String(error),
        error
      });
      if (!window.dispatchEvent(event))
        return;
    } else if (typeof process === "object" && typeof process.emit === "function") {
      process.emit("uncaughtException", error);
      return;
    }
    console.error(error);
  };
  SelectiveHydrationException = Error(formatProdErrorMessage2(461));
  SUSPENDED_MARKER = {
    dehydrated: null,
    treeContext: null,
    retryLane: 0,
    hydrationErrors: null
  };
  PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
  DefaultAsyncDispatcher = {
    getCacheForType: function(resourceType) {
      var cache = readContext(CacheContext), cacheForType = cache.data.get(resourceType);
      cacheForType === undefined && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
      return cacheForType;
    }
  };
  PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
  for (i$jscomp$inline_1528 = 0;i$jscomp$inline_1528 < simpleEventPluginEvents.length; i$jscomp$inline_1528++) {
    eventName$jscomp$inline_1529 = simpleEventPluginEvents[i$jscomp$inline_1528], domEventName$jscomp$inline_1530 = eventName$jscomp$inline_1529.toLowerCase(), capitalizedEvent$jscomp$inline_1531 = eventName$jscomp$inline_1529[0].toUpperCase() + eventName$jscomp$inline_1529.slice(1);
    registerSimpleEvent(domEventName$jscomp$inline_1530, "on" + capitalizedEvent$jscomp$inline_1531);
  }
  registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
  registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
  registerSimpleEvent(ANIMATION_START, "onAnimationStart");
  registerSimpleEvent("dblclick", "onDoubleClick");
  registerSimpleEvent("focusin", "onFocus");
  registerSimpleEvent("focusout", "onBlur");
  registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
  registerSimpleEvent(TRANSITION_START, "onTransitionStart");
  registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
  registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
  registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
  registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
  registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
  registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
  registerTwoPhaseEvent("onChange", "change click focusin focusout input keydown keyup selectionchange".split(" "));
  registerTwoPhaseEvent("onSelect", "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" "));
  registerTwoPhaseEvent("onBeforeInput", [
    "compositionend",
    "keypress",
    "textInput",
    "paste"
  ]);
  registerTwoPhaseEvent("onCompositionEnd", "compositionend focusout keydown keypress keyup mousedown".split(" "));
  registerTwoPhaseEvent("onCompositionStart", "compositionstart focusout keydown keypress keyup mousedown".split(" "));
  registerTwoPhaseEvent("onCompositionUpdate", "compositionupdate focusout keydown keypress keyup mousedown".split(" "));
  mediaEventTypes = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");
  nonDelegatedEvents = new Set("beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(mediaEventTypes));
  listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
  NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
  scheduleTimeout = typeof setTimeout === "function" ? setTimeout : undefined;
  cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : undefined;
  localPromise = typeof Promise === "function" ? Promise : undefined;
  scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
    return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
  } : scheduleTimeout;
  preloadPropsMap = new Map;
  preconnectsSet = new Set;
  previousDispatcher = ReactDOMSharedInternals.d;
  ReactDOMSharedInternals.d = {
    f: flushSyncWork,
    r: requestFormReset,
    D: prefetchDNS,
    C: preconnect,
    L: preload,
    m: preloadModule,
    X: preinitScript,
    S: preinitStyle,
    M: preinitModuleScript
  };
  globalDocument = typeof document === "undefined" ? null : document;
  HostTransitionContext = {
    $$typeof: REACT_CONTEXT_TYPE2,
    Provider: null,
    Consumer: null,
    _currentValue: sharedNotPendingObject,
    _currentValue2: sharedNotPendingObject,
    _threadCount: 0
  };
  queuedPointers = new Map;
  queuedPointerCaptures = new Map;
  queuedExplicitHydrationTargets = [];
  discreteReplayableEvents = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(" ");
  ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
    var root2 = this._internalRoot;
    if (root2 === null)
      throw Error(formatProdErrorMessage2(409));
    var current = root2.current, lane = requestUpdateLane();
    updateContainerImpl(current, lane, children, root2, null, null);
  };
  ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
    var root2 = this._internalRoot;
    if (root2 !== null) {
      this._internalRoot = null;
      var container = root2.containerInfo;
      updateContainerImpl(root2.current, 2, null, root2, null, null);
      flushSyncWork$1();
      container[internalContainerInstanceKey] = null;
    }
  };
  ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function(target) {
    if (target) {
      var updatePriority = resolveUpdatePriority();
      target = { blockedOn: null, target, priority: updatePriority };
      for (var i = 0;i < queuedExplicitHydrationTargets.length && updatePriority !== 0 && updatePriority < queuedExplicitHydrationTargets[i].priority; i++)
        ;
      queuedExplicitHydrationTargets.splice(i, 0, target);
      i === 0 && attemptExplicitHydrationTarget(target);
    }
  };
  isomorphicReactPackageVersion$jscomp$inline_1785 = React2.version;
  if (isomorphicReactPackageVersion$jscomp$inline_1785 !== "19.1.0")
    throw Error(formatProdErrorMessage2(527, isomorphicReactPackageVersion$jscomp$inline_1785, "19.1.0"));
  ReactDOMSharedInternals.findDOMNode = function(componentOrElement) {
    var fiber = componentOrElement._reactInternals;
    if (fiber === undefined) {
      if (typeof componentOrElement.render === "function")
        throw Error(formatProdErrorMessage2(188));
      componentOrElement = Object.keys(componentOrElement).join(",");
      throw Error(formatProdErrorMessage2(268, componentOrElement));
    }
    componentOrElement = findCurrentFiberUsingSlowPath(fiber);
    componentOrElement = componentOrElement !== null ? findCurrentHostFiberImpl(componentOrElement) : null;
    componentOrElement = componentOrElement === null ? null : componentOrElement.stateNode;
    return componentOrElement;
  };
  internals$jscomp$inline_2256 = {
    bundleType: 0,
    version: "19.1.0",
    rendererPackageName: "react-dom",
    currentDispatcherRef: ReactSharedInternals3,
    reconcilerVersion: "19.1.0"
  };
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined") {
    hook$jscomp$inline_2257 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
    if (!hook$jscomp$inline_2257.isDisabled && hook$jscomp$inline_2257.supportsFiber)
      try {
        rendererID = hook$jscomp$inline_2257.inject(internals$jscomp$inline_2256), injectedHook = hook$jscomp$inline_2257;
      } catch (err) {
      }
  }
});

// node_modules/react-dom/client.js
var require_client = __commonJS((exports, module) => {
  init_react_dom_client_production();
  function checkDCE() {
    if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
      return;
    }
    if (false) {
    }
    try {
      __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
    } catch (err) {
      console.error(err);
    }
  }
  if (true) {
    checkDCE();
    module.exports = exports_react_dom_client_production;
  } else {
  }
});

// node_modules/@chili-publish/studio-sdk/_bundles/main.js
var require_main = __commonJS((exports, module) => {
  (function(root2, factory) {
    typeof exports == "object" && typeof module == "object" ? module.exports = factory() : typeof define == "function" && define.amd ? define("StudioSDK", [], factory) : typeof exports == "object" ? exports.StudioSDK = factory() : root2.StudioSDK = factory();
  })(exports, () => (() => {
    var __webpack_require__ = { d: (exports2, definition) => {
      for (var key in definition)
        __webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key) && Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
    }, o: (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop), r: (exports2) => {
      typeof Symbol != "undefined" && Symbol.toStringTag && Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(exports2, "__esModule", { value: true });
    } }, __webpack_exports__ = {};
    __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, { ActionAsyncError: () => ActionAsyncError, ActionEditorEvent: () => ActionEditorEvent, Alignment: () => Alignment, AnchorTargetEdgeType: () => AnchorTargetEdgeType, AnchorTargetType: () => AnchorTargetType, AuthCredentialsTypeEnum: () => AuthCredentialsTypeEnum, AuthRefreshTypeEnum: () => AuthRefreshTypeEnum, AutoGrowDirection: () => AutoGrowDirection, BarcodeCharacterSet: () => BarcodeCharacterSet, BarcodeErrorCorrectionLevel: () => BarcodeErrorCorrectionLevel, BarcodeSourceTypeEnum: () => BarcodeSourceTypeEnum, BarcodeType: () => BarcodeType, BarcodeValidationResult: () => BarcodeValidationResult, BasicAnimationsEmphasisStyles: () => BasicAnimationsEmphasisStyles, BlendMode: () => BlendMode, Case: () => Case, ColorType: () => ColorType, ColorUsageType: () => ColorUsageType, ConnectorConfigValueType: () => ConnectorConfigValueType, ConnectorEventType: () => ConnectorEventType, ConnectorHttpError: () => ConnectorHttpError, ConnectorMapping: () => ConnectorMapping, ConnectorMappingDirection: () => ConnectorMappingDirection, ConnectorMappingSource: () => ConnectorMappingSource, ConnectorRegistrationSource: () => ConnectorRegistrationSource, ConnectorStateType: () => ConnectorStateType, ConnectorType: () => ConnectorType, CornerRadiusType: () => CornerRadiusType, DataRowAsyncError: () => DataRowAsyncError, Day: () => Day, DeprecatedMediaConnectorDownloadType: () => DeprecatedMediaConnectorDownloadType, DeprecatedMediaType: () => DeprecatedMediaType, DocumentIssueTypeEnum: () => DocumentIssueTypeEnum, DocumentType: () => DocumentType, DownloadFormats: () => DownloadFormats, EaseTypes: () => EaseTypes, EngineEditModeType: () => EngineEditModeType, EnvironmentType: () => EnvironmentType, FitMode: () => FitMode, FitModePosition: () => FitModePosition, FlowDirection: () => FlowDirection, FontPreviewFormat: () => FontPreviewFormat, FontWeights: () => FontWeights, FrameAnchorTarget: () => FrameAnchorTarget, FrameAnchorType: () => FrameAnchorType, FramePropertyNames: () => FramePropertyNames, FrameTypeEnum: () => FrameTypeEnum, GrafxTokenAuthCredentials: () => GrafxTokenAuthCredentials, ImageSourceTypeEnum: () => ImageSourceTypeEnum, LayoutIntent: () => LayoutIntent, LayoutPropertyNames: () => LayoutPropertyNames, LayoutType: () => LayoutType, Locale: () => Locale, MeasurementUnit: () => MeasurementUnit, MediaDownloadIntent: () => MediaDownloadIntent, MediaDownloadType: () => MediaDownloadType, MediaType: () => MediaType, PageAnchorTarget: () => PageAnchorTarget, PositionEnum: () => PositionEnum, RefreshedAuthCredendentials: () => RefreshedAuthCredendentials, Scripting: () => Scripting, SelectedTextStyleSections: () => SelectedTextStyleSections, SelectedTextStyles: () => SelectedTextStyles, ShakeDirections: () => ShakeDirections, ShapeType: () => ShapeType, SlideDirections: () => SlideDirections, SortBy: () => SortBy, SortOrder: () => SortOrder, TextDirection: () => TextDirection, TextPosition: () => TextPosition, ToolType: () => ToolType, TweenTypes: () => TweenTypes, UpdateZIndexMethod: () => UpdateZIndexMethod, VariableType: () => VariableType, VariableVisibilityOperator: () => VariableVisibilityOperator, VariableVisibilityTargetType: () => VariableVisibilityTargetType, VariableVisibilityType: () => VariableVisibilityType, VerticalAlign: () => VerticalAlign, ViewMode: () => ViewMode, WellKnownConfigurationKeys: () => WellKnownConfigurationKeys, default: () => src, grafxMediaConnectorRegistration: () => grafxMediaConnectorRegistration });
    const editor_engine_namespaceObject_V = "2.5.latest", package_namespaceObject_i8 = "1.22.0";
    var enums_MessageType, Resolution, ErrorCode, NativeErrorName, enums_NativeEventType;
    (function(MessageType) {
      MessageType.Call = "call", MessageType.Reply = "reply", MessageType.Syn = "syn", MessageType.SynAck = "synAck", MessageType.Ack = "ack";
    })(enums_MessageType || (enums_MessageType = {})), function(Resolution2) {
      Resolution2.Fulfilled = "fulfilled", Resolution2.Rejected = "rejected";
    }(Resolution || (Resolution = {})), function(ErrorCode2) {
      ErrorCode2.ConnectionDestroyed = "ConnectionDestroyed", ErrorCode2.ConnectionTimeout = "ConnectionTimeout", ErrorCode2.NoIframeSrc = "NoIframeSrc";
    }(ErrorCode || (ErrorCode = {})), function(NativeErrorName2) {
      NativeErrorName2.DataCloneError = "DataCloneError";
    }(NativeErrorName || (NativeErrorName = {})), function(NativeEventType) {
      NativeEventType.Message = "message";
    }(enums_NativeEventType || (enums_NativeEventType = {}));
    const DEFAULT_PORT_BY_PROTOCOL = { "http:": "80", "https:": "443" }, URL_REGEX = /^(https?:)?\/\/([^/:]+)?(:(\d+))?/, opaqueOriginSchemes = ["file:", "data:"], serializeError = ({ name, message, stack }) => ({ name, message, stack });
    let id = 0;
    const generateId = () => ++id, keyPathToSegments = (keyPath) => keyPath ? keyPath.split(".") : [], setAtKeyPath = (subject, keyPath, value) => {
      const segments = keyPathToSegments(keyPath);
      return segments.reduce((prevSubject, key, idx) => (prevSubject[key] === undefined && (prevSubject[key] = {}), idx === segments.length - 1 && (prevSubject[key] = value), prevSubject[key]), subject), subject;
    }, methodSerialization_serializeMethods = (methods, prefix2) => {
      const flattenedMethods = {};
      return Object.keys(methods).forEach((key) => {
        const value = methods[key], keyPath = ((key2, prefix3) => {
          const segments = keyPathToSegments(prefix3 || "");
          return segments.push(key2), ((segments2) => segments2.join("."))(segments);
        })(key, prefix2);
        typeof value == "object" && Object.assign(flattenedMethods, methodSerialization_serializeMethods(value, keyPath)), typeof value == "function" && (flattenedMethods[keyPath] = value);
      }), flattenedMethods;
    }, lib_connectCallSender = (callSender, info, methodKeyPaths, destroyConnection, log3) => {
      const { localName, local, remote, originForSending, originForReceiving } = info;
      let destroyed = false;
      log3(`${localName}: Connecting call sender`);
      const createMethodProxy = (methodName) => (...args) => {
        let iframeRemoved;
        log3(`${localName}: Sending ${methodName}() call`);
        try {
          remote.closed && (iframeRemoved = true);
        } catch (e) {
          iframeRemoved = true;
        }
        if (iframeRemoved && destroyConnection(), destroyed) {
          const error = new Error(`Unable to send ${methodName}() call due to destroyed connection`);
          throw error.code = ErrorCode.ConnectionDestroyed, error;
        }
        return new Promise((resolve, reject) => {
          const id2 = generateId(), handleMessageEvent = (event) => {
            if (event.source !== remote || event.data.penpal !== enums_MessageType.Reply || event.data.id !== id2)
              return;
            if (event.origin !== originForReceiving)
              return void log3(`${localName} received message from origin ${event.origin} which did not match expected origin ${originForReceiving}`);
            const replyMessage = event.data;
            log3(`${localName}: Received ${methodName}() reply`), local.removeEventListener(enums_NativeEventType.Message, handleMessageEvent);
            let returnValue = replyMessage.returnValue;
            replyMessage.returnValueIsError && (returnValue = ((obj) => {
              const deserializedError = new Error;
              return Object.keys(obj).forEach((key) => deserializedError[key] = obj[key]), deserializedError;
            })(returnValue)), (replyMessage.resolution === Resolution.Fulfilled ? resolve : reject)(returnValue);
          };
          local.addEventListener(enums_NativeEventType.Message, handleMessageEvent);
          const callMessage = { penpal: enums_MessageType.Call, id: id2, methodName, args };
          remote.postMessage(callMessage, originForSending);
        });
      }, flattenedMethods = methodKeyPaths.reduce((api, name) => (api[name] = createMethodProxy(name), api), {});
      return Object.assign(callSender, ((flattenedMethods2) => {
        const methods = {};
        for (const keyPath in flattenedMethods2)
          setAtKeyPath(methods, keyPath, flattenedMethods2[keyPath]);
        return methods;
      })(flattenedMethods)), () => {
        destroyed = true;
      };
    }, handleAckMessageFactory = (serializedMethods, childOrigin, originForSending, destructor, log3) => {
      const { destroy, onDestroy } = destructor;
      let destroyCallReceiver, receiverMethodNames;
      const callSender = {};
      return (event) => {
        if (event.origin !== childOrigin)
          return void log3(`Parent: Handshake - Received ACK message from origin ${event.origin} which did not match expected origin ${childOrigin}`);
        log3("Parent: Handshake - Received ACK");
        const info = { localName: "Parent", local: window, remote: event.source, originForSending, originForReceiving: childOrigin };
        destroyCallReceiver && destroyCallReceiver(), destroyCallReceiver = ((info2, serializedMethods2, log4) => {
          const { localName, local, remote, originForSending: originForSending2, originForReceiving } = info2;
          let destroyed = false;
          const handleMessageEvent = (event2) => {
            if (event2.source !== remote || event2.data.penpal !== enums_MessageType.Call)
              return;
            if (event2.origin !== originForReceiving)
              return void log4(`${localName} received message from origin ${event2.origin} which did not match expected origin ${originForReceiving}`);
            const callMessage = event2.data, { methodName, args, id: id2 } = callMessage;
            log4(`${localName}: Received ${methodName}() call`);
            const createPromiseHandler = (resolution) => (returnValue) => {
              if (log4(`${localName}: Sending ${methodName}() reply`), destroyed)
                return void log4(`${localName}: Unable to send ${methodName}() reply due to destroyed connection`);
              const message = { penpal: enums_MessageType.Reply, id: id2, resolution, returnValue };
              resolution === Resolution.Rejected && returnValue instanceof Error && (message.returnValue = serializeError(returnValue), message.returnValueIsError = true);
              try {
                remote.postMessage(message, originForSending2);
              } catch (err) {
                if (err.name === NativeErrorName.DataCloneError) {
                  const errorReplyMessage = { penpal: enums_MessageType.Reply, id: id2, resolution: Resolution.Rejected, returnValue: serializeError(err), returnValueIsError: true };
                  remote.postMessage(errorReplyMessage, originForSending2);
                }
                throw err;
              }
            };
            new Promise((resolve) => resolve(serializedMethods2[methodName].apply(serializedMethods2, args))).then(createPromiseHandler(Resolution.Fulfilled), createPromiseHandler(Resolution.Rejected));
          };
          return local.addEventListener(enums_NativeEventType.Message, handleMessageEvent), () => {
            destroyed = true, local.removeEventListener(enums_NativeEventType.Message, handleMessageEvent);
          };
        })(info, serializedMethods, log3), onDestroy(destroyCallReceiver), receiverMethodNames && receiverMethodNames.forEach((receiverMethodName) => {
          delete callSender[receiverMethodName];
        }), receiverMethodNames = event.data.methodNames;
        const destroyCallSender = lib_connectCallSender(callSender, info, receiverMethodNames, destroy, log3);
        return onDestroy(destroyCallSender), callSender;
      };
    }, connectToChild = (options) => {
      let { iframe, methods = {}, childOrigin, timeout, debug = false } = options;
      const log3 = ((debug2) => (...args) => {
        debug2 && console.log("[Penpal]", ...args);
      })(debug), destructor = ((localName, log4) => {
        const callbacks = [];
        let destroyed = false;
        return { destroy(error) {
          destroyed || (destroyed = true, log4(`${localName}: Destroying connection`), callbacks.forEach((callback) => {
            callback(error);
          }));
        }, onDestroy(callback) {
          destroyed ? callback() : callbacks.push(callback);
        } };
      })("Parent", log3), { onDestroy, destroy } = destructor;
      childOrigin || (((iframe2) => {
        if (!iframe2.src && !iframe2.srcdoc) {
          const error = new Error("Iframe must have src or srcdoc property defined.");
          throw error.code = ErrorCode.NoIframeSrc, error;
        }
      })(iframe), childOrigin = ((src2) => {
        if (src2 && opaqueOriginSchemes.find((scheme) => src2.startsWith(scheme)))
          return "null";
        const location = document.location, regexResult = URL_REGEX.exec(src2);
        let protocol, hostname, port;
        return regexResult ? (protocol = regexResult[1] ? regexResult[1] : location.protocol, hostname = regexResult[2], port = regexResult[4]) : (protocol = location.protocol, hostname = location.hostname, port = location.port), `${protocol}//${hostname}${port && port !== DEFAULT_PORT_BY_PROTOCOL[protocol] ? `:${port}` : ""}`;
      })(iframe.src));
      const originForSending = childOrigin === "null" ? "*" : childOrigin, serializedMethods = methodSerialization_serializeMethods(methods), handleSynMessage = ((log4, serializedMethods2, childOrigin2, originForSending2) => (event) => {
        if (event.origin !== childOrigin2)
          return void log4(`Parent: Handshake - Received SYN message from origin ${event.origin} which did not match expected origin ${childOrigin2}`);
        log4("Parent: Handshake - Received SYN, responding with SYN-ACK");
        const synAckMessage = { penpal: enums_MessageType.SynAck, methodNames: Object.keys(serializedMethods2) };
        event.source.postMessage(synAckMessage, originForSending2);
      })(log3, serializedMethods, childOrigin, originForSending), handleAckMessage = handleAckMessageFactory(serializedMethods, childOrigin, originForSending, destructor, log3), promise = new Promise((resolve, reject) => {
        const stopConnectionTimeout = ((timeout2, callback) => {
          let timeoutId;
          return timeout2 !== undefined && (timeoutId = window.setTimeout(() => {
            const error = new Error(`Connection timed out after ${timeout2}ms`);
            error.code = ErrorCode.ConnectionTimeout, callback(error);
          }, timeout2)), () => {
            clearTimeout(timeoutId);
          };
        })(timeout, destroy), handleMessage = (event) => {
          if (event.source === iframe.contentWindow && event.data)
            if (event.data.penpal !== enums_MessageType.Syn)
              if (event.data.penpal !== enums_MessageType.Ack)
                ;
              else {
                const callSender = handleAckMessage(event);
                callSender && (stopConnectionTimeout(), resolve(callSender));
              }
            else
              handleSynMessage(event);
        };
        window.addEventListener(enums_NativeEventType.Message, handleMessage), log3("Parent: Awaiting handshake"), ((iframe2, destructor2) => {
          const { destroy: destroy2, onDestroy: onDestroy2 } = destructor2, checkIframeInDocIntervalId = setInterval(() => {
            iframe2.isConnected || (clearInterval(checkIframeInDocIntervalId), destroy2());
          }, 60000);
          onDestroy2(() => {
            clearInterval(checkIframeInDocIntervalId);
          });
        })(iframe, destructor), onDestroy((error) => {
          window.removeEventListener(enums_NativeEventType.Message, handleMessage), error && reject(error);
        });
      });
      return { promise, destroy() {
        destroy();
      } };
    }, setupFrame = (iframe, editorLink, styling) => {
      const link = ((editorLink2) => {
        let link2 = "";
        return new RegExp(/^(?:http(s)?:\/\/)?[\w.-]+(?:\.[\w.-]+)+[\w]+\/$/).test(editorLink2) ? link2 = editorLink2 : editorLink2.indexOf("/index.html") > -1 ? link2 = editorLink2.replace("/index.html", "/") : editorLink2.charAt(-1) !== "/" && (link2 = `${editorLink2}/`), link2;
      })(editorLink), html = `<html>
        <head>
            <base href="/" />
            <meta charset="UTF-8"/>
            <!--  use this property to pass the StudioStyling to the engine -->
            <meta name="studio-styling" content='${JSON.stringify(styling || {})}'>
        </head>
        <body>
            <script>                
            </script>
            <script src="${link}init.js" async></script>
            <script src="${link}init_engine.js"></script>
            <script>
                initializeStudioEngine({
                    assetBase: '${link}',
                    entryPointUrl: '${link}main.dart.js',
                });
            </script>
        </body>
        </html>
    `;
      iframe.srcdoc = html;
    }, Connector = (editorLink, params, setConnection, editorId = "chili-editor", styling) => {
      const editorSelectorId = `#${editorId}`, iframe = document.createElement("iframe");
      iframe.setAttribute("srcdoc", " "), iframe.setAttribute("title", "Chili-Editor"), iframe.setAttribute("style", "width: 100%; height: 100%;"), iframe.setAttribute("frameBorder", "0"), iframe.setAttribute("referrerpolicy", "origin");
      const setupNewFrame = () => {
        const iframeContainer = document.querySelector(editorSelectorId);
        iframeContainer && (iframeContainer == null || iframeContainer.appendChild(iframe), setupFrame(iframe, editorLink, styling));
      };
      document.readyState === "complete" || document.readyState === "interactive" ? setupNewFrame() : document.addEventListener("DOMContentLoaded", () => {
        setupNewFrame();
      }), setConnection(connectToChild({ iframe, methods: { actionsChanged: params.onActionsChanged, stateChanged: params.onStateChanged, documentLoaded: params.onDocumentLoaded, authExpired: params.onAuthExpired, viewportRequested: params.onViewportRequested, selectedFramesContent: params.onSelectedFramesContentChanged, selectedFramesLayout: params.onSelectedFramesLayoutChanged, allFramesLayout: params.onFramesLayoutChanged, selectedLayoutProperties: params.onSelectedLayoutPropertiesChanged, openLayoutPropertiesPanel: params.onPageSelectionChanged, selectedLayoutUnit: params.onSelectedLayoutUnitChanged, scrubberPositionChanged: params.onScrubberPositionChanged, frameAnimationsChanged: params.onFrameAnimationsChanged, selectedToolChanged: params.onSelectedToolChanged, variableListChanged: params.onVariableListChanged, undoStackStateChanged: params.onUndoStateChanged, selectedLayoutFramesChanged: params.onSelectedLayoutFramesChanged, selectedTextStyleChanged: params.onSelectedTextStyleChanged, colorsChanged: params.onColorsChanged, paragraphStylesChanged: params.onParagraphStylesChanged, characterStylesChanged: params.onCharacterStylesChanged, fontFamiliesChanged: params.onFontFamiliesChanged, selectedLayoutId: params.onSelectedLayoutIdChanged, layoutListChanged: params.onLayoutsChanged, connectorEvent: params.onConnectorEvent, connectorsChanged: params.onConnectorsChanged, zoomChanged: params.onZoomChanged, pageSnapshotInvalidated: params.onPageSnapshotInvalidated, pagesChanged: params.onPagesChanged, pageSizeChanged: params.onPageSizeChanged, shapeCornerRadiusChanged: params.onShapeCornerRadiusChanged, cropActiveFrameIdChanged: params.onCropActiveFrameIdChanged, asyncError: params.onAsyncError, viewModeChanged: params.onViewModeChanged, barcodeValidationChanged: params.onBarcodeValidationChanged, selectedPageIdChanged: params.onSelectedPageIdChanged, dataSourceIdChanged: params.onDataSourceIdChanged, documentIssueListChanged: params.onDocumentIssueListChanged, customUndoDataChanged: params.onCustomUndoDataChanged, engineEditingModeChanged: params.onEngineEditModeChanged } }));
    };
    var WellKnownConfigurationKeys;
    (function(WellKnownConfigurationKeys2) {
      WellKnownConfigurationKeys2.GraFxStudioEnvironmentApiUrl = "ENVIRONMENT_API", WellKnownConfigurationKeys2.GraFxStudioSdkVersion = "SDK_VERSION", WellKnownConfigurationKeys2.GraFxStudioDocumentType = "DOCUMENT_TYPE", WellKnownConfigurationKeys2.GraFxStudioTemplateId = "TEMPLATE_ID", WellKnownConfigurationKeys2.GraFxStudioAuthToken = "GRAFX_AUTH_TOKEN";
    })(WellKnownConfigurationKeys || (WellKnownConfigurationKeys = {}));
    const defaultStudioOptions = { shortcutOptions: { debugPanel: { enabled: false }, ellipse: { enabled: false }, hand: { enabled: false }, image: { enabled: false }, polygon: { enabled: false }, rectangle: { enabled: false }, select: { enabled: false }, text: { enabled: false }, zoom: { enabled: false }, copyPaste: { enabled: false }, viewMode: { enabled: false } } };
    var DocumentIssueTypeEnum, ImageFrameSourceType, FramePropertiesType, DocumentType;
    (function(DocumentIssueTypeEnum2) {
      DocumentIssueTypeEnum2.overflow = "overflow", DocumentIssueTypeEnum2.fontLoading = "fontLoading", DocumentIssueTypeEnum2.actionRegister = "actionRegister", DocumentIssueTypeEnum2.actionExecution = "actionExecution", DocumentIssueTypeEnum2.actionCircular = "actionCircular";
    })(DocumentIssueTypeEnum || (DocumentIssueTypeEnum = {})), function(ImageFrameSourceType2) {
      ImageFrameSourceType2.url = "url", ImageFrameSourceType2.assetProvider = "assetProvider", ImageFrameSourceType2.variable = "variable";
    }(ImageFrameSourceType || (ImageFrameSourceType = {})), function(FramePropertiesType2) {
      FramePropertiesType2.top = "top", FramePropertiesType2.child = "child";
    }(FramePropertiesType || (FramePropertiesType = {})), function(DocumentType2) {
      DocumentType2.project = "project", DocumentType2.template = "template";
    }(DocumentType || (DocumentType = {}));
    function getEditorResponseData(response, parse = true) {
      var _a, _b;
      try {
        if (!response.success) {
          const parsedError = (_a = response.error) !== null && _a !== undefined ? _a : "Yikes, something went wrong", parsedCause = { cause: { name: String(response.status), message: (_b = response.error) !== null && _b !== undefined ? _b : "Yikes, something went wrong" } };
          if (response.status === 404075) {
            const httpStatusCode = JSON.parse(response.data).statusCode;
            throw new ConnectorHttpError(httpStatusCode, parsedError, parsedCause);
          }
          throw new Error(parsedError, parsedCause);
        }
        const dataShouldBeParsed = response.data && parse;
        return Object.assign(Object.assign({}, response), { parsedData: dataShouldBeParsed ? JSON.parse(response.data) : response.data });
      } catch (error) {
        throw console.error(error), error;
      }
    }

    class ConnectorHttpError extends Error {
      constructor(statusCode, message, options) {
        super(message, options), this.statusCode = statusCode;
      }
    }
    var _ActionController_editorAPI, __awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, __classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, __classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class ActionController {
      constructor(editorAPI) {
        _ActionController_editorAPI.set(this, undefined), this.getAll = () => __awaiter(this, undefined, undefined, function* () {
          return (yield __classPrivateFieldGet(this, _ActionController_editorAPI, "f")).getActions().then((result) => getEditorResponseData(result));
        }), this.getById = (id2) => __awaiter(this, undefined, undefined, function* () {
          return (yield __classPrivateFieldGet(this, _ActionController_editorAPI, "f")).getActionById(id2).then((result) => getEditorResponseData(result));
        }), this.create = () => __awaiter(this, undefined, undefined, function* () {
          return (yield __classPrivateFieldGet(this, _ActionController_editorAPI, "f")).createAction().then((result) => getEditorResponseData(result));
        }), this.duplicate = (id2) => __awaiter(this, undefined, undefined, function* () {
          return (yield __classPrivateFieldGet(this, _ActionController_editorAPI, "f")).duplicateAction(id2).then((result) => getEditorResponseData(result));
        }), this.remove = (id2) => __awaiter(this, undefined, undefined, function* () {
          return (yield __classPrivateFieldGet(this, _ActionController_editorAPI, "f")).removeAction(id2).then((result) => getEditorResponseData(result));
        }), this.update = (id2, update) => __awaiter(this, undefined, undefined, function* () {
          return (yield __classPrivateFieldGet(this, _ActionController_editorAPI, "f")).updateAction(id2, JSON.stringify(update)).then((result) => getEditorResponseData(result));
        }), this.rename = (id2, name) => __awaiter(this, undefined, undefined, function* () {
          return this.update(id2, { name });
        }), this.updateScript = (id2, actionScript) => __awaiter(this, undefined, undefined, function* () {
          return this.update(id2, { script: actionScript });
        }), this.updateTriggers = (id2, triggers) => __awaiter(this, undefined, undefined, function* () {
          return this.update(id2, { triggers });
        }), this.move = (order, ids) => __awaiter(this, undefined, undefined, function* () {
          return (yield __classPrivateFieldGet(this, _ActionController_editorAPI, "f")).moveActions(order, ids).then((result) => getEditorResponseData(result));
        }), this.setTypeError = (id2, hasTypeErrors) => __awaiter(this, undefined, undefined, function* () {
          return this.update(id2, { hasTypeError: hasTypeErrors });
        }), this.disable = () => __awaiter(this, undefined, undefined, function* () {
          return (yield __classPrivateFieldGet(this, _ActionController_editorAPI, "f")).disableActions().then((result) => getEditorResponseData(result));
        }), this.enable = () => __awaiter(this, undefined, undefined, function* () {
          return (yield __classPrivateFieldGet(this, _ActionController_editorAPI, "f")).enableActions().then((result) => getEditorResponseData(result));
        }), __classPrivateFieldSet(this, _ActionController_editorAPI, editorAPI, "f");
      }
    }
    _ActionController_editorAPI = new WeakMap;
    var _AnimationController_editorAPI, BarcodeType, BarcodeErrorCorrectionLevel, BarcodeCharacterSet, BarcodeValidationResult, PositionEnum, LayoutType, MeasurementUnit, LayoutIntent, AnimationController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, AnimationController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, AnimationController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class AnimationController {
      constructor(children) {
        _AnimationController_editorAPI.set(this, undefined), this.getAllOnSelectedLayout = () => AnimationController_awaiter(this, undefined, undefined, function* () {
          return (yield AnimationController_classPrivateFieldGet(this, _AnimationController_editorAPI, "f")).getAnimationsOnSelectedLayout().then((result) => getEditorResponseData(result));
        }), this.getByFrameId = (id2, layoutId) => AnimationController_awaiter(this, undefined, undefined, function* () {
          return (yield AnimationController_classPrivateFieldGet(this, _AnimationController_editorAPI, "f")).getAnimationByFrameId(id2, layoutId).then((result) => getEditorResponseData(result));
        }), this.getByLayoutId = (id2) => AnimationController_awaiter(this, undefined, undefined, function* () {
          return (yield AnimationController_classPrivateFieldGet(this, _AnimationController_editorAPI, "f")).getAnimationsByLayoutId(id2).then((result) => getEditorResponseData(result));
        }), this.setFrameAnimation = (animation) => AnimationController_awaiter(this, undefined, undefined, function* () {
          return (yield AnimationController_classPrivateFieldGet(this, _AnimationController_editorAPI, "f")).setFrameAnimation(JSON.stringify(animation)).then((result) => getEditorResponseData(Object.assign(Object.assign({}, result), { data: JSON.stringify(animation) })));
        }), this.play = () => AnimationController_awaiter(this, undefined, undefined, function* () {
          return (yield AnimationController_classPrivateFieldGet(this, _AnimationController_editorAPI, "f")).playAnimation().then((result) => getEditorResponseData(result));
        }), this.pause = () => AnimationController_awaiter(this, undefined, undefined, function* () {
          return (yield AnimationController_classPrivateFieldGet(this, _AnimationController_editorAPI, "f")).pauseAnimation().then((result) => getEditorResponseData(result));
        }), this.setScrubberPosition = (timeInMS) => AnimationController_awaiter(this, undefined, undefined, function* () {
          return (yield AnimationController_classPrivateFieldGet(this, _AnimationController_editorAPI, "f")).setScrubberPosition(timeInMS).then((result) => getEditorResponseData(result));
        }), this.setDuration = (timeInMS) => AnimationController_awaiter(this, undefined, undefined, function* () {
          return (yield AnimationController_classPrivateFieldGet(this, _AnimationController_editorAPI, "f")).setAnimationDuration(timeInMS).then((result) => getEditorResponseData(result));
        }), this.resetFrameAnimation = (id2) => AnimationController_awaiter(this, undefined, undefined, function* () {
          return (yield AnimationController_classPrivateFieldGet(this, _AnimationController_editorAPI, "f")).resetFrameAnimation(id2).then((result) => getEditorResponseData(result));
        }), this.reset = () => AnimationController_awaiter(this, undefined, undefined, function* () {
          return (yield AnimationController_classPrivateFieldGet(this, _AnimationController_editorAPI, "f")).resetAnimation().then((result) => getEditorResponseData(result));
        }), AnimationController_classPrivateFieldSet(this, _AnimationController_editorAPI, children, "f");
      }
    }
    _AnimationController_editorAPI = new WeakMap, function(BarcodeType2) {
      BarcodeType2.code39 = "code39", BarcodeType2.code93 = "code93", BarcodeType2.code128 = "code128", BarcodeType2.dataMatrix = "dataMatrix", BarcodeType2.ean13 = "ean13", BarcodeType2.ean8 = "ean8", BarcodeType2.qr = "qr", BarcodeType2.upca = "upca", BarcodeType2.upce = "upce", BarcodeType2.gs1128 = "gs1128";
    }(BarcodeType || (BarcodeType = {})), function(BarcodeErrorCorrectionLevel2) {
      BarcodeErrorCorrectionLevel2.low = "low", BarcodeErrorCorrectionLevel2.medium = "medium", BarcodeErrorCorrectionLevel2.quartile = "quartile", BarcodeErrorCorrectionLevel2.high = "high";
    }(BarcodeErrorCorrectionLevel || (BarcodeErrorCorrectionLevel = {})), function(BarcodeCharacterSet2) {
      BarcodeCharacterSet2.utf8 = "utf8", BarcodeCharacterSet2.iso8859_1 = "iso8859_1", BarcodeCharacterSet2.code128a = "code128a", BarcodeCharacterSet2.code128b = "code128b", BarcodeCharacterSet2.code128c = "code128c";
    }(BarcodeCharacterSet || (BarcodeCharacterSet = {})), function(BarcodeValidationResult2) {
      BarcodeValidationResult2.success = "success", BarcodeValidationResult2.empty = "empty", BarcodeValidationResult2.invalidLength = "invalidLength", BarcodeValidationResult2.invalidCharacters = "invalidCharacters", BarcodeValidationResult2.invalidChecksum = "invalidChecksum", BarcodeValidationResult2.invalidUPCE = "invalidUPCE", BarcodeValidationResult2.otherError = "otherError";
    }(BarcodeValidationResult || (BarcodeValidationResult = {})), function(PositionEnum2) {
      PositionEnum2.top = "top", PositionEnum2.right = "right", PositionEnum2.bottom = "bottom", PositionEnum2.left = "left";
    }(PositionEnum || (PositionEnum = {})), function(LayoutType2) {
      LayoutType2.top = "top", LayoutType2.child = "child";
    }(LayoutType || (LayoutType = {})), function(MeasurementUnit2) {
      MeasurementUnit2.px = "px", MeasurementUnit2.mm = "mm", MeasurementUnit2.cm = "cm", MeasurementUnit2.inch = "inch", MeasurementUnit2.pt = "pt";
    }(MeasurementUnit || (MeasurementUnit = {})), function(LayoutIntent2) {
      LayoutIntent2.print = "print", LayoutIntent2.digitalStatic = "digitalStatic", LayoutIntent2.digitalAnimated = "digitalAnimated";
    }(LayoutIntent || (LayoutIntent = {}));
    var _BarcodeController_editorAPI, BarcodeController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, BarcodeController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, BarcodeController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class BarcodeController {
      constructor(editorAPI) {
        _BarcodeController_editorAPI.set(this, undefined), this.setBarcodeProperties = (id2, properties) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          return (yield BarcodeController_classPrivateFieldGet(this, _BarcodeController_editorAPI, "f")).setBarcodeProperties(id2, JSON.stringify(properties)).then((result) => getEditorResponseData(result));
        }), this.setEnableBackground = (id2, enableBackground) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          const properties = { enableBackground };
          return this.setBarcodeProperties(id2, properties);
        }), this.setBackgroundColor = (id2, backgroundColor) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          const properties = { backgroundColor };
          return this.setBarcodeProperties(id2, properties);
        }), this.setEnableBars = (id2, enableBars) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          const properties = { enableBars };
          return this.setBarcodeProperties(id2, properties);
        }), this.setBarColor = (id2, barColor) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          const properties = { barColor };
          return this.setBarcodeProperties(id2, properties);
        }), this.setBarcodeSource = (id2, source) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          return (yield BarcodeController_classPrivateFieldGet(this, _BarcodeController_editorAPI, "f")).setBarcodeSource(id2, JSON.stringify(source)).then((result) => getEditorResponseData(result));
        }), this.removeBarcodeSource = (id2) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          return (yield BarcodeController_classPrivateFieldGet(this, _BarcodeController_editorAPI, "f")).setBarcodeSource(id2, null).then((result) => getEditorResponseData(result));
        }), this.setEnableText = (id2, enableText) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          const properties = { enableText };
          return this.setBarcodeProperties(id2, properties);
        }), this.setBarHeight = (id2, barHeight) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          const properties = { barHeight };
          return this.setBarcodeProperties(id2, properties);
        }), this.setMagnification = (id2, magnification) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          const properties = { magnification };
          return this.setBarcodeProperties(id2, properties);
        }), this.setQuietZoneValue = (id2, value, position) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          const update = position ? { left: position === PositionEnum.left ? value : undefined, top: position === PositionEnum.top ? value : undefined, right: position === PositionEnum.right ? value : undefined, bottom: position === PositionEnum.bottom ? value : undefined } : { left: value, top: value, right: value, bottom: value };
          return (yield BarcodeController_classPrivateFieldGet(this, _BarcodeController_editorAPI, "f")).setBarcodeProperties(id2, JSON.stringify({ quietZone: update })).then((result) => getEditorResponseData(result));
        }), this.setAreQuietZoneValuesCombined = (id2, value) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          const update = { areQuietZoneValuesCombined: value };
          return (yield BarcodeController_classPrivateFieldGet(this, _BarcodeController_editorAPI, "f")).setBarcodeProperties(id2, JSON.stringify({ quietZone: update })).then((result) => getEditorResponseData(result));
        }), this.setErrorCorrectionLevel = (id2, errorCorrectionLevel) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          return (yield BarcodeController_classPrivateFieldGet(this, _BarcodeController_editorAPI, "f")).setBarcodeProperties(id2, JSON.stringify({ errorCorrectionLevel })).then((result) => getEditorResponseData(result));
        }), this.setCharacterSet = (id2, characterSet) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          return (yield BarcodeController_classPrivateFieldGet(this, _BarcodeController_editorAPI, "f")).setBarcodeProperties(id2, JSON.stringify({ characterSet })).then((result) => getEditorResponseData(result));
        }), this.setDrawLightMarginIndicator = (id2, drawLightMarginIndicator) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          const properties = { drawStartStopChars: drawLightMarginIndicator };
          return this.setBarcodeProperties(id2, properties);
        }), this.setDrawStartStopChars = (id2, drawStartStopChars) => BarcodeController_awaiter(this, undefined, undefined, function* () {
          const properties = { drawStartStopChars };
          return this.setBarcodeProperties(id2, properties);
        }), this.getBarcodeConfigationOptions = (type) => {
          let allowedCharacterSets, allowedErrorCorrectionLevels, allowToggleText = true, allowBarHeight = true, allowEnableMagnification = true, quietZoneAlwaysCombined = false, allowToggleLightMarginIndicator = false, allowToggleDrawStartAndEndChar = false;
          switch (type) {
            case BarcodeType.qr:
              allowedCharacterSets = [BarcodeCharacterSet.iso8859_1, BarcodeCharacterSet.utf8], allowedErrorCorrectionLevels = [BarcodeErrorCorrectionLevel.low, BarcodeErrorCorrectionLevel.medium, BarcodeErrorCorrectionLevel.quartile, BarcodeErrorCorrectionLevel.high];
            case BarcodeType.dataMatrix:
              allowToggleText = false, allowBarHeight = false, allowEnableMagnification = false, quietZoneAlwaysCombined = true;
              break;
            case BarcodeType.ean13:
              allowToggleText = false, allowToggleLightMarginIndicator = true;
              break;
            case BarcodeType.ean8:
              allowToggleLightMarginIndicator = true;
            case BarcodeType.upca:
            case BarcodeType.upce:
              allowToggleText = false;
              break;
            case BarcodeType.code128:
            case BarcodeType.gs1128:
              allowedCharacterSets = [BarcodeCharacterSet.code128a, BarcodeCharacterSet.code128b, BarcodeCharacterSet.code128c];
              break;
            case BarcodeType.code39:
              allowToggleDrawStartAndEndChar = true;
          }
          return { allowEnableMagnification, allowBarHeight, allowQuietZone: true, allowedCharacterSets, allowedErrorCorrectionLevels, allowToggleText, quietZoneAlwaysCombined, allowToggleLightMarginIndicator, allowToggleDrawStartAndEndChar };
        }, BarcodeController_classPrivateFieldSet(this, _BarcodeController_editorAPI, editorAPI, "f");
      }
    }
    _BarcodeController_editorAPI = new WeakMap;
    var _CanvasController_editorAPI, CanvasController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, CanvasController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, CanvasController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class CanvasController {
      constructor(editorAPI) {
        _CanvasController_editorAPI.set(this, undefined), this.zoomToPage = (_id, left, top, width, height) => CanvasController_awaiter(this, undefined, undefined, function* () {
          _id !== undefined && console.warn("id has no effect and will be deprecated in the future");
          return (yield CanvasController_classPrivateFieldGet(this, _CanvasController_editorAPI, "f")).zoomToPage(left, top, width, height).then((result) => getEditorResponseData(result));
        }), this.getZoomPercentage = () => CanvasController_awaiter(this, undefined, undefined, function* () {
          return (yield CanvasController_classPrivateFieldGet(this, _CanvasController_editorAPI, "f")).getZoomPercentage().then((result) => getEditorResponseData(result));
        }), this.setZoomPercentage = (scaleFactor) => CanvasController_awaiter(this, undefined, undefined, function* () {
          return (yield CanvasController_classPrivateFieldGet(this, _CanvasController_editorAPI, "f")).setZoomPercentage(scaleFactor).then((result) => getEditorResponseData(result));
        }), this.setViewMode = (viewMode) => CanvasController_awaiter(this, undefined, undefined, function* () {
          return (yield CanvasController_classPrivateFieldGet(this, _CanvasController_editorAPI, "f")).setViewMode(viewMode).then((result) => getEditorResponseData(result));
        }), CanvasController_classPrivateFieldSet(this, _CanvasController_editorAPI, editorAPI, "f");
      }
    }
    _CanvasController_editorAPI = new WeakMap;
    var _CharacterStyleController_editorAPI, CharacterStyleController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, CharacterStyleController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, CharacterStyleController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class CharacterStyleController {
      constructor(editorAPI) {
        _CharacterStyleController_editorAPI.set(this, undefined), this.getAll = () => CharacterStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield CharacterStyleController_classPrivateFieldGet(this, _CharacterStyleController_editorAPI, "f")).getCharacterStyles().then((result) => getEditorResponseData(result));
        }), this.getById = (characterStyleId) => CharacterStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield CharacterStyleController_classPrivateFieldGet(this, _CharacterStyleController_editorAPI, "f")).getCharacterStyleById(characterStyleId).then((result) => getEditorResponseData(result));
        }), this.create = () => CharacterStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield CharacterStyleController_classPrivateFieldGet(this, _CharacterStyleController_editorAPI, "f")).createCharacterStyle().then((result) => getEditorResponseData(result));
        }), this.update = (characterStyleId, characterStyle) => CharacterStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield CharacterStyleController_classPrivateFieldGet(this, _CharacterStyleController_editorAPI, "f")).updateCharacterStyle(characterStyleId, JSON.stringify(characterStyle)).then((result) => getEditorResponseData(result));
        }), this.remove = (characterStyleId) => CharacterStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield CharacterStyleController_classPrivateFieldGet(this, _CharacterStyleController_editorAPI, "f")).removeCharacterStyle(characterStyleId).then((result) => getEditorResponseData(result));
        }), this.duplicate = (characterStyleId) => CharacterStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield CharacterStyleController_classPrivateFieldGet(this, _CharacterStyleController_editorAPI, "f")).duplicateCharacterStyle(characterStyleId).then((result) => getEditorResponseData(result));
        }), this.rename = (characterStyleId, characterStyleName) => CharacterStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield CharacterStyleController_classPrivateFieldGet(this, _CharacterStyleController_editorAPI, "f")).renameCharacterStyle(characterStyleId, characterStyleName).then((result) => getEditorResponseData(result));
        }), this.move = (order, ids) => CharacterStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield CharacterStyleController_classPrivateFieldGet(this, _CharacterStyleController_editorAPI, "f")).moveCharacterStyles(order, ids).then((result) => getEditorResponseData(result));
        }), CharacterStyleController_classPrivateFieldSet(this, _CharacterStyleController_editorAPI, editorAPI, "f");
      }
    }
    _CharacterStyleController_editorAPI = new WeakMap;
    var _ClipboardController_editorAPI, ClipboardController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, ClipboardController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, ClipboardController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class ClipboardController {
      constructor(editorAPI) {
        _ClipboardController_editorAPI.set(this, undefined), this.copyFrames = (ids) => ClipboardController_awaiter(this, undefined, undefined, function* () {
          const res = yield ClipboardController_classPrivateFieldGet(this, _ClipboardController_editorAPI, "f"), frameData = yield res.copyFrames(ids);
          return frameData.data && (yield navigator.clipboard.writeText(frameData.data)), getEditorResponseData(frameData);
        }), this.cutFrames = (ids) => ClipboardController_awaiter(this, undefined, undefined, function* () {
          const res = yield ClipboardController_classPrivateFieldGet(this, _ClipboardController_editorAPI, "f"), frameData = yield res.cutFrames(ids);
          return frameData.data && (yield navigator.clipboard.writeText(frameData.data)), getEditorResponseData(frameData);
        }), this.pasteFrames = () => ClipboardController_awaiter(this, undefined, undefined, function* () {
          const res = yield ClipboardController_classPrivateFieldGet(this, _ClipboardController_editorAPI, "f"), clipboardData = yield navigator.clipboard.readText();
          return getEditorResponseData(yield res.pasteFrames(clipboardData));
        }), this.getContentType = () => ClipboardController_awaiter(this, undefined, undefined, function* () {
          const res = yield ClipboardController_classPrivateFieldGet(this, _ClipboardController_editorAPI, "f"), clipboardData = yield navigator.clipboard.readText();
          return getEditorResponseData(yield res.getClipboardContentType(clipboardData));
        }), ClipboardController_classPrivateFieldSet(this, _ClipboardController_editorAPI, editorAPI, "f");
      }
    }
    _ClipboardController_editorAPI = new WeakMap;
    var _ColorConversionController_editorAPI, ColorType, ColorUsageType, ColorConversionController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, ColorConversionController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, ColorConversionController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class ColorConversionController {
      constructor(editorAPI) {
        _ColorConversionController_editorAPI.set(this, undefined), this.convertToRgb = (color) => ColorConversionController_awaiter(this, undefined, undefined, function* () {
          return (yield ColorConversionController_classPrivateFieldGet(this, _ColorConversionController_editorAPI, "f")).colorToRgb(color).then((result) => getEditorResponseData(result));
        }), ColorConversionController_classPrivateFieldSet(this, _ColorConversionController_editorAPI, editorAPI, "f");
      }
    }
    _ColorConversionController_editorAPI = new WeakMap, function(ColorType2) {
      ColorType2.rgb = "rgb", ColorType2.hex = "hex", ColorType2.cmyk = "cmyk", ColorType2.gray = "gray", ColorType2.hsl = "hsl", ColorType2.spot = "spot", ColorType2.spotCMYK = "spotCMYK", ColorType2.spotRGB = "spotRGB";
    }(ColorType || (ColorType = {})), function(ColorUsageType2) {
      ColorUsageType2.local = "local", ColorUsageType2.stylekit = "stylekit";
    }(ColorUsageType || (ColorUsageType = {}));
    var _ColorStyleController_editorAPI, DeprecatedMediaType, DeprecatedMediaConnectorDownloadType, MediaType, ConnectorType, SortBy, SortOrder, ConnectorRegistrationSource, ConnectorMappingSource, ConnectorMappingDirection, ConnectorStateType, ConnectorEventType, ColorStyleController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, ColorStyleController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, ColorStyleController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class ColorStyleController {
      constructor(editorAPI) {
        _ColorStyleController_editorAPI.set(this, undefined), this.getAll = () => ColorStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield ColorStyleController_classPrivateFieldGet(this, _ColorStyleController_editorAPI, "f")).getColors().then((result) => getEditorResponseData(result));
        }), this.getById = (id2) => ColorStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield ColorStyleController_classPrivateFieldGet(this, _ColorStyleController_editorAPI, "f")).getColorById(id2).then((result) => getEditorResponseData(result));
        }), this.create = () => ColorStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield ColorStyleController_classPrivateFieldGet(this, _ColorStyleController_editorAPI, "f")).createColor().then((result) => getEditorResponseData(result));
        }), this.duplicate = (id2) => ColorStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield ColorStyleController_classPrivateFieldGet(this, _ColorStyleController_editorAPI, "f")).duplicateColor(id2).then((result) => getEditorResponseData(result));
        }), this.move = (order, ids) => ColorStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield ColorStyleController_classPrivateFieldGet(this, _ColorStyleController_editorAPI, "f")).moveColors(order, ids).then((result) => getEditorResponseData(result));
        }), this.rename = (id2, newColorName) => ColorStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield ColorStyleController_classPrivateFieldGet(this, _ColorStyleController_editorAPI, "f")).renameColor(id2, newColorName).then((result) => getEditorResponseData(result));
        }), this.update = (id2, newColorProperties) => ColorStyleController_awaiter(this, undefined, undefined, function* () {
          const res = yield ColorStyleController_classPrivateFieldGet(this, _ColorStyleController_editorAPI, "f"), properties = newColorProperties;
          return properties.type === ColorType.spot && (properties.type = ColorType.spotCMYK), res.updateColor(id2, JSON.stringify(properties)).then((result) => getEditorResponseData(result));
        }), this.remove = (id2) => ColorStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield ColorStyleController_classPrivateFieldGet(this, _ColorStyleController_editorAPI, "f")).removeColor(id2).then((result) => getEditorResponseData(result));
        }), ColorStyleController_classPrivateFieldSet(this, _ColorStyleController_editorAPI, editorAPI, "f");
      }
    }
    _ColorStyleController_editorAPI = new WeakMap, function(DeprecatedMediaType2) {
      DeprecatedMediaType2[DeprecatedMediaType2.file = 0] = "file", DeprecatedMediaType2[DeprecatedMediaType2.collection = 1] = "collection";
    }(DeprecatedMediaType || (DeprecatedMediaType = {})), function(DeprecatedMediaConnectorDownloadType2) {
      DeprecatedMediaConnectorDownloadType2.LowResolutionWeb = "lowresWeb", DeprecatedMediaConnectorDownloadType2.HighResolutionWeb = "highresWeb";
    }(DeprecatedMediaConnectorDownloadType || (DeprecatedMediaConnectorDownloadType = {})), function(MediaType2) {
      MediaType2.file = "file", MediaType2.collection = "collection";
    }(MediaType || (MediaType = {})), function(ConnectorType2) {
      ConnectorType2.media = "media", ConnectorType2.fonts = "fonts", ConnectorType2.data = "data";
    }(ConnectorType || (ConnectorType = {})), function(SortBy2) {
      SortBy2.name = "name", SortBy2.path = "relativePath", SortBy2.id = "id";
    }(SortBy || (SortBy = {})), function(SortOrder2) {
      SortOrder2.ascending = "asc", SortOrder2.descending = "desc";
    }(SortOrder || (SortOrder = {})), function(ConnectorRegistrationSource2) {
      ConnectorRegistrationSource2.url = "url", ConnectorRegistrationSource2.grafx = "grafx", ConnectorRegistrationSource2.local = "local";
    }(ConnectorRegistrationSource || (ConnectorRegistrationSource = {}));

    class ConnectorMapping {
      constructor(contextProperty, mapFrom, sourceValue, direction = ConnectorMappingDirection.engineToConnector) {
        this.direction = ConnectorMappingDirection.engineToConnector, this.name = contextProperty, this.direction = direction, mapFrom === ConnectorMappingSource.variable ? this.value = `${mapFrom}.${sourceValue}` : this.value = sourceValue;
      }
    }
    (function(ConnectorMappingSource2) {
      ConnectorMappingSource2.variable = "var", ConnectorMappingSource2.value = "value";
    })(ConnectorMappingSource || (ConnectorMappingSource = {})), function(ConnectorMappingDirection2) {
      ConnectorMappingDirection2.engineToConnector = "engineToConnector", ConnectorMappingDirection2.connectorToEngine = "connectorToEngine";
    }(ConnectorMappingDirection || (ConnectorMappingDirection = {})), function(ConnectorStateType2) {
      ConnectorStateType2.loading = "loading", ConnectorStateType2.loaded = "loaded", ConnectorStateType2.running = "running", ConnectorStateType2.ready = "ready", ConnectorStateType2.error = "error";
    }(ConnectorStateType || (ConnectorStateType = {})), function(ConnectorEventType2) {
      ConnectorEventType2.stateChanged = "stateChanged", ConnectorEventType2.authChanged = "authChanged", ConnectorEventType2.reloadRequired = "reloadRequired", ConnectorEventType2.unloaded = "unloaded";
    }(ConnectorEventType || (ConnectorEventType = {}));
    const grafxMediaConnectorRegistration = { url: "grafx-media.json", source: ConnectorRegistrationSource.local };

    class GrafxTokenAuthCredentials {
      constructor(token) {
        this.type = AuthCredentialsTypeEnum.grafxToken, this.token = token;
      }
    }

    class RefreshedAuthCredendentials {
      constructor() {
        this.type = AuthCredentialsTypeEnum.refreshed;
      }
    }
    var AuthCredentialsTypeEnum, AuthRefreshTypeEnum;
    (function(AuthCredentialsTypeEnum2) {
      AuthCredentialsTypeEnum2.grafxToken = "grafxToken", AuthCredentialsTypeEnum2.refreshed = "refreshed";
    })(AuthCredentialsTypeEnum || (AuthCredentialsTypeEnum = {})), function(AuthRefreshTypeEnum2) {
      AuthRefreshTypeEnum2.grafxToken = "grafxToken", AuthRefreshTypeEnum2.any = "any";
    }(AuthRefreshTypeEnum || (AuthRefreshTypeEnum = {}));

    class ConnectorCompatibilityTools {
      constructor() {
        this.makeConnectorSourceForwardsCompatible = (registration) => {
          if (registration.source != ConnectorRegistrationSource.grafx)
            return registration;
          if (this.isSourceMigrated(registration))
            return registration;
          let url = registration.url;
          for (;url.endsWith("/"); )
            url = url.substring(0, url.length - 1);
          const pathChunks = url.split("/");
          return { id: pathChunks[pathChunks.length - 1], source: ConnectorRegistrationSource.grafx };
        }, this.makeMultipleConnectorsBackwardsCompatible = (connectors, baseUrl) => connectors.map((connector) => this.makeSingleConnectorBackwardsCompatible(connector, baseUrl)), this.makeSingleConnectorBackwardsCompatible = (connector, baseUrl) => connector.source.source != ConnectorRegistrationSource.grafx ? connector : { id: connector.id, name: connector.name, iconUrl: connector.iconUrl, source: this.makeConnectorSourceBackwardsCompatible(connector.source, baseUrl) }, this.makeConnectorSourceBackwardsCompatible = (connector, baseUrl) => {
          let url = baseUrl;
          for (;url == null ? undefined : url.endsWith("/"); )
            url = url.substring(0, url.length - 1);
          return { url: `${url}/connectors/${connector.id}`, source: ConnectorRegistrationSource.grafx };
        }, this.isSourceMigrated = (registration) => ("id" in registration);
      }
    }
    var _ConnectorController_editorAPI, _ConnectorController_localConfig, _ConnectorController_connectorCompatibilityTools, _ConnectorConfigurator_connectorId, _ConnectorConfigurator_res, ConnectorController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, ConnectorController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, ConnectorController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class ConnectorController {
      constructor(editorAPI, localConfig) {
        _ConnectorController_editorAPI.set(this, undefined), _ConnectorController_localConfig.set(this, undefined), _ConnectorController_connectorCompatibilityTools.set(this, undefined), this.getById = (id2) => ConnectorController_awaiter(this, undefined, undefined, function* () {
          return (yield ConnectorController_classPrivateFieldGet(this, _ConnectorController_editorAPI, "f")).getConnectorById(id2).then((result) => getEditorResponseData(result)).then((resp) => {
            const update = Object.assign(Object.assign({}, resp), { parsedData: null });
            return resp.parsedData && (update.parsedData = ConnectorController_classPrivateFieldGet(this, _ConnectorController_connectorCompatibilityTools, "f").makeSingleConnectorBackwardsCompatible(resp.parsedData, ConnectorController_classPrivateFieldGet(this, _ConnectorController_localConfig, "f").get(WellKnownConfigurationKeys.GraFxStudioEnvironmentApiUrl))), update;
          });
        }), this.getAllByType = (type) => ConnectorController_awaiter(this, undefined, undefined, function* () {
          return (yield ConnectorController_classPrivateFieldGet(this, _ConnectorController_editorAPI, "f")).getConnectors(type).then((result) => getEditorResponseData(result)).then((resp) => {
            const update = Object.assign(Object.assign({}, resp), { parsedData: null });
            return resp.parsedData && (update.parsedData = ConnectorController_classPrivateFieldGet(this, _ConnectorController_connectorCompatibilityTools, "f").makeMultipleConnectorsBackwardsCompatible(resp.parsedData, ConnectorController_classPrivateFieldGet(this, _ConnectorController_localConfig, "f").get(WellKnownConfigurationKeys.GraFxStudioEnvironmentApiUrl))), update;
          });
        }), this.register = (registration) => ConnectorController_awaiter(this, undefined, undefined, function* () {
          const res = yield ConnectorController_classPrivateFieldGet(this, _ConnectorController_editorAPI, "f"), connectorRegistration = ConnectorController_classPrivateFieldGet(this, _ConnectorController_connectorCompatibilityTools, "f").makeConnectorSourceForwardsCompatible(registration);
          return res.registerConnector(JSON.stringify(connectorRegistration)).then((result) => getEditorResponseData(result));
        }), this.unregister = (id2) => ConnectorController_awaiter(this, undefined, undefined, function* () {
          return (yield ConnectorController_classPrivateFieldGet(this, _ConnectorController_editorAPI, "f")).unregisterConnector(id2).then((result) => getEditorResponseData(result));
        }), this.configure = (id2, configurationCallback) => ConnectorController_awaiter(this, undefined, undefined, function* () {
          const res = yield ConnectorController_classPrivateFieldGet(this, _ConnectorController_editorAPI, "f");
          return yield this.waitToBeReady(id2), yield configurationCallback(new ConnectorConfigurator(id2, res)), res.updateConnectorConfiguration(id2).then((result) => getEditorResponseData(result));
        }), this.getState = (id2) => ConnectorController_awaiter(this, undefined, undefined, function* () {
          return (yield ConnectorController_classPrivateFieldGet(this, _ConnectorController_editorAPI, "f")).getConnectorState(id2).then((result) => getEditorResponseData(result));
        }), this.getOptions = (id2) => ConnectorController_awaiter(this, undefined, undefined, function* () {
          return (yield ConnectorController_classPrivateFieldGet(this, _ConnectorController_editorAPI, "f")).getConnectorOptions(id2).then((result) => getEditorResponseData(result));
        }), this.waitToBeReady = (id_1, ...args_1) => ConnectorController_awaiter(this, [id_1, ...args_1], undefined, function* (id2, timeoutMilliseconds = 2000) {
          let timeout = Math.max(timeoutMilliseconds, 500);
          timeout = Math.min(timeout, 5000);
          let retries = 0;
          try {
            for (;100 * retries < timeout; ) {
              const result = yield this.getState(id2);
              if (result.success && result.parsedData && (result.parsedData.type === ConnectorStateType.running || result.parsedData.type === ConnectorStateType.ready))
                return getEditorResponseData({ data: null, success: true, error: undefined, status: 0, parsedData: undefined }, false);
              yield new Promise((resolve) => setTimeout(resolve, 100)), retries++;
            }
          } catch (err) {
            return getEditorResponseData({ data: null, success: false, error: `Error while getting connector state ${err}`, status: 50000, parsedData: undefined }, false);
          }
          return getEditorResponseData({ data: null, success: false, error: "Timed out waiting for connector", status: 50000, parsedData: undefined }, false);
        }), ConnectorController_classPrivateFieldSet(this, _ConnectorController_editorAPI, editorAPI, "f"), ConnectorController_classPrivateFieldSet(this, _ConnectorController_localConfig, localConfig, "f"), ConnectorController_classPrivateFieldSet(this, _ConnectorController_connectorCompatibilityTools, new ConnectorCompatibilityTools, "f");
      }
      getMappings(id2, direction) {
        return ConnectorController_awaiter(this, undefined, undefined, function* () {
          return (yield ConnectorController_classPrivateFieldGet(this, _ConnectorController_editorAPI, "f")).getConnectorMappings(id2).then((result) => getEditorResponseData(result)).then((result) => {
            var _a;
            return direction ? Object.assign(Object.assign({}, result), { parsedData: (_a = result.parsedData) === null || _a === undefined ? undefined : _a.filter((cm) => cm.direction === direction) }) : result;
          });
        });
      }
    }
    _ConnectorController_editorAPI = new WeakMap, _ConnectorController_localConfig = new WeakMap, _ConnectorController_connectorCompatibilityTools = new WeakMap;

    class ConnectorConfigurator {
      constructor(id2, res) {
        _ConnectorConfigurator_connectorId.set(this, undefined), _ConnectorConfigurator_res.set(this, undefined), this.setOptions = (options) => ConnectorController_awaiter(this, undefined, undefined, function* () {
          return ConnectorController_classPrivateFieldGet(this, _ConnectorConfigurator_res, "f").setConnectorOptions(ConnectorController_classPrivateFieldGet(this, _ConnectorConfigurator_connectorId, "f"), JSON.stringify(options)).then((result) => getEditorResponseData(result));
        }), this.setMappings = (mappings) => ConnectorController_awaiter(this, undefined, undefined, function* () {
          return getEditorResponseData(yield ConnectorController_classPrivateFieldGet(this, _ConnectorConfigurator_res, "f").setConnectorMappings(ConnectorController_classPrivateFieldGet(this, _ConnectorConfigurator_connectorId, "f"), mappings.map(function(m) {
            return JSON.stringify(m);
          })));
        }), this.setHttpHeader = (headerName, headerValue) => ConnectorController_awaiter(this, undefined, undefined, function* () {
          return ConnectorController_classPrivateFieldGet(this, _ConnectorConfigurator_res, "f").connectorAuthenticationSetHttpHeader(ConnectorController_classPrivateFieldGet(this, _ConnectorConfigurator_connectorId, "f"), headerName, headerValue).then((result) => getEditorResponseData(result));
        }), ConnectorController_classPrivateFieldSet(this, _ConnectorConfigurator_connectorId, id2, "f"), ConnectorController_classPrivateFieldSet(this, _ConnectorConfigurator_res, res, "f");
      }
    }
    _ConnectorConfigurator_connectorId = new WeakMap, _ConnectorConfigurator_res = new WeakMap;
    var _DataConnectorController_editorAPI, _DataConnectorController_dataItemMappingTools, DataConnectorController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, DataConnectorController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, DataConnectorController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class DataConnectorController {
      constructor(editorAPI, dataItemMappingTools) {
        _DataConnectorController_editorAPI.set(this, undefined), _DataConnectorController_dataItemMappingTools.set(this, undefined), this.getPage = (connectorId_1, config_1, ...args_1) => DataConnectorController_awaiter(this, [connectorId_1, config_1, ...args_1], undefined, function* (connectorId, config, context = {}) {
          return (yield DataConnectorController_classPrivateFieldGet(this, _DataConnectorController_editorAPI, "f")).dataConnectorGetPage(connectorId, JSON.stringify(config), JSON.stringify(context)).then((result) => getEditorResponseData(result)).then((resp) => {
            const update = Object.assign(Object.assign({}, resp), { parsedData: null });
            return resp.parsedData && (update.parsedData = { data: resp.parsedData.data.map((e) => DataConnectorController_classPrivateFieldGet(this, _DataConnectorController_dataItemMappingTools, "f").mapEngineToDataItem(e)), continuationToken: resp.parsedData.continuationToken }), update;
          });
        }), this.getModel = (connectorId_1, ...args_1) => DataConnectorController_awaiter(this, [connectorId_1, ...args_1], undefined, function* (connectorId, context = {}) {
          return (yield DataConnectorController_classPrivateFieldGet(this, _DataConnectorController_editorAPI, "f")).dataConnectorGetModel(connectorId, JSON.stringify(context)).then((result) => getEditorResponseData(result));
        }), this.getConfigurationOptions = (connectorId) => DataConnectorController_awaiter(this, undefined, undefined, function* () {
          return (yield DataConnectorController_classPrivateFieldGet(this, _DataConnectorController_editorAPI, "f")).dataConnectorGetConfigurationOptions(connectorId).then((result) => getEditorResponseData(result));
        }), this.getCapabilities = (connectorId) => DataConnectorController_awaiter(this, undefined, undefined, function* () {
          return (yield DataConnectorController_classPrivateFieldGet(this, _DataConnectorController_editorAPI, "f")).dataConnectorGetCapabilities(connectorId).then((result) => getEditorResponseData(result));
        }), DataConnectorController_classPrivateFieldSet(this, _DataConnectorController_editorAPI, editorAPI, "f"), DataConnectorController_classPrivateFieldSet(this, _DataConnectorController_dataItemMappingTools, dataItemMappingTools, "f");
      }
    }
    _DataConnectorController_editorAPI = new WeakMap, _DataConnectorController_dataItemMappingTools = new WeakMap;
    var _DataSourceController_editorAPI, _DataSourceController_dataItemMappingTools, DataSourceController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, DataSourceController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, DataSourceController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class DataSourceController {
      constructor(editorAPI, dataItemMappingTools) {
        _DataSourceController_editorAPI.set(this, undefined), _DataSourceController_dataItemMappingTools.set(this, undefined), this.setDataSource = (connectorId) => DataSourceController_awaiter(this, undefined, undefined, function* () {
          return (yield DataSourceController_classPrivateFieldGet(this, _DataSourceController_editorAPI, "f")).setDataSource(connectorId).then((result) => getEditorResponseData(result));
        }), this.getDataSource = () => DataSourceController_awaiter(this, undefined, undefined, function* () {
          return (yield DataSourceController_classPrivateFieldGet(this, _DataSourceController_editorAPI, "f")).getDataSource().then((result) => getEditorResponseData(result));
        }), this.removeDataSource = () => DataSourceController_awaiter(this, undefined, undefined, function* () {
          return (yield DataSourceController_classPrivateFieldGet(this, _DataSourceController_editorAPI, "f")).removeDataSource().then((result) => getEditorResponseData(result));
        }), this.setDataRow = (dataRow) => DataSourceController_awaiter(this, undefined, undefined, function* () {
          const res = yield DataSourceController_classPrivateFieldGet(this, _DataSourceController_editorAPI, "f"), engineDataItem = DataSourceController_classPrivateFieldGet(this, _DataSourceController_dataItemMappingTools, "f").mapDataItemToEngine(dataRow);
          return res.setDataRow(JSON.stringify(engineDataItem)).then((result) => getEditorResponseData(result));
        }), DataSourceController_classPrivateFieldSet(this, _DataSourceController_editorAPI, editorAPI, "f"), DataSourceController_classPrivateFieldSet(this, _DataSourceController_dataItemMappingTools, dataItemMappingTools, "f");
      }
    }
    _DataSourceController_editorAPI = new WeakMap, _DataSourceController_dataItemMappingTools = new WeakMap;
    var _DebugController_editorAPI, DebugController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, DebugController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, DebugController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class DebugController {
      constructor(editorAPI) {
        _DebugController_editorAPI.set(this, undefined), this.getAllLogs = () => DebugController_awaiter(this, undefined, undefined, function* () {
          return (yield DebugController_classPrivateFieldGet(this, _DebugController_editorAPI, "f")).getLogs().then((result) => getEditorResponseData(result));
        }), this.toggleDebugPanel = () => DebugController_awaiter(this, undefined, undefined, function* () {
          return (yield DebugController_classPrivateFieldGet(this, _DebugController_editorAPI, "f")).toggleDebugPanel().then((result) => getEditorResponseData(result));
        }), this.enableDebug = () => DebugController_awaiter(this, undefined, undefined, function* () {
          return (yield DebugController_classPrivateFieldGet(this, _DebugController_editorAPI, "f")).enableDebug().then((result) => getEditorResponseData(result));
        }), this.disableDebug = () => DebugController_awaiter(this, undefined, undefined, function* () {
          return (yield DebugController_classPrivateFieldGet(this, _DebugController_editorAPI, "f")).disableDebug().then((result) => getEditorResponseData(result));
        }), DebugController_classPrivateFieldSet(this, _DebugController_editorAPI, editorAPI, "f");
      }
    }
    _DebugController_editorAPI = new WeakMap;
    var _DocumentController_editorAPI, AutoGrowDirection, ImageSourceTypeEnum, FrameTypeEnum, BarcodeSourceTypeEnum, TextDirection, FlowDirection, VerticalAlign, BlendMode, FitMode, FitModePosition, UpdateZIndexMethod, FrameAnchorType, AnchorTargetType, AnchorTargetEdgeType, DocumentController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, DocumentController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, DocumentController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class DocumentController {
      constructor(editorAPI) {
        _DocumentController_editorAPI.set(this, undefined), this.getCurrentState = () => DocumentController_awaiter(this, undefined, undefined, function* () {
          return (yield DocumentController_classPrivateFieldGet(this, _DocumentController_editorAPI, "f")).getCurrentDocumentState().then((result) => getEditorResponseData(result));
        }), this.load = (doc_1, ...args_1) => DocumentController_awaiter(this, [doc_1, ...args_1], undefined, function* (doc, options = { keepConnectors: false }) {
          const res = yield DocumentController_classPrivateFieldGet(this, _DocumentController_editorAPI, "f"), parsedDoc = typeof doc != "string" ? JSON.stringify(doc) : doc;
          return res.loadDocument(parsedDoc, JSON.stringify(options)).then((result) => getEditorResponseData(result));
        }), this.createAndLoad = (preset) => DocumentController_awaiter(this, undefined, undefined, function* () {
          const res = yield DocumentController_classPrivateFieldGet(this, _DocumentController_editorAPI, "f"), parsedDoc = JSON.stringify(preset);
          return res.createAndLoadDocument(parsedDoc).then((result) => getEditorResponseData(result));
        }), DocumentController_classPrivateFieldSet(this, _DocumentController_editorAPI, editorAPI, "f");
      }
    }
    _DocumentController_editorAPI = new WeakMap, function(AutoGrowDirection2) {
      AutoGrowDirection2.top = "top", AutoGrowDirection2.bottom = "bottom", AutoGrowDirection2.left = "left", AutoGrowDirection2.right = "right";
    }(AutoGrowDirection || (AutoGrowDirection = {})), function(ImageSourceTypeEnum2) {
      ImageSourceTypeEnum2.url = "url", ImageSourceTypeEnum2.variable = "variable", ImageSourceTypeEnum2.connector = "connector";
    }(ImageSourceTypeEnum || (ImageSourceTypeEnum = {})), function(FrameTypeEnum2) {
      FrameTypeEnum2.text = "text", FrameTypeEnum2.image = "image", FrameTypeEnum2.shape = "shape", FrameTypeEnum2.barcode = "barcode";
    }(FrameTypeEnum || (FrameTypeEnum = {})), function(BarcodeSourceTypeEnum2) {
      BarcodeSourceTypeEnum2.variable = "variable", BarcodeSourceTypeEnum2.text = "text";
    }(BarcodeSourceTypeEnum || (BarcodeSourceTypeEnum = {})), function(TextDirection2) {
      TextDirection2.leftToRight = "leftToRight", TextDirection2.rightToLeft = "rightToLeft", TextDirection2.weak = "weak";
    }(TextDirection || (TextDirection = {})), function(FlowDirection2) {
      FlowDirection2.horizontal = "horizontal", FlowDirection2.vertical = "vertical", FlowDirection2.onPath = "onPath";
    }(FlowDirection || (FlowDirection = {})), function(VerticalAlign2) {
      VerticalAlign2.top = "top", VerticalAlign2.bottom = "bottom", VerticalAlign2.middle = "middle", VerticalAlign2.justify = "justify";
    }(VerticalAlign || (VerticalAlign = {})), function(BlendMode2) {
      BlendMode2.normal = "normal", BlendMode2.screen = "screen", BlendMode2.overlay = "overlay", BlendMode2.darken = "darken", BlendMode2.lighten = "lighten", BlendMode2.colorDodge = "colorDodge", BlendMode2.colorBurn = "colorBurn", BlendMode2.hardLight = "hardLight", BlendMode2.softLight = "softLight", BlendMode2.difference = "difference", BlendMode2.exclusion = "exclusion", BlendMode2.multiply = "multiply", BlendMode2.hue = "hue", BlendMode2.saturation = "saturation", BlendMode2.color = "color", BlendMode2.luminosity = "luminosity";
    }(BlendMode || (BlendMode = {})), function(FitMode2) {
      FitMode2.fill = "fill", FitMode2.fit = "fit", FitMode2.smartCrop = "smartCrop", FitMode2.manualCrop = "manualCrop";
    }(FitMode || (FitMode = {})), function(FitModePosition2) {
      FitModePosition2.topLeft = "topLeft", FitModePosition2.topCenter = "topCenter", FitModePosition2.topRight = "topRight", FitModePosition2.centerLeft = "centerLeft", FitModePosition2.center = "center", FitModePosition2.centerRight = "centerRight", FitModePosition2.bottomLeft = "bottomLeft", FitModePosition2.bottomCenter = "bottomCenter", FitModePosition2.bottomRight = "bottomRight";
    }(FitModePosition || (FitModePosition = {})), function(UpdateZIndexMethod2) {
      UpdateZIndexMethod2.bringToFront = "bringToFront", UpdateZIndexMethod2.sendToBack = "sendToBack", UpdateZIndexMethod2.bringForward = "bringForward", UpdateZIndexMethod2.sendBackward = "sendBackward";
    }(UpdateZIndexMethod || (UpdateZIndexMethod = {})), function(FrameAnchorType2) {
      FrameAnchorType2.relative = "relative", FrameAnchorType2.start = "start", FrameAnchorType2.end = "end", FrameAnchorType2.startAndEnd = "startAndEnd", FrameAnchorType2.center = "center";
    }(FrameAnchorType || (FrameAnchorType = {})), function(AnchorTargetType2) {
      AnchorTargetType2.page = "page", AnchorTargetType2.frame = "frame";
    }(AnchorTargetType || (AnchorTargetType = {})), function(AnchorTargetEdgeType2) {
      AnchorTargetEdgeType2.start = "start", AnchorTargetEdgeType2.end = "end", AnchorTargetEdgeType2.center = "center";
    }(AnchorTargetEdgeType || (AnchorTargetEdgeType = {}));

    class PageAnchorTarget {
      constructor() {
        this.type = AnchorTargetType.page;
      }
    }

    class FrameAnchorTarget {
      constructor(id2, edge) {
        this.type = AnchorTargetType.frame, this.frameId = id2, this.edge = edge;
      }
    }
    var _ExperimentController_editorAPI, ExperimentController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, ExperimentController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, ExperimentController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class ExperimentController {
      constructor(editorAPI) {
        _ExperimentController_editorAPI.set(this, undefined), this.insertImageVariableToFrame = (imageFrameId, variableId) => ExperimentController_awaiter(this, undefined, undefined, function* () {
          const res = yield ExperimentController_classPrivateFieldGet(this, _ExperimentController_editorAPI, "f"), src2 = { id: variableId, type: ImageSourceTypeEnum.variable };
          return res.setImageSource(imageFrameId, JSON.stringify(src2)).then((result) => getEditorResponseData(result));
        }), this.insertTextVariable = (id2) => ExperimentController_awaiter(this, undefined, undefined, function* () {
          return (yield ExperimentController_classPrivateFieldGet(this, _ExperimentController_editorAPI, "f")).insertTextVariable(id2).then((result) => getEditorResponseData(result));
        }), this.enterTextEditMode = (id2) => ExperimentController_awaiter(this, undefined, undefined, function* () {
          return (yield ExperimentController_classPrivateFieldGet(this, _ExperimentController_editorAPI, "f")).enterTextEditMode(id2).then((result) => getEditorResponseData(result));
        }), this.exitTextEditMode = () => ExperimentController_awaiter(this, undefined, undefined, function* () {
          return (yield ExperimentController_classPrivateFieldGet(this, _ExperimentController_editorAPI, "f")).exitTextEditMode().then((result) => getEditorResponseData(result));
        }), this.getText = (frameId, textType) => ExperimentController_awaiter(this, undefined, undefined, function* () {
          return (yield ExperimentController_classPrivateFieldGet(this, _ExperimentController_editorAPI, "f")).getTextByFrameId(frameId, textType).then((result) => getEditorResponseData(result));
        }), this.setText = (frameId, text) => ExperimentController_awaiter(this, undefined, undefined, function* () {
          return (yield ExperimentController_classPrivateFieldGet(this, _ExperimentController_editorAPI, "f")).setTextByFrameId(frameId, text).then((result) => getEditorResponseData(result));
        }), this.selectText = (frameId, startIndex, length) => ExperimentController_awaiter(this, undefined, undefined, function* () {
          return (yield ExperimentController_classPrivateFieldGet(this, _ExperimentController_editorAPI, "f")).selectTextById(frameId, startIndex, length).then((result) => getEditorResponseData(result));
        }), ExperimentController_classPrivateFieldSet(this, _ExperimentController_editorAPI, editorAPI, "f");
      }
    }
    _ExperimentController_editorAPI = new WeakMap;
    var _FontConnectorController_editorAPI, _FontConnectorController_blobAPI, FontConnectorController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, FontConnectorController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, FontConnectorController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class FontConnectorController {
      constructor(editorAPI) {
        _FontConnectorController_editorAPI.set(this, undefined), _FontConnectorController_blobAPI.set(this, undefined), this.query = (connectorId_1, queryOptions_1, ...args_1) => FontConnectorController_awaiter(this, [connectorId_1, queryOptions_1, ...args_1], undefined, function* (connectorId, queryOptions, context = {}) {
          return (yield FontConnectorController_classPrivateFieldGet(this, _FontConnectorController_editorAPI, "f")).fontConnectorQuery(connectorId, JSON.stringify(queryOptions), JSON.stringify(context)).then((result) => getEditorResponseData(result));
        }), this.detail = (connectorId_1, fontFamilyId_1, ...args_1) => FontConnectorController_awaiter(this, [connectorId_1, fontFamilyId_1, ...args_1], undefined, function* (connectorId, fontFamilyId, context = {}) {
          return (yield FontConnectorController_classPrivateFieldGet(this, _FontConnectorController_editorAPI, "f")).fontConnectorDetail(connectorId, fontFamilyId, JSON.stringify(context)).then((result) => getEditorResponseData(result));
        }), this.download = (connectorId_1, fontStyleId_1, ...args_1) => FontConnectorController_awaiter(this, [connectorId_1, fontStyleId_1, ...args_1], undefined, function* (connectorId, fontStyleId, context = {}) {
          return (yield FontConnectorController_classPrivateFieldGet(this, _FontConnectorController_blobAPI, "f")).fontConnectorDownload(connectorId, fontStyleId, JSON.stringify(context)).then((result) => {
            var _a;
            return (_a = result) !== null && _a !== undefined ? _a : result;
          });
        }), this.preview = (connectorId_1, fontFamilyId_1, previewFormat_1, ...args_1) => FontConnectorController_awaiter(this, [connectorId_1, fontFamilyId_1, previewFormat_1, ...args_1], undefined, function* (connectorId, fontFamilyId, previewFormat, context = {}) {
          return (yield FontConnectorController_classPrivateFieldGet(this, _FontConnectorController_blobAPI, "f")).fontConnectorPreview(connectorId, fontFamilyId, previewFormat, JSON.stringify(context)).then((result) => {
            var _a;
            return (_a = result) !== null && _a !== undefined ? _a : result;
          });
        }), this.getConfigurationOptions = (connectorId) => FontConnectorController_awaiter(this, undefined, undefined, function* () {
          return (yield FontConnectorController_classPrivateFieldGet(this, _FontConnectorController_editorAPI, "f")).fontConnectorGetConfigurationOptions(connectorId).then((result) => getEditorResponseData(result));
        }), this.getCapabilities = (connectorId) => FontConnectorController_awaiter(this, undefined, undefined, function* () {
          return (yield FontConnectorController_classPrivateFieldGet(this, _FontConnectorController_editorAPI, "f")).fontConnectorGetCapabilities(connectorId).then((result) => getEditorResponseData(result));
        }), this.parseDeprecatedFontType = (deprecatedType) => deprecatedType === DeprecatedMediaType.file ? MediaType.file : deprecatedType === DeprecatedMediaType.collection ? MediaType.collection : undefined, FontConnectorController_classPrivateFieldSet(this, _FontConnectorController_editorAPI, editorAPI, "f"), FontConnectorController_classPrivateFieldSet(this, _FontConnectorController_blobAPI, editorAPI, "f");
      }
    }
    _FontConnectorController_editorAPI = new WeakMap, _FontConnectorController_blobAPI = new WeakMap;
    var _FontController_editorAPI, FontController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, FontController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, FontController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class FontController {
      constructor(editorAPI) {
        _FontController_editorAPI.set(this, undefined), this.addFontFamily = (connectorId, fontFamily) => FontController_awaiter(this, undefined, undefined, function* () {
          return (yield FontController_classPrivateFieldGet(this, _FontController_editorAPI, "f")).addFontFamily(connectorId, JSON.stringify(fontFamily)).then((result) => getEditorResponseData(result));
        }), this.removeFontFamily = (id2) => FontController_awaiter(this, undefined, undefined, function* () {
          return (yield FontController_classPrivateFieldGet(this, _FontController_editorAPI, "f")).removeFontFamily(id2).then((result) => getEditorResponseData(result));
        }), this.addFontStyle = (connectorId, fontStyle) => FontController_awaiter(this, undefined, undefined, function* () {
          return (yield FontController_classPrivateFieldGet(this, _FontController_editorAPI, "f")).addFontStyle(connectorId, JSON.stringify(fontStyle)).then((result) => getEditorResponseData(result));
        }), this.removeFontStyle = (id2) => FontController_awaiter(this, undefined, undefined, function* () {
          return (yield FontController_classPrivateFieldGet(this, _FontController_editorAPI, "f")).removeFontStyle(id2).then((result) => getEditorResponseData(result));
        }), this.getFontFamilies = () => FontController_awaiter(this, undefined, undefined, function* () {
          return (yield FontController_classPrivateFieldGet(this, _FontController_editorAPI, "f")).getFontFamilies().then((result) => getEditorResponseData(result));
        }), this.getFontStyles = (id2) => FontController_awaiter(this, undefined, undefined, function* () {
          return (yield FontController_classPrivateFieldGet(this, _FontController_editorAPI, "f")).getFontStyles(id2).then((result) => getEditorResponseData(result));
        }), this.getFontFamilyById = (id2) => FontController_awaiter(this, undefined, undefined, function* () {
          return (yield FontController_classPrivateFieldGet(this, _FontController_editorAPI, "f")).getFontFamilyById(id2).then((result) => getEditorResponseData(result));
        }), this.getFontStyleById = (id2) => FontController_awaiter(this, undefined, undefined, function* () {
          return (yield FontController_classPrivateFieldGet(this, _FontController_editorAPI, "f")).getFontStyleById(id2).then((result) => getEditorResponseData(result));
        }), this.getDefaultFontStyle = () => FontController_awaiter(this, undefined, undefined, function* () {
          return (yield FontController_classPrivateFieldGet(this, _FontController_editorAPI, "f")).getDefaultFontStyle().then((result) => getEditorResponseData(result));
        }), this.getDefaultFontFamily = () => FontController_awaiter(this, undefined, undefined, function* () {
          return (yield FontController_classPrivateFieldGet(this, _FontController_editorAPI, "f")).getDefaultFontFamily().then((result) => getEditorResponseData(result));
        }), this.isFontFamilyUsed = (id2) => FontController_awaiter(this, undefined, undefined, function* () {
          return (yield FontController_classPrivateFieldGet(this, _FontController_editorAPI, "f")).isFontFamilyUsed(id2).then((result) => getEditorResponseData(result));
        }), this.isFontStyleUsed = (id2) => FontController_awaiter(this, undefined, undefined, function* () {
          return (yield FontController_classPrivateFieldGet(this, _FontController_editorAPI, "f")).isFontStyleUsed(id2).then((result) => getEditorResponseData(result));
        }), this.moveFontFamilies = (order, ids) => FontController_awaiter(this, undefined, undefined, function* () {
          return (yield FontController_classPrivateFieldGet(this, _FontController_editorAPI, "f")).moveFontFamilies(order, ids).then((result) => getEditorResponseData(result));
        }), FontController_classPrivateFieldSet(this, _FontController_editorAPI, editorAPI, "f");
      }
    }
    _FontController_editorAPI = new WeakMap;
    var _ShapeController_editorAPI, ShapeController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, ShapeController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, ShapeController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class ShapeController {
      constructor(editorAPI) {
        _ShapeController_editorAPI.set(this, undefined), this.setShapeProperties = (id2, properties) => ShapeController_awaiter(this, undefined, undefined, function* () {
          return (yield ShapeController_classPrivateFieldGet(this, _ShapeController_editorAPI, "f")).setShapeProperties(id2, JSON.stringify(properties)).then((result) => getEditorResponseData(result));
        }), this.setEnableFill = (id2, enableFill) => ShapeController_awaiter(this, undefined, undefined, function* () {
          const properties = { enableFill };
          return this.setShapeProperties(id2, properties);
        }), this.setFillColor = (id2, fillColor) => ShapeController_awaiter(this, undefined, undefined, function* () {
          const properties = { fillColor };
          return this.setShapeProperties(id2, properties);
        }), this.setEnableStroke = (id2, enableStroke) => ShapeController_awaiter(this, undefined, undefined, function* () {
          const properties = { enableStroke };
          return this.setShapeProperties(id2, properties);
        }), this.setStrokeColor = (id2, strokeColor) => ShapeController_awaiter(this, undefined, undefined, function* () {
          const properties = { strokeColor };
          return this.setShapeProperties(id2, properties);
        }), this.setStrokeWeight = (id2, strokeWeight) => ShapeController_awaiter(this, undefined, undefined, function* () {
          const properties = { strokeWeight };
          return this.setShapeProperties(id2, properties);
        }), this.setFlagAllCornersSame = (id2, allCornersSame) => ShapeController_awaiter(this, undefined, undefined, function* () {
          const properties = { allCornersSame };
          return this.setShapeProperties(id2, properties);
        }), this.setShapeCorners = (id2, radius) => ShapeController_awaiter(this, undefined, undefined, function* () {
          return (yield ShapeController_classPrivateFieldGet(this, _ShapeController_editorAPI, "f")).setShapeCorners(id2, JSON.stringify(radius)).then((result) => getEditorResponseData(result));
        }), this.setRadiusAll = (id2, radius) => ShapeController_awaiter(this, undefined, undefined, function* () {
          const cornerRadius = { radiusAll: radius };
          return this.setShapeCorners(id2, cornerRadius);
        }), this.setRadiusTopLeft = (id2, radius) => ShapeController_awaiter(this, undefined, undefined, function* () {
          const cornerRadius = { topLeft: radius };
          return this.setShapeCorners(id2, cornerRadius);
        }), this.setRadiusBottomLeft = (id2, radius) => ShapeController_awaiter(this, undefined, undefined, function* () {
          const cornerRadius = { bottomLeft: radius };
          return this.setShapeCorners(id2, cornerRadius);
        }), this.setRadiusTopRight = (id2, radius) => ShapeController_awaiter(this, undefined, undefined, function* () {
          const cornerRadius = { topRight: radius };
          return this.setShapeCorners(id2, cornerRadius);
        }), this.setRadiusBottomRight = (id2, radius) => ShapeController_awaiter(this, undefined, undefined, function* () {
          const cornerRadius = { bottomRight: radius };
          return this.setShapeCorners(id2, cornerRadius);
        }), ShapeController_classPrivateFieldSet(this, _ShapeController_editorAPI, editorAPI, "f");
      }
    }
    _ShapeController_editorAPI = new WeakMap;
    var _FrameController_editorAPI, FrameController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, FrameController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, FrameController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class FrameController {
      constructor(editorAPI) {
        _FrameController_editorAPI.set(this, undefined), this.getAll = () => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).getFrames().then((result) => getEditorResponseData(result));
        }), this.getSelected = () => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).getSelectedFrames().then((result) => getEditorResponseData(result));
        }), this.getAllByPageId = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).getFramesByPageId(id2).then((result) => getEditorResponseData(result));
        }), this.getByName = (name) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).getFrameByName(name).then((result) => getEditorResponseData(result));
        }), this.getById = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).getFrameById(id2).then((result) => getEditorResponseData(result));
        }), this.getPropertiesOnSelectedLayout = () => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).getFramePropertiesOnSelectedLayout().then((result) => getEditorResponseData(result));
        }), this.getLayoutProperties = (id2, layoutId) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).getFramePropertiesByFrameId(id2, layoutId).then((result) => getEditorResponseData(result));
        }), this.getAllLayoutProperties = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).getFramesProperties(id2).then((result) => getEditorResponseData(result));
        }), this.resetTransformation = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).resetFrameTransformation(id2).then((result) => getEditorResponseData(result));
        }), this.resetSize = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).resetFrameTransformation(id2).then((result) => getEditorResponseData(result));
        }), this.select = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).selectFrames([id2]).then((result) => getEditorResponseData(result));
        }), this.selectMultiple = (ids) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).selectFrames(ids).then((result) => getEditorResponseData(result));
        }), this.deselectAll = () => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).deselectFrames().then((result) => getEditorResponseData(result));
        }), this.reorderFrames = (order, ids) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).reorderFrames(order, ids).then((result) => getEditorResponseData(result));
        }), this.setZIndex = (id2, method) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setFrameZIndex(id2, method).then((result) => getEditorResponseData(result));
        }), this.setHeight = (id2, height) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setFrameHeight(id2, height).then((result) => getEditorResponseData(result));
        }), this.setRotation = (id2, rotation) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setFrameRotation(id2, rotation).then((result) => getEditorResponseData(result));
        }), this.setWidth = (id2, width) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setFrameWidth(id2, width).then((result) => getEditorResponseData(result));
        }), this.setX = (id2, XValue) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setFrameX(id2, XValue).then((result) => getEditorResponseData(result));
        }), this.setY = (id2, YValue) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setFrameY(id2, YValue).then((result) => getEditorResponseData(result));
        }), this.rename = (id2, name) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).renameFrame(id2, name).then((result) => getEditorResponseData(result));
        }), this.reset = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).resetFrame(id2).then((result) => getEditorResponseData(result));
        }), this.resetX = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).resetFrameTransformation(id2).then((result) => getEditorResponseData(result));
        }), this.resetY = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).resetFrameTransformation(id2).then((result) => getEditorResponseData(result));
        }), this.resetRotation = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).resetFrameTransformation(id2).then((result) => getEditorResponseData(result));
        }), this.resetWidth = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).resetFrameTransformation(id2).then((result) => getEditorResponseData(result));
        }), this.resetHeight = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).resetFrameTransformation(id2).then((result) => getEditorResponseData(result));
        }), this.resetImageFrameFitMode = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).resetImageFrameFitMode(id2).then((result) => getEditorResponseData(result));
        }), this.setVisibility = (id2, value) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setFrameIsVisible(id2, value).then((result) => getEditorResponseData(result));
        }), this.setIsVisible = (id2, value) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setFrameIsVisible(id2, value).then((result) => getEditorResponseData(result));
        }), this.remove = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).removeFrames([id2]).then((result) => getEditorResponseData(result));
        }), this.removeFrames = (ids) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).removeFrames(ids).then((result) => getEditorResponseData(result));
        }), this.create = (type, x, y, width, height) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).addFrame(type, x, y, width, height).then((result) => getEditorResponseData(result));
        }), this.createShapeFrame = (type, x, y, width, height) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).addFrame(type, x, y, width, height).then((result) => getEditorResponseData(result));
        }), this.createBarcodeFrame = (type, position) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).addBarcodeFrame(type, position == null ? undefined : position.x, position == null ? undefined : position.y).then((result) => getEditorResponseData(result));
        }), this.duplicateFrames = (ids) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).duplicateFrames(ids).then((result) => getEditorResponseData(result));
        }), this.updateImageSource = (imageFrameId, src2) => FrameController_awaiter(this, undefined, undefined, function* () {
          const res = yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f"), srcJson = src2 !== null ? JSON.stringify(src2) : null;
          return res.setImageSource(imageFrameId, srcJson).then((result) => getEditorResponseData(result));
        }), this.removeImageSource = (imageFrameId) => FrameController_awaiter(this, undefined, undefined, function* () {
          return this.updateImageSource(imageFrameId, null);
        }), this.setImageFromConnector = (imageFrameId, connectorId, assetId) => FrameController_awaiter(this, undefined, undefined, function* () {
          const src2 = { id: connectorId, assetId, type: ImageSourceTypeEnum.connector };
          return this.updateImageSource(imageFrameId, src2);
        }), this.setImageFromUrl = (imageFrameId, url) => FrameController_awaiter(this, undefined, undefined, function* () {
          const source = { url, type: ImageSourceTypeEnum.url };
          return this.updateImageSource(imageFrameId, source);
        }), this.setImageFrameFitMode = (imageFrameId, fitMode) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setImageFrameFitMode(imageFrameId, fitMode).then((result) => getEditorResponseData(result));
        }), this.setImageFrameFitModePosition = (imageFrameId, position) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setImageFrameFitModePosition(imageFrameId, position).then((result) => getEditorResponseData(result));
        }), this.setFrameConstrainProportions = (_id, _constrainProportions) => FrameController_awaiter(this, undefined, undefined, function* () {
          console.error("setFrameConstrainProportions is not supported anymore");
          return getEditorResponseData({ success: false, status: 0, error: "setFrameConstrainProportions is not supported anymore", parsedData: null });
        }), this.setVerticalAlign = (id2, verticalAlign) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setVerticalAlignment(id2, verticalAlign).then((result) => getEditorResponseData(result));
        }), this.setMinCopyfitting = (id2, value) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setMinCopyfitting(id2, value).then((result) => getEditorResponseData(result));
        }), this.setMaxCopyfitting = (id2, value) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setMaxCopyfitting(id2, value).then((result) => getEditorResponseData(result));
        }), this.setEnableCopyfitting = (id2, value) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setEnableCopyfitting(id2, value).then((result) => getEditorResponseData(result));
        }), this.resetMinCopyfitting = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).resetMinCopyfitting(id2).then((result) => getEditorResponseData(result));
        }), this.resetMaxCopyfitting = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).resetMaxCopyfitting(id2).then((result) => getEditorResponseData(result));
        }), this.resetEnableCopyfitting = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).resetEnableCopyfitting(id2).then((result) => getEditorResponseData(result));
        }), this.setShapeFrameEnableFill = (shapeFrameId, enableFill) => FrameController_awaiter(this, undefined, undefined, function* () {
          return this.shapeController.setEnableFill(shapeFrameId, enableFill);
        }), this.setShapeFrameFillColor = (shapeFrameId, fillColor) => FrameController_awaiter(this, undefined, undefined, function* () {
          return this.shapeController.setFillColor(shapeFrameId, fillColor);
        }), this.setShapeFrameEnableStroke = (shapeFrameId, enableStroke) => FrameController_awaiter(this, undefined, undefined, function* () {
          return this.shapeController.setEnableStroke(shapeFrameId, enableStroke);
        }), this.setShapeFrameStrokeColor = (shapeFrameId, strokeColor) => FrameController_awaiter(this, undefined, undefined, function* () {
          return this.shapeController.setStrokeColor(shapeFrameId, strokeColor);
        }), this.setShapeFrameStrokeWeight = (shapeFrameId, strokeWeight) => FrameController_awaiter(this, undefined, undefined, function* () {
          return this.shapeController.setStrokeWeight(shapeFrameId, strokeWeight);
        }), this.setBlendMode = (id2, blendMode) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setFrameBlendMode(id2, blendMode).then((result) => getEditorResponseData(result));
        }), this.enterCropMode = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).enterCropMode(id2).then((result) => getEditorResponseData(result));
        }), this.applyCropMode = () => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).applyCropMode().then((result) => getEditorResponseData(result));
        }), this.exitCropMode = () => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).cancelCropMode().then((result) => getEditorResponseData(result));
        }), this.enterSubjectMode = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).enterSubjectMode(id2).then((result) => getEditorResponseData(result));
        }), this.applySubjectMode = () => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).applySubjectMode().then((result) => getEditorResponseData(result));
        }), this.exitSubjectMode = () => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).cancelSubjectMode().then((result) => getEditorResponseData(result));
        }), this.resetCropMode = (_id) => FrameController_awaiter(this, undefined, undefined, function* () {
          console.error("resetCropMode is not supported anymore");
          return getEditorResponseData({ success: false, status: 0, error: "resetCropMode is not supported anymore", parsedData: null });
        }), this.setEnableAutoGrow = (id2, value) => FrameController_awaiter(this, undefined, undefined, function* () {
          const update = { enabled: { value } };
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).updateAutoGrowSettings(id2, JSON.stringify(update)).then((result) => getEditorResponseData(result));
        }), this.setAutoGrowMinWidth = (id2, value) => FrameController_awaiter(this, undefined, undefined, function* () {
          const update = { minWidth: { value } };
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).updateAutoGrowSettings(id2, JSON.stringify(update)).then((result) => getEditorResponseData(result));
        }), this.setAutoGrowMaxWidth = (id2, value) => FrameController_awaiter(this, undefined, undefined, function* () {
          const update = { maxWidth: { value } };
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).updateAutoGrowSettings(id2, JSON.stringify(update)).then((result) => getEditorResponseData(result));
        }), this.setAutoGrowMinHeight = (id2, value) => FrameController_awaiter(this, undefined, undefined, function* () {
          const update = { minHeight: { value } };
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).updateAutoGrowSettings(id2, JSON.stringify(update)).then((result) => getEditorResponseData(result));
        }), this.setAutoGrowMaxHeight = (id2, value) => FrameController_awaiter(this, undefined, undefined, function* () {
          const update = { maxHeight: { value } };
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).updateAutoGrowSettings(id2, JSON.stringify(update)).then((result) => getEditorResponseData(result));
        }), this.setAutoGrowDirections = (id2, value) => FrameController_awaiter(this, undefined, undefined, function* () {
          const update = { directions: { value } };
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).updateAutoGrowSettings(id2, JSON.stringify(update)).then((result) => getEditorResponseData(result));
        }), this.resetAutoGrowSettingsEnabled = (_id) => FrameController_awaiter(this, undefined, undefined, function* () {
          console.error("resetAutoGrowSettingsEnabled is not supported anymore");
          return getEditorResponseData({ success: false, status: 0, error: "resetAutoGrowSettingsEnabled is not supported anymore", parsedData: null });
        }), this.resetAutoGrowMinWidth = (_id) => FrameController_awaiter(this, undefined, undefined, function* () {
          console.error("resetAutoGrowMinWidth is not supported anymore");
          return getEditorResponseData({ success: false, status: 0, error: "resetAutoGrowMinWidth is not supported anymore", parsedData: null });
        }), this.resetAutoGrowMaxWidth = (_id) => FrameController_awaiter(this, undefined, undefined, function* () {
          console.error("resetAutoGrowMaxWidth is not supported anymore");
          return getEditorResponseData({ success: false, status: 0, error: "resetAutoGrowMaxWidth is not supported anymore", parsedData: null });
        }), this.resetAutoGrowMinHeight = (_id) => FrameController_awaiter(this, undefined, undefined, function* () {
          console.error("resetAutoGrowMinHeight is not supported anymore");
          return getEditorResponseData({ success: false, status: 0, error: "resetAutoGrowMinHeight is not supported anymore", parsedData: null });
        }), this.resetAutoGrowMaxHeight = (_id) => FrameController_awaiter(this, undefined, undefined, function* () {
          console.error("resetAutoGrowMaxHeight is not supported anymore");
          return getEditorResponseData({ success: false, status: 0, error: "resetAutoGrowMaxHeight is not supported anymore", parsedData: null });
        }), this.resetAutoGrowDirections = (_id) => FrameController_awaiter(this, undefined, undefined, function* () {
          console.error("resetAutoGrowDirections is not supported anymore");
          return getEditorResponseData({ success: false, status: 0, error: "resetAutoGrowDirections is not supported anymore", parsedData: null });
        }), this.resetAutoGrow = (_id) => FrameController_awaiter(this, undefined, undefined, function* () {
          console.error("resetAutoGrow is not supported anymore");
          return getEditorResponseData({ success: false, status: 0, error: "resetAutoGrow is not supported anymore", parsedData: null });
        }), this.setAnchor = (id2, horizontal, anchorType, anchorTarget, endAnchorTarget) => FrameController_awaiter(this, undefined, undefined, function* () {
          const properties = { horizontal, type: anchorType, target: anchorTarget, endTarget: endAnchorTarget };
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).setAnchorProperties(id2, JSON.stringify(properties)).then((result) => getEditorResponseData(result));
        }), this.setVerticalAnchor = (id2, anchorType, anchorTarget, endAnchorTarget) => FrameController_awaiter(this, undefined, undefined, function* () {
          return this.setAnchor(id2, false, anchorType, anchorTarget, endAnchorTarget);
        }), this.setHorizontalAnchor = (id2, anchorType, anchorTarget, endAnchorTarget) => FrameController_awaiter(this, undefined, undefined, function* () {
          return this.setAnchor(id2, true, anchorType, anchorTarget, endAnchorTarget);
        }), this.resetAnchoring = (id2) => FrameController_awaiter(this, undefined, undefined, function* () {
          return (yield FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f")).resetFrameTransformation(id2).then((result) => getEditorResponseData(result));
        }), FrameController_classPrivateFieldSet(this, _FrameController_editorAPI, editorAPI, "f"), this.shapeController = new ShapeController(FrameController_classPrivateFieldGet(this, _FrameController_editorAPI, "f"));
      }
    }
    _FrameController_editorAPI = new WeakMap;

    class InfoController {
      constructor() {
        this.currentEngineVersion = editor_engine_namespaceObject_V, this.currentSDKVersion = package_namespaceObject_i8;
      }
    }
    var _LayoutController_editorAPI, _LayoutController_blobAPI, MediaDownloadType, MediaDownloadIntent, LayoutController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, LayoutController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, LayoutController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class LayoutController {
      constructor(editorAPI) {
        _LayoutController_editorAPI.set(this, undefined), _LayoutController_blobAPI.set(this, undefined), this.getAll = () => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).getLayouts().then((result) => getEditorResponseData(result));
        }), this.getById = (id2) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).getLayoutById(id2).then((result) => getEditorResponseData(result));
        }), this.getByName = (name) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).getLayoutByName(name).then((result) => getEditorResponseData(result));
        }), this.getSelected = () => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).getSelectedLayout().then((result) => getEditorResponseData(result));
        }), this.remove = (id2) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).removeLayout(id2).then((result) => getEditorResponseData(result));
        }), this.create = (parentId, presets) => LayoutController_awaiter(this, undefined, undefined, function* () {
          const res = yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f");
          return (presets == null ? undefined : presets.length) ? res.addLayouts(parentId, JSON.stringify(presets)).then((result) => getEditorResponseData(result)) : res.addLayout(parentId).then((result) => getEditorResponseData(result));
        }), this.rename = (id2, name) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).renameLayout(id2, name).then((result) => getEditorResponseData(result));
        }), this.select = (id2) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).selectLayout(id2).then((result) => getEditorResponseData(result));
        }), this.duplicate = (id2) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).duplicateLayout(id2).then((result) => getEditorResponseData(result));
        }), this.reset = (id2) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).resetLayout(id2).then((result) => getEditorResponseData(result));
        }), this.setHeight = (id2, height) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).setLayoutHeight(id2, height).then((result) => getEditorResponseData(result));
        }), this.setWidth = (id2, width) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).setLayoutWidth(id2, width).then((result) => getEditorResponseData(result));
        }), this.setUnit = (id2, unit) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).setLayoutUnit(id2, unit).then((result) => getEditorResponseData(result));
        }), this.resetHeight = (id2) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).resetLayoutHeight(id2).then((result) => getEditorResponseData(result));
        }), this.resetWidth = (id2) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).resetLayoutWidth(id2).then((result) => getEditorResponseData(result));
        }), this.resetUnit = (id2) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).resetLayoutUnit(id2).then((result) => getEditorResponseData(result));
        }), this.getSelectedSnapshot = () => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_blobAPI, "f")).getPageSnapshot().then((result) => {
            var _a;
            return (_a = result) !== null && _a !== undefined ? _a : result;
          });
        }), this.setIntent = (id2, intent) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).setLayoutIntent(id2, intent).then((result) => getEditorResponseData(result));
        }), this.resetIntent = (id2) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).resetLayoutIntent(id2).then((result) => getEditorResponseData(result));
        }), this.setFillColor = (id2, color) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).setLayoutFillColor(id2, JSON.stringify(color)).then((result) => getEditorResponseData(result));
        }), this.setFillColorEnabled = (id2, enabled) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).setLayoutFillColorEnabled(id2, enabled).then((result) => getEditorResponseData(result));
        }), this.resetFillColor = (id2) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).resetLayoutFillColor(id2).then((result) => getEditorResponseData(result));
        }), this.setBleedValue = (id2, value, position) => LayoutController_awaiter(this, undefined, undefined, function* () {
          const update = position ? { left: position === PositionEnum.left ? value : undefined, top: position === PositionEnum.top ? value : undefined, right: position === PositionEnum.right ? value : undefined, bottom: position === PositionEnum.bottom ? value : undefined } : { left: value, top: value, right: value, bottom: value };
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).updateLayoutBleed(id2, JSON.stringify(update)).then((result) => getEditorResponseData(result));
        }), this.setAreBleedValuesCombined = (id2, value) => LayoutController_awaiter(this, undefined, undefined, function* () {
          const update = { areBleedValuesCombined: value };
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).updateLayoutBleed(id2, JSON.stringify(update)).then((result) => getEditorResponseData(result));
        }), this.resetBleedValues = (id2) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).updateLayoutBleed(id2, null).then((result) => getEditorResponseData(result));
        }), this.setPrivateData = (id2, privateData) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).setLayoutPrivateData(id2, JSON.stringify(privateData)).then((result) => getEditorResponseData(result));
        }), this.getPrivateData = (id2) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).getLayoutPrivateData(id2).then((result) => getEditorResponseData(result));
        }), this.setDisplayName = (id2, displayName) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).setLayoutDisplayName(id2, displayName).then((result) => getEditorResponseData(result));
        }), this.getDisplayName = (id2) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).getLayoutDisplayName(id2).then((result) => getEditorResponseData(result));
        }), this.resetDisplayName = (id2) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).setLayoutDisplayName(id2, null).then((result) => getEditorResponseData(result));
        }), this.setAvailableForUser = (id2, isAvailable) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).setLayoutAvailableForUser(id2, isAvailable).then((result) => getEditorResponseData(result));
        }), this.setSelectedByUser = (id2, isSelected) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).setLayoutSelectedByUser(id2, isSelected).then((result) => getEditorResponseData(result));
        }), this.setResizableByUser = (id2, resizableLayoutProperties) => LayoutController_awaiter(this, undefined, undefined, function* () {
          return (yield LayoutController_classPrivateFieldGet(this, _LayoutController_editorAPI, "f")).setLayoutResizableByUser(id2, JSON.stringify(resizableLayoutProperties)).then((result) => getEditorResponseData(result));
        }), LayoutController_classPrivateFieldSet(this, _LayoutController_editorAPI, editorAPI, "f"), LayoutController_classPrivateFieldSet(this, _LayoutController_blobAPI, editorAPI, "f");
      }
    }
    _LayoutController_editorAPI = new WeakMap, _LayoutController_blobAPI = new WeakMap, function(MediaDownloadType2) {
      MediaDownloadType2.thumbnail = "thumbnail", MediaDownloadType2.mediumres = "mediumres", MediaDownloadType2.highres = "highres", MediaDownloadType2.original = "original";
    }(MediaDownloadType || (MediaDownloadType = {})), function(MediaDownloadIntent2) {
      MediaDownloadIntent2.web = "web";
    }(MediaDownloadIntent || (MediaDownloadIntent = {}));
    var _MediaConnectorController_editorAPI, _MediaConnectorController_blobAPI, MediaConnectorController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, MediaConnectorController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, MediaConnectorController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class MediaConnectorController {
      constructor(editorAPI) {
        _MediaConnectorController_editorAPI.set(this, undefined), _MediaConnectorController_blobAPI.set(this, undefined), this.query = (id_1, queryOptions_1, ...args_1) => MediaConnectorController_awaiter(this, [id_1, queryOptions_1, ...args_1], undefined, function* (id2, queryOptions, context = {}) {
          return (yield MediaConnectorController_classPrivateFieldGet(this, _MediaConnectorController_editorAPI, "f")).mediaConnectorQuery(id2, JSON.stringify(queryOptions), JSON.stringify(context)).then((result) => getEditorResponseData(result));
        }), this.detail = (id_1, mediaId_1, ...args_1) => MediaConnectorController_awaiter(this, [id_1, mediaId_1, ...args_1], undefined, function* (id2, mediaId, context = {}) {
          return (yield MediaConnectorController_classPrivateFieldGet(this, _MediaConnectorController_editorAPI, "f")).mediaConnectorDetail(id2, mediaId, JSON.stringify(context)).then((result) => getEditorResponseData(result));
        }), this.download = (id_1, mediaId_1, downloadType_1, ...args_1) => MediaConnectorController_awaiter(this, [id_1, mediaId_1, downloadType_1, ...args_1], undefined, function* (id2, mediaId, downloadType, context = {}) {
          const compatibleDownloadType = this.parseDeprecatedMediaDownloadType(downloadType);
          return (yield MediaConnectorController_classPrivateFieldGet(this, _MediaConnectorController_blobAPI, "f")).mediaConnectorDownload(id2, mediaId, compatibleDownloadType, MediaDownloadIntent.web, JSON.stringify(context)).then((result) => {
            var _a;
            return (_a = result) !== null && _a !== undefined ? _a : result;
          });
        }), this.getConfigurationOptions = (id2) => MediaConnectorController_awaiter(this, undefined, undefined, function* () {
          return (yield MediaConnectorController_classPrivateFieldGet(this, _MediaConnectorController_editorAPI, "f")).mediaConnectorGetConfigurationOptions(id2).then((result) => getEditorResponseData(result));
        }), this.getCapabilities = (id2) => MediaConnectorController_awaiter(this, undefined, undefined, function* () {
          return (yield MediaConnectorController_classPrivateFieldGet(this, _MediaConnectorController_editorAPI, "f")).mediaConnectorGetCapabilities(id2).then((result) => getEditorResponseData(result));
        }), this.parseDeprecatedMediaType = (deprecatedType) => deprecatedType === DeprecatedMediaType.file ? MediaType.file : deprecatedType === DeprecatedMediaType.collection ? MediaType.collection : undefined, MediaConnectorController_classPrivateFieldSet(this, _MediaConnectorController_editorAPI, editorAPI, "f"), MediaConnectorController_classPrivateFieldSet(this, _MediaConnectorController_blobAPI, editorAPI, "f");
      }
      parseDeprecatedMediaDownloadType(deprecatedMediaDownloadType) {
        switch (deprecatedMediaDownloadType) {
          case DeprecatedMediaConnectorDownloadType.HighResolutionWeb:
            return MediaDownloadType.highres;
          case DeprecatedMediaConnectorDownloadType.LowResolutionWeb:
            return MediaDownloadType.thumbnail;
          default:
            return deprecatedMediaDownloadType;
        }
      }
    }
    _MediaConnectorController_editorAPI = new WeakMap, _MediaConnectorController_blobAPI = new WeakMap;
    var _PageController_editorAPI, _PageController_blobAPI, PageController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, PageController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, PageController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class PageController {
      constructor(editorAPI) {
        _PageController_editorAPI.set(this, undefined), _PageController_blobAPI.set(this, undefined), this.add = () => PageController_awaiter(this, undefined, undefined, function* () {
          return (yield PageController_classPrivateFieldGet(this, _PageController_editorAPI, "f")).addPage().then((result) => getEditorResponseData(result));
        }), this.remove = (pageId) => PageController_awaiter(this, undefined, undefined, function* () {
          return (yield PageController_classPrivateFieldGet(this, _PageController_editorAPI, "f")).removePage(pageId).then((result) => getEditorResponseData(result));
        }), this.select = (pageId) => PageController_awaiter(this, undefined, undefined, function* () {
          return (yield PageController_classPrivateFieldGet(this, _PageController_editorAPI, "f")).selectPage(pageId).then((result) => getEditorResponseData(result));
        }), this.setVisibility = (pageId, isVisible) => PageController_awaiter(this, undefined, undefined, function* () {
          return (yield PageController_classPrivateFieldGet(this, _PageController_editorAPI, "f")).setPageIsVisible(pageId, isVisible).then((result) => getEditorResponseData(result));
        }), this.duplicate = (pageId) => PageController_awaiter(this, undefined, undefined, function* () {
          return (yield PageController_classPrivateFieldGet(this, _PageController_editorAPI, "f")).duplicatePage(pageId).then((result) => getEditorResponseData(result));
        }), this.getAll = () => PageController_awaiter(this, undefined, undefined, function* () {
          return (yield PageController_classPrivateFieldGet(this, _PageController_editorAPI, "f")).getPages().then((result) => getEditorResponseData(result));
        }), this.getById = (pageId) => PageController_awaiter(this, undefined, undefined, function* () {
          return (yield PageController_classPrivateFieldGet(this, _PageController_editorAPI, "f")).getPageById(pageId).then((result) => getEditorResponseData(result));
        }), this.getSnapshot = (pageId, settings) => PageController_awaiter(this, undefined, undefined, function* () {
          return (yield PageController_classPrivateFieldGet(this, _PageController_blobAPI, "f")).getPageSnapshotWithSettings(pageId, settings == null ? null : JSON.stringify(settings)).then((result) => {
            var _a;
            return (_a = result) !== null && _a !== undefined ? _a : result;
          });
        }), this.setWidth = (_pageId, width) => PageController_awaiter(this, undefined, undefined, function* () {
          _pageId !== undefined && console.warn("pageId has no effect since all pages are being updated simultaneously.");
          return (yield PageController_classPrivateFieldGet(this, _PageController_editorAPI, "f")).setPageWidth(width).then((result) => getEditorResponseData(result));
        }), this.setHeight = (_pageId, height) => PageController_awaiter(this, undefined, undefined, function* () {
          _pageId !== undefined && console.warn("pageId has no effect since all pages are being updated simultaneously.");
          return (yield PageController_classPrivateFieldGet(this, _PageController_editorAPI, "f")).setPageHeight(height).then((result) => getEditorResponseData(result));
        }), this.move = (order, ids) => PageController_awaiter(this, undefined, undefined, function* () {
          return (yield PageController_classPrivateFieldGet(this, _PageController_editorAPI, "f")).reorderPages(order, ids).then((result) => getEditorResponseData(result));
        }), PageController_classPrivateFieldSet(this, _PageController_editorAPI, editorAPI, "f"), PageController_classPrivateFieldSet(this, _PageController_blobAPI, editorAPI, "f");
      }
    }
    _PageController_editorAPI = new WeakMap, _PageController_blobAPI = new WeakMap;
    var _ParagraphStyleController_editorAPI, LogLevel, LogCategory, CallbackErrorBehavior, ConnectorConfigValueType, AsyncErrorType, VariableType, Day, Locale, VariableVisibilityType, VariableVisibilityTargetType, VariableVisibilityOperator, ParagraphStyleController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, ParagraphStyleController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, ParagraphStyleController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class ParagraphStyleController {
      constructor(editorAPI) {
        _ParagraphStyleController_editorAPI.set(this, undefined), this.getAll = () => ParagraphStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield ParagraphStyleController_classPrivateFieldGet(this, _ParagraphStyleController_editorAPI, "f")).getParagraphStyles().then((result) => getEditorResponseData(result));
        }), this.getById = (id2) => ParagraphStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield ParagraphStyleController_classPrivateFieldGet(this, _ParagraphStyleController_editorAPI, "f")).getParagraphStyleById(id2).then((result) => getEditorResponseData(result));
        }), this.create = () => ParagraphStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield ParagraphStyleController_classPrivateFieldGet(this, _ParagraphStyleController_editorAPI, "f")).createParagraphStyle().then((result) => getEditorResponseData(result));
        }), this.duplicate = (id2) => ParagraphStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield ParagraphStyleController_classPrivateFieldGet(this, _ParagraphStyleController_editorAPI, "f")).duplicateParagraphStyle(id2).then((result) => getEditorResponseData(result));
        }), this.update = (id2, properties) => ParagraphStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield ParagraphStyleController_classPrivateFieldGet(this, _ParagraphStyleController_editorAPI, "f")).updateParagraphStyle(id2, JSON.stringify(properties)).then((result) => getEditorResponseData(result));
        }), this.rename = (id2, name) => ParagraphStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield ParagraphStyleController_classPrivateFieldGet(this, _ParagraphStyleController_editorAPI, "f")).renameParagraphStyle(id2, name).then((result) => getEditorResponseData(result));
        }), this.remove = (id2) => ParagraphStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield ParagraphStyleController_classPrivateFieldGet(this, _ParagraphStyleController_editorAPI, "f")).removeParagraphStyle(id2).then((result) => getEditorResponseData(result));
        }), this.move = (order, ids) => ParagraphStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield ParagraphStyleController_classPrivateFieldGet(this, _ParagraphStyleController_editorAPI, "f")).moveParagraphStyles(order, ids).then((result) => getEditorResponseData(result));
        }), ParagraphStyleController_classPrivateFieldSet(this, _ParagraphStyleController_editorAPI, editorAPI, "f");
      }
    }
    _ParagraphStyleController_editorAPI = new WeakMap, function(LogLevel2) {
      LogLevel2.info = "info", LogLevel2.warn = "warn", LogLevel2.error = "error";
    }(LogLevel || (LogLevel = {})), function(LogCategory2) {
      LogCategory2.general = "general", LogCategory2.connector = "connector", LogCategory2.event = "event", LogCategory2.engine = "engine";
    }(LogCategory || (LogCategory = {})), function(CallbackErrorBehavior2) {
      CallbackErrorBehavior2.throw = "throw", CallbackErrorBehavior2.log = "log";
    }(CallbackErrorBehavior || (CallbackErrorBehavior = {})), function(ConnectorConfigValueType2) {
      ConnectorConfigValueType2.text = "text", ConnectorConfigValueType2.boolean = "boolean";
    }(ConnectorConfigValueType || (ConnectorConfigValueType = {}));

    class ActionAsyncError {
      constructor(message, id2, event, eventChain) {
        this.type = AsyncErrorType.action, this.message = message, this.id = id2, this.event = event, this.eventChain = eventChain;
      }
    }

    class DataRowAsyncError {
      constructor(count, message, exceptions) {
        this.type = AsyncErrorType.dataRow, this.count = count, this.message = message, this.exceptions = exceptions;
      }
    }
    (function(AsyncErrorType2) {
      AsyncErrorType2.action = "action", AsyncErrorType2.dataRow = "dataRow";
    })(AsyncErrorType || (AsyncErrorType = {})), function(VariableType2) {
      VariableType2.shortText = "shortText", VariableType2.longText = "longText", VariableType2.image = "image", VariableType2.list = "list", VariableType2.boolean = "boolean", VariableType2.group = "group", VariableType2.number = "number", VariableType2.date = "date";
    }(VariableType || (VariableType = {})), function(Day2) {
      Day2.Monday = "monday", Day2.Tuesday = "tuesday", Day2.Wednesday = "wednesday", Day2.Thursday = "thursday", Day2.Friday = "friday", Day2.Saturday = "saturday", Day2.Sunday = "sunday";
    }(Day || (Day = {})), function(Locale2) {
      Locale2.en_US = "en_US", Locale2.cs = "cs", Locale2.da = "da", Locale2.nl = "nl", Locale2.fi = "fi", Locale2.fr = "fr", Locale2.de = "de", Locale2.it = "it", Locale2.no = "no", Locale2.pl = "pl", Locale2.pt_PT = "pt_PT", Locale2.es_ES = "es_ES", Locale2.sv = "sv";
    }(Locale || (Locale = {})), function(VariableVisibilityType2) {
      VariableVisibilityType2.visible = "visible", VariableVisibilityType2.invisible = "invisible", VariableVisibilityType2.conditional = "conditional";
    }(VariableVisibilityType || (VariableVisibilityType = {})), function(VariableVisibilityTargetType2) {
      VariableVisibilityTargetType2.boolean = "boolean", VariableVisibilityTargetType2.text = "text", VariableVisibilityTargetType2.number = "number";
    }(VariableVisibilityTargetType || (VariableVisibilityTargetType = {})), function(VariableVisibilityOperator2) {
      VariableVisibilityOperator2.equals = "=", VariableVisibilityOperator2.notEquals = "!=", VariableVisibilityOperator2.greaterThan = ">", VariableVisibilityOperator2.greaterThanOrEquals = ">=", VariableVisibilityOperator2.lessThan = "<", VariableVisibilityOperator2.lessThanOrEquals = "<=";
    }(VariableVisibilityOperator || (VariableVisibilityOperator = {}));
    var SubscriberController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };

    class SubscriberController {
      constructor(config, localConfig) {
        this.onActionsChanged = (actions) => {
          this.config.events.onActionsChanged.trigger(JSON.parse(actions));
        }, this.onAnimationChanged = (animation) => {
          this.config.events.onFrameAnimationsChanged.trigger(JSON.parse(animation));
        }, this.onAnimationPlaybackChanged = (animationPlaybackState) => {
          this.config.events.onScrubberPositionChanged.trigger(JSON.parse(animationPlaybackState));
        }, this.onSelectedLayoutPropertiesChanged = (layoutProperties) => {
          this.config.events.onSelectedLayoutPropertiesChanged.trigger(JSON.parse(layoutProperties));
        }, this.onSelectedLayoutUnitChanged = (unit) => {
          this.config.events.onSelectedLayoutUnitChanged.trigger(unit);
        }, this.onFramesLayoutChanged = (framesLayout) => {
          const frames = JSON.parse(framesLayout);
          this.config.events.onFramesLayoutChanged.trigger(frames);
        }, this.onSelectedFramesLayoutChanged = (framesLayout) => {
          const frames = JSON.parse(framesLayout);
          this.config.events.onSelectedFramesLayoutChanged.trigger(frames);
          const singleFrameCallBack = this.config.onSelectedFrameLayoutChanged;
          singleFrameCallBack && singleFrameCallBack(frames.length > 1 ? undefined : frames[0]);
        }, this.onSelectedFramesContentChanged = (framesContent) => {
          const frames = JSON.parse(framesContent);
          this.config.events.onSelectedFramesContentChanged.trigger(frames);
          const singleFrameCallBack = this.config.onSelectedFrameContentChanged;
          singleFrameCallBack && singleFrameCallBack(frames.length > 1 ? null : frames[0]);
        }, this.onStateChanged = () => {
          this.config.events.onStateChanged.trigger();
        }, this.onAuthExpired = (authRefreshRequest) => SubscriberController_awaiter(this, undefined, undefined, function* () {
          const authCredentials = yield this.config.handlers.onAuthExpired.trigger(JSON.parse(authRefreshRequest));
          return authCredentials != null ? JSON.stringify(authCredentials) : null;
        }), this.onViewportRequested = () => {
          const viewport = this.config.handlers.onViewportRequested.trigger();
          return viewport != null ? JSON.stringify(viewport) : null;
        }, this.onDocumentLoaded = () => {
          this.config.events.onDocumentLoaded.trigger();
        }, this.onPageSelectionChanged = (id2) => {
          this.config.events.onPageSelectionChanged.trigger(id2);
        }, this.onVariableListChanged = (variablesJson) => {
          const updated = JSON.parse(variablesJson).map((variable) => {
            var _a;
            return variable.type === VariableType.list ? Object.assign(Object.assign({}, variable), { items: variable.items.map((item) => item.value), selected: (_a = variable.selected) === null || _a === undefined ? undefined : _a.value }) : variable;
          });
          this.config.events.onVariableListChanged.trigger(updated);
        }, this.onSelectedToolChanged = (tool) => {
          this.config.events.onSelectedToolChanged.trigger(tool);
        }, this.onUndoStateChanged = (undoState) => {
          this.config.events.onUndoStackStateChanged.trigger(JSON.parse(undoState));
        }, this.onCustomUndoDataChanged = (customData) => {
          this.config.events.onCustomUndoDataChanged.trigger(JSON.parse(customData));
        }, this.onSelectedLayoutFramesChanged = (layoutFrames) => {
          this.config.events.onSelectedLayoutFramesChanged.trigger(JSON.parse(layoutFrames));
        }, this.onSelectedTextStyleChanged = (styles) => {
          this.config.events.onSelectedTextStyleChanged.trigger(JSON.parse(styles));
        }, this.onColorsChanged = (colors) => {
          this.config.events.onColorsChanged.trigger(JSON.parse(colors));
        }, this.onParagraphStylesChanged = (paragraphStyles) => {
          this.config.events.onParagraphStylesChanged.trigger(JSON.parse(paragraphStyles));
        }, this.onCharacterStylesChanged = (characterStyles) => {
          this.config.events.onCharacterStylesChanged.trigger(JSON.parse(characterStyles));
        }, this.onFontFamiliesChanged = (fonts) => {
          this.config.events.onFontFamiliesChanged.trigger(JSON.parse(fonts));
        }, this.onSelectedLayoutIdChanged = (id2) => {
          this.config.events.onSelectedLayoutIdChanged.trigger(id2);
        }, this.onLayoutsChanged = (layouts) => {
          this.config.events.onLayoutsChanged.trigger(JSON.parse(layouts));
        }, this.onZoomChanged = (zoom) => {
          this.config.events.onZoomChanged.trigger(JSON.parse(zoom));
        }, this.onConnectorEvent = (connectorEvent) => {
          this.config.events.onConnectorEvent.trigger(JSON.parse(connectorEvent));
        }, this.onConnectorsChanged = (connectors) => {
          const compatibleConnectors = new ConnectorCompatibilityTools().makeMultipleConnectorsBackwardsCompatible(JSON.parse(connectors), this.localConfig.get(WellKnownConfigurationKeys.GraFxStudioEnvironmentApiUrl));
          this.config.events.onConnectorsChanged.trigger(compatibleConnectors);
        }, this.onSelectedPageIdChanged = (pageId) => {
          this.config.events.onSelectedPageIdChanged.trigger(pageId);
        }, this.onPagesChanged = (pages) => {
          this.config.events.onPagesChanged.trigger(JSON.parse(pages));
        }, this.onPageSnapshotInvalidated = (page) => {
          this.config.events.onPageSnapshotInvalidated.trigger(JSON.parse(page));
        }, this.onPageSizeChanged = (pageSize) => {
          this.config.events.onPageSizeChanged.trigger(JSON.parse(pageSize));
        }, this.onShapeCornerRadiusChanged = (cornerRadius) => {
          this.config.events.onShapeCornerRadiusChanged.trigger(JSON.parse(cornerRadius));
        }, this.onCropActiveFrameIdChanged = (id2) => {
          this.config.events.onCropActiveFrameIdChanged.trigger(id2);
        }, this.onAsyncError = (asyncError) => {
          const parsedError = JSON.parse(asyncError);
          if ((parsedError == null ? undefined : parsedError.type) === "dataRow") {
            const dataRowException = new DataRowAsyncError(parsedError.count, parsedError.message, parsedError.exceptions);
            this.config.events.onAsyncError.trigger(dataRowException);
          } else if ((parsedError == null ? undefined : parsedError.type) === "action") {
            const actionException = new ActionAsyncError(parsedError.message, parsedError.id, parsedError.event, parsedError.eventChain);
            this.config.events.onAsyncError.trigger(actionException);
          } else
            this.config.events.onAsyncError.trigger(parsedError);
        }, this.onViewModeChanged = (viewMode) => {
          this.config.events.onViewModeChanged.trigger(viewMode);
        }, this.onBarcodeValidationChanged = (validationResults) => {
          this.config.events.onBarcodeValidationChanged.trigger(JSON.parse(validationResults));
        }, this.onDataSourceIdChanged = (connectorId) => {
          this.config.events.onDataSourceIdChanged.trigger(connectorId);
        }, this.onDocumentIssueListChanged = (documentIssues) => {
          this.config.events.onDocumentIssueListChanged.trigger(JSON.parse(documentIssues));
        }, this.onEngineEditModeChanged = (engineEditMode) => {
          this.config.events.onEngineEditModeChanged.trigger(JSON.parse(engineEditMode));
        }, this.config = config, this.localConfig = localConfig;
      }
    }
    var _TextStyleController_editorAPI, FramePropertyNames, LayoutPropertyNames, ToolType, DownloadFormats, EnvironmentType, TextStyleController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, TextStyleController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, TextStyleController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class TextStyleController {
      constructor(editorAPI) {
        _TextStyleController_editorAPI.set(this, undefined), this.set = (style2) => TextStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield TextStyleController_classPrivateFieldGet(this, _TextStyleController_editorAPI, "f")).selectedTextStyleDeltaUpdate(JSON.stringify(style2)).then((result) => getEditorResponseData(result));
        }), this.removeSelected = () => TextStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield TextStyleController_classPrivateFieldGet(this, _TextStyleController_editorAPI, "f")).selectedTextStyleClean().then((result) => getEditorResponseData(result));
        }), this.getSelected = () => TextStyleController_awaiter(this, undefined, undefined, function* () {
          return (yield TextStyleController_classPrivateFieldGet(this, _TextStyleController_editorAPI, "f")).getSelectedTextStyle().then((result) => getEditorResponseData(result));
        }), TextStyleController_classPrivateFieldSet(this, _TextStyleController_editorAPI, editorAPI, "f");
      }
    }
    _TextStyleController_editorAPI = new WeakMap, function(FramePropertyNames2) {
      FramePropertyNames2.FRAME_X = "frameX", FramePropertyNames2.FRAME_Y = "frameY", FramePropertyNames2.WIDTH = "width", FramePropertyNames2.HEIGHT = "height", FramePropertyNames2.FRAME_ROTATION = "frameRotation";
    }(FramePropertyNames || (FramePropertyNames = {})), function(LayoutPropertyNames2) {
      LayoutPropertyNames2.LAYOUT_HEIGHT = "layoutHeight", LayoutPropertyNames2.LAYOUT_WIDTH = "layoutWidth", LayoutPropertyNames2.BLEED_TOP = "bleedTop", LayoutPropertyNames2.BLEED_BOTTOM = "bleedBottom", LayoutPropertyNames2.BLEED_LEFT = "bleedLeft", LayoutPropertyNames2.BLEED_RIGHT = "bleedRight", LayoutPropertyNames2.BLEED_VALUES_COMBINED = "areBleedValuesCombined";
    }(LayoutPropertyNames || (LayoutPropertyNames = {})), function(ToolType2) {
      ToolType2.SELECT = "select", ToolType2.ZOOM = "zoom", ToolType2.HAND = "hand", ToolType2.IMAGE_FRAME = "imageFrame", ToolType2.TEXT_FRAME = "textFrame", ToolType2.SHAPE_RECT = "rect", ToolType2.SHAPE_ELLIPSE = "ellipse", ToolType2.SHAPE_POLYGON = "polygon";
    }(ToolType || (ToolType = {})), function(DownloadFormats2) {
      DownloadFormats2.MP4 = "mp4", DownloadFormats2.GIF = "gif", DownloadFormats2.PNG = "png", DownloadFormats2.JPG = "jpg", DownloadFormats2.PDF = "pdf";
    }(DownloadFormats || (DownloadFormats = {})), function(EnvironmentType2) {
      EnvironmentType2.SANDBOX = "sandbox", EnvironmentType2.PRODUCTION = "online";
    }(EnvironmentType || (EnvironmentType = {}));
    var _ToolController_editorAPI, ToolController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, ToolController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, ToolController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class ToolController {
      constructor(editorAPI) {
        _ToolController_editorAPI.set(this, undefined), this.setTool = (tool) => ToolController_awaiter(this, undefined, undefined, function* () {
          return (yield ToolController_classPrivateFieldGet(this, _ToolController_editorAPI, "f")).setTool(tool).then((result) => getEditorResponseData(result));
        }), this.getSelected = () => ToolController_awaiter(this, undefined, undefined, function* () {
          return (yield ToolController_classPrivateFieldGet(this, _ToolController_editorAPI, "f")).getSelectedTool().then((result) => getEditorResponseData(result));
        }), this.setPointer = () => ToolController_awaiter(this, undefined, undefined, function* () {
          return this.setTool(ToolType.SELECT);
        }), this.setSelect = () => ToolController_awaiter(this, undefined, undefined, function* () {
          return this.setTool(ToolType.SELECT);
        }), this.setHand = () => ToolController_awaiter(this, undefined, undefined, function* () {
          return this.setTool(ToolType.HAND);
        }), this.setZoom = () => ToolController_awaiter(this, undefined, undefined, function* () {
          return this.setTool(ToolType.ZOOM);
        }), this.setTextFrame = () => ToolController_awaiter(this, undefined, undefined, function* () {
          return this.setTool(ToolType.TEXT_FRAME);
        }), this.setImageFrame = () => ToolController_awaiter(this, undefined, undefined, function* () {
          return this.setTool(ToolType.IMAGE_FRAME);
        }), this.setShapeRect = () => ToolController_awaiter(this, undefined, undefined, function* () {
          return this.setTool(ToolType.SHAPE_RECT);
        }), this.setShapeEllipse = () => ToolController_awaiter(this, undefined, undefined, function* () {
          return this.setTool(ToolType.SHAPE_ELLIPSE);
        }), this.setShapePolygon = () => ToolController_awaiter(this, undefined, undefined, function* () {
          return this.setTool(ToolType.SHAPE_POLYGON);
        }), ToolController_classPrivateFieldSet(this, _ToolController_editorAPI, editorAPI, "f");
      }
    }
    _ToolController_editorAPI = new WeakMap;
    var _UndoManagerController_editorAPI, _UndoManagerController_advanced, _UndoManagerController_sdk, _AdvancedUndoManagerController_editorAPI, UndoManagerController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, UndoManagerController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, UndoManagerController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class UndoManagerController {
      constructor(children, sdk) {
        _UndoManagerController_editorAPI.set(this, undefined), _UndoManagerController_advanced.set(this, undefined), _UndoManagerController_sdk.set(this, undefined), this.undo = () => UndoManagerController_awaiter(this, undefined, undefined, function* () {
          return (yield UndoManagerController_classPrivateFieldGet(this, _UndoManagerController_editorAPI, "f")).undo().then((result) => getEditorResponseData(result));
        }), this.redo = () => UndoManagerController_awaiter(this, undefined, undefined, function* () {
          return (yield UndoManagerController_classPrivateFieldGet(this, _UndoManagerController_editorAPI, "f")).redo().then((result) => getEditorResponseData(result));
        }), this.addCustomData = (key, value) => UndoManagerController_awaiter(this, undefined, undefined, function* () {
          return (yield UndoManagerController_classPrivateFieldGet(this, _UndoManagerController_editorAPI, "f")).setCustomUndoData(key, value).then((result) => getEditorResponseData(result));
        }), this.record = (operationName, undoOperationCallback) => UndoManagerController_awaiter(this, undefined, undefined, function* () {
          try {
            yield UndoManagerController_classPrivateFieldGet(this, _UndoManagerController_advanced, "f").beginIfNoneActive(operationName), yield undoOperationCallback(UndoManagerController_classPrivateFieldGet(this, _UndoManagerController_sdk, "f"));
          } catch (error) {
            throw error;
          } finally {
            yield UndoManagerController_classPrivateFieldGet(this, _UndoManagerController_advanced, "f").end();
          }
        }), this.pause = () => UndoManagerController_awaiter(this, undefined, undefined, function* () {
          return (yield UndoManagerController_classPrivateFieldGet(this, _UndoManagerController_editorAPI, "f")).pause().then((result) => getEditorResponseData(result));
        }), this.resume = () => UndoManagerController_awaiter(this, undefined, undefined, function* () {
          return (yield UndoManagerController_classPrivateFieldGet(this, _UndoManagerController_editorAPI, "f")).resume().then((result) => getEditorResponseData(result));
        }), UndoManagerController_classPrivateFieldSet(this, _UndoManagerController_editorAPI, children, "f"), UndoManagerController_classPrivateFieldSet(this, _UndoManagerController_sdk, sdk, "f"), UndoManagerController_classPrivateFieldSet(this, _UndoManagerController_advanced, new AdvancedUndoManagerController(children), "f");
      }
    }
    _UndoManagerController_editorAPI = new WeakMap, _UndoManagerController_advanced = new WeakMap, _UndoManagerController_sdk = new WeakMap;

    class AdvancedUndoManagerController {
      constructor(children) {
        _AdvancedUndoManagerController_editorAPI.set(this, undefined), this.begin = (operationName) => UndoManagerController_awaiter(this, undefined, undefined, function* () {
          return (yield UndoManagerController_classPrivateFieldGet(this, _AdvancedUndoManagerController_editorAPI, "f")).begin(operationName).then((result) => getEditorResponseData(result));
        }), this.beginIfNoneActive = (operationName) => UndoManagerController_awaiter(this, undefined, undefined, function* () {
          return (yield UndoManagerController_classPrivateFieldGet(this, _AdvancedUndoManagerController_editorAPI, "f")).beginIfNoneActive(operationName).then((result) => getEditorResponseData(result));
        }), this.end = () => UndoManagerController_awaiter(this, undefined, undefined, function* () {
          return (yield UndoManagerController_classPrivateFieldGet(this, _AdvancedUndoManagerController_editorAPI, "f")).end().then((result) => getEditorResponseData(result));
        }), UndoManagerController_classPrivateFieldSet(this, _AdvancedUndoManagerController_editorAPI, children, "f");
      }
    }
    _AdvancedUndoManagerController_editorAPI = new WeakMap;
    const round = (val, precision = 2) => {
      const hundred = Math.pow(10, precision);
      return Math.round(val * hundred) / hundred;
    };

    class UtilsController {
      constructor() {
        this.round = (val, precision) => getEditorResponseData({ data: String(round(val, precision)), success: true, status: 200, parsedData: null }), this.createEnvironmentBaseURL = (parameters) => {
          const { type = EnvironmentType.SANDBOX, environment = "ft-nostress", version: version2 = "1" } = parameters;
          return `https://${environment}.${type == EnvironmentType.SANDBOX ? "chili-publish-sandbox" : "chili-publish"}.online/grafx/api/v${version2}/environment/${environment}`;
        };
      }
    }
    var _NumberVariable_editorAPI, _DateVariable_editorAPI, _VariableController_editorAPI, _VariableController_setPlaceholder, _VariableController_setHelpText, VariableController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, VariableController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, VariableController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class NumberVariable {
      constructor(editorAPI) {
        _NumberVariable_editorAPI.set(this, undefined), this.setMinimum = (id2, minimum) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { minValue: { value: minimum } };
          return this.applyPropertiesUpdate(id2, update);
        }), this.setMaximum = (id2, maximum) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { maxValue: { value: maximum } };
          return this.applyPropertiesUpdate(id2, update);
        }), this.setShowStepper = (id2, showStepper) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { showStepper: { value: showStepper } };
          return this.applyPropertiesUpdate(id2, update);
        }), this.setStepSize = (id2, stepSize) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { stepSize: { value: stepSize } };
          return this.applyPropertiesUpdate(id2, update);
        }), this.setThousandsSeparator = (id2, thousandsSeparator) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { thousandsSeparator: { value: thousandsSeparator } };
          return this.applyPropertiesUpdate(id2, update);
        }), this.setDecimalSeparator = (id2, decimalSeparator) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { decimalSeparator: { value: decimalSeparator } };
          return this.applyPropertiesUpdate(id2, update);
        }), this.setDecimalCharacterStyle = (id2, characterStyleId) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { decimalCharacterStyleId: { value: characterStyleId } };
          return this.applyPropertiesUpdate(id2, update);
        }), this.setNumberOfDecimals = (id2, numberOfDecimals) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { numberOfDecimals: { value: numberOfDecimals } };
          return this.applyPropertiesUpdate(id2, update);
        }), VariableController_classPrivateFieldSet(this, _NumberVariable_editorAPI, editorAPI, "f");
      }
      applyPropertiesUpdate(id2, update) {
        return VariableController_awaiter(this, undefined, undefined, function* () {
          const res = yield VariableController_classPrivateFieldGet(this, _NumberVariable_editorAPI, "f");
          return getEditorResponseData(yield res.updateNumberVariableProperties(id2, JSON.stringify(update)));
        });
      }
    }
    _NumberVariable_editorAPI = new WeakMap;

    class DateVariable {
      constructor(editorAPI) {
        _DateVariable_editorAPI.set(this, undefined), this.setDisplayFormat = (id2, displayFormat) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { displayFormat: { value: displayFormat } };
          return this.applyPropertiesUpdate(id2, update);
        }), this.setLocale = (id2, locale) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { locale: { value: locale } };
          return this.applyPropertiesUpdate(id2, update);
        }), this.setStartDate = (id2, date) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { startDate: { value: date } };
          return this.applyPropertiesUpdate(id2, update);
        }), this.setEndDate = (id2, date) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { endDate: { value: date } };
          return this.applyPropertiesUpdate(id2, update);
        }), this.setExcludedDays = (id2, excludedDays) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { excludedDays: { value: excludedDays } };
          return this.applyPropertiesUpdate(id2, update);
        }), VariableController_classPrivateFieldSet(this, _DateVariable_editorAPI, editorAPI, "f");
      }
      applyPropertiesUpdate(id2, update) {
        return VariableController_awaiter(this, undefined, undefined, function* () {
          const res = yield VariableController_classPrivateFieldGet(this, _DateVariable_editorAPI, "f");
          return getEditorResponseData(yield res.updateDateVariableProperties(id2, JSON.stringify(update)));
        });
      }
    }
    _DateVariable_editorAPI = new WeakMap;

    class VariableController {
      constructor(editorAPI) {
        _VariableController_editorAPI.set(this, undefined), this.getAll = () => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).getVariables().then((result) => getEditorResponseData(result)).then((resp) => {
            const update = resp;
            return update.parsedData && (update.parsedData = this.makeVariablesBackwardsCompatible(update.parsedData)), update;
          });
        }), this.getById = (id2) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).getVariableById(id2).then((result) => getEditorResponseData(result)).then((resp) => {
            const update = resp;
            return update.parsedData && (update.parsedData = this.makeVariableBackwardsCompatible(update.parsedData)), update;
          });
        }), this.getByName = (name) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).getVariableByName(name).then((result) => getEditorResponseData(result)).then((resp) => {
            const update = resp;
            return update.parsedData && (update.parsedData = this.makeVariableBackwardsCompatible(update.parsedData)), update;
          });
        }), this.create = (parentId, type) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).addVariable(parentId, type).then((result) => getEditorResponseData(result));
        }), this.remove = (ids) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).removeVariables(ids).then((result) => getEditorResponseData(result));
        }), this.rename = (id2, name) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).setVariableName(id2, name).then((result) => getEditorResponseData(result));
        }), this.setLabel = (id2, label) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).setVariableLabel(id2, label).then((result) => getEditorResponseData(result));
        }), _VariableController_setPlaceholder.set(this, (id2, placeholder) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).setVariablePlaceholder(id2, placeholder).then((result) => getEditorResponseData(result));
        })), this.setPlaceholder = (id2, placeholder) => VariableController_awaiter(this, undefined, undefined, function* () {
          return VariableController_classPrivateFieldGet(this, _VariableController_setPlaceholder, "f").call(this, id2, placeholder);
        }), this.resetPlaceholder = (id2) => VariableController_awaiter(this, undefined, undefined, function* () {
          return VariableController_classPrivateFieldGet(this, _VariableController_setPlaceholder, "f").call(this, id2, null);
        }), _VariableController_setHelpText.set(this, (id2, helpText) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).setVariableHelpText(id2, helpText).then((result) => getEditorResponseData(result));
        })), this.setHelpText = (id2, helpText) => VariableController_awaiter(this, undefined, undefined, function* () {
          return VariableController_classPrivateFieldGet(this, _VariableController_setHelpText, "f").call(this, id2, helpText);
        }), this.resetHelpText = (id2) => VariableController_awaiter(this, undefined, undefined, function* () {
          return VariableController_classPrivateFieldGet(this, _VariableController_setHelpText, "f").call(this, id2, null);
        }), this.setType = (id2, type) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).setVariableType(id2, type).then((result) => getEditorResponseData(result));
        }), this.setListVariable = (id2, items) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).setListVariableItems(id2, items.map((item) => JSON.stringify({ value: item }))).then((result) => getEditorResponseData(result));
        }), this.setValue = (id2, value) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).setVariableValue(id2, value).then((result) => getEditorResponseData(result));
        }), this.duplicate = (id2) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).duplicateVariable(id2).then((result) => getEditorResponseData(result));
        }), this.groupVariables = (name, ids) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).groupVariables(name, ids).then((result) => getEditorResponseData(result));
        }), this.ungroupVariables = (id2) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).ungroupVariable(id2).then((result) => getEditorResponseData(result));
        }), this.move = (order, id2, parentId) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).moveVariable(id2, parentId, order).then((result) => getEditorResponseData(result));
        }), this.moveVariables = (order, ids, parentId) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).moveVariables(ids, parentId, order).then((result) => getEditorResponseData(result));
        }), this.setIsVisible = (id2, isVisible) => VariableController_awaiter(this, undefined, undefined, function* () {
          const config = isVisible ? { type: VariableVisibilityType.visible } : { type: VariableVisibilityType.invisible };
          return this.setVariableVisibility(id2, config);
        }), this.setIsHidden = (id2, isHidden) => VariableController_awaiter(this, undefined, undefined, function* () {
          const config = isHidden ? { type: VariableVisibilityType.invisible } : { type: VariableVisibilityType.visible };
          return this.setVariableVisibility(id2, config);
        }), this.setVariableVisibility = (id2, config) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).setVariableVisibility(id2, JSON.stringify(config)).then((result) => getEditorResponseData(result));
        }), this.setLayoutsForVariableVisibility = (layoutIdList) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).setLayoutsForVariableVisibility(layoutIdList ? JSON.stringify(layoutIdList) : null).then((result) => getEditorResponseData(result));
        }), this.setIsRequired = (id2, isRequired) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).setVariableIsRequired(id2, isRequired).then((result) => getEditorResponseData(result));
        }), this.setIsReadonly = (id2, isReadonly) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).setVariableIsReadonly(id2, isReadonly).then((result) => getEditorResponseData(result));
        }), this.getImageVariableConnectorId = (id2) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).getImageVariableConnectorId(id2).then((result) => getEditorResponseData(result));
        }), this.setImageVariableConnector = (id2, registration) => VariableController_awaiter(this, undefined, undefined, function* () {
          const res = yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f"), connectorRegistration = new ConnectorCompatibilityTools().makeConnectorSourceForwardsCompatible(registration);
          return res.setImageVariableConnector(id2, JSON.stringify(connectorRegistration)).then((result) => getEditorResponseData(result));
        }), this.removeSource = (id2) => VariableController_awaiter(this, undefined, undefined, function* () {
          return this.setValue(id2, null);
        }), this.setPrefix = (id2, prefix2) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { prefix: { value: prefix2 } };
          return this.applyPrefixSuffixDeltaUpdate(id2, update);
        }), this.setSuffix = (id2, suffix2) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { suffix: { value: suffix2 } };
          return this.applyPrefixSuffixDeltaUpdate(id2, update);
        }), this.setPrefixCharacterStyle = (id2, characterStyleId) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { prefixCharacterStyleId: { value: characterStyleId } };
          return this.applyPrefixSuffixDeltaUpdate(id2, update);
        }), this.setSuffixCharacterStyle = (id2, characterStyleId) => VariableController_awaiter(this, undefined, undefined, function* () {
          const update = { suffixCharacterStyleId: { value: characterStyleId } };
          return this.applyPrefixSuffixDeltaUpdate(id2, update);
        }), this.setPrivateData = (id2, privateData) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).setVariablePrivateData(id2, JSON.stringify(privateData)).then((result) => getEditorResponseData(result));
        }), this.getPrivateData = (id2) => VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")).getVariablePrivateData(id2).then((result) => getEditorResponseData(result));
        }), VariableController_classPrivateFieldSet(this, _VariableController_editorAPI, editorAPI, "f"), this.number = new NumberVariable(VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f")), this.date = new DateVariable(VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f"));
      }
      makeVariablesBackwardsCompatible(variables) {
        return variables.map((variable) => this.makeVariableBackwardsCompatible(variable));
      }
      makeVariableBackwardsCompatible(variable) {
        return variable.type !== VariableType.list ? variable : this.makeListVariableBackwardsCompatible(variable);
      }
      makeListVariableBackwardsCompatible(listVariable) {
        const updated = listVariable, items = listVariable.items, selected = listVariable.selected, newItems = items.map((item) => item.value);
        return updated.items = newItems, updated.selected = selected == null ? undefined : selected.value, updated;
      }
      applyPrefixSuffixDeltaUpdate(id2, update) {
        return VariableController_awaiter(this, undefined, undefined, function* () {
          const res = yield VariableController_classPrivateFieldGet(this, _VariableController_editorAPI, "f");
          return getEditorResponseData(yield res.updateVariablePrefixSuffixProperties(id2, JSON.stringify(update)));
        });
      }
    }
    _VariableController_editorAPI = new WeakMap, _VariableController_setPlaceholder = new WeakMap, _VariableController_setHelpText = new WeakMap;

    class SubscriberController_SubscriberController {
      constructor(config) {
        this.onVariableListChanged = (variablesJson) => {
          this.config.events.onVariableListChanged.trigger(JSON.parse(variablesJson));
        }, this.onConnectorsChanged = (connectors) => {
          this.config.events.onConnectorsChanged.trigger(JSON.parse(connectors));
        }, this.onPageSizeChanged = (pageSize) => {
          this.config.events.onPageSizeChanged.trigger(JSON.parse(pageSize));
        }, this.config = config;
      }
    }
    var VariableController_VariableController_editorAPI, controllers_VariableController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, controllers_VariableController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, controllers_VariableController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class VariableController_VariableController {
      constructor(editorAPI) {
        VariableController_VariableController_editorAPI.set(this, undefined), this.getAll = () => controllers_VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield controllers_VariableController_classPrivateFieldGet(this, VariableController_VariableController_editorAPI, "f")).getVariables().then((result) => getEditorResponseData(result));
        }), this.getById = (id2) => controllers_VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield controllers_VariableController_classPrivateFieldGet(this, VariableController_VariableController_editorAPI, "f")).getVariableById(id2).then((result) => getEditorResponseData(result));
        }), this.getByName = (name) => controllers_VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield controllers_VariableController_classPrivateFieldGet(this, VariableController_VariableController_editorAPI, "f")).getVariableByName(name).then((result) => getEditorResponseData(result));
        }), this.setListVariable = (id2, items) => controllers_VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield controllers_VariableController_classPrivateFieldGet(this, VariableController_VariableController_editorAPI, "f")).setListVariableItems(id2, items.map((item) => JSON.stringify(item))).then((result) => getEditorResponseData(result));
        }), this.setImageVariableConnector = (id2, registration) => controllers_VariableController_awaiter(this, undefined, undefined, function* () {
          return (yield controllers_VariableController_classPrivateFieldGet(this, VariableController_VariableController_editorAPI, "f")).setImageVariableConnector(id2, JSON.stringify(registration)).then((result) => getEditorResponseData(result));
        }), controllers_VariableController_classPrivateFieldSet(this, VariableController_VariableController_editorAPI, editorAPI, "f");
      }
    }
    VariableController_VariableController_editorAPI = new WeakMap;
    var ConnectorController_ConnectorController_editorAPI, controllers_ConnectorController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, controllers_ConnectorController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, controllers_ConnectorController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class ConnectorController_ConnectorController {
      constructor(editorAPI) {
        ConnectorController_ConnectorController_editorAPI.set(this, undefined), this.register = (registration) => controllers_ConnectorController_awaiter(this, undefined, undefined, function* () {
          return (yield controllers_ConnectorController_classPrivateFieldGet(this, ConnectorController_ConnectorController_editorAPI, "f")).registerConnector(JSON.stringify(registration)).then((result) => getEditorResponseData(result));
        }), this.getById = (id2) => controllers_ConnectorController_awaiter(this, undefined, undefined, function* () {
          return (yield controllers_ConnectorController_classPrivateFieldGet(this, ConnectorController_ConnectorController_editorAPI, "f")).getConnectorById(id2).then((result) => getEditorResponseData(result));
        }), this.getAllByType = (type) => controllers_ConnectorController_awaiter(this, undefined, undefined, function* () {
          return (yield controllers_ConnectorController_classPrivateFieldGet(this, ConnectorController_ConnectorController_editorAPI, "f")).getConnectors(type).then((result) => getEditorResponseData(result));
        }), controllers_ConnectorController_classPrivateFieldSet(this, ConnectorController_ConnectorController_editorAPI, editorAPI, "f");
      }
    }
    ConnectorController_ConnectorController_editorAPI = new WeakMap;
    var PageController_PageController_editorAPI, PageController_PageController_blobAPI, controllers_PageController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, controllers_PageController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, controllers_PageController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class PageController_PageController {
      constructor(editorAPI) {
        PageController_PageController_editorAPI.set(this, undefined), PageController_PageController_blobAPI.set(this, undefined), this.setWidth = (width) => controllers_PageController_awaiter(this, undefined, undefined, function* () {
          return (yield controllers_PageController_classPrivateFieldGet(this, PageController_PageController_editorAPI, "f")).setPageWidth(width).then((result) => getEditorResponseData(result));
        }), this.setHeight = (height) => controllers_PageController_awaiter(this, undefined, undefined, function* () {
          return (yield controllers_PageController_classPrivateFieldGet(this, PageController_PageController_editorAPI, "f")).setPageHeight(height).then((result) => getEditorResponseData(result));
        }), controllers_PageController_classPrivateFieldSet(this, PageController_PageController_editorAPI, editorAPI, "f"), controllers_PageController_classPrivateFieldSet(this, PageController_PageController_blobAPI, editorAPI, "f");
      }
    }
    PageController_PageController_editorAPI = new WeakMap, PageController_PageController_blobAPI = new WeakMap;

    class NextInitiator {
      constructor(config, connection2, editorAPI) {
        this.config = config, this.connection = connection2, this.editorAPI = editorAPI, this.subscriber = new SubscriberController_SubscriberController(config), this.variable = new VariableController_VariableController(this.editorAPI), this.connector = new ConnectorController_ConnectorController(this.editorAPI), this.page = new PageController_PageController(this.editorAPI), this.canvas = new CanvasController(this.editorAPI);
      }
    }

    class EngineEventTrigger {
      constructor(logger) {
        this.logger = logger;
      }
      createEventHandlerFn(callbackFn, errorBehavior) {
        return (...args) => {
          try {
            const result = callbackFn(...args);
            return result instanceof Promise ? result.catch((error) => this.handleError(error, errorBehavior, callbackFn.name)) : result;
          } catch (error) {
            this.handleError(error, errorBehavior, callbackFn.name);
          }
        };
      }
      handleError(error, errorBehavior, fnName) {
        var _a;
        if (errorBehavior !== CallbackErrorBehavior.log)
          throw error;
        (_a = this.logger) === null || _a === undefined || _a.call(this, LogLevel.error, LogCategory.event, `Error in callback ${fnName}: ${error}`);
      }
    }

    class EngineCallbackHandler extends EngineEventTrigger {
      constructor(handler, logger) {
        super(logger), this.handler = handler;
      }
      trigger(...args) {
        const handler = this.handler();
        if (handler)
          return this.createEventHandlerFn(handler, CallbackErrorBehavior.throw)(...args);
      }
    }

    class EngineEvent extends EngineEventTrigger {
      constructor(legacyHandler, logger) {
        super(logger), this.legacyHandler = legacyHandler, this.subscriptions = new Set;
      }
      trigger(...args) {
        const handler = this.legacyHandler();
        handler && this.createEventHandlerFn(handler, CallbackErrorBehavior.log)(...args);
        for (const callback of this.subscriptions)
          callback(...args);
      }
      registerCallback(callback, errorBehavior = CallbackErrorBehavior.log) {
        const callbackFn = this.createEventHandlerFn(callback, errorBehavior);
        return this.subscriptions.add(callbackFn), () => {
          this.subscriptions.delete(callbackFn);
        };
      }
    }

    class ConfigHelper {
      static createRuntimeConfig(config) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10;
        const clone = Object.assign({}, config);
        return clone.logging = { logLevel: ((_a = config.logging) === null || _a === undefined ? undefined : _a.logLevel) || LogLevel.error, logger: ((_b = config.logging) === null || _b === undefined ? undefined : _b.logger) || ((level, cat, msg) => {
          var _a2, _b2;
          if (ConfigHelper.isLoggingEnabled(level, (_b2 = (_a2 = clone.logging) === null || _a2 === undefined ? undefined : _a2.logLevel) !== null && _b2 !== undefined ? _b2 : LogLevel.error))
            switch (level) {
              case LogLevel.error:
                console.error(`[${cat}] [${level}] ${msg}`);
                break;
              case LogLevel.warn:
                console.warn(`[${cat}] [${level}] ${msg}`);
                break;
              default:
                console.log(`[${cat}] [${level}] ${msg}`);
            }
        }) }, clone.handlers = { onAuthExpired: new EngineCallbackHandler(() => clone.onAuthExpired, (_c = clone.logging) === null || _c === undefined ? undefined : _c.logger), onViewportRequested: new EngineCallbackHandler(() => clone.onViewportRequested, (_d = clone.logging) === null || _d === undefined ? undefined : _d.logger) }, clone.events = { onActionsChanged: new EngineEvent(() => clone.onActionsChanged, (_e = clone.logging) === null || _e === undefined ? undefined : _e.logger), onStateChanged: new EngineEvent(() => clone.onStateChanged, (_f = clone.logging) === null || _f === undefined ? undefined : _f.logger), onDocumentLoaded: new EngineEvent(() => clone.onDocumentLoaded, (_g = clone.logging) === null || _g === undefined ? undefined : _g.logger), onSelectedFramesLayoutChanged: new EngineEvent(() => clone.onSelectedFramesLayoutChanged, (_h = clone.logging) === null || _h === undefined ? undefined : _h.logger), onFramesLayoutChanged: new EngineEvent(() => clone.onFramesLayoutChanged, (_j = clone.logging) === null || _j === undefined ? undefined : _j.logger), onSelectedFramesContentChanged: new EngineEvent(() => clone.onSelectedFramesContentChanged, (_k = clone.logging) === null || _k === undefined ? undefined : _k.logger), onPageSelectionChanged: new EngineEvent(() => clone.onPageSelectionChanged, (_l = clone.logging) === null || _l === undefined ? undefined : _l.logger), onSelectedLayoutPropertiesChanged: new EngineEvent(() => clone.onSelectedLayoutPropertiesChanged, (_m = clone.logging) === null || _m === undefined ? undefined : _m.logger), onSelectedLayoutUnitChanged: new EngineEvent(() => clone.onSelectedLayoutUnitChanged, (_o = clone.logging) === null || _o === undefined ? undefined : _o.logger), onScrubberPositionChanged: new EngineEvent(() => clone.onScrubberPositionChanged, (_p = clone.logging) === null || _p === undefined ? undefined : _p.logger), onFrameAnimationsChanged: new EngineEvent(() => clone.onFrameAnimationsChanged, (_q = clone.logging) === null || _q === undefined ? undefined : _q.logger), onVariableListChanged: new EngineEvent(() => clone.onVariableListChanged, (_r = clone.logging) === null || _r === undefined ? undefined : _r.logger), onSelectedToolChanged: new EngineEvent(() => clone.onSelectedToolChanged, (_s = clone.logging) === null || _s === undefined ? undefined : _s.logger), onUndoStackStateChanged: new EngineEvent(() => clone.onUndoStackStateChanged, (_t = clone.logging) === null || _t === undefined ? undefined : _t.logger), onSelectedLayoutFramesChanged: new EngineEvent(() => clone.onSelectedLayoutFramesChanged, (_u = clone.logging) === null || _u === undefined ? undefined : _u.logger), onSelectedTextStyleChanged: new EngineEvent(() => clone.onSelectedTextStyleChanged, (_v = clone.logging) === null || _v === undefined ? undefined : _v.logger), onColorsChanged: new EngineEvent(() => clone.onColorsChanged, (_w = clone.logging) === null || _w === undefined ? undefined : _w.logger), onParagraphStylesChanged: new EngineEvent(() => clone.onParagraphStylesChanged, (_x = clone.logging) === null || _x === undefined ? undefined : _x.logger), onCharacterStylesChanged: new EngineEvent(() => clone.onCharacterStylesChanged, (_y = clone.logging) === null || _y === undefined ? undefined : _y.logger), onFontFamiliesChanged: new EngineEvent(() => clone.onFontFamiliesChanged, (_z = clone.logging) === null || _z === undefined ? undefined : _z.logger), onSelectedLayoutIdChanged: new EngineEvent(() => clone.onSelectedLayoutIdChanged, (_0 = clone.logging) === null || _0 === undefined ? undefined : _0.logger), onLayoutsChanged: new EngineEvent(() => clone.onLayoutsChanged, (_1 = clone.logging) === null || _1 === undefined ? undefined : _1.logger), onConnectorEvent: new EngineEvent(() => clone.onConnectorEvent, (_2 = clone.logging) === null || _2 === undefined ? undefined : _2.logger), onConnectorsChanged: new EngineEvent(() => clone.onConnectorsChanged, (_3 = clone.logging) === null || _3 === undefined ? undefined : _3.logger), onZoomChanged: new EngineEvent(() => clone.onZoomChanged, (_4 = clone.logging) === null || _4 === undefined ? undefined : _4.logger), onSelectedPageIdChanged: new EngineEvent(() => clone.onSelectedPageIdChanged, clone.logging.logger), onPagesChanged: new EngineEvent(() => clone.onPagesChanged, clone.logging.logger), onPageSnapshotInvalidated: new EngineEvent(() => clone.onPageSnapshotInvalidated, clone.logging.logger), onPageSizeChanged: new EngineEvent(() => clone.onPageSizeChanged, (_5 = clone.logging) === null || _5 === undefined ? undefined : _5.logger), onShapeCornerRadiusChanged: new EngineEvent(() => clone.onShapeCornerRadiusChanged, (_6 = clone.logging) === null || _6 === undefined ? undefined : _6.logger), onCropActiveFrameIdChanged: new EngineEvent(() => clone.onCropActiveFrameIdChanged, (_7 = clone.logging) === null || _7 === undefined ? undefined : _7.logger), onAsyncError: new EngineEvent(() => clone.onAsyncError, (_8 = clone.logging) === null || _8 === undefined ? undefined : _8.logger), onViewModeChanged: new EngineEvent(() => clone.onViewModeChanged, (_9 = clone.logging) === null || _9 === undefined ? undefined : _9.logger), onBarcodeValidationChanged: new EngineEvent(() => clone.onBarcodeValidationChanged, (_10 = clone.logging) === null || _10 === undefined ? undefined : _10.logger), onDataSourceIdChanged: new EngineEvent(() => clone.onDataSourceIdChanged, clone.logging.logger), onDocumentIssueListChanged: new EngineEvent(() => clone.onDocumentIssueListChanged, clone.logging.logger), onCustomUndoDataChanged: new EngineEvent(() => clone.onCustomUndoDataChanged, clone.logging.logger), onEngineEditModeChanged: new EngineEvent(() => clone.onEngineEditModeChanged, clone.logging.logger) }, clone;
      }
      static isLoggingEnabled(level, logLevel) {
        return logLevel == LogLevel.info || (logLevel == LogLevel.warn && (level == LogLevel.warn || level == LogLevel.error) || logLevel == LogLevel.error && level == LogLevel.error);
      }
    }

    class DataItemMappingTools {
      isDatePropertyWrapper(value) {
        return typeof value == "object" && (value == null ? undefined : value.type) === "date";
      }
      isDateObject(value) {
        return value instanceof Date;
      }
      mapEngineToDataItem(dataItem) {
        const parsedItem = {};
        return Object.entries(dataItem).forEach(([key, value]) => {
          parsedItem[key] = this.isDatePropertyWrapper(value) ? new Date(value.value) : value;
        }), parsedItem;
      }
      mapDataItemToEngine(dataItem) {
        const parsedItem = {};
        return Object.entries(dataItem).forEach(([key, value]) => {
          parsedItem[key] = this.isDateObject(value) ? { value: value.getTime(), type: "date" } : value;
        }), parsedItem;
      }
    }
    var _ConfigurationController_editorAPI, ConfigurationController_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, ConfigurationController_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, ConfigurationController_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    _ConfigurationController_editorAPI = new WeakMap;
    var _LocalConfigurationDecorator_localConfig, LocalConfigurationDecorator_awaiter = function(thisArg, _arguments, P, generator) {
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          var value;
          result.done ? resolve(result.value) : (value = result.value, value instanceof P ? value : new P(function(resolve2) {
            resolve2(value);
          })).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    }, LocalConfigurationDecorator_classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    }, LocalConfigurationDecorator_classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state == "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };

    class LocalConfigurationDecorator extends class {
      constructor(editorAPI) {
        _ConfigurationController_editorAPI.set(this, undefined), ConfigurationController_classPrivateFieldSet(this, _ConfigurationController_editorAPI, editorAPI, "f");
      }
      getValue(key) {
        return ConfigurationController_awaiter(this, undefined, undefined, function* () {
          return (yield ConfigurationController_classPrivateFieldGet(this, _ConfigurationController_editorAPI, "f")).getConfigValue(key).then((result) => getEditorResponseData(result));
        });
      }
      setValue(key, value) {
        return ConfigurationController_awaiter(this, undefined, undefined, function* () {
          return (yield ConfigurationController_classPrivateFieldGet(this, _ConfigurationController_editorAPI, "f")).setConfigValue(key, value).then((result) => getEditorResponseData(result));
        });
      }
      updateStudioOptions(options) {
        return ConfigurationController_awaiter(this, undefined, undefined, function* () {
          return (yield ConfigurationController_classPrivateFieldGet(this, _ConfigurationController_editorAPI, "f")).updateStudioOptions(JSON.stringify(options)).then((result) => getEditorResponseData(result));
        });
      }
      getEngineSessionId() {
        return ConfigurationController_awaiter(this, undefined, undefined, function* () {
          return (yield ConfigurationController_classPrivateFieldGet(this, _ConfigurationController_editorAPI, "f")).getEngineSessionId().then((result) => getEditorResponseData(result));
        });
      }
    } {
      constructor(editorAPI, localConfig) {
        super(editorAPI), _LocalConfigurationDecorator_localConfig.set(this, undefined), LocalConfigurationDecorator_classPrivateFieldSet(this, _LocalConfigurationDecorator_localConfig, localConfig, "f");
      }
      getValue(key) {
        const _super = Object.create(null, { getValue: { get: () => super.getValue } });
        return LocalConfigurationDecorator_awaiter(this, undefined, undefined, function* () {
          const value = LocalConfigurationDecorator_classPrivateFieldGet(this, _LocalConfigurationDecorator_localConfig, "f").get(key);
          return value != null ? getEditorResponseData({ status: 200, success: true, parsedData: value, data: value }, false) : _super.getValue.call(this, key);
        });
      }
      setValue(key, value) {
        const _super = Object.create(null, { setValue: { get: () => super.setValue } });
        return LocalConfigurationDecorator_awaiter(this, undefined, undefined, function* () {
          const res = _super.setValue.call(this, key, value);
          return LocalConfigurationDecorator_classPrivateFieldGet(this, _LocalConfigurationDecorator_localConfig, "f").set(key, value), res;
        });
      }
    }
    let connection;
    _LocalConfigurationDecorator_localConfig = new WeakMap;
    const FIXED_EDITOR_LINK = "https://studio-cdn.chiligrafx.com/editor/" + editor_engine_namespaceObject_V + "/web";

    class SDK {
      constructor(config) {
        this.localConfig = new Map, this.dataItemMappingTools = new DataItemMappingTools, this.loadEditor = () => {
          Connector(this.config.editorLink || FIXED_EDITOR_LINK, { onActionsChanged: this.subscriber.onActionsChanged, onStateChanged: this.subscriber.onStateChanged, onAuthExpired: this.subscriber.onAuthExpired, onViewportRequested: this.subscriber.onViewportRequested, onDocumentLoaded: this.subscriber.onDocumentLoaded, onSelectedFramesContentChanged: this.subscriber.onSelectedFramesContentChanged, onSelectedFramesLayoutChanged: this.subscriber.onSelectedFramesLayoutChanged, onFramesLayoutChanged: this.subscriber.onFramesLayoutChanged, onSelectedLayoutPropertiesChanged: this.subscriber.onSelectedLayoutPropertiesChanged, onSelectedLayoutUnitChanged: this.subscriber.onSelectedLayoutUnitChanged, onPageSelectionChanged: this.subscriber.onPageSelectionChanged, onScrubberPositionChanged: this.subscriber.onAnimationPlaybackChanged, onFrameAnimationsChanged: this.subscriber.onAnimationChanged, onVariableListChanged: (state) => {
            var _a;
            ((_a = this.enabledNextSubscribers) === null || _a === undefined ? undefined : _a.onVariableListChanged) ? this.next.subscriber.onVariableListChanged(state) : this.subscriber.onVariableListChanged(state);
          }, onSelectedToolChanged: this.subscriber.onSelectedToolChanged, onUndoStateChanged: this.subscriber.onUndoStateChanged, onSelectedLayoutFramesChanged: this.subscriber.onSelectedLayoutFramesChanged, onSelectedTextStyleChanged: this.subscriber.onSelectedTextStyleChanged, onColorsChanged: this.subscriber.onColorsChanged, onParagraphStylesChanged: this.subscriber.onParagraphStylesChanged, onCharacterStylesChanged: this.subscriber.onCharacterStylesChanged, onFontFamiliesChanged: this.subscriber.onFontFamiliesChanged, onSelectedLayoutIdChanged: this.subscriber.onSelectedLayoutIdChanged, onLayoutsChanged: this.subscriber.onLayoutsChanged, onConnectorEvent: this.subscriber.onConnectorEvent, onConnectorsChanged: (state) => {
            var _a;
            ((_a = this.enabledNextSubscribers) === null || _a === undefined ? undefined : _a.onConnectorsChanged) ? this.next.subscriber.onConnectorsChanged(state) : this.subscriber.onConnectorsChanged(state);
          }, onZoomChanged: this.subscriber.onZoomChanged, onSelectedPageIdChanged: this.subscriber.onSelectedPageIdChanged, onPagesChanged: this.subscriber.onPagesChanged, onPageSnapshotInvalidated: this.subscriber.onPageSnapshotInvalidated, onPageSizeChanged: (state) => {
            var _a;
            ((_a = this.enabledNextSubscribers) === null || _a === undefined ? undefined : _a.onPageSizeChanged) ? this.next.subscriber.onPageSizeChanged(state) : this.subscriber.onPageSizeChanged(state);
          }, onShapeCornerRadiusChanged: this.subscriber.onShapeCornerRadiusChanged, onCropActiveFrameIdChanged: this.subscriber.onCropActiveFrameIdChanged, onAsyncError: this.subscriber.onAsyncError, onViewModeChanged: this.subscriber.onViewModeChanged, onBarcodeValidationChanged: this.subscriber.onBarcodeValidationChanged, onDataSourceIdChanged: this.subscriber.onDataSourceIdChanged, onDocumentIssueListChanged: this.subscriber.onDocumentIssueListChanged, onCustomUndoDataChanged: this.subscriber.onCustomUndoDataChanged, onEngineEditModeChanged: this.subscriber.onEngineEditModeChanged }, this.setConnection, this.config.editorId, this.config.studioStyling), this.editorAPI = connection == null ? undefined : connection.promise.then((editorAPI) => editorAPI), this.action = new ActionController(this.editorAPI), this.layout = new LayoutController(this.editorAPI), this.frame = new FrameController(this.editorAPI), this.barcode = new BarcodeController(this.editorAPI), this.animation = new AnimationController(this.editorAPI), this.document = new DocumentController(this.editorAPI), this.configuration = new LocalConfigurationDecorator(this.editorAPI, this.localConfig), this.utils = new UtilsController, this.tool = new ToolController(this.editorAPI), this.page = new PageController(this.editorAPI), this.debug = new DebugController(this.editorAPI), this.undoManager = new UndoManagerController(this.editorAPI, this), this.textSelection = new TextStyleController(this.editorAPI), this.colorStyle = new ColorStyleController(this.editorAPI), this.paragraphStyle = new ParagraphStyleController(this.editorAPI), this.characterStyle = new CharacterStyleController(this.editorAPI), this.mediaConnector = new MediaConnectorController(this.editorAPI), this.fontConnector = new FontConnectorController(this.editorAPI), this.dataConnector = new DataConnectorController(this.editorAPI, this.dataItemMappingTools), this.dataSource = new DataSourceController(this.editorAPI, this.dataItemMappingTools), this.connector = new ConnectorController(this.editorAPI, this.localConfig), this.variable = new VariableController(this.editorAPI), this.font = new FontController(this.editorAPI), this.experiment = new ExperimentController(this.editorAPI), this.canvas = new CanvasController(this.editorAPI), this.shape = new ShapeController(this.editorAPI), this.info = new InfoController, this.clipboard = new ClipboardController(this.editorAPI), this.next = new NextInitiator(this.config, this.connection, this.editorAPI), this.configuration.setValue(WellKnownConfigurationKeys.GraFxStudioSdkVersion, package_namespaceObject_i8), this.configuration.setValue(WellKnownConfigurationKeys.GraFxStudioDocumentType, this.config.documentType || DocumentType.template), this.configuration.updateStudioOptions(this.config.studioOptions || defaultStudioOptions);
        }, this.setConnection = (newConnection) => {
          connection = newConnection;
        }, this.config = ConfigHelper.createRuntimeConfig(config), this.connection = connection, this.editorAPI = connection == null ? undefined : connection.promise.then((child) => child), this.action = new ActionController(this.editorAPI), this.layout = new LayoutController(this.editorAPI), this.frame = new FrameController(this.editorAPI), this.shape = new ShapeController(this.editorAPI), this.barcode = new BarcodeController(this.editorAPI), this.undoManager = new UndoManagerController(this.editorAPI, this), this.connector = new ConnectorController(this.editorAPI, this.localConfig), this.mediaConnector = new MediaConnectorController(this.editorAPI), this.fontConnector = new FontConnectorController(this.editorAPI), this.dataConnector = new DataConnectorController(this.editorAPI, this.dataItemMappingTools), this.dataSource = new DataSourceController(this.editorAPI, this.dataItemMappingTools), this.animation = new AnimationController(this.editorAPI), this.document = new DocumentController(this.editorAPI), this.configuration = new LocalConfigurationDecorator(this.editorAPI, this.localConfig), this.variable = new VariableController(this.editorAPI), this.utils = new UtilsController, this.subscriber = new SubscriberController(this.config, this.localConfig), this.tool = new ToolController(this.editorAPI), this.page = new PageController(this.editorAPI), this.debug = new DebugController(this.editorAPI), this.textSelection = new TextStyleController(this.editorAPI), this.colorStyle = new ColorStyleController(this.editorAPI), this.paragraphStyle = new ParagraphStyleController(this.editorAPI), this.characterStyle = new CharacterStyleController(this.editorAPI), this.font = new FontController(this.editorAPI), this.experiment = new ExperimentController(this.editorAPI), this.canvas = new CanvasController(this.editorAPI), this.colorConversion = new ColorConversionController(this.editorAPI), this.info = new InfoController, this.clipboard = new ClipboardController(this.editorAPI), this.next = new NextInitiator(this.config, this.connection, this.editorAPI), this.enabledNextSubscribers = this.config.enableNextSubscribers;
      }
    }
    var SlideDirections, ShakeDirections, EaseTypes, TweenTypes, BasicAnimationsEmphasisStyles, ViewMode, FontPreviewFormat, FontWeights, Alignment, TextPosition, Case, Scripting, HorizontalAlign, SelectedTextStyleSections, SelectedTextStyles, ActionEditorEvent, ShapeType, CornerRadiusType, EngineEditModeType;
    (function(SlideDirections2) {
      SlideDirections2.top = "top", SlideDirections2.left = "left", SlideDirections2.right = "right", SlideDirections2.bottom = "bottom", SlideDirections2.topLeft = "topLeft", SlideDirections2.topRight = "topRight", SlideDirections2.bottomLeft = "bottomLeft", SlideDirections2.bottomRight = "bottomRight";
    })(SlideDirections || (SlideDirections = {})), function(ShakeDirections2) {
      ShakeDirections2.horizontal = "horizontal", ShakeDirections2.vertical = "vertical";
    }(ShakeDirections || (ShakeDirections = {})), function(EaseTypes2) {
      EaseTypes2.easeIn = "easeIn", EaseTypes2.easeOut = "easeOut", EaseTypes2.easeInOut = "easeInOut";
    }(EaseTypes || (EaseTypes = {})), function(TweenTypes2) {
      TweenTypes2.quadratic = "Quadratic", TweenTypes2.cubic = "Cubic", TweenTypes2.quartic = "Quartic", TweenTypes2.quintic = "Quintic", TweenTypes2.sine = "Sine", TweenTypes2.exponential = "Exponential", TweenTypes2.circular = "Circular", TweenTypes2.elastic = "Elastic", TweenTypes2.bounce = "Bounce", TweenTypes2.back = "Back";
    }(TweenTypes || (TweenTypes = {})), function(BasicAnimationsEmphasisStyles2) {
      BasicAnimationsEmphasisStyles2.bounce = "bounce", BasicAnimationsEmphasisStyles2.flash = "flash", BasicAnimationsEmphasisStyles2.headshake = "headShake", BasicAnimationsEmphasisStyles2.heartbeat = "heartbeat", BasicAnimationsEmphasisStyles2.pulse = "pulse", BasicAnimationsEmphasisStyles2.rubberBand = "rubberBand", BasicAnimationsEmphasisStyles2.vertical = "vertical", BasicAnimationsEmphasisStyles2.horizontal = "horizontal", BasicAnimationsEmphasisStyles2.swing = "swing", BasicAnimationsEmphasisStyles2.tada = "tada";
    }(BasicAnimationsEmphasisStyles || (BasicAnimationsEmphasisStyles = {})), function(ViewMode2) {
      ViewMode2.preview = "preview", ViewMode2.normal = "normal";
    }(ViewMode || (ViewMode = {})), function(FontPreviewFormat2) {
      FontPreviewFormat2.Square = "square", FontPreviewFormat2.Line = "line";
    }(FontPreviewFormat || (FontPreviewFormat = {})), function(FontWeights2) {
      FontWeights2.BOLD = "Bold", FontWeights2.ITALIC = "Italic", FontWeights2.REGULAR = "Regular";
    }(FontWeights || (FontWeights = {})), function(Alignment2) {
      Alignment2.LEFT = "left", Alignment2.CENTER = "center", Alignment2.RIGHT = "right", Alignment2.JUSTIFY = "justify";
    }(Alignment || (Alignment = {})), function(TextPosition2) {
      TextPosition2.TOP = "top", TextPosition2.CENTER = "center", TextPosition2.BOTTOM = "bottom";
    }(TextPosition || (TextPosition = {})), function(Case2) {
      Case2.TO_LOWER_CASE = "lowercase", Case2.TO_UPPER_CASE = "uppercase", Case2.NORMAL = "normal";
    }(Case || (Case = {})), function(Scripting2) {
      Scripting2.SUPERSCRIPT = "superscript", Scripting2.SUBSCRIPT = "subscript", Scripting2.NORMAL = "normal";
    }(Scripting || (Scripting = {})), function(HorizontalAlign2) {
      HorizontalAlign2.left = "left", HorizontalAlign2.center = "center", HorizontalAlign2.right = "right", HorizontalAlign2.justify = "justify";
    }(HorizontalAlign || (HorizontalAlign = {})), function(SelectedTextStyleSections2) {
      SelectedTextStyleSections2.STYLE = "textStyle", SelectedTextStyleSections2.PROPERTIES = "textProperties", SelectedTextStyleSections2.APPEARANCE = "appearance";
    }(SelectedTextStyleSections || (SelectedTextStyleSections = {})), function(SelectedTextStyles2) {
      SelectedTextStyles2.PARAGRAPH = "paragraphStyleId", SelectedTextStyles2.CHARACTER = "characterStyleId", SelectedTextStyles2.FONT_FAMILY = "fontKey", SelectedTextStyles2.FONT_STYLE = "fontStyle", SelectedTextStyles2.FONT_SIZE = "fontSize", SelectedTextStyles2.LETTER_SPACING = "letterSpacing", SelectedTextStyles2.LINE_HEIGHT = "lineHeight", SelectedTextStyles2.TEXT_ALIGN = "textAlign", SelectedTextStyles2.VERTICAL_ALIGN = "verticalAlign", SelectedTextStyles2.TYPOGRAPHIC_CASE = "typographicCase", SelectedTextStyles2.SUB_SUPER_SCRIPT = "subSuperScript", SelectedTextStyles2.UNDERLINE = "underline", SelectedTextStyles2.LINE_THROUGH = "lineThrough", SelectedTextStyles2.FILL_COLOR = "fillColor", SelectedTextStyles2.COLOR = "color", SelectedTextStyles2.FILL_COLOR_APPLIED = "fillColorApplied", SelectedTextStyles2.STROKE_COLOR = "strokeColor", SelectedTextStyles2.DROP_SHADOW_COLOR = "dropShadowColor", SelectedTextStyles2.BLEND_MODE = "blendMode", SelectedTextStyles2.OPACITY = "opacity", SelectedTextStyles2.TRACKING_RIGHT = "trackingRight", SelectedTextStyles2.BASELINE_SHIFT = "baselineShiftValue";
    }(SelectedTextStyles || (SelectedTextStyles = {})), function(ActionEditorEvent2) {
      ActionEditorEvent2.selectedLayoutChanged = "selectedLayoutChanged", ActionEditorEvent2.frameMoved = "frameMoved", ActionEditorEvent2.pageSizeChanged = "pageSizeChanged", ActionEditorEvent2.documentLoaded = "documentLoaded", ActionEditorEvent2.variableValueChanged = "variableValueChanged";
    }(ActionEditorEvent || (ActionEditorEvent = {})), function(ShapeType2) {
      ShapeType2.ellipse = "ellipse", ShapeType2.rectangle = "rectangle", ShapeType2.polygon = "polygon";
    }(ShapeType || (ShapeType = {})), function(CornerRadiusType2) {
      CornerRadiusType2.all = "all", CornerRadiusType2.only = "only", CornerRadiusType2.none = "none";
    }(CornerRadiusType || (CornerRadiusType = {})), function(EngineEditModeType2) {
      EngineEditModeType2.normal = "normal", EngineEditModeType2.textEdit = "textEdit", EngineEditModeType2.customCrop = "customCrop", EngineEditModeType2.frameSubjectArea = "frameSubjectArea";
    }(EngineEditModeType || (EngineEditModeType = {}));
    const src = SDK;
    return __webpack_exports__;
  })());
});

// node_modules/shallowequal/index.js
var require_shallowequal = __commonJS((exports, module) => {
  module.exports = function shallowEqual(objA, objB, compare2, compareContext) {
    var ret = compare2 ? compare2.call(compareContext, objA, objB) : undefined;
    if (ret !== undefined) {
      return !!ret;
    }
    if (objA === objB) {
      return true;
    }
    if (typeof objA !== "object" || !objA || typeof objB !== "object" || !objB) {
      return false;
    }
    var keysA = Object.keys(objA);
    var keysB = Object.keys(objB);
    if (keysA.length !== keysB.length) {
      return false;
    }
    var bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB);
    for (var idx = 0;idx < keysA.length; idx++) {
      var key = keysA[idx];
      if (!bHasOwnProperty(key)) {
        return false;
      }
      var valueA = objA[key];
      var valueB = objB[key];
      ret = compare2 ? compare2.call(compareContext, valueA, valueB, key) : undefined;
      if (ret === false || ret === undefined && valueA !== valueB) {
        return false;
      }
    }
    return true;
  };
});

// node_modules/react/cjs/react-jsx-runtime.production.js
var exports_react_jsx_runtime_production = {};
__export(exports_react_jsx_runtime_production, {
  jsxs: () => $jsxs,
  jsx: () => $jsx,
  Fragment: () => $Fragment2
});
function jsxProd(type, config, maybeKey) {
  var key = null;
  maybeKey !== undefined && (key = "" + maybeKey);
  config.key !== undefined && (key = "" + config.key);
  if ("key" in config) {
    maybeKey = {};
    for (var propName in config)
      propName !== "key" && (maybeKey[propName] = config[propName]);
  } else
    maybeKey = config;
  config = maybeKey.ref;
  return {
    $$typeof: REACT_ELEMENT_TYPE3,
    type,
    key,
    ref: config !== undefined ? config : null,
    props: maybeKey
  };
}
var REACT_ELEMENT_TYPE3, REACT_FRAGMENT_TYPE3, $Fragment2, $jsx, $jsxs;
var init_react_jsx_runtime_production = __esm(() => {
  REACT_ELEMENT_TYPE3 = Symbol.for("react.transitional.element");
  REACT_FRAGMENT_TYPE3 = Symbol.for("react.fragment");
  $Fragment2 = REACT_FRAGMENT_TYPE3;
  $jsx = jsxProd;
  $jsxs = jsxProd;
});

// node_modules/react/jsx-runtime.js
var require_jsx_runtime = __commonJS((exports, module) => {
  init_react_jsx_runtime_production();
  if (true) {
    module.exports = exports_react_jsx_runtime_production;
  } else {
  }
});

// node_modules/@tabler/icons-react/dist/esm/defaultAttributes.mjs
var defaultAttributes;
var init_defaultAttributes = __esm(() => {
  defaultAttributes = {
    outline: {
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    },
    filled: {
      xmlns: "http://www.w3.org/2000/svg",
      width: 24,
      height: 24,
      viewBox: "0 0 24 24",
      fill: "currentColor",
      stroke: "none"
    }
  };
});

// node_modules/@tabler/icons-react/dist/esm/createReactComponent.mjs
var import_react235, createReactComponent = (type, iconName, iconNamePascal, iconNode) => {
  const Component2 = import_react235.forwardRef(({ color = "currentColor", size: size4 = 24, stroke = 2, title, className, children, ...rest }, ref) => import_react235.createElement("svg", {
    ref,
    ...defaultAttributes[type],
    width: size4,
    height: size4,
    className: [`tabler-icon`, `tabler-icon-${iconName}`, className].join(" "),
    ...type === "filled" ? {
      fill: color
    } : {
      strokeWidth: stroke,
      stroke: color
    },
    ...rest
  }, [
    title && import_react235.createElement("title", { key: "svg-title" }, title),
    ...iconNode.map(([tag, attrs]) => import_react235.createElement(tag, attrs)),
    ...Array.isArray(children) ? children : [children]
  ]));
  Component2.displayName = `${iconNamePascal}`;
  return Component2;
};
var init_createReactComponent = __esm(() => {
  import_react235 = __toESM(require_react(), 1);
  init_defaultAttributes();
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconAbc.mjs
var IconAbc;
var init_IconAbc = __esm(() => {
  init_createReactComponent();
  IconAbc = createReactComponent("outline", "abc", "IconAbc", [["path", { d: "M3 16v-6a2 2 0 1 1 4 0v6", key: "svg-0" }], ["path", { d: "M3 13h4", key: "svg-1" }], ["path", { d: "M10 8v6a2 2 0 1 0 4 0v-1a2 2 0 1 0 -4 0v1", key: "svg-2" }], ["path", { d: "M20.732 12a2 2 0 0 0 -3.732 1v1a2 2 0 0 0 3.726 1.01", key: "svg-3" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconAlertCircle.mjs
var IconAlertCircle;
var init_IconAlertCircle = __esm(() => {
  init_createReactComponent();
  IconAlertCircle = createReactComponent("outline", "alert-circle", "IconAlertCircle", [["path", { d: "M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0", key: "svg-0" }], ["path", { d: "M12 8v4", key: "svg-1" }], ["path", { d: "M12 16h.01", key: "svg-2" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconArrowsTransferUpDown.mjs
var IconArrowsTransferUpDown;
var init_IconArrowsTransferUpDown = __esm(() => {
  init_createReactComponent();
  IconArrowsTransferUpDown = createReactComponent("outline", "arrows-transfer-up-down", "IconArrowsTransferUpDown", [["path", { d: "M7 21v-6", key: "svg-0" }], ["path", { d: "M20 6l-3 -3l-3 3", key: "svg-1" }], ["path", { d: "M10 18l-3 3l-3 -3", key: "svg-2" }], ["path", { d: "M7 3v2", key: "svg-3" }], ["path", { d: "M7 9v2", key: "svg-4" }], ["path", { d: "M17 3v6", key: "svg-5" }], ["path", { d: "M17 21v-2", key: "svg-6" }], ["path", { d: "M17 15v-2", key: "svg-7" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconBug.mjs
var IconBug;
var init_IconBug = __esm(() => {
  init_createReactComponent();
  IconBug = createReactComponent("outline", "bug", "IconBug", [["path", { d: "M9 9v-1a3 3 0 0 1 6 0v1", key: "svg-0" }], ["path", { d: "M8 9h8a6 6 0 0 1 1 3v3a5 5 0 0 1 -10 0v-3a6 6 0 0 1 1 -3", key: "svg-1" }], ["path", { d: "M3 13l4 0", key: "svg-2" }], ["path", { d: "M17 13l4 0", key: "svg-3" }], ["path", { d: "M12 20l0 -6", key: "svg-4" }], ["path", { d: "M4 19l3.35 -2", key: "svg-5" }], ["path", { d: "M20 19l-3.35 -2", key: "svg-6" }], ["path", { d: "M4 7l3.75 2.4", key: "svg-7" }], ["path", { d: "M20 7l-3.75 2.4", key: "svg-8" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconCameraPlus.mjs
var IconCameraPlus;
var init_IconCameraPlus = __esm(() => {
  init_createReactComponent();
  IconCameraPlus = createReactComponent("outline", "camera-plus", "IconCameraPlus", [["path", { d: "M12 20h-7a2 2 0 0 1 -2 -2v-9a2 2 0 0 1 2 -2h1a2 2 0 0 0 2 -2a1 1 0 0 1 1 -1h6a1 1 0 0 1 1 1a2 2 0 0 0 2 2h1a2 2 0 0 1 2 2v3.5", key: "svg-0" }], ["path", { d: "M16 19h6", key: "svg-1" }], ["path", { d: "M19 16v6", key: "svg-2" }], ["path", { d: "M9 13a3 3 0 1 0 6 0a3 3 0 0 0 -6 0", key: "svg-3" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconChevronDown.mjs
var IconChevronDown;
var init_IconChevronDown = __esm(() => {
  init_createReactComponent();
  IconChevronDown = createReactComponent("outline", "chevron-down", "IconChevronDown", [["path", { d: "M6 9l6 6l6 -6", key: "svg-0" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconCopyPlus.mjs
var IconCopyPlus;
var init_IconCopyPlus = __esm(() => {
  init_createReactComponent();
  IconCopyPlus = createReactComponent("outline", "copy-plus", "IconCopyPlus", [["path", { d: "M7 9.667a2.667 2.667 0 0 1 2.667 -2.667h8.666a2.667 2.667 0 0 1 2.667 2.667v8.666a2.667 2.667 0 0 1 -2.667 2.667h-8.666a2.667 2.667 0 0 1 -2.667 -2.667z", key: "svg-1" }], ["path", { d: "M4.012 16.737a2 2 0 0 1 -1.012 -1.737v-10c0 -1.1 .9 -2 2 -2h10c.75 0 1.158 .385 1.5 1", key: "svg-2" }], ["path", { d: "M11 14h6", key: "svg-3" }], ["path", { d: "M14 11v6", key: "svg-4" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconCopy.mjs
var IconCopy;
var init_IconCopy = __esm(() => {
  init_createReactComponent();
  IconCopy = createReactComponent("outline", "copy", "IconCopy", [["path", { d: "M7 7m0 2.667a2.667 2.667 0 0 1 2.667 -2.667h8.666a2.667 2.667 0 0 1 2.667 2.667v8.666a2.667 2.667 0 0 1 -2.667 2.667h-8.666a2.667 2.667 0 0 1 -2.667 -2.667z", key: "svg-0" }], ["path", { d: "M4.012 16.737a2.005 2.005 0 0 1 -1.012 -1.737v-10c0 -1.1 .9 -2 2 -2h10c.75 0 1.158 .385 1.5 1", key: "svg-1" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconDeselect.mjs
var IconDeselect;
var init_IconDeselect = __esm(() => {
  init_createReactComponent();
  IconDeselect = createReactComponent("outline", "deselect", "IconDeselect", [["path", { d: "M12 8h3a1 1 0 0 1 1 1v3", key: "svg-0" }], ["path", { d: "M16 16h-7a1 1 0 0 1 -1 -1v-7", key: "svg-1" }], ["path", { d: "M12 20v.01", key: "svg-2" }], ["path", { d: "M16 20v.01", key: "svg-3" }], ["path", { d: "M8 20v.01", key: "svg-4" }], ["path", { d: "M4 20v.01", key: "svg-5" }], ["path", { d: "M4 16v.01", key: "svg-6" }], ["path", { d: "M4 12v.01", key: "svg-7" }], ["path", { d: "M4 8v.01", key: "svg-8" }], ["path", { d: "M8 4v.01", key: "svg-9" }], ["path", { d: "M12 4v.01", key: "svg-10" }], ["path", { d: "M16 4v.01", key: "svg-11" }], ["path", { d: "M20 4v.01", key: "svg-12" }], ["path", { d: "M20 8v.01", key: "svg-13" }], ["path", { d: "M20 12v.01", key: "svg-14" }], ["path", { d: "M20 16v.01", key: "svg-15" }], ["path", { d: "M3 3l18 18", key: "svg-16" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconDownload.mjs
var IconDownload;
var init_IconDownload = __esm(() => {
  init_createReactComponent();
  IconDownload = createReactComponent("outline", "download", "IconDownload", [["path", { d: "M4 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2v-2", key: "svg-0" }], ["path", { d: "M7 11l5 5l5 -5", key: "svg-1" }], ["path", { d: "M12 4l0 12", key: "svg-2" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconExternalLink.mjs
var IconExternalLink;
var init_IconExternalLink = __esm(() => {
  init_createReactComponent();
  IconExternalLink = createReactComponent("outline", "external-link", "IconExternalLink", [["path", { d: "M12 6h-6a2 2 0 0 0 -2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-6", key: "svg-0" }], ["path", { d: "M11 13l9 -9", key: "svg-1" }], ["path", { d: "M15 4h5v5", key: "svg-2" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconGripVertical.mjs
var IconGripVertical;
var init_IconGripVertical = __esm(() => {
  init_createReactComponent();
  IconGripVertical = createReactComponent("outline", "grip-vertical", "IconGripVertical", [["path", { d: "M9 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0", key: "svg-0" }], ["path", { d: "M9 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0", key: "svg-1" }], ["path", { d: "M9 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0", key: "svg-2" }], ["path", { d: "M15 5m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0", key: "svg-3" }], ["path", { d: "M15 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0", key: "svg-4" }], ["path", { d: "M15 19m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0", key: "svg-5" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconInfoCircle.mjs
var IconInfoCircle;
var init_IconInfoCircle = __esm(() => {
  init_createReactComponent();
  IconInfoCircle = createReactComponent("outline", "info-circle", "IconInfoCircle", [["path", { d: "M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0", key: "svg-0" }], ["path", { d: "M12 9h.01", key: "svg-1" }], ["path", { d: "M11 12h1v4h1", key: "svg-2" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconList.mjs
var IconList;
var init_IconList = __esm(() => {
  init_createReactComponent();
  IconList = createReactComponent("outline", "list", "IconList", [["path", { d: "M9 6l11 0", key: "svg-0" }], ["path", { d: "M9 12l11 0", key: "svg-1" }], ["path", { d: "M9 18l11 0", key: "svg-2" }], ["path", { d: "M5 6l0 .01", key: "svg-3" }], ["path", { d: "M5 12l0 .01", key: "svg-4" }], ["path", { d: "M5 18l0 .01", key: "svg-5" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconMapBolt.mjs
var IconMapBolt;
var init_IconMapBolt = __esm(() => {
  init_createReactComponent();
  IconMapBolt = createReactComponent("outline", "map-bolt", "IconMapBolt", [["path", { d: "M13 19l-4 -2l-6 3v-13l6 -3l6 3l6 -3v8.5", key: "svg-0" }], ["path", { d: "M9 4v13", key: "svg-1" }], ["path", { d: "M15 7v7.5", key: "svg-2" }], ["path", { d: "M19 16l-2 3h4l-2 3", key: "svg-3" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconPencil.mjs
var IconPencil;
var init_IconPencil = __esm(() => {
  init_createReactComponent();
  IconPencil = createReactComponent("outline", "pencil", "IconPencil", [["path", { d: "M4 20h4l10.5 -10.5a2.828 2.828 0 1 0 -4 -4l-10.5 10.5v4", key: "svg-0" }], ["path", { d: "M13.5 6.5l4 4", key: "svg-1" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconPhotoCog.mjs
var IconPhotoCog;
var init_IconPhotoCog = __esm(() => {
  init_createReactComponent();
  IconPhotoCog = createReactComponent("outline", "photo-cog", "IconPhotoCog", [["path", { d: "M15 8h.01", key: "svg-0" }], ["path", { d: "M12 21h-6a3 3 0 0 1 -3 -3v-12a3 3 0 0 1 3 -3h12a3 3 0 0 1 3 3v6", key: "svg-1" }], ["path", { d: "M3 16l5 -5c.928 -.893 2.072 -.893 3 0l3 3", key: "svg-2" }], ["path", { d: "M14 14l1 -1c.48 -.461 1.016 -.684 1.551 -.67", key: "svg-3" }], ["path", { d: "M19.001 19m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0", key: "svg-4" }], ["path", { d: "M19.001 15.5v1.5", key: "svg-5" }], ["path", { d: "M19.001 21v1.5", key: "svg-6" }], ["path", { d: "M22.032 17.25l-1.299 .75", key: "svg-7" }], ["path", { d: "M17.27 20l-1.3 .75", key: "svg-8" }], ["path", { d: "M15.97 17.25l1.3 .75", key: "svg-9" }], ["path", { d: "M20.733 20l1.3 .75", key: "svg-10" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconPlaystationSquare.mjs
var IconPlaystationSquare;
var init_IconPlaystationSquare = __esm(() => {
  init_createReactComponent();
  IconPlaystationSquare = createReactComponent("outline", "playstation-square", "IconPlaystationSquare", [["path", { d: "M12 21a9 9 0 0 0 9 -9a9 9 0 0 0 -9 -9a9 9 0 0 0 -9 9a9 9 0 0 0 9 9z", key: "svg-0" }], ["path", { d: "M8 8m0 1a1 1 0 0 1 1 -1h6a1 1 0 0 1 1 1v6a1 1 0 0 1 -1 1h-6a1 1 0 0 1 -1 -1z", key: "svg-1" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconPlus.mjs
var IconPlus;
var init_IconPlus = __esm(() => {
  init_createReactComponent();
  IconPlus = createReactComponent("outline", "plus", "IconPlus", [["path", { d: "M12 5l0 14", key: "svg-0" }], ["path", { d: "M5 12l14 0", key: "svg-1" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconReplace.mjs
var IconReplace;
var init_IconReplace = __esm(() => {
  init_createReactComponent();
  IconReplace = createReactComponent("outline", "replace", "IconReplace", [["path", { d: "M3 3m0 1a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v4a1 1 0 0 1 -1 1h-4a1 1 0 0 1 -1 -1z", key: "svg-0" }], ["path", { d: "M15 15m0 1a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v4a1 1 0 0 1 -1 1h-4a1 1 0 0 1 -1 -1z", key: "svg-1" }], ["path", { d: "M21 11v-3a2 2 0 0 0 -2 -2h-6l3 3m0 -6l-3 3", key: "svg-2" }], ["path", { d: "M3 13v3a2 2 0 0 0 2 2h6l-3 -3m0 6l3 -3", key: "svg-3" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconTrash.mjs
var IconTrash;
var init_IconTrash = __esm(() => {
  init_createReactComponent();
  IconTrash = createReactComponent("outline", "trash", "IconTrash", [["path", { d: "M4 7l16 0", key: "svg-0" }], ["path", { d: "M10 11l0 6", key: "svg-1" }], ["path", { d: "M14 11l0 6", key: "svg-2" }], ["path", { d: "M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12", key: "svg-3" }], ["path", { d: "M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3", key: "svg-4" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconUpload.mjs
var IconUpload;
var init_IconUpload = __esm(() => {
  init_createReactComponent();
  IconUpload = createReactComponent("outline", "upload", "IconUpload", [["path", { d: "M4 17v2a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2v-2", key: "svg-0" }], ["path", { d: "M7 9l5 -5l5 5", key: "svg-1" }], ["path", { d: "M12 4l0 12", key: "svg-2" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconWand.mjs
var IconWand;
var init_IconWand = __esm(() => {
  init_createReactComponent();
  IconWand = createReactComponent("outline", "wand", "IconWand", [["path", { d: "M6 21l15 -15l-3 -3l-15 15l3 3", key: "svg-0" }], ["path", { d: "M15 6l3 3", key: "svg-1" }], ["path", { d: "M9 3a2 2 0 0 0 2 2a2 2 0 0 0 -2 2a2 2 0 0 0 -2 -2a2 2 0 0 0 2 -2", key: "svg-2" }], ["path", { d: "M19 13a2 2 0 0 0 2 2a2 2 0 0 0 -2 2a2 2 0 0 0 -2 -2a2 2 0 0 0 2 -2", key: "svg-3" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconX.mjs
var IconX;
var init_IconX = __esm(() => {
  init_createReactComponent();
  IconX = createReactComponent("outline", "x", "IconX", [["path", { d: "M18 6l-12 12", key: "svg-0" }], ["path", { d: "M6 6l12 12", key: "svg-1" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconCaretDownFilled.mjs
var IconCaretDownFilled;
var init_IconCaretDownFilled = __esm(() => {
  init_createReactComponent();
  IconCaretDownFilled = createReactComponent("filled", "caret-down-filled", "IconCaretDownFilled", [["path", { d: "M18 9c.852 0 1.297 .986 .783 1.623l-.076 .084l-6 6a1 1 0 0 1 -1.32 .083l-.094 -.083l-6 -6l-.083 -.094l-.054 -.077l-.054 -.096l-.017 -.036l-.027 -.067l-.032 -.108l-.01 -.053l-.01 -.06l-.004 -.057v-.118l.005 -.058l.009 -.06l.01 -.052l.032 -.108l.027 -.067l.07 -.132l.065 -.09l.073 -.081l.094 -.083l.077 -.054l.096 -.054l.036 -.017l.067 -.027l.108 -.032l.053 -.01l.06 -.01l.057 -.004l12.059 -.002z", key: "svg-0" }]]);
});

// node_modules/@tabler/icons-react/dist/esm/icons/IconTrashFilled.mjs
var IconTrashFilled;
var init_IconTrashFilled = __esm(() => {
  init_createReactComponent();
  IconTrashFilled = createReactComponent("filled", "trash-filled", "IconTrashFilled", [["path", { d: "M20 6a1 1 0 0 1 .117 1.993l-.117 .007h-.081l-.919 11a3 3 0 0 1 -2.824 2.995l-.176 .005h-8c-1.598 0 -2.904 -1.249 -2.992 -2.75l-.005 -.167l-.923 -11.083h-.08a1 1 0 0 1 -.117 -1.993l.117 -.007h16z", key: "svg-0" }], ["path", { d: "M14 2a2 2 0 0 1 2 2a1 1 0 0 1 -1.993 .117l-.007 -.117h-4l-.007 .117a1 1 0 0 1 -1.993 -.117a2 2 0 0 1 1.85 -1.995l.15 -.005h4z", key: "svg-1" }]]);
});

// src/index.tsx
var import_react259 = __toESM(require_react(), 1);
var import_client = __toESM(require_client(), 1);

// node_modules/zustand/esm/vanilla.mjs
var createStoreImpl = (createState) => {
  let state;
  const listeners = /* @__PURE__ */ new Set;
  const setState = (partial, replace) => {
    const nextState = typeof partial === "function" ? partial(state) : partial;
    if (!Object.is(nextState, state)) {
      const previousState = state;
      state = (replace != null ? replace : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
      listeners.forEach((listener) => listener(state, previousState));
    }
  };
  const getState = () => state;
  const getInitialState = () => initialState;
  const subscribe = (listener) => {
    listeners.add(listener);
    return () => listeners.delete(listener);
  };
  const api = { setState, getState, getInitialState, subscribe };
  const initialState = state = createState(setState, getState, api);
  return api;
};
var createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;

// node_modules/zustand/esm/react.mjs
var import_react = __toESM(require_react(), 1);
var identity = (arg) => arg;
function useStore(api, selector = identity) {
  const slice = import_react.default.useSyncExternalStore(api.subscribe, () => selector(api.getState()), () => selector(api.getInitialState()));
  import_react.default.useDebugValue(slice);
  return slice;
}
var createImpl = (createState) => {
  const api = createStore(createState);
  const useBoundStore = (selector) => useStore(api, selector);
  Object.assign(useBoundStore, api);
  return useBoundStore;
};
var create = (createState) => createState ? createImpl(createState) : createImpl;

// node_modules/immer/dist/immer.mjs
var NOTHING = Symbol.for("immer-nothing");
var DRAFTABLE = Symbol.for("immer-draftable");
var DRAFT_STATE = Symbol.for("immer-state");
function die(error, ...args) {
  if (false) {
  }
  throw new Error(`[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`);
}
var getPrototypeOf = Object.getPrototypeOf;
function isDraft(value) {
  return !!value && !!value[DRAFT_STATE];
}
function isDraftable(value) {
  if (!value)
    return false;
  return isPlainObject(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!value.constructor?.[DRAFTABLE] || isMap(value) || isSet(value);
}
var objectCtorString = Object.prototype.constructor.toString();
function isPlainObject(value) {
  if (!value || typeof value !== "object")
    return false;
  const proto = getPrototypeOf(value);
  if (proto === null) {
    return true;
  }
  const Ctor = Object.hasOwnProperty.call(proto, "constructor") && proto.constructor;
  if (Ctor === Object)
    return true;
  return typeof Ctor == "function" && Function.toString.call(Ctor) === objectCtorString;
}
function each(obj, iter) {
  if (getArchtype(obj) === 0) {
    Reflect.ownKeys(obj).forEach((key) => {
      iter(key, obj[key], obj);
    });
  } else {
    obj.forEach((entry, index2) => iter(index2, entry, obj));
  }
}
function getArchtype(thing) {
  const state = thing[DRAFT_STATE];
  return state ? state.type_ : Array.isArray(thing) ? 1 : isMap(thing) ? 2 : isSet(thing) ? 3 : 0;
}
function has(thing, prop) {
  return getArchtype(thing) === 2 ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);
}
function set(thing, propOrOldValue, value) {
  const t = getArchtype(thing);
  if (t === 2)
    thing.set(propOrOldValue, value);
  else if (t === 3) {
    thing.add(value);
  } else
    thing[propOrOldValue] = value;
}
function is2(x, y) {
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}
function isMap(target) {
  return target instanceof Map;
}
function isSet(target) {
  return target instanceof Set;
}
function latest(state) {
  return state.copy_ || state.base_;
}
function shallowCopy(base, strict) {
  if (isMap(base)) {
    return new Map(base);
  }
  if (isSet(base)) {
    return new Set(base);
  }
  if (Array.isArray(base))
    return Array.prototype.slice.call(base);
  const isPlain = isPlainObject(base);
  if (strict === true || strict === "class_only" && !isPlain) {
    const descriptors = Object.getOwnPropertyDescriptors(base);
    delete descriptors[DRAFT_STATE];
    let keys = Reflect.ownKeys(descriptors);
    for (let i = 0;i < keys.length; i++) {
      const key = keys[i];
      const desc = descriptors[key];
      if (desc.writable === false) {
        desc.writable = true;
        desc.configurable = true;
      }
      if (desc.get || desc.set)
        descriptors[key] = {
          configurable: true,
          writable: true,
          enumerable: desc.enumerable,
          value: base[key]
        };
    }
    return Object.create(getPrototypeOf(base), descriptors);
  } else {
    const proto = getPrototypeOf(base);
    if (proto !== null && isPlain) {
      return { ...base };
    }
    const obj = Object.create(proto);
    return Object.assign(obj, base);
  }
}
function freeze(obj, deep = false) {
  if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj))
    return obj;
  if (getArchtype(obj) > 1) {
    obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;
  }
  Object.freeze(obj);
  if (deep)
    Object.entries(obj).forEach(([key, value]) => freeze(value, true));
  return obj;
}
function dontMutateFrozenCollections() {
  die(2);
}
function isFrozen(obj) {
  return Object.isFrozen(obj);
}
var plugins = {};
function getPlugin(pluginKey) {
  const plugin = plugins[pluginKey];
  if (!plugin) {
    die(0, pluginKey);
  }
  return plugin;
}
var currentScope;
function getCurrentScope() {
  return currentScope;
}
function createScope(parent_, immer_) {
  return {
    drafts_: [],
    parent_,
    immer_,
    canAutoFreeze_: true,
    unfinalizedDrafts_: 0
  };
}
function usePatchesInScope(scope, patchListener) {
  if (patchListener) {
    getPlugin("Patches");
    scope.patches_ = [];
    scope.inversePatches_ = [];
    scope.patchListener_ = patchListener;
  }
}
function revokeScope(scope) {
  leaveScope(scope);
  scope.drafts_.forEach(revokeDraft);
  scope.drafts_ = null;
}
function leaveScope(scope) {
  if (scope === currentScope) {
    currentScope = scope.parent_;
  }
}
function enterScope(immer2) {
  return currentScope = createScope(currentScope, immer2);
}
function revokeDraft(draft) {
  const state = draft[DRAFT_STATE];
  if (state.type_ === 0 || state.type_ === 1)
    state.revoke_();
  else
    state.revoked_ = true;
}
function processResult(result, scope) {
  scope.unfinalizedDrafts_ = scope.drafts_.length;
  const baseDraft = scope.drafts_[0];
  const isReplaced = result !== undefined && result !== baseDraft;
  if (isReplaced) {
    if (baseDraft[DRAFT_STATE].modified_) {
      revokeScope(scope);
      die(4);
    }
    if (isDraftable(result)) {
      result = finalize(scope, result);
      if (!scope.parent_)
        maybeFreeze(scope, result);
    }
    if (scope.patches_) {
      getPlugin("Patches").generateReplacementPatches_(baseDraft[DRAFT_STATE].base_, result, scope.patches_, scope.inversePatches_);
    }
  } else {
    result = finalize(scope, baseDraft, []);
  }
  revokeScope(scope);
  if (scope.patches_) {
    scope.patchListener_(scope.patches_, scope.inversePatches_);
  }
  return result !== NOTHING ? result : undefined;
}
function finalize(rootScope, value, path) {
  if (isFrozen(value))
    return value;
  const state = value[DRAFT_STATE];
  if (!state) {
    each(value, (key, childValue) => finalizeProperty(rootScope, state, value, key, childValue, path));
    return value;
  }
  if (state.scope_ !== rootScope)
    return value;
  if (!state.modified_) {
    maybeFreeze(rootScope, state.base_, true);
    return state.base_;
  }
  if (!state.finalized_) {
    state.finalized_ = true;
    state.scope_.unfinalizedDrafts_--;
    const result = state.copy_;
    let resultEach = result;
    let isSet2 = false;
    if (state.type_ === 3) {
      resultEach = new Set(result);
      result.clear();
      isSet2 = true;
    }
    each(resultEach, (key, childValue) => finalizeProperty(rootScope, state, result, key, childValue, path, isSet2));
    maybeFreeze(rootScope, result, false);
    if (path && rootScope.patches_) {
      getPlugin("Patches").generatePatches_(state, path, rootScope.patches_, rootScope.inversePatches_);
    }
  }
  return state.copy_;
}
function finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath, targetIsSet) {
  if (false)
    ;
  if (isDraft(childValue)) {
    const path = rootPath && parentState && parentState.type_ !== 3 && !has(parentState.assigned_, prop) ? rootPath.concat(prop) : undefined;
    const res = finalize(rootScope, childValue, path);
    set(targetObject, prop, res);
    if (isDraft(res)) {
      rootScope.canAutoFreeze_ = false;
    } else
      return;
  } else if (targetIsSet) {
    targetObject.add(childValue);
  }
  if (isDraftable(childValue) && !isFrozen(childValue)) {
    if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {
      return;
    }
    finalize(rootScope, childValue);
    if ((!parentState || !parentState.scope_.parent_) && typeof prop !== "symbol" && Object.prototype.propertyIsEnumerable.call(targetObject, prop))
      maybeFreeze(rootScope, childValue);
  }
}
function maybeFreeze(scope, value, deep = false) {
  if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {
    freeze(value, deep);
  }
}
function createProxyProxy(base, parent) {
  const isArray = Array.isArray(base);
  const state = {
    type_: isArray ? 1 : 0,
    scope_: parent ? parent.scope_ : getCurrentScope(),
    modified_: false,
    finalized_: false,
    assigned_: {},
    parent_: parent,
    base_: base,
    draft_: null,
    copy_: null,
    revoke_: null,
    isManual_: false
  };
  let target = state;
  let traps = objectTraps;
  if (isArray) {
    target = [state];
    traps = arrayTraps;
  }
  const { revoke, proxy } = Proxy.revocable(target, traps);
  state.draft_ = proxy;
  state.revoke_ = revoke;
  return proxy;
}
var objectTraps = {
  get(state, prop) {
    if (prop === DRAFT_STATE)
      return state;
    const source = latest(state);
    if (!has(source, prop)) {
      return readPropFromProto(state, source, prop);
    }
    const value = source[prop];
    if (state.finalized_ || !isDraftable(value)) {
      return value;
    }
    if (value === peek2(state.base_, prop)) {
      prepareCopy(state);
      return state.copy_[prop] = createProxy(value, state);
    }
    return value;
  },
  has(state, prop) {
    return prop in latest(state);
  },
  ownKeys(state) {
    return Reflect.ownKeys(latest(state));
  },
  set(state, prop, value) {
    const desc = getDescriptorFromProto(latest(state), prop);
    if (desc?.set) {
      desc.set.call(state.draft_, value);
      return true;
    }
    if (!state.modified_) {
      const current2 = peek2(latest(state), prop);
      const currentState = current2?.[DRAFT_STATE];
      if (currentState && currentState.base_ === value) {
        state.copy_[prop] = value;
        state.assigned_[prop] = false;
        return true;
      }
      if (is2(value, current2) && (value !== undefined || has(state.base_, prop)))
        return true;
      prepareCopy(state);
      markChanged(state);
    }
    if (state.copy_[prop] === value && (value !== undefined || (prop in state.copy_)) || Number.isNaN(value) && Number.isNaN(state.copy_[prop]))
      return true;
    state.copy_[prop] = value;
    state.assigned_[prop] = true;
    return true;
  },
  deleteProperty(state, prop) {
    if (peek2(state.base_, prop) !== undefined || prop in state.base_) {
      state.assigned_[prop] = false;
      prepareCopy(state);
      markChanged(state);
    } else {
      delete state.assigned_[prop];
    }
    if (state.copy_) {
      delete state.copy_[prop];
    }
    return true;
  },
  getOwnPropertyDescriptor(state, prop) {
    const owner = latest(state);
    const desc = Reflect.getOwnPropertyDescriptor(owner, prop);
    if (!desc)
      return desc;
    return {
      writable: true,
      configurable: state.type_ !== 1 || prop !== "length",
      enumerable: desc.enumerable,
      value: owner[prop]
    };
  },
  defineProperty() {
    die(11);
  },
  getPrototypeOf(state) {
    return getPrototypeOf(state.base_);
  },
  setPrototypeOf() {
    die(12);
  }
};
var arrayTraps = {};
each(objectTraps, (key, fn) => {
  arrayTraps[key] = function() {
    arguments[0] = arguments[0][0];
    return fn.apply(this, arguments);
  };
});
arrayTraps.deleteProperty = function(state, prop) {
  if (false)
    ;
  return arrayTraps.set.call(this, state, prop, undefined);
};
arrayTraps.set = function(state, prop, value) {
  if (false)
    ;
  return objectTraps.set.call(this, state[0], prop, value, state[0]);
};
function peek2(draft, prop) {
  const state = draft[DRAFT_STATE];
  const source = state ? latest(state) : draft;
  return source[prop];
}
function readPropFromProto(state, source, prop) {
  const desc = getDescriptorFromProto(source, prop);
  return desc ? `value` in desc ? desc.value : desc.get?.call(state.draft_) : undefined;
}
function getDescriptorFromProto(source, prop) {
  if (!(prop in source))
    return;
  let proto = getPrototypeOf(source);
  while (proto) {
    const desc = Object.getOwnPropertyDescriptor(proto, prop);
    if (desc)
      return desc;
    proto = getPrototypeOf(proto);
  }
  return;
}
function markChanged(state) {
  if (!state.modified_) {
    state.modified_ = true;
    if (state.parent_) {
      markChanged(state.parent_);
    }
  }
}
function prepareCopy(state) {
  if (!state.copy_) {
    state.copy_ = shallowCopy(state.base_, state.scope_.immer_.useStrictShallowCopy_);
  }
}
var Immer2 = class {
  constructor(config) {
    this.autoFreeze_ = true;
    this.useStrictShallowCopy_ = false;
    this.produce = (base, recipe, patchListener) => {
      if (typeof base === "function" && typeof recipe !== "function") {
        const defaultBase = recipe;
        recipe = base;
        const self = this;
        return function curriedProduce(base2 = defaultBase, ...args) {
          return self.produce(base2, (draft) => recipe.call(this, draft, ...args));
        };
      }
      if (typeof recipe !== "function")
        die(6);
      if (patchListener !== undefined && typeof patchListener !== "function")
        die(7);
      let result;
      if (isDraftable(base)) {
        const scope = enterScope(this);
        const proxy = createProxy(base, undefined);
        let hasError = true;
        try {
          result = recipe(proxy);
          hasError = false;
        } finally {
          if (hasError)
            revokeScope(scope);
          else
            leaveScope(scope);
        }
        usePatchesInScope(scope, patchListener);
        return processResult(result, scope);
      } else if (!base || typeof base !== "object") {
        result = recipe(base);
        if (result === undefined)
          result = base;
        if (result === NOTHING)
          result = undefined;
        if (this.autoFreeze_)
          freeze(result, true);
        if (patchListener) {
          const p = [];
          const ip = [];
          getPlugin("Patches").generateReplacementPatches_(base, result, p, ip);
          patchListener(p, ip);
        }
        return result;
      } else
        die(1, base);
    };
    this.produceWithPatches = (base, recipe) => {
      if (typeof base === "function") {
        return (state, ...args) => this.produceWithPatches(state, (draft) => base(draft, ...args));
      }
      let patches, inversePatches;
      const result = this.produce(base, recipe, (p, ip) => {
        patches = p;
        inversePatches = ip;
      });
      return [result, patches, inversePatches];
    };
    if (typeof config?.autoFreeze === "boolean")
      this.setAutoFreeze(config.autoFreeze);
    if (typeof config?.useStrictShallowCopy === "boolean")
      this.setUseStrictShallowCopy(config.useStrictShallowCopy);
  }
  createDraft(base) {
    if (!isDraftable(base))
      die(8);
    if (isDraft(base))
      base = current(base);
    const scope = enterScope(this);
    const proxy = createProxy(base, undefined);
    proxy[DRAFT_STATE].isManual_ = true;
    leaveScope(scope);
    return proxy;
  }
  finishDraft(draft, patchListener) {
    const state = draft && draft[DRAFT_STATE];
    if (!state || !state.isManual_)
      die(9);
    const { scope_: scope } = state;
    usePatchesInScope(scope, patchListener);
    return processResult(undefined, scope);
  }
  setAutoFreeze(value) {
    this.autoFreeze_ = value;
  }
  setUseStrictShallowCopy(value) {
    this.useStrictShallowCopy_ = value;
  }
  applyPatches(base, patches) {
    let i;
    for (i = patches.length - 1;i >= 0; i--) {
      const patch = patches[i];
      if (patch.path.length === 0 && patch.op === "replace") {
        base = patch.value;
        break;
      }
    }
    if (i > -1) {
      patches = patches.slice(i + 1);
    }
    const applyPatchesImpl = getPlugin("Patches").applyPatches_;
    if (isDraft(base)) {
      return applyPatchesImpl(base, patches);
    }
    return this.produce(base, (draft) => applyPatchesImpl(draft, patches));
  }
};
function createProxy(value, parent) {
  const draft = isMap(value) ? getPlugin("MapSet").proxyMap_(value, parent) : isSet(value) ? getPlugin("MapSet").proxySet_(value, parent) : createProxyProxy(value, parent);
  const scope = parent ? parent.scope_ : getCurrentScope();
  scope.drafts_.push(draft);
  return draft;
}
function current(value) {
  if (!isDraft(value))
    die(10, value);
  return currentImpl(value);
}
function currentImpl(value) {
  if (!isDraftable(value) || isFrozen(value))
    return value;
  const state = value[DRAFT_STATE];
  let copy;
  if (state) {
    if (!state.modified_)
      return state.base_;
    state.finalized_ = true;
    copy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_);
  } else {
    copy = shallowCopy(value, true);
  }
  each(copy, (key, childValue) => {
    set(copy, key, currentImpl(childValue));
  });
  if (state) {
    state.finalized_ = false;
  }
  return copy;
}
var immer = new Immer2;
var produce = immer.produce;
var produceWithPatches = immer.produceWithPatches.bind(immer);
var setAutoFreeze = immer.setAutoFreeze.bind(immer);
var setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer);
var applyPatches = immer.applyPatches.bind(immer);
var createDraft = immer.createDraft.bind(immer);
var finishDraft = immer.finishDraft.bind(immer);

// node_modules/zustand/esm/middleware/immer.mjs
var immerImpl = (initializer) => (set2, get, store) => {
  store.setState = (updater, replace, ...a) => {
    const nextState = typeof updater === "function" ? produce(updater) : updater;
    return set2(nextState, replace, ...a);
  };
  return initializer(store.setState, get, store);
};
var immer2 = immerImpl;

// src/modalStore.ts
var saveLayoutConfigToJSON = (config) => {
  console.log("Saving config:", config);
};
var unloadedDoc = { layouts: [], variables: [] };
var appStore = create()(immer2((set2, get) => ({
  state: {
    modal: {
      isAddImageVariableMappingModalOpen: false,
      currentAddImageMappingSelectedVariables: [],
      isModalVisible: false,
      currentSelectedMapId: null,
      dependentModal: {
        isOpen: false,
        currentImageVariableId: null,
        currentSelectedVariables: [],
        currentGroupIndex: null
      }
    },
    studio: {
      isLayoutConfigLoaded: false,
      isDocumentLoaded: false,
      document: unloadedDoc,
      layoutImageMapping: []
    },
    isToolbarVisible: false,
    isToolbarEnabled: true
  },
  alerts: [],
  effects: {
    modal: {
      showModal: () => set2((store) => {
        store.state.modal.isModalVisible = true;
        store.state.isToolbarVisible = false;
      }),
      hideModal: () => set2((store) => {
        store.state.modal.isModalVisible = false;
      }),
      setIsImageVariableMappingModalOpen: (value) => set2((store) => {
        store.state.modal.isAddImageVariableMappingModalOpen = value;
      }),
      setCurrentAddImageMappingSelectedVariables: (value) => set2((store) => {
        store.state.modal.currentAddImageMappingSelectedVariables = value;
      }),
      setCurrentSelectedMapId: (value) => {
        set2((store) => {
          store.state.modal.currentSelectedMapId = value;
        });
      },
      dependentModal: {
        setIsOpen: (value) => {
          set2((store) => {
            store.state.modal.dependentModal.isOpen = value;
          });
        },
        setCurrentImageVariableId: (id) => {
          set2((store) => {
            store.state.modal.dependentModal.currentImageVariableId = id;
          });
        },
        setCurrentSelectedVariables: (value) => {
          set2((store) => {
            store.state.modal.dependentModal.currentSelectedVariables = value;
          });
        },
        setCurrentGroupIndex: (value) => {
          set2((store) => {
            store.state.modal.dependentModal.currentGroupIndex = value;
          });
        }
      }
    },
    studio: {
      document: {
        load: (doc) => set2((store) => {
          store.state.studio.isDocumentLoaded = true;
          store.state.studio.document = doc;
        }),
        unload: () => set2((store) => {
          store.state.studio.document = unloadedDoc;
          store.state.studio.isDocumentLoaded = false;
        })
      },
      layoutImageMapping: {
        addLayoutMap: () => set2((store) => {
          if (store.state.studio.isLayoutConfigLoaded) {
            const randomId = Math.random().toString(36).substring(2, 10);
            const newLayoutMap = {
              id: randomId,
              layoutIds: [],
              variables: []
            };
            store.state.studio.layoutImageMapping.push(newLayoutMap);
          } else {
            raiseError(store, new Error("For addLayoutMap layout config is not loaded"));
          }
        }),
        addLayoutMapFromCopy: (mapId) => set2((store) => {
          if (store.state.studio.isLayoutConfigLoaded) {
            const sourceLayoutMap = store.state.studio.layoutImageMapping.find((map) => map.id === mapId);
            if (sourceLayoutMap) {
              const randomId = Math.random().toString(36).substring(2, 10);
              const newLayoutMap = {
                id: randomId,
                layoutIds: [],
                variables: JSON.parse(JSON.stringify(sourceLayoutMap.variables))
              };
              store.state.studio.layoutImageMapping.push(newLayoutMap);
            } else {
              raiseError(store, new Error("For addLayoutMapFromCopy source layout map not found"));
            }
          } else {
            raiseError(store, new Error("For addLayoutMapFromCopy layout config is not loaded"));
          }
        }),
        deleteLayoutMap: (mapId) => set2((store) => {
          if (store.state.studio.isLayoutConfigLoaded) {
            const mapIndex = store.state.studio.layoutImageMapping.findIndex((map) => map.id === mapId);
            if (mapIndex !== -1) {
              store.state.studio.layoutImageMapping.splice(mapIndex, 1);
            } else {
              raiseError(store, new Error("For deleteLayoutMap layout map not found"));
            }
          } else {
            raiseError(store, new Error("For deleteLayoutMap layout config is not loaded"));
          }
        }),
        setLayoutIds: ({ mapId: configId, layoutIds }) => set2((store) => {
          if (store.state.studio.isLayoutConfigLoaded) {
            const targetLayoutMap = store.state.studio.layoutImageMapping.find((layout) => layout.id == configId);
            if (targetLayoutMap) {
              targetLayoutMap.layoutIds = layoutIds;
            } else {
              raiseError(store, new Error("For setLayoutIds targetLayoutMap not found"));
            }
          } else {
            raiseError(store, new Error("For setLayoutIds layout config is not loaded"));
          }
        }),
        addImageVariable: ({ mapId, imageVariable }) => set2((store) => {
          if (store.state.studio.isLayoutConfigLoaded) {
            const targetLayoutMapMap = store.state.studio.layoutImageMapping.find((map) => map.id == mapId);
            if (targetLayoutMapMap) {
              const imageVariableIndex = targetLayoutMapMap.variables.findIndex((imgVar) => imgVar.id == imageVariable.id);
              if (imageVariableIndex == -1) {
                targetLayoutMapMap.variables.push(imageVariable);
              } else {
                targetLayoutMapMap.variables[imageVariableIndex] = imageVariable;
              }
            } else {
              raiseError(store, new Error("For addImageVariable targetLayoutMapMap not found"));
            }
          } else {
            raiseError(store, new Error("For addImageVariable layout config is not loaded"));
          }
        }),
        updateDependent: ({
          mapId,
          imageVariableId,
          dependentGroupIndex,
          dependent
        }) => set2((store) => {
          if (store.state.studio.isLayoutConfigLoaded) {
            const targetLayoutMap = store.state.studio.layoutImageMapping.find((layout) => layout.id == mapId);
            if (!targetLayoutMap) {
              raiseError(store, new Error("For updateDependent targetLayoutMap not found"));
              return;
            }
            const imageVariable = targetLayoutMap.variables.find((imgVar) => imgVar.id == imageVariableId);
            if (!imageVariable) {
              raiseError(store, new Error("For updateDependent imageVariable not found"));
              return;
            }
            const dependentGroup = imageVariable.dependentGroup[dependentGroupIndex];
            if (dependentGroup == undefined) {
              raiseError(store, new Error("For updateDependent dependentGroup not found"));
              return;
            }
            const dependentIndex = dependentGroup.dependents.findIndex((dep) => dep.variableId == dependent.variableId);
            if (dependentIndex == -1) {
              dependentGroup.dependents.push(dependent);
            } else {
              dependentGroup.dependents[dependentIndex] = dependent;
            }
          } else {
            raiseError(store, new Error("For updateDependent layout config is not loaded"));
          }
        }),
        removeDependent: ({
          mapId,
          imageVariableId,
          dependentGroupIndex,
          dependent
        }) => set2((store) => {
          if (store.state.studio.isLayoutConfigLoaded) {
            const targetLayoutMap = store.state.studio.layoutImageMapping.find((layout) => layout.id == mapId);
            if (!targetLayoutMap) {
              raiseError(store, new Error("For removeDependent targetLayoutMap not found"));
              return;
            }
            const imageVariable = targetLayoutMap.variables.find((imgVar) => imgVar.id == imageVariableId);
            if (!imageVariable) {
              raiseError(store, new Error("For removeDependent imageVariable not found"));
              return;
            }
            const dependentGroup = imageVariable.dependentGroup[dependentGroupIndex];
            if (dependentGroup == undefined) {
              raiseError(store, new Error("For removeDependent dependentGroup not found"));
              return;
            }
            const dependentIndex = dependentGroup.dependents.findIndex((dep) => dep.variableId == dependent.variableId);
            if (dependentIndex == -1) {
              raiseError(store, new Error("For removeDependent dependent not found"));
              return;
            }
            dependentGroup.dependents.splice(dependentIndex, 1);
          } else {
            raiseError(store, new Error("For removeDependent layout config is not loaded"));
          }
        }),
        load: (configs) => set2((store) => {
          if (!store.state.studio.isLayoutConfigLoaded) {
            store.state.studio.isLayoutConfigLoaded = true;
            store.state.studio.layoutImageMapping = configs;
          } else {
            raiseError(store, new Error("For load layout config is already loaded"));
          }
        }),
        unload: () => set2((store) => {
          store.state.studio.layoutImageMapping = [];
          store.state.studio.isLayoutConfigLoaded = false;
        }),
        save: () => {
          const store = get();
          if (store.state.studio.isLayoutConfigLoaded) {
            saveLayoutConfigToJSON(store.state.studio.layoutImageMapping);
          } else {
            raiseError(store, new Error("For save layout config is not loaded"));
          }
        },
        addDependentGroup: ({ mapId, imageVariableId, dependents }) => set2((store) => {
          if (store.state.studio.isLayoutConfigLoaded) {
            const targetLayoutMap = store.state.studio.layoutImageMapping.find((map) => map.id == mapId);
            if (targetLayoutMap) {
              const imageVariable = targetLayoutMap.variables.find((imgVar) => imgVar.id == imageVariableId);
              if (imageVariable) {
                imageVariable.dependentGroup.push({
                  dependents,
                  variableValue: []
                });
              } else {
                raiseError(store, new Error("For addDependentGroup imageVariable not found"));
              }
            } else {
              raiseError(store, new Error("For addDependentGroup targetLayoutMap not found"));
            }
          } else {
            raiseError(store, new Error("For addDependentGroup layout config is not loaded"));
          }
        }),
        copyDependentGroup: ({ mapId, imageVariableId, groupIndex }) => set2((store) => {
          if (store.state.studio.isLayoutConfigLoaded) {
            const targetLayoutMap = store.state.studio.layoutImageMapping.find((map) => map.id == mapId);
            if (targetLayoutMap) {
              const imageVariable = targetLayoutMap.variables.find((imgVar) => imgVar.id == imageVariableId);
              if (imageVariable) {
                const dependentGroup = imageVariable.dependentGroup[groupIndex];
                if (dependentGroup == undefined) {
                  raiseError(store, new Error("For copyDependentGroup dependentGroup not found"));
                  return;
                }
                const newDependentGroup = JSON.parse(JSON.stringify(dependentGroup));
                imageVariable.dependentGroup.push(newDependentGroup);
              } else {
                raiseError(store, new Error("For copyDependentGroup imageVariable not found"));
              }
            } else {
              raiseError(store, new Error("For copyDependentGroup targetLayoutMap not found"));
            }
          } else {
            raiseError(store, new Error("For copyDependentGroup layout config is not loaded"));
          }
        }),
        removeImageVariable: ({ mapId, imageVariableId }) => set2((store) => {
          if (store.state.studio.isLayoutConfigLoaded) {
            const targetLayoutMap = store.state.studio.layoutImageMapping.find((map) => map.id == mapId);
            if (targetLayoutMap) {
              const imageVariableIndex = targetLayoutMap.variables.findIndex((imgVar) => imgVar.id == imageVariableId);
              if (imageVariableIndex !== -1) {
                targetLayoutMap.variables.splice(imageVariableIndex, 1);
              } else {
                raiseError(store, new Error("For removeImageVariable imageVariable not found"));
              }
            } else {
              raiseError(store, new Error("For removeImageVariable targetLayoutMap not found"));
            }
          } else {
            raiseError(store, new Error("For removeImageVariable layout config is not loaded"));
          }
        }),
        removeDependentGroup: ({ mapId, imageVariableId, groupIndex }) => set2((store) => {
          if (store.state.studio.isLayoutConfigLoaded) {
            const targetLayoutMap = store.state.studio.layoutImageMapping.find((map) => map.id == mapId);
            if (targetLayoutMap) {
              const imageVariable = targetLayoutMap.variables.find((imgVar) => imgVar.id == imageVariableId);
              if (imageVariable) {
                imageVariable.dependentGroup.splice(groupIndex, 1);
              } else {
                raiseError(store, new Error("For removeDependentGroup imageVariable not found"));
              }
            } else {
              raiseError(store, new Error("For removeDependentGroup targetLayoutMap not found"));
            }
          } else {
            raiseError(store, new Error("For removeDependentGroup layout config is not loaded"));
          }
        }),
        addVarValueToDependentGroup: ({
          mapId,
          imageVariableId,
          groupIndex,
          variableValue
        }) => set2((store) => {
          if (store.state.studio.isLayoutConfigLoaded) {
            const targetLayoutMap = store.state.studio.layoutImageMapping.find((map) => map.id == mapId);
            if (targetLayoutMap) {
              const imageVariable = targetLayoutMap.variables.find((imgVar) => imgVar.id == imageVariableId);
              if (imageVariable) {
                const dependentGroup = imageVariable.dependentGroup[groupIndex];
                if (dependentGroup == undefined) {
                  raiseError(store, new Error("For addVarValueToDependentGroup dependentGroup not found"));
                  return;
                }
                dependentGroup.variableValue.push(variableValue);
              } else {
                raiseError(store, new Error("For addVarValueToDependentGroup imageVariable not found"));
              }
            } else {
              raiseError(store, new Error("For addVarValueToDependentGroup targetLayoutMap not found"));
            }
          } else {
            raiseError(store, new Error("For addVarValueToDependentGroup layout config is not loaded"));
          }
        }),
        removeVarValueFromDependentGroup: ({
          mapId,
          imageVariableId,
          groupIndex,
          variableValueIndex
        }) => set2((store) => {
          if (store.state.studio.isLayoutConfigLoaded) {
            const targetLayoutMap = store.state.studio.layoutImageMapping.find((map) => map.id == mapId);
            if (targetLayoutMap) {
              const imageVariable = targetLayoutMap.variables.find((imgVar) => imgVar.id == imageVariableId);
              if (imageVariable) {
                const dependentGroup = imageVariable.dependentGroup[groupIndex];
                if (dependentGroup == undefined) {
                  raiseError(store, new Error("For removeVarValueFromDependentGroup dependentGroup not found"));
                  return;
                }
                if (variableValueIndex < 0 || variableValueIndex >= dependentGroup.variableValue.length) {
                  raiseError(store, new Error("For removeVarValueFromDependentGroup invalid variableValueIndex"));
                  return;
                }
                dependentGroup.variableValue.splice(variableValueIndex, 1);
              } else {
                raiseError(store, new Error("For removeVarValueFromDependentGroup imageVariable not found"));
              }
            } else {
              raiseError(store, new Error("For removeVarValueFromDependentGroup targetLayoutMap not found"));
            }
          } else {
            raiseError(store, new Error("For removeVarValueFromDependentGroup layout config is not loaded"));
          }
        }),
        updateVarValueFromDependentGroup: ({
          mapId,
          imageVariableId,
          groupIndex,
          variableValueIndex,
          variableValue
        }) => set2((store) => {
          if (store.state.studio.isLayoutConfigLoaded) {
            const targetLayoutMap = store.state.studio.layoutImageMapping.find((map) => map.id == mapId);
            if (targetLayoutMap) {
              const imageVariable = targetLayoutMap.variables.find((imgVar) => imgVar.id == imageVariableId);
              if (imageVariable) {
                const dependentGroup = imageVariable.dependentGroup[groupIndex];
                if (dependentGroup == undefined) {
                  raiseError(store, new Error("For updateVarValueFromDependentGroup dependentGroup not found"));
                  return;
                }
                if (variableValueIndex < 0 || variableValueIndex >= dependentGroup.variableValue.length) {
                  raiseError(store, new Error("For updateVarValueFromDependentGroup invalid variableValueIndex"));
                  return;
                }
                dependentGroup.variableValue[variableValueIndex] = variableValue;
              } else {
                raiseError(store, new Error("For updateVarValueFromDependentGroup imageVariable not found"));
              }
            } else {
              raiseError(store, new Error("For updateVarValueFromDependentGroup targetLayoutMap not found"));
            }
          } else {
            raiseError(store, new Error("For updateVarValueFromDependentGroup layout config is not loaded"));
          }
        }),
        setIndexOfVarValueFromDependentGroup: ({
          mapId,
          imageVariableId,
          groupIndex,
          oldVariableValueIndex,
          newVariableValueIndex
        }) => set2((store) => {
          if (store.state.studio.isLayoutConfigLoaded) {
            const targetLayoutMap = store.state.studio.layoutImageMapping.find((map) => map.id == mapId);
            if (targetLayoutMap) {
              const imageVariable = targetLayoutMap.variables.find((imgVar) => imgVar.id == imageVariableId);
              if (imageVariable) {
                const dependentGroup = imageVariable.dependentGroup[groupIndex];
                if (dependentGroup == undefined) {
                  raiseError(store, new Error("For setIndexOfVarValueFromDependentGroup dependentGroup not found"));
                  return;
                }
                if (oldVariableValueIndex < 0 || oldVariableValueIndex >= dependentGroup.variableValue.length) {
                  raiseError(store, new Error("For setIndexOfVarValueFromDependentGroup invalid oldVariableValueIndex"));
                  return;
                }
                let adjustedNewIndex = newVariableValueIndex;
                if (adjustedNewIndex < 0) {
                  adjustedNewIndex = 0;
                }
                if (adjustedNewIndex >= dependentGroup.variableValue.length) {
                  adjustedNewIndex = dependentGroup.variableValue.length - 1;
                }
                const [movedItem] = dependentGroup.variableValue.splice(oldVariableValueIndex, 1);
                dependentGroup.variableValue.splice(adjustedNewIndex, 0, movedItem);
              } else {
                raiseError(store, new Error("For setIndexOfVarValueFromDependentGroup imageVariable not found"));
              }
            } else {
              raiseError(store, new Error("For setIndexOfVarValueFromDependentGroup targetLayoutMap not found"));
            }
          } else {
            raiseError(store, new Error("For setIndexOfVarValueFromDependentGroup layout config is not loaded"));
          }
        })
      }
    }
  },
  errors: [],
  showToolbar: () => set2((state) => {
    state.state.isToolbarVisible = true;
  }),
  hideToolbar: () => set2((state) => {
    state.state.isToolbarVisible = false;
  }),
  enableToolbar: () => set2((state) => {
    state.state.isToolbarEnabled = true;
  }),
  disableToolbar: () => set2((state) => {
    state.state.isToolbarEnabled = false;
  }),
  raiseError: (error) => {
    if (error.isResult != null) {
      error.onFailure((error2) => set2((state) => raiseError(state, error2)));
    } else {
      set2((state) => raiseError(state, error));
    }
  },
  dismissAlert: (id) => set2((state) => {
    state.alerts = state.alerts.filter((alert) => alert.id !== id);
  })
})));
appStore.subscribe((state, oldState) => console.log("state", state, "oldState", oldState));
function raiseError(store, error) {
  const alertId = Math.random().toString(36).substring(2, 15);
  const alert = {
    id: alertId,
    message: error.message
  };
  store.alerts.push(alert);
  store.errors.push({ error, state: store });
  console.error(error);
}

// node_modules/typescript-result/dist/index.js
function isPromise(value) {
  if (value === null || value === undefined) {
    return false;
  }
  if (typeof value !== "object") {
    return false;
  }
  return value instanceof Promise || "then" in value;
}
function isFunction(value) {
  return typeof value === "function";
}
function isAsyncFn(fn) {
  return fn.constructor.name === "AsyncFunction";
}
var AsyncResult = class _AsyncResult extends Promise {
  get isAsyncResult() {
    return true;
  }
  async toTuple() {
    const result = await this;
    return result.toTuple();
  }
  async errorOrNull() {
    const result = await this;
    return result.errorOrNull();
  }
  async getOrNull() {
    const result = await this;
    return result.getOrNull();
  }
  async getOrDefault(defaultValue) {
    const result = await this;
    return result.getOrDefault(defaultValue);
  }
  async getOrElse(onFailure) {
    const result = await this;
    return result.getOrElse(onFailure);
  }
  async getOrThrow() {
    const result = await this;
    return result.getOrThrow();
  }
  async fold(onSuccess, onFailure) {
    const result = await this;
    return result.fold(onSuccess, onFailure);
  }
  onFailure(action) {
    return new _AsyncResult((resolve, reject) => this.then(async (result) => {
      try {
        if (result.isError()) {
          await action(result.error);
        }
        resolve(result);
      } catch (e) {
        reject(e);
      }
    }).catch(reject));
  }
  onSuccess(action) {
    return new _AsyncResult((resolve, reject) => this.then(async (result) => {
      try {
        if (result.isOk()) {
          await action(result.value);
        }
        resolve(result);
      } catch (error) {
        reject(error);
      }
    }).catch(reject));
  }
  map(transform) {
    return new _AsyncResult((resolve, reject) => this.then((result) => {
      if (result.isOk()) {
        try {
          const returnValue = transform(result.value);
          if (isPromise(returnValue)) {
            returnValue.then((value) => resolve(Result.isResult(value) ? value : Result.ok(value))).catch(reject);
          } else {
            resolve(Result.isResult(returnValue) ? returnValue : Result.ok(returnValue));
          }
        } catch (error) {
          reject(error);
        }
      } else {
        resolve(result);
      }
    }).catch(reject));
  }
  mapCatching(transformValue, transformError) {
    return new _AsyncResult((resolve, reject) => {
      this.map(transformValue).then((result) => resolve(result)).catch((error) => {
        try {
          resolve(Result.error(transformError ? transformError(error) : error));
        } catch (err) {
          reject(err);
        }
      });
    });
  }
  mapError(transform) {
    return new _AsyncResult((resolve, reject) => this.then(async (result) => {
      try {
        resolve(result.mapError(transform));
      } catch (error) {
        reject(error);
      }
    }).catch(reject));
  }
  recover(onFailure) {
    return new _AsyncResult((resolve, reject) => this.then(async (result) => {
      try {
        const outcome = await result.recover(onFailure);
        resolve(outcome);
      } catch (error) {
        reject(error);
      }
    }).catch(reject));
  }
  recoverCatching(onFailure) {
    return new _AsyncResult((resolve, reject) => this.then((result) => {
      resolve(result.recoverCatching(onFailure));
    }).catch(reject));
  }
  toString() {
    return "AsyncResult";
  }
  static error(error) {
    return new _AsyncResult((resolve) => resolve(Result.error(error)));
  }
  static ok(value) {
    return new _AsyncResult((resolve) => resolve(Result.ok(value)));
  }
  static fromPromise(promise) {
    return new _AsyncResult((resolve, reject) => {
      promise.then((value) => resolve(Result.isResult(value) ? value : Result.ok(value))).catch(reject);
    });
  }
  static fromPromiseCatching(promise, transform) {
    return new _AsyncResult((resolve) => {
      promise.then((value) => resolve(Result.isResult(value) ? value : Result.ok(value))).catch((caughtError) => {
        resolve(Result.error(transform?.(caughtError) ?? caughtError));
      });
    });
  }
};
var Result = class _Result {
  constructor(_value, _error) {
    this._value = _value;
    this._error = _error;
  }
  get isResult() {
    return true;
  }
  get value() {
    return this._value;
  }
  get error() {
    return this._error;
  }
  get success() {
    return this.error === undefined;
  }
  get failure() {
    return this.error !== undefined;
  }
  isOk() {
    return this.success;
  }
  isError() {
    return this.failure;
  }
  toTuple() {
    return [this._value ?? null, this._error ?? null];
  }
  errorOrNull() {
    return this.failure ? this._error : null;
  }
  getOrNull() {
    return this.success ? this._value : null;
  }
  getOrDefault(defaultValue) {
    return this.success ? this._value : defaultValue;
  }
  getOrElse(onFailure) {
    if (isAsyncFn(onFailure)) {
      return this.success ? Promise.resolve(this._value) : onFailure(this._error);
    }
    return this.success ? this._value : onFailure(this._error);
  }
  getOrThrow() {
    if (this.success) {
      return this._value;
    }
    throw this._error;
  }
  fold(onSuccess, onFailure) {
    const isAsync = isAsyncFn(onSuccess) || isAsyncFn(onFailure);
    const outcome = this.success ? onSuccess(this._value) : onFailure(this._error);
    return isAsync && !isPromise(outcome) ? Promise.resolve(outcome) : outcome;
  }
  onFailure(action) {
    const isAsync = isAsyncFn(action);
    if (this.failure) {
      const outcome = action(this._error);
      if (isAsync) {
        return new AsyncResult((resolve) => {
          outcome.then(() => resolve(_Result.error(this._error)));
        });
      }
      return this;
    }
    return isAsync ? AsyncResult.ok(this._value) : this;
  }
  onSuccess(action) {
    const isAsync = isAsyncFn(action);
    if (this.success) {
      const outcome = action(this._value);
      if (isAsync) {
        return new AsyncResult((resolve) => {
          outcome.then(() => resolve(_Result.ok(this._value)));
        });
      }
      return this;
    }
    return isAsync ? AsyncResult.error(this._error) : this;
  }
  map(transform) {
    return this.success ? _Result.run(() => transform(this._value)) : isAsyncFn(transform) ? AsyncResult.error(this._error) : this;
  }
  mapCatching(transformValue, transformError) {
    return this.success ? _Result.try(() => transformValue(this._value), transformError) : this;
  }
  mapError(transform) {
    if (this.success) {
      return this;
    }
    return _Result.error(transform(this._error));
  }
  recover(onFailure) {
    return this.success ? isAsyncFn(onFailure) ? AsyncResult.ok(this._value) : this : _Result.run(() => onFailure(this._error));
  }
  recoverCatching(onFailure) {
    return this.success ? isAsyncFn(onFailure) ? AsyncResult.ok(this._value) : this : _Result.try(() => onFailure(this._error));
  }
  toString() {
    if (this.success) {
      return `Result.ok(${this._value})`;
    }
    return `Result.error(${this.error})`;
  }
  static ok(value) {
    return new _Result(value, undefined);
  }
  static error(error) {
    return new _Result(undefined, error);
  }
  static isResult(possibleResult) {
    return possibleResult instanceof _Result;
  }
  static isAsyncResult(possibleAsyncResult) {
    return possibleAsyncResult instanceof AsyncResult;
  }
  static run(fn) {
    const returnValue = fn();
    if (isPromise(returnValue)) {
      return AsyncResult.fromPromise(returnValue);
    }
    return _Result.isResult(returnValue) ? returnValue : _Result.ok(returnValue);
  }
  static allInternal(items, opts) {
    const runner = opts.catching ? _Result.try : _Result.run;
    const flattened = [];
    let isAsync = items.some(isPromise);
    let hasFailure = false;
    for (const item of items) {
      if (isFunction(item)) {
        if (hasFailure) {
          continue;
        }
        const returnValue = runner(item);
        if (_Result.isResult(returnValue) && returnValue.isError()) {
          hasFailure = true;
          if (!isAsync) {
            return returnValue;
          }
        }
        if (_Result.isAsyncResult(returnValue)) {
          isAsync = true;
        }
        flattened.push(returnValue);
      } else if (_Result.isResult(item)) {
        if (item.isError()) {
          hasFailure = true;
          if (!isAsync) {
            return item;
          }
        }
        flattened.push(item);
      } else if (_Result.isAsyncResult(item)) {
        isAsync = true;
        flattened.push(item);
      } else if (isPromise(item)) {
        isAsync = true;
        flattened.push(opts.catching ? AsyncResult.fromPromiseCatching(item) : AsyncResult.fromPromise(item));
      } else {
        flattened.push(_Result.ok(item));
      }
    }
    if (isAsync) {
      return new AsyncResult((resolve, reject) => {
        const asyncResults = [];
        const asyncIndexes = [];
        for (let i = 0;i < flattened.length; i++) {
          const item = flattened[i];
          if (_Result.isAsyncResult(item)) {
            asyncResults.push(item);
            asyncIndexes.push(i);
          }
        }
        Promise.all(asyncResults).then((resolvedResults) => {
          const merged = [...flattened];
          for (let i = 0;i < resolvedResults.length; i++) {
            merged[asyncIndexes[i]] = resolvedResults[i];
          }
          const firstFailedResult = merged.find((resolvedResult) => resolvedResult.isError());
          if (firstFailedResult) {
            resolve(firstFailedResult);
            return;
          }
          resolve(_Result.ok(merged.map((result) => result.getOrNull())));
        }).catch((reason) => {
          reject(reason);
        });
      });
    }
    return _Result.ok(flattened.map((result) => result.getOrNull()));
  }
  static all(...items) {
    return _Result.allInternal(items, {
      catching: false
    });
  }
  static allCatching(...items) {
    return _Result.allInternal(items, {
      catching: true
    });
  }
  static wrap(fn) {
    return function wrapped(...args) {
      return _Result.try(() => fn(...args));
    };
  }
  static try(fn, transform) {
    try {
      const returnValue = fn();
      if (isPromise(returnValue)) {
        return AsyncResult.fromPromiseCatching(returnValue, transform);
      }
      return _Result.isResult(returnValue) ? returnValue : _Result.ok(returnValue);
    } catch (caughtError) {
      return _Result.error(transform?.(caughtError) ?? caughtError);
    }
  }
  static fromAsync(value) {
    return _Result.run(() => value);
  }
  static fromAsyncCatching(value) {
    return _Result.try(() => value);
  }
  static assertOk(result) {
    if (result.isError()) {
      throw new Error("Expected a successful result, but got an error instead");
    }
  }
  static assertError(result) {
    if (result.isOk()) {
      throw new Error("Expected a failed result, but got a value instead");
    }
  }
};

// src/studio/utils.ts
async function handleStudioFunc(studioFunction, ...functionArgs) {
  const result = await Result.wrap(studioFunction)(...functionArgs);
  return result.map((er) => {
    if (er.success) {
      const data = er.parsedData;
      if (data == null) {
        return Result.error(Error(`parsedData is null`));
      } else {
        return data;
      }
    } else {
      return Result.error(Error(`Studio Returned Error ${er.status}:${er.error}`));
    }
  });
}

// src/studio/layoutHandler.ts
async function getPrivateData({ studio: studio2, id }) {
  const result = await handleStudioFunc(studio2.layout.getPrivateData, id);
  console.log(result);
  if (result.isError())
    return result;
  return Result.try(() => result.value);
}
async function setPrivateData({
  studio: studio2,
  id,
  privateData
}) {
  return await handleStudioFunc(studio2.layout.setPrivateData, id, privateData);
}
async function getAllLayouts(studio2) {
  return await handleStudioFunc(studio2.layout.getAll);
}
async function getSelected(studio2) {
  return await handleStudioFunc(studio2.layout.getSelected);
}
async function updateLayoutResizable(studio2, id, update) {
  return await handleStudioFunc(studio2.layout.setResizableByUser, id, update);
}

// src/studio/variableHandler.ts
async function getAllVariables(studio2) {
  return handleStudioFunc(studio2.next.variable.getAll);
}
async function setVariableValue2({
  studio: studio2,
  id,
  value
}) {
  return handleStudioFunc(studio2.variable.setValue, id, value);
}
async function setVariableVisblity({ studio: studio2, id, visible }) {
  return handleStudioFunc(studio2.variable.setVariableVisibility, id, visible);
}
async function setVariableVisblityWithName({ studio: studio2, name, visible }) {
  const allVariablesResult = await getAllVariables(studio2);
  return allVariablesResult.map(async (variables) => {
    const existingVariable = variables.find((variable) => variable.name === name);
    if (existingVariable) {
      return await setVariableVisblity({
        studio: studio2,
        id: existingVariable.id,
        visible
      });
    } else {
      return Result.error(new Error(`Variable with name ${name} not found`));
    }
  });
}
async function createVariable({
  studio: studio2,
  variableType,
  name
}) {
  const createResult = await handleStudioFunc(studio2.variable.create, "", variableType);
  return createResult.map(async (id) => {
    const result = await handleStudioFunc(studio2.variable.rename, id, name);
    if (result.isOk())
      return id;
    return Result.error(result.value);
  });
}
async function setOrCreateVariableValue({
  studio: studio2,
  name,
  value,
  variableType
}) {
  const allVariablesResult = await getAllVariables(studio2);
  return allVariablesResult.map(async (variables) => {
    const existingVariable = variables.find((variable) => variable.name === name);
    if (existingVariable) {
      return await setVariableValue2({
        studio: studio2,
        id: existingVariable.id,
        value
      });
    } else {
      const createResult = await createVariable({
        studio: studio2,
        variableType,
        name
      });
      return createResult.map(async (id) => {
        return await setVariableValue2({
          studio: studio2,
          id,
          value
        });
      });
    }
  });
}
async function getById(studio2, id) {
  return handleStudioFunc(studio2.next.variable.getById, id);
}

// src/studio/studioAdapter.ts
var import_studio_sdk = __toESM(require_main(), 1);

// src/types/toolbarEnvelope.ts
function createEmptyEnvelope() {
  return {
    layoutMaps: [],
    frameMaps: [],
    layoutSizes: {}
  };
}

// src/studio/actionHandler.ts
class ActionNotFoundError extends Error {
  _tag = "ActionNotFoundError";
}
async function getAction({
  studio: studio2,
  name
}) {
  const actionsResult = await handleStudioFunc(studio2.action.getAll);
  return actionsResult.map((actions) => {
    const sgAction = actions.find((a) => a.name == name);
    if (sgAction == null) {
      return Result.error(new ActionNotFoundError("Action not found, null"));
    }
    return sgAction;
  });
}
async function createAction(studio2) {
  return handleStudioFunc(studio2.action.create);
}
async function updateAction(actionData, update) {
  const { studio: studio2 } = actionData;
  const actionResult = await getAction(actionData);
  return actionResult.recover(async (error) => {
    if (error instanceof ActionNotFoundError) {
      return createAction(actionData.studio);
    } else {
      return Result.error(error);
    }
  }).map((value) => {
    return handleStudioFunc(studio2.action.update, typeof value == "string" ? value : value.id, update);
  });
}
function setEnableActions(studio2, value) {
  if (value) {
    studio2.action.enable();
  } else {
    studio2.action.disable();
  }
}

// src/studio/actions/imageSelection.js
function imageSelectionScript(debug) {
  const version2 = "0.4";
  const imageSelectionData = "%DATA%";
  const errorCollection = [];
  const debugData = {};
  try {
    let replaceVariables = function(input, allTransforms) {
      return input.replace(/\${(.*?)}/g, (_, name) => {
        const variableValue = getVariableValue(name);
        const currentTransforms = allTransforms[name];
        return currentTransforms.reduce((previousValue, transform) => {
          if (transform.replaceAll) {
            return previousValue.replaceAll(transform.find, transform.replace);
          }
          return previousValue.replace(transform.find, transform.replace);
        }, variableValue);
      });
    }, getCompositeKeyFromVariables = function(dependencies) {
      return dependencies.map((dep) => {
        const variableRawValue = getVariableValue(dep);
        return `${variableRawValue}`;
      }).join("|");
    };
    const vars = studio.variables.all();
    const imageVars = vars.filter((f) => f.type == "image");
    const layoutName = getSelectedLayoutName();
    const layoutImageMapping = imageSelectionData[layoutName];
    if (debug) {
      debugData.imageVars = imageVars;
      debugData.layoutImageMapping = layoutImageMapping;
    }
    if (!layoutImageMapping) {
      errorCollection.push(Error(`No image mapping found for layout ${layoutName}`));
      return { debugData, errorCollection };
    }
    for (const imageVar of imageVars) {
      const imageVariableDependentGroups = layoutImageMapping[imageVar.name];
      if (debug) {
        debugData[imageVar.name] = {
          imageVariableDependentGroups: layoutImageMapping[imageVar.name]
        };
      }
      if (!imageVariableDependentGroups) {
        errorCollection.push(Error(`No  dependent groups found for image variable: ${imageVar.name}`));
        continue;
      }
      const dependancies = Object.keys(imageVariableDependentGroups);
      if (debug) {
        debugData[imageVar.name].dependancies = dependancies;
      }
      if (dependancies.length == 0) {
        errorCollection.push(Error(`Something went wrong no dependancies for: ${imageVar.name}`));
        continue;
      }
      const variableMatch = dependancies.reduce((variableMatch2, d) => {
        if (variableMatch2 != null) {
          return variableMatch2;
        }
        const compositeKey = getCompositeKeyFromVariables(d.split("|"));
        variableMatch2 = imageVariableDependentGroups[d][compositeKey];
        if (debug) {
          debugData[imageVar.name].compositeKeys = !debugData[imageVar.name].compositeKeys ? [compositeKey] : [...debugData[imageVar.name].compositeKeys, compositeKey];
          debugData[imageVar.name].variableMatches = !debugData[imageVar.name].variableMatches ? [variableMatch2] : [...debugData[imageVar.name].variableMatches, variableMatch2];
        }
        return variableMatch2;
      }, null);
      if (debug) {
        debugData[imageVar.name].variableMatch = variableMatch;
      }
      if (!variableMatch) {
        errorCollection.push(Error(`Something went wrong no match found for: ${imageVar.name}`));
        continue;
      }
      const variableValue = replaceVariables(variableMatch.value, variableMatch.transforms);
      setVariableValue(imageVar.name, variableValue);
      if (debug) {
        debugData[imageVar.name].variableValue = variableValue;
      }
    }
  } catch (e) {
    errorCollection.push(e);
  }
  return { debugData, errorCollection };
}

// src/studio/actions/imageSizing.js
function imageSizingScript(debug) {
  const version2 = 1;
  const imageSizingData = "%DATA1%";
  const layoutSizingData = "%DATA2%";
  const errorCollection = [];
  const vars = studio.variables.all();
  const imageVars = vars.filter((f) => f.type == "image");
  const layoutName = getSelectedLayoutName();
  const layoutImageSizingData = imageSizingData[layoutName];
  const layoutSizeData = layoutSizingData[layoutName];
  if (layoutSizeData == null) {
    errorCollection.push(Error(`No layout sizing data found for ${layoutName}}`));
    return;
  }
  if (layoutImageSizingData == null) {
    errorCollection.push(Error(`No layout image sizing data found for ${layoutName}}`));
    return;
  }
  for (const imageVar of imageVars) {
    const imageSizeData = layoutImageSizingData[imageVar.value];
    if (imageSizeData == null) {
      errorCollection.push(Error(`No image size data found for ${imageVar.value} for variable ${imageVar.name}`));
      continue;
    }
    const newFramePos = calculateUpdatedFrame(imageSizeData, layoutSizeData, {
      width: getPageWidth(),
      height: getPageHeight()
    });
    const frameName = imageSizeData.frameName;
    setFrameX(frameName, newFramePos.x);
    setFrameY(frameName, newFramePos.y);
    setFrameWidth(frameName, newFramePos.width);
    setFrameHeight(frameName, newFramePos.height);
  }
  function calculateUpdatedFrame(initialFrame, initialPage, currentPage) {
    if (initialPage.width <= 0 || initialPage.height <= 0) {
      return initialFrame;
    }
    const relativeInitialX = initialFrame.x;
    const relativeInitialY = initialFrame.y;
    const widthRatio = initialFrame.width / initialPage.width;
    const heightRatio = initialFrame.height / initialPage.height;
    const xPosRatio = relativeInitialX / initialPage.width;
    const yPosRatio = relativeInitialY / initialPage.height;
    const updatedWidth = currentPage.width * widthRatio;
    const updatedHeight = currentPage.height * heightRatio;
    const updatedRelativeX = currentPage.width * xPosRatio;
    const updatedRelativeY = currentPage.height * yPosRatio;
    const updatedX = updatedRelativeX;
    const updatedY = updatedRelativeY;
    return {
      x: updatedX,
      y: updatedY,
      width: updatedWidth,
      height: updatedHeight
    };
  }
}

// src/studio/layoutMappingToActionMap.ts
function layoutMappingToActionMap(layoutMaps, doc) {
  const actionMap = {};
  layoutMaps.forEach((layoutMap) => {
    layoutMap.layoutIds.forEach((layoutId) => {
      const layout = doc.layouts.find((l) => l.id === layoutId);
      if (layout) {
        const layoutName = layout.name;
        if (!actionMap[layoutName]) {
          actionMap[layoutName] = {};
        }
        layoutMap.variables.forEach((imageVar) => {
          const docVariable = doc.variables.find((v) => v.id === imageVar.id);
          if (docVariable) {
            actionMap[layoutName][docVariable.name] = {};
            imageVar.dependentGroup.forEach((group) => {
              const dependentNames = [];
              const variableNamesById = {};
              group.dependents.forEach((dependent) => {
                const dependentVar = doc.variables.find((v) => v.id === dependent.variableId);
                if (dependentVar) {
                  dependentNames.push(dependentVar.name);
                  variableNamesById[dependent.variableId] = dependentVar.name;
                }
              });
              if (dependentNames.length === 0)
                return;
              const dependentKey = dependentNames.join("|");
              if (!actionMap[layoutName][docVariable.name][dependentKey]) {
                actionMap[layoutName][docVariable.name][dependentKey] = {};
              }
              const allPossibleValues = group.dependents.map((dependent) => {
                return dependent.values;
              });
              const generateCombinations = (arrays, current2 = [], index2 = 0) => {
                if (index2 === arrays.length) {
                  return [current2];
                }
                const result = [];
                for (const value of arrays[index2]) {
                  result.push(...generateCombinations(arrays, [...current2, value], index2 + 1));
                }
                return result;
              };
              const valueCombinations = generateCombinations(allPossibleValues);
              valueCombinations.forEach((combination) => {
                const valueKey = combination.join("|");
                if (!actionMap[layoutName][docVariable.name][dependentKey][valueKey]) {
                  actionMap[layoutName][docVariable.name][dependentKey][valueKey] = { value: "" };
                }
                const valueString = group.variableValue.map((varValue) => {
                  if (typeof varValue === "string") {
                    return varValue;
                  } else if (varValue.id) {
                    const valueVar = doc.variables.find((v) => v.id === varValue.id);
                    if (valueVar) {
                      return `\${${valueVar.name}}`;
                    }
                  }
                  return "";
                }).join("");
                console.log("VALUES", group.variableValue);
                const transforms = group.variableValue.filter((varValue) => typeof varValue != "string").reduce((obj, varValue) => {
                  if (varValue.id) {
                    const valueVar = doc.variables.find((v) => v.id === varValue.id);
                    if (valueVar) {
                      obj[valueVar.name] = varValue.transform;
                    }
                  }
                  return obj;
                }, {});
                actionMap[layoutName][docVariable.name][dependentKey][valueKey].value = valueString;
                actionMap[layoutName][docVariable.name][dependentKey][valueKey].transforms = transforms;
              });
            });
          }
        });
      }
    });
  });
  return actionMap;
}

// src/studio/frameHandler.ts
async function getSelected2(studio2) {
  return handleStudioFunc(studio2.frame.getSelected);
}
async function getById2(studio2, id) {
  return handleStudioFunc(studio2.frame.getById, id);
}
async function getAll(studio2) {
  return handleStudioFunc(studio2.frame.getAll);
}
async function getPropertiesOnSelectedLayout(studio2) {
  return handleStudioFunc(studio2.frame.getPropertiesOnSelectedLayout);
}

// src/studio-adapter/frameLayoutMappingToLookup.ts
async function frameLayoutMappingToLookup(frameMaps, studio2) {
  try {
    const result = {};
    const layoutsResult = await getAllLayouts(studio2);
    if (layoutsResult.isError()) {
      throw layoutsResult.error;
    }
    const layouts = layoutsResult.value;
    if (!layouts) {
      throw new Error("Failed to get layouts");
    }
    const framesResult = await getAll(studio2);
    if (framesResult.isError()) {
      throw framesResult.error;
    }
    const frames = framesResult.value;
    if (!frames) {
      throw new Error("Failed to get frames");
    }
    const layoutIdToNameMap = new Map;
    const frameIdToNameMap = new Map;
    for (const layout of layouts) {
      layoutIdToNameMap.set(layout.id, layout.name);
    }
    for (const frame of frames) {
      frameIdToNameMap.set(frame.id, frame.name);
    }
    for (const frameMap of frameMaps) {
      const { layoutId, frameSnapshots } = frameMap;
      const layoutName = layoutIdToNameMap.get(layoutId) || layoutId;
      if (!result[layoutName]) {
        result[layoutName] = {};
      }
      for (const snapshot of frameSnapshots) {
        const { imageName, ...rest } = snapshot;
        const frameName = frameIdToNameMap.get(snapshot.frameId);
        if (!frameName) {
          throw new Error(`No frame name for frame with ID: ${snapshot.frameId}`);
        }
        const newRest = { ...rest, frameName };
        result[layoutName][imageName] = newRest;
      }
    }
    return Result.ok(result);
  } catch (error) {
    return Result.error(error instanceof Error ? error : new Error(String(error)));
  }
}

// src/studio-adapter/layoutManagerToLookup.ts
async function layoutManagerToLookup(studio2) {
  const layoutsResult = await getAllLayouts(studio2);
  if (layoutsResult.isError()) {
    console.error("Failed to get layouts:", layoutsResult.error);
    return layoutsResult;
  }
  const layouts = layoutsResult.value;
  if (!layouts) {
    return Result.error(new Error("Layouts are null or undefined"));
  }
  return Result.try(() => {
    const layoutSizes = {};
    for (const layout of layouts) {
      const widthValue = typeof layout.width === "object" && layout.width !== null ? layout.width.value : layout.width;
      const heightValue = typeof layout.height === "object" && layout.height !== null ? layout.height.value : layout.height;
      const aspectRatio = heightValue > 0 ? widthValue / heightValue : 0;
      layoutSizes[layout.name] = {
        width: widthValue,
        height: heightValue,
        aspectRatio
      };
    }
    return layoutSizes;
  });
}

// src/studio/actions/layoutSizing.js
function layoutSizingScript(debug = false) {
  const version2 = 2;
  let debugObj = {};
  const selectedLayoutName = getSelectedLayoutName();
  const data = JSON.parse(getTextVariableValue("AUTO_GEN_TOOLBAR_LAYOUTS"));
  if (selectedLayoutName == null) {
    return;
  }
  const { width, height, aspectRatio: layoutRatio } = data[selectedLayoutName];
  if (debug) {
    debugObj = JSON.parse(JSON.stringify({
      selectedLayoutName,
      data,
      layoutRatio,
      width,
      height
    }));
  }
  if (layoutRatio != null && width != null && height != null) {
    const originalAspectRatio = layoutRatio;
    const minAllowedRatio = originalAspectRatio * 0.8;
    const maxAllowedRatio = originalAspectRatio * 1.2;
    const pageWidth = getPageWidth();
    const pageHeight = getPageHeight();
    const currentAspectRatio = pageWidth / pageHeight;
    if (debug) {
      debugObj = {
        currentAspectRatio,
        minAllowedRatio,
        maxAllowedRatio,
        pageWidth,
        pageHeight,
        ...debugObj
      };
    }
    if (currentAspectRatio < minAllowedRatio || currentAspectRatio > maxAllowedRatio) {
      const distToMin = Math.abs(currentAspectRatio - minAllowedRatio);
      const distToMax = Math.abs(currentAspectRatio - maxAllowedRatio);
      const targetRatio = distToMin <= distToMax ? minAllowedRatio : maxAllowedRatio;
      if (Math.round(width) == Math.round(pageWidth)) {
        let newWidth = pageHeight * targetRatio;
        data[selectedLayoutName].width = newWidth;
        data[selectedLayoutName].height = pageHeight;
        setPageSize(newWidth, pageHeight);
      } else if (Math.round(height) == Math.round(pageHeight)) {
        let newHeight = pageWidth / targetRatio;
        data[selectedLayoutName].height = newHeight;
        data[selectedLayoutName].width = pageWidth;
        setPageSize(pageWidth, newHeight);
      } else {
        data[selectedLayoutName].height = pageHeight;
        data[selectedLayoutName].width = pageHeight * targetRatio;
        setPageSize(data[selectedLayoutName].width, pageHeight);
      }
    } else {
      data[selectedLayoutName].height = pageHeight;
      data[selectedLayoutName].width = pageWidth;
    }
    setVariableValue("AUTO_GEN_TOOLBAR_LAYOUTS", JSON.stringify(data, null, 0));
  }
  if (debug) {
    console.log(debugObj);
  }
}

// src/studio/studioAdapter.ts
async function getStudio() {
  if (window.SDK == null)
    return Result.error(new Error("Studio SDK does not exist on the window"));
  return Result.ok(window.SDK);
}
async function tryAddingToolbarToData(data) {
  const newData = {
    ...data,
    toolbar: JSON.stringify(createEmptyEnvelope(), null, 0)
  };
  return setPrivateData({
    studio: window.SDK,
    id: "0",
    privateData: newData
  });
}
async function loadLayoutImageMapFromDoc() {
  const result = await loadToolbarDataFromDoc();
  if (await result.isOk()) {
    return Result.ok(result.value?.layoutMaps ?? []);
  }
  return result;
}
async function loadFrameLayoutMapsFromDoc() {
  const result = await loadToolbarDataFromDoc();
  if (await result.isOk()) {
    return Result.ok(result.value?.frameMaps ?? []);
  }
  return result;
}
async function loadToolbarDataFromDoc() {
  const dataResult = await getPrivateData({
    id: "0",
    studio: window.SDK
  });
  if (dataResult.isOk()) {
    const data = dataResult.value;
    if (data.toolbar != null) {
      const toolbarResult = await Result.try(() => JSON.parse(data.toolbar));
      if (toolbarResult.isOk()) {
        return Result.ok(toolbarResult.value);
      }
      return toolbarResult;
    } else {
      const setDataResult = await tryAddingToolbarToData(data);
      if (setDataResult.isOk()) {
        return Result.ok(createEmptyEnvelope());
      }
      return setDataResult;
    }
  }
  return dataResult;
}
function saveLayoutImageMapToDoc(layoutMaps) {
  return saveToolbarDataToDoc("layoutMaps", layoutMaps);
}
function saveFrameLayoutMapsToDoc(frameMaps) {
  return saveToolbarDataToDoc("frameMaps", frameMaps);
}
async function saveToolbarDataToDoc(key, value) {
  const dataResult = await getPrivateData({
    id: "0",
    studio: window.SDK
  });
  if (dataResult.isOk()) {
    let data = dataResult.value;
    if (data.toolbar == null) {
      const setDataResult = await tryAddingToolbarToData(data);
      if (setDataResult.isOk()) {
        const dataResult2 = await getPrivateData({
          id: "0",
          studio: window.SDK
        });
        if (dataResult2.isOk()) {
          data = dataResult2.value;
        }
        return dataResult2;
      } else {
        return setDataResult;
      }
    }
    if (data.toolbar != null) {
      const toolbarResult = await Result.try(() => JSON.parse(data.toolbar));
      if (toolbarResult.isOk()) {
        const toolbar = toolbarResult.value;
        toolbar[key] = value;
        const stringifyResult = Result.try(() => JSON.stringify(toolbar, null, 0));
        if (stringifyResult.isOk()) {
          data.toolbar = stringifyResult.value;
          const setDataResult = await setPrivateData({
            studio: window.SDK,
            id: "0",
            privateData: data
          });
          if (setDataResult.isOk()) {
            return Result.ok();
          }
          return setDataResult;
        }
        return stringifyResult;
      }
      return toolbarResult;
    }
    return Result.error(new Error("data.toolbar is null even after we tried to fix it"));
  }
  return dataResult;
}
async function loadDocFromDoc() {
  const layoutsResult = await getAllLayouts(window.SDK);
  if (!layoutsResult.isOk()) {
    return layoutsResult;
  }
  const variablesResult = await getAllVariables(window.SDK);
  if (!variablesResult.isOk()) {
    return variablesResult;
  }
  const layouts = layoutsResult.value.map((layout) => ({
    name: layout.name || "",
    id: layout.id || "",
    parentId: layout.parentId
  }));
  const variables = variablesResult.value.map((variable) => {
    const baseVariable = {
      id: variable.id || "",
      name: variable.name || "",
      isVisiblie: variable.isVisible ?? false
    };
    switch (variable.type) {
      case "image":
      case "shortText":
        return {
          ...baseVariable,
          type: variable.type,
          value: String(variable.value || "")
        };
      case "list":
        return {
          ...baseVariable,
          type: "list",
          value: String(variable.value || ""),
          items: Array.isArray(variable.items) ? variable.items.map((item) => ({
            value: String(item.value || ""),
            displayValue: item.displayValue
          })) : []
        };
      case "boolean":
        return {
          ...baseVariable,
          type: "boolean",
          value: Boolean(variable.value)
        };
      default:
        return {
          ...baseVariable,
          type: "shortText",
          value: String(variable.value || "")
        };
    }
  });
  return Result.ok({
    layouts,
    variables
  });
}
async function saveLayoutMappingToAction(layoutMaps, doc) {
  const actionMap = layoutMappingToActionMap(layoutMaps, doc);
  const script = imageSelectionScript.toString().replace('"%DATA%"', JSON.stringify(actionMap)) + `
console.log(imageSelectionScript(false))`;
  const updateResult = await updateAction({
    name: "AUTO_GEN_TOOLBAR",
    studio: window.SDK
  }, {
    name: "AUTO_GEN_TOOLBAR",
    triggers: [
      { event: import_studio_sdk.ActionEditorEvent.selectedLayoutChanged },
      { event: import_studio_sdk.ActionEditorEvent.variableValueChanged }
    ],
    script
  });
  return updateResult;
}
async function saveImageSizingMappingToAction(frameMaps) {
  const imageResizingMapResult = await frameLayoutMappingToLookup(frameMaps, window.SDK);
  const layoutSizingMapResult = await layoutManagerToLookup(window.SDK);
  const results = Result.all(imageResizingMapResult, layoutSizingMapResult);
  if (results.isError() || results.value == null) {
    return results;
  }
  const [imageResizingData, layoutSizingData] = results.value;
  const script = imageSizingScript.toString().replace('"%DATA1%"', JSON.stringify(imageResizingData)).replace('"%DATA2%"', JSON.stringify(layoutSizingData)) + `
console.log(imageSizingScript(false))`;
  const updateResult = await updateAction({
    name: "AUTO_GEN_TOOLBAR_IR",
    studio: window.SDK
  }, {
    name: "AUTO_GEN_TOOLBAR_IR",
    triggers: [
      { event: import_studio_sdk.ActionEditorEvent.selectedLayoutChanged },
      { event: import_studio_sdk.ActionEditorEvent.variableValueChanged }
    ],
    script
  });
  return updateResult;
}
async function saveLayoutSizingToAction(on) {
  if (on) {
    const layoutSizingMapResult = await layoutManagerToLookup(window.SDK);
    if (layoutSizingMapResult.isError() || layoutSizingMapResult.value == null) {
      return layoutSizingMapResult;
    }
    const script = layoutSizingScript.toString() + `
console.log(layoutSizingScript(false))`;
    const updateResult = await updateAction({
      name: "AUTO_GEN_TOOLBAR_LAYOUTS",
      studio: window.SDK
    }, {
      name: "AUTO_GEN_TOOLBAR_LAYOUTS",
      triggers: [
        { event: import_studio_sdk.ActionEditorEvent.pageSizeChanged }
      ],
      script
    });
    if (updateResult.isError()) {
      return updateResult;
    }
    const variableResult = await setOrCreateVariableValue({
      studio: window.SDK,
      name: "AUTO_GEN_TOOLBAR_LAYOUTS",
      variableType: import_studio_sdk.VariableType.shortText,
      value: JSON.stringify(layoutSizingMapResult.value, null, 0)
    });
    if (variableResult.isError()) {
      return variableResult;
    }
    return setVariableVisblityWithName({ studio: window.SDK, name: "AUTO_GEN_TOOLBAR_LAYOUTS", visible: { type: import_studio_sdk.VariableVisibilityType.invisible } });
  } else {
    const variableResult = await setOrCreateVariableValue({
      studio: window.SDK,
      name: "AUTO_GEN_TOOLBAR_LAYOUTS",
      variableType: import_studio_sdk.VariableType.shortText,
      value: JSON.stringify({}, null, 0)
    });
    if (variableResult.isError()) {
      return variableResult;
    }
    return setVariableVisblityWithName({ studio: window.SDK, name: "AUTO_GEN_TOOLBAR_LAYOUTS", visible: { type: import_studio_sdk.VariableVisibilityType.invisible } });
  }
}
async function updateFrameLayoutMaps(frameSnapshot) {
  try {
    const studioResult = await getStudio();
    if (!studioResult.isOk()) {
      return Result.error(studioResult.error);
    }
    const studio2 = studioResult.value;
    const selectedLayoutResult = await getSelected(studio2);
    if (!selectedLayoutResult.isOk()) {
      return Result.error(new Error("Failed to get selected layout: " + selectedLayoutResult.error?.message));
    }
    const selectedLayout = selectedLayoutResult.value;
    if (!selectedLayout || !selectedLayout.id) {
      return Result.error(new Error("No layout is currently selected"));
    }
    const layoutId = selectedLayout.id;
    const frameLayoutMapsResult = await loadFrameLayoutMapsFromDoc();
    if (!frameLayoutMapsResult.isOk()) {
      return Result.error(new Error("Failed to load frame layout maps: " + frameLayoutMapsResult.error?.message));
    }
    const frameLayoutMaps = frameLayoutMapsResult.value;
    let frameLayoutMap = frameLayoutMaps.find((map) => map.layoutId === layoutId);
    if (!frameLayoutMap) {
      frameLayoutMap = {
        layoutId,
        frameSnapshots: []
      };
      frameLayoutMaps.push(frameLayoutMap);
    }
    const frameSnapshotIndex = frameLayoutMap.frameSnapshots.findIndex((snapshot) => snapshot.frameId === frameSnapshot.frameId && snapshot.imageName == frameSnapshot.assetId);
    const newFrameSnapshot = {
      imageName: frameSnapshot.assetId,
      frameId: frameSnapshot.frameId,
      x: frameSnapshot.x,
      y: frameSnapshot.y,
      width: frameSnapshot.width,
      height: frameSnapshot.height
    };
    if (frameSnapshotIndex >= 0) {
      frameLayoutMap.frameSnapshots[frameSnapshotIndex] = newFrameSnapshot;
    } else {
      frameLayoutMap.frameSnapshots.push(newFrameSnapshot);
    }
    const saveResult = await saveFrameLayoutMapsToDoc(frameLayoutMaps);
    if (!saveResult.isOk()) {
      return Result.error(new Error("Failed to save frame layout maps: " + saveResult.error?.message));
    }
    return Result.ok(undefined);
  } catch (error) {
    return Result.error(error instanceof Error ? error : new Error(String(error)));
  }
}

// src/components/LayoutMappingModal/LayoutModal.tsx
var import_react245 = __toESM(require_react(), 1);

// node_modules/styled-components/node_modules/tslib/tslib.es6.mjs
var __assign = function() {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length;i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar;i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}

// node_modules/styled-components/dist/styled-components.browser.esm.js
var import_react2 = __toESM(require_react(), 1);
var import_shallowequal = __toESM(require_shallowequal(), 1);

// node_modules/stylis/src/Enum.js
var MS = "-ms-";
var MOZ = "-moz-";
var WEBKIT = "-webkit-";
var COMMENT = "comm";
var RULESET = "rule";
var DECLARATION = "decl";
var IMPORT = "@import";
var KEYFRAMES = "@keyframes";
var LAYER = "@layer";

// node_modules/stylis/src/Utility.js
var abs = Math.abs;
var from = String.fromCharCode;
var assign3 = Object.assign;
function hash(value, length) {
  return charat(value, 0) ^ 45 ? (((length << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
}
function trim(value) {
  return value.trim();
}
function match(value, pattern) {
  return (value = pattern.exec(value)) ? value[0] : value;
}
function replace(value, pattern, replacement) {
  return value.replace(pattern, replacement);
}
function indexof(value, search, position) {
  return value.indexOf(search, position);
}
function charat(value, index2) {
  return value.charCodeAt(index2) | 0;
}
function substr(value, begin, end) {
  return value.slice(begin, end);
}
function strlen(value) {
  return value.length;
}
function sizeof(value) {
  return value.length;
}
function append(value, array) {
  return array.push(value), value;
}
function combine(array, callback) {
  return array.map(callback).join("");
}
function filter(array, pattern) {
  return array.filter(function(value) {
    return !match(value, pattern);
  });
}

// node_modules/stylis/src/Tokenizer.js
var line = 1;
var column = 1;
var length = 0;
var position = 0;
var character = 0;
var characters = "";
function node(value, root2, parent, type, props, children, length2, siblings) {
  return { value, root: root2, parent, type, props, children, line, column, length: length2, return: "", siblings };
}
function copy(root2, props) {
  return assign3(node("", null, null, "", null, null, 0, root2.siblings), root2, { length: -root2.length }, props);
}
function lift(root2) {
  while (root2.root)
    root2 = copy(root2.root, { children: [root2] });
  append(root2, root2.siblings);
}
function char() {
  return character;
}
function prev() {
  character = position > 0 ? charat(characters, --position) : 0;
  if (column--, character === 10)
    column = 1, line--;
  return character;
}
function next() {
  character = position < length ? charat(characters, position++) : 0;
  if (column++, character === 10)
    column = 1, line++;
  return character;
}
function peek3() {
  return charat(characters, position);
}
function caret() {
  return position;
}
function slice(begin, end) {
  return substr(characters, begin, end);
}
function token(type) {
  switch (type) {
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    case 59:
    case 123:
    case 125:
      return 4;
    case 58:
      return 3;
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
function alloc(value) {
  return line = column = 1, length = strlen(characters = value), position = 0, [];
}
function dealloc(value) {
  return characters = "", value;
}
function delimit(type) {
  return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
}
function whitespace(type) {
  while (character = peek3())
    if (character < 33)
      next();
    else
      break;
  return token(type) > 2 || token(character) > 3 ? "" : " ";
}
function escaping(index2, count) {
  while (--count && next())
    if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
      break;
  return slice(index2, caret() + (count < 6 && peek3() == 32 && next() == 32));
}
function delimiter(type) {
  while (next())
    switch (character) {
      case type:
        return position;
      case 34:
      case 39:
        if (type !== 34 && type !== 39)
          delimiter(character);
        break;
      case 40:
        if (type === 41)
          delimiter(type);
        break;
      case 92:
        next();
        break;
    }
  return position;
}
function commenter(type, index2) {
  while (next())
    if (type + character === 47 + 10)
      break;
    else if (type + character === 42 + 42 && peek3() === 47)
      break;
  return "/*" + slice(index2, position - 1) + "*" + from(type === 47 ? type : next());
}
function identifier(index2) {
  while (!token(peek3()))
    next();
  return slice(index2, position);
}

// node_modules/stylis/src/Parser.js
function compile(value) {
  return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
}
function parse(value, root2, parent, rule, rules, rulesets, pseudo, points, declarations) {
  var index2 = 0;
  var offset = 0;
  var length2 = pseudo;
  var atrule = 0;
  var property = 0;
  var previous = 0;
  var variable = 1;
  var scanning = 1;
  var ampersand = 1;
  var character2 = 0;
  var type = "";
  var props = rules;
  var children = rulesets;
  var reference = rule;
  var characters2 = type;
  while (scanning)
    switch (previous = character2, character2 = next()) {
      case 40:
        if (previous != 108 && charat(characters2, length2 - 1) == 58) {
          if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f", abs(index2 ? points[index2 - 1] : 0)) != -1)
            ampersand = -1;
          break;
        }
      case 34:
      case 39:
      case 91:
        characters2 += delimit(character2);
        break;
      case 9:
      case 10:
      case 13:
      case 32:
        characters2 += whitespace(previous);
        break;
      case 92:
        characters2 += escaping(caret() - 1, 7);
        continue;
      case 47:
        switch (peek3()) {
          case 42:
          case 47:
            append(comment(commenter(next(), caret()), root2, parent, declarations), declarations);
            break;
          default:
            characters2 += "/";
        }
        break;
      case 123 * variable:
        points[index2++] = strlen(characters2) * ampersand;
      case 125 * variable:
      case 59:
      case 0:
        switch (character2) {
          case 0:
          case 125:
            scanning = 0;
          case 59 + offset:
            if (ampersand == -1)
              characters2 = replace(characters2, /\f/g, "");
            if (property > 0 && strlen(characters2) - length2)
              append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1, declarations) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2, declarations), declarations);
            break;
          case 59:
            characters2 += ";";
          default:
            append(reference = ruleset(characters2, root2, parent, index2, offset, rules, points, type, props = [], children = [], length2, rulesets), rulesets);
            if (character2 === 123)
              if (offset === 0)
                parse(characters2, root2, reference, reference, props, rulesets, length2, points, children);
              else
                switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    parse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length2, children), children), rules, children, length2, points, rule ? props : children);
                    break;
                  default:
                    parse(characters2, reference, reference, reference, [""], children, 0, points, children);
                }
        }
        index2 = offset = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
        break;
      case 58:
        length2 = 1 + strlen(characters2), property = previous;
      default:
        if (variable < 1) {
          if (character2 == 123)
            --variable;
          else if (character2 == 125 && variable++ == 0 && prev() == 125)
            continue;
        }
        switch (characters2 += from(character2), character2 * variable) {
          case 38:
            ampersand = offset > 0 ? 1 : (characters2 += "\f", -1);
            break;
          case 44:
            points[index2++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
            break;
          case 64:
            if (peek3() === 45)
              characters2 += delimit(next());
            atrule = peek3(), offset = length2 = strlen(type = characters2 += identifier(caret())), character2++;
            break;
          case 45:
            if (previous === 45 && strlen(characters2) == 2)
              variable = 0;
        }
    }
  return rulesets;
}
function ruleset(value, root2, parent, index2, offset, rules, points, type, props, children, length2, siblings) {
  var post = offset - 1;
  var rule = offset === 0 ? rules : [""];
  var size = sizeof(rule);
  for (var i = 0, j = 0, k = 0;i < index2; ++i)
    for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value;x < size; ++x)
      if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
        props[k++] = z;
  return node(value, root2, parent, offset === 0 ? RULESET : type, props, children, length2, siblings);
}
function comment(value, root2, parent, siblings) {
  return node(value, root2, parent, COMMENT, from(char()), substr(value, 2, -2), 0, siblings);
}
function declaration(value, root2, parent, length2, siblings) {
  return node(value, root2, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2, siblings);
}

// node_modules/stylis/src/Prefixer.js
function prefix2(value, length2, children) {
  switch (hash(value, length2)) {
    case 5103:
      return WEBKIT + "print-" + value + value;
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return WEBKIT + value + value;
    case 4789:
      return MOZ + value + value;
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return WEBKIT + value + MOZ + value + MS + value + value;
    case 5936:
      switch (charat(value, length2 + 11)) {
        case 114:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
        case 108:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
        case 45:
          return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
      }
    case 6828:
    case 4268:
    case 2903:
      return WEBKIT + value + MS + value + value;
    case 6165:
      return WEBKIT + value + MS + "flex-" + value + value;
    case 5187:
      return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
    case 5443:
      return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/g, "") + (!match(value, /flex-|baseline/) ? MS + "grid-row-" + replace(value, /flex-|-self/g, "") : "") + value;
    case 4675:
      return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/g, "") + value;
    case 5548:
      return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
    case 5292:
      return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
    case 6060:
      return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
    case 4554:
      return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
    case 6187:
      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
    case 5495:
    case 3959:
      return replace(value, /(image-set\([^]*)/, WEBKIT + "$1" + "$`$1");
    case 4968:
      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
    case 4200:
      if (!match(value, /flex-|baseline/))
        return MS + "grid-column-align" + substr(value, length2) + value;
      break;
    case 2592:
    case 3360:
      return MS + replace(value, "template-", "") + value;
    case 4384:
    case 3616:
      if (children && children.some(function(element, index2) {
        return length2 = index2, match(element.props, /grid-\w+-end/);
      })) {
        return ~indexof(value + (children = children[length2].value), "span", 0) ? value : MS + replace(value, "-start", "") + value + MS + "grid-row-span:" + (~indexof(children, "span", 0) ? match(children, /\d+/) : +match(children, /\d+/) - +match(value, /\d+/)) + ";";
      }
      return MS + replace(value, "-start", "") + value;
    case 4896:
    case 4128:
      return children && children.some(function(element) {
        return match(element.props, /grid-\w+-start/);
      }) ? value : MS + replace(replace(value, "-end", "-span"), "span ", "") + value;
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (strlen(value) - 1 - length2 > 6)
        switch (charat(value, length2 + 1)) {
          case 109:
            if (charat(value, length2 + 4) !== 45)
              break;
          case 102:
            return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3" + "$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
          case 115:
            return ~indexof(value, "stretch", 0) ? prefix2(replace(value, "stretch", "fill-available"), length2, children) + value : value;
        }
      break;
    case 5152:
    case 5920:
      return replace(value, /(.+?):(\d+)(\s*\/\s*(span)?\s*(\d+))?(.*)/, function(_, a, b, c, d, e, f) {
        return MS + a + ":" + b + f + (c ? MS + a + "-span:" + (d ? e : +e - +b) + f : "") + value;
      });
    case 4949:
      if (charat(value, length2 + 6) === 121)
        return replace(value, ":", ":" + WEBKIT) + value;
      break;
    case 6444:
      switch (charat(value, charat(value, 14) === 45 ? 18 : 11)) {
        case 120:
          return replace(value, /(.+:)([^;\s!]+)(;|(\s+)?!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3" + "$1" + WEBKIT + "$2$3" + "$1" + MS + "$2box$3") + value;
        case 100:
          return replace(value, ":", ":" + MS) + value;
      }
      break;
    case 5719:
    case 2647:
    case 2135:
    case 3927:
    case 2391:
      return replace(value, "scroll-", "scroll-snap-") + value;
  }
  return value;
}

// node_modules/stylis/src/Serializer.js
function serialize(children, callback) {
  var output = "";
  for (var i = 0;i < children.length; i++)
    output += callback(children[i], i, children, callback) || "";
  return output;
}
function stringify(element, index2, children, callback) {
  switch (element.type) {
    case LAYER:
      if (element.children.length)
        break;
    case IMPORT:
    case DECLARATION:
      return element.return = element.return || element.value;
    case COMMENT:
      return "";
    case KEYFRAMES:
      return element.return = element.value + "{" + serialize(element.children, callback) + "}";
    case RULESET:
      if (!strlen(element.value = element.props.join(",")))
        return "";
  }
  return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
}

// node_modules/stylis/src/Middleware.js
function middleware(collection) {
  var length2 = sizeof(collection);
  return function(element, index2, children, callback) {
    var output = "";
    for (var i = 0;i < length2; i++)
      output += collection[i](element, index2, children, callback) || "";
    return output;
  };
}
function rulesheet(callback) {
  return function(element) {
    if (!element.root) {
      if (element = element.return)
        callback(element);
    }
  };
}
function prefixer(element, index2, children, callback) {
  if (element.length > -1) {
    if (!element.return)
      switch (element.type) {
        case DECLARATION:
          element.return = prefix2(element.value, element.length, children);
          return;
        case KEYFRAMES:
          return serialize([copy(element, { value: replace(element.value, "@", "@" + WEBKIT) })], callback);
        case RULESET:
          if (element.length)
            return combine(children = element.props, function(value) {
              switch (match(value, callback = /(::plac\w+|:read-\w+)/)) {
                case ":read-only":
                case ":read-write":
                  lift(copy(element, { props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")] }));
                  lift(copy(element, { props: [value] }));
                  assign3(element, { props: filter(children, callback) });
                  break;
                case "::placeholder":
                  lift(copy(element, { props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")] }));
                  lift(copy(element, { props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")] }));
                  lift(copy(element, { props: [replace(value, /:(plac\w+)/, MS + "input-$1")] }));
                  lift(copy(element, { props: [value] }));
                  assign3(element, { props: filter(children, callback) });
                  break;
              }
              return "";
            });
      }
  }
}

// node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
var unitlessKeys = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};

// node_modules/styled-components/dist/styled-components.browser.esm.js
var f = typeof process != "undefined" && process.env !== undefined && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || "data-styled";
var m = "active";
var y = "data-styled-version";
var v = "6.1.17";
var g = `/*!sc*/
`;
var S = typeof window != "undefined" && "HTMLElement" in window;
var w = Boolean(typeof SC_DISABLE_SPEEDY == "boolean" ? SC_DISABLE_SPEEDY : typeof process != "undefined" && process.env !== undefined && process.env.REACT_APP_SC_DISABLE_SPEEDY !== undefined && process.env.REACT_APP_SC_DISABLE_SPEEDY !== "" ? process.env.REACT_APP_SC_DISABLE_SPEEDY !== "false" && process.env.REACT_APP_SC_DISABLE_SPEEDY : typeof process != "undefined" && process.env !== undefined && process.env.SC_DISABLE_SPEEDY !== undefined && process.env.SC_DISABLE_SPEEDY !== "" ? process.env.SC_DISABLE_SPEEDY !== "false" && process.env.SC_DISABLE_SPEEDY : false);
var N = new Set;
var _ = Object.freeze([]);
var C = Object.freeze({});
function I(e, t, n) {
  return n === undefined && (n = C), e.theme !== n.theme && e.theme || t || n.theme;
}
var A = new Set(["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "tr", "track", "u", "ul", "use", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "marker", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"]);
var O = /[!"#$%&'()*+,./:;<=>?@[\\\]^`{|}~-]+/g;
var D = /(^-|-$)/g;
function R(e) {
  return e.replace(O, "-").replace(D, "");
}
var T = /(a)(d)/gi;
var k = 52;
var j = function(e) {
  return String.fromCharCode(e + (e > 25 ? 39 : 97));
};
function x(e) {
  var t, n = "";
  for (t = Math.abs(e);t > k; t = t / k | 0)
    n = j(t % k) + n;
  return (j(t % k) + n).replace(T, "$1-$2");
}
var V;
var F = 5381;
var M = function(e, t) {
  for (var n = t.length;n; )
    e = 33 * e ^ t.charCodeAt(--n);
  return e;
};
var z = function(e) {
  return M(F, e);
};
function $(e) {
  return x(z(e) >>> 0);
}
function B(e) {
  return e.displayName || e.name || "Component";
}
function L(e) {
  return typeof e == "string" && true;
}
var G = typeof Symbol == "function" && Symbol.for;
var Y = G ? Symbol.for("react.memo") : 60115;
var W = G ? Symbol.for("react.forward_ref") : 60112;
var q = { childContextTypes: true, contextType: true, contextTypes: true, defaultProps: true, displayName: true, getDefaultProps: true, getDerivedStateFromError: true, getDerivedStateFromProps: true, mixins: true, propTypes: true, type: true };
var H = { name: true, length: true, prototype: true, caller: true, callee: true, arguments: true, arity: true };
var U = { $$typeof: true, compare: true, defaultProps: true, displayName: true, propTypes: true, type: true };
var J = ((V = {})[W] = { $$typeof: true, render: true, defaultProps: true, displayName: true, propTypes: true }, V[Y] = U, V);
function X(e) {
  return (("type" in (t = e)) && t.type.$$typeof) === Y ? U : ("$$typeof" in e) ? J[e.$$typeof] : q;
  var t;
}
var Z = Object.defineProperty;
var K = Object.getOwnPropertyNames;
var Q = Object.getOwnPropertySymbols;
var ee = Object.getOwnPropertyDescriptor;
var te = Object.getPrototypeOf;
var ne = Object.prototype;
function oe(e, t, n) {
  if (typeof t != "string") {
    if (ne) {
      var o2 = te(t);
      o2 && o2 !== ne && oe(e, o2, n);
    }
    var r2 = K(t);
    Q && (r2 = r2.concat(Q(t)));
    for (var s2 = X(e), i2 = X(t), a2 = 0;a2 < r2.length; ++a2) {
      var c2 = r2[a2];
      if (!((c2 in H) || n && n[c2] || i2 && (c2 in i2) || s2 && (c2 in s2))) {
        var l2 = ee(t, c2);
        try {
          Z(e, c2, l2);
        } catch (e2) {
        }
      }
    }
  }
  return e;
}
function re(e) {
  return typeof e == "function";
}
function se(e) {
  return typeof e == "object" && "styledComponentId" in e;
}
function ie(e, t) {
  return e && t ? "".concat(e, " ").concat(t) : e || t || "";
}
function ae(e, t) {
  if (e.length === 0)
    return "";
  for (var n = e[0], o2 = 1;o2 < e.length; o2++)
    n += t ? t + e[o2] : e[o2];
  return n;
}
function ce(e) {
  return e !== null && typeof e == "object" && e.constructor.name === Object.name && !(("props" in e) && e.$$typeof);
}
function le(e, t, n) {
  if (n === undefined && (n = false), !n && !ce(e) && !Array.isArray(e))
    return t;
  if (Array.isArray(t))
    for (var o2 = 0;o2 < t.length; o2++)
      e[o2] = le(e[o2], t[o2]);
  else if (ce(t))
    for (var o2 in t)
      e[o2] = le(e[o2], t[o2]);
  return e;
}
function ue(e, t) {
  Object.defineProperty(e, "toString", { value: t });
}
function he(t) {
  for (var n = [], o2 = 1;o2 < arguments.length; o2++)
    n[o2 - 1] = arguments[o2];
  return new Error("An error occurred. See https://github.com/styled-components/styled-components/blob/main/packages/styled-components/src/utils/errors.md#".concat(t, " for more information.").concat(n.length > 0 ? " Args: ".concat(n.join(", ")) : ""));
}
var fe = function() {
  function e(e2) {
    this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = e2;
  }
  return e.prototype.indexOfGroup = function(e2) {
    for (var t = 0, n = 0;n < e2; n++)
      t += this.groupSizes[n];
    return t;
  }, e.prototype.insertRules = function(e2, t) {
    if (e2 >= this.groupSizes.length) {
      for (var n = this.groupSizes, o2 = n.length, r2 = o2;e2 >= r2; )
        if ((r2 <<= 1) < 0)
          throw he(16, "".concat(e2));
      this.groupSizes = new Uint32Array(r2), this.groupSizes.set(n), this.length = r2;
      for (var s2 = o2;s2 < r2; s2++)
        this.groupSizes[s2] = 0;
    }
    for (var i2 = this.indexOfGroup(e2 + 1), a2 = (s2 = 0, t.length);s2 < a2; s2++)
      this.tag.insertRule(i2, t[s2]) && (this.groupSizes[e2]++, i2++);
  }, e.prototype.clearGroup = function(e2) {
    if (e2 < this.length) {
      var t = this.groupSizes[e2], n = this.indexOfGroup(e2), o2 = n + t;
      this.groupSizes[e2] = 0;
      for (var r2 = n;r2 < o2; r2++)
        this.tag.deleteRule(n);
    }
  }, e.prototype.getGroup = function(e2) {
    var t = "";
    if (e2 >= this.length || this.groupSizes[e2] === 0)
      return t;
    for (var n = this.groupSizes[e2], o2 = this.indexOfGroup(e2), r2 = o2 + n, s2 = o2;s2 < r2; s2++)
      t += "".concat(this.tag.getRule(s2)).concat(g);
    return t;
  }, e;
}();
var me = 1 << 30;
var ye = new Map;
var ve = new Map;
var ge = 1;
var Se = function(e) {
  if (ye.has(e))
    return ye.get(e);
  for (;ve.has(ge); )
    ge++;
  var t = ge++;
  if (false)
    ;
  return ye.set(e, t), ve.set(t, e), t;
};
var we = function(e, t) {
  ge = t + 1, ye.set(e, t), ve.set(t, e);
};
var be = "style[".concat(f, "][").concat(y, '="').concat(v, '"]');
var Ee = new RegExp("^".concat(f, '\\.g(\\d+)\\[id="([\\w\\d-]+)"\\].*?"([^"]*)'));
var Ne = function(e, t, n) {
  for (var o2, r2 = n.split(","), s2 = 0, i2 = r2.length;s2 < i2; s2++)
    (o2 = r2[s2]) && e.registerName(t, o2);
};
var Pe = function(e, t) {
  for (var n, o2 = ((n = t.textContent) !== null && n !== undefined ? n : "").split(g), r2 = [], s2 = 0, i2 = o2.length;s2 < i2; s2++) {
    var a2 = o2[s2].trim();
    if (a2) {
      var c2 = a2.match(Ee);
      if (c2) {
        var l2 = 0 | parseInt(c2[1], 10), u2 = c2[2];
        l2 !== 0 && (we(u2, l2), Ne(e, u2, c2[3]), e.getTag().insertRules(l2, r2)), r2.length = 0;
      } else
        r2.push(a2);
    }
  }
};
var _e = function(e) {
  for (var t = document.querySelectorAll(be), n = 0, o2 = t.length;n < o2; n++) {
    var r2 = t[n];
    r2 && r2.getAttribute(f) !== m && (Pe(e, r2), r2.parentNode && r2.parentNode.removeChild(r2));
  }
};
function Ce() {
  return typeof __webpack_nonce__ != "undefined" ? __webpack_nonce__ : null;
}
var Ie = function(e) {
  var t = document.head, n = e || t, o2 = document.createElement("style"), r2 = function(e2) {
    var t2 = Array.from(e2.querySelectorAll("style[".concat(f, "]")));
    return t2[t2.length - 1];
  }(n), s2 = r2 !== undefined ? r2.nextSibling : null;
  o2.setAttribute(f, m), o2.setAttribute(y, v);
  var i2 = Ce();
  return i2 && o2.setAttribute("nonce", i2), n.insertBefore(o2, s2), o2;
};
var Ae = function() {
  function e(e2) {
    this.element = Ie(e2), this.element.appendChild(document.createTextNode("")), this.sheet = function(e3) {
      if (e3.sheet)
        return e3.sheet;
      for (var t = document.styleSheets, n = 0, o2 = t.length;n < o2; n++) {
        var r2 = t[n];
        if (r2.ownerNode === e3)
          return r2;
      }
      throw he(17);
    }(this.element), this.length = 0;
  }
  return e.prototype.insertRule = function(e2, t) {
    try {
      return this.sheet.insertRule(t, e2), this.length++, true;
    } catch (e3) {
      return false;
    }
  }, e.prototype.deleteRule = function(e2) {
    this.sheet.deleteRule(e2), this.length--;
  }, e.prototype.getRule = function(e2) {
    var t = this.sheet.cssRules[e2];
    return t && t.cssText ? t.cssText : "";
  }, e;
}();
var Oe = function() {
  function e(e2) {
    this.element = Ie(e2), this.nodes = this.element.childNodes, this.length = 0;
  }
  return e.prototype.insertRule = function(e2, t) {
    if (e2 <= this.length && e2 >= 0) {
      var n = document.createTextNode(t);
      return this.element.insertBefore(n, this.nodes[e2] || null), this.length++, true;
    }
    return false;
  }, e.prototype.deleteRule = function(e2) {
    this.element.removeChild(this.nodes[e2]), this.length--;
  }, e.prototype.getRule = function(e2) {
    return e2 < this.length ? this.nodes[e2].textContent : "";
  }, e;
}();
var De = function() {
  function e(e2) {
    this.rules = [], this.length = 0;
  }
  return e.prototype.insertRule = function(e2, t) {
    return e2 <= this.length && (this.rules.splice(e2, 0, t), this.length++, true);
  }, e.prototype.deleteRule = function(e2) {
    this.rules.splice(e2, 1), this.length--;
  }, e.prototype.getRule = function(e2) {
    return e2 < this.length ? this.rules[e2] : "";
  }, e;
}();
var Re = S;
var Te = { isServer: !S, useCSSOMInjection: !w };
var ke = function() {
  function e(e2, n, o2) {
    e2 === undefined && (e2 = C), n === undefined && (n = {});
    var r2 = this;
    this.options = __assign(__assign({}, Te), e2), this.gs = n, this.names = new Map(o2), this.server = !!e2.isServer, !this.server && S && Re && (Re = false, _e(this)), ue(this, function() {
      return function(e3) {
        for (var t = e3.getTag(), n2 = t.length, o3 = "", r3 = function(n3) {
          var r4 = function(e4) {
            return ve.get(e4);
          }(n3);
          if (r4 === undefined)
            return "continue";
          var s3 = e3.names.get(r4), i2 = t.getGroup(n3);
          if (s3 === undefined || !s3.size || i2.length === 0)
            return "continue";
          var a2 = "".concat(f, ".g").concat(n3, '[id="').concat(r4, '"]'), c2 = "";
          s3 !== undefined && s3.forEach(function(e4) {
            e4.length > 0 && (c2 += "".concat(e4, ","));
          }), o3 += "".concat(i2).concat(a2, '{content:"').concat(c2, '"}').concat(g);
        }, s2 = 0;s2 < n2; s2++)
          r3(s2);
        return o3;
      }(r2);
    });
  }
  return e.registerId = function(e2) {
    return Se(e2);
  }, e.prototype.rehydrate = function() {
    !this.server && S && _e(this);
  }, e.prototype.reconstructWithOptions = function(n, o2) {
    return o2 === undefined && (o2 = true), new e(__assign(__assign({}, this.options), n), this.gs, o2 && this.names || undefined);
  }, e.prototype.allocateGSInstance = function(e2) {
    return this.gs[e2] = (this.gs[e2] || 0) + 1;
  }, e.prototype.getTag = function() {
    return this.tag || (this.tag = (e2 = function(e3) {
      var { useCSSOMInjection: t, target: n } = e3;
      return e3.isServer ? new De(n) : t ? new Ae(n) : new Oe(n);
    }(this.options), new fe(e2)));
    var e2;
  }, e.prototype.hasNameForId = function(e2, t) {
    return this.names.has(e2) && this.names.get(e2).has(t);
  }, e.prototype.registerName = function(e2, t) {
    if (Se(e2), this.names.has(e2))
      this.names.get(e2).add(t);
    else {
      var n = new Set;
      n.add(t), this.names.set(e2, n);
    }
  }, e.prototype.insertRules = function(e2, t, n) {
    this.registerName(e2, t), this.getTag().insertRules(Se(e2), n);
  }, e.prototype.clearNames = function(e2) {
    this.names.has(e2) && this.names.get(e2).clear();
  }, e.prototype.clearRules = function(e2) {
    this.getTag().clearGroup(Se(e2)), this.clearNames(e2);
  }, e.prototype.clearTag = function() {
    this.tag = undefined;
  }, e;
}();
var je = /&/g;
var xe = /^\s*\/\/.*$/gm;
function Ve(e, t) {
  return e.map(function(e2) {
    return e2.type === "rule" && (e2.value = "".concat(t, " ").concat(e2.value), e2.value = e2.value.replaceAll(",", ",".concat(t, " ")), e2.props = e2.props.map(function(e3) {
      return "".concat(t, " ").concat(e3);
    })), Array.isArray(e2.children) && e2.type !== "@keyframes" && (e2.children = Ve(e2.children, t)), e2;
  });
}
function Fe(e) {
  var t, n, o2, r2 = e === undefined ? C : e, s2 = r2.options, i2 = s2 === undefined ? C : s2, a2 = r2.plugins, c2 = a2 === undefined ? _ : a2, l2 = function(e2, o3, r3) {
    return r3.startsWith(n) && r3.endsWith(n) && r3.replaceAll(n, "").length > 0 ? ".".concat(t) : e2;
  }, u2 = c2.slice();
  u2.push(function(e2) {
    e2.type === RULESET && e2.value.includes("&") && (e2.props[0] = e2.props[0].replace(je, n).replace(o2, l2));
  }), i2.prefix && u2.push(prefixer), u2.push(stringify);
  var p2 = function(e2, r3, s3, a3) {
    r3 === undefined && (r3 = ""), s3 === undefined && (s3 = ""), a3 === undefined && (a3 = "&"), t = a3, n = r3, o2 = new RegExp("\\".concat(n, "\\b"), "g");
    var c3 = e2.replace(xe, ""), l3 = compile(s3 || r3 ? "".concat(s3, " ").concat(r3, " { ").concat(c3, " }") : c3);
    i2.namespace && (l3 = Ve(l3, i2.namespace));
    var p3 = [];
    return serialize(l3, middleware(u2.concat(rulesheet(function(e3) {
      return p3.push(e3);
    })))), p3;
  };
  return p2.hash = c2.length ? c2.reduce(function(e2, t2) {
    return t2.name || he(15), M(e2, t2.name);
  }, F).toString() : "", p2;
}
var Me = new ke;
var ze = Fe();
var $e = import_react2.default.createContext({ shouldForwardProp: undefined, styleSheet: Me, stylis: ze });
var Be = $e.Consumer;
var Le = import_react2.default.createContext(undefined);
function Ge() {
  return import_react2.useContext($e);
}
function Ye(e) {
  var t = import_react2.useState(e.stylisPlugins), n = t[0], r2 = t[1], c2 = Ge().styleSheet, l2 = import_react2.useMemo(function() {
    var t2 = c2;
    return e.sheet ? t2 = e.sheet : e.target && (t2 = t2.reconstructWithOptions({ target: e.target }, false)), e.disableCSSOMInjection && (t2 = t2.reconstructWithOptions({ useCSSOMInjection: false })), t2;
  }, [e.disableCSSOMInjection, e.sheet, e.target, c2]), u2 = import_react2.useMemo(function() {
    return Fe({ options: { namespace: e.namespace, prefix: e.enableVendorPrefixes }, plugins: n });
  }, [e.enableVendorPrefixes, e.namespace, n]);
  import_react2.useEffect(function() {
    import_shallowequal.default(n, e.stylisPlugins) || r2(e.stylisPlugins);
  }, [e.stylisPlugins]);
  var d = import_react2.useMemo(function() {
    return { shouldForwardProp: e.shouldForwardProp, styleSheet: l2, stylis: u2 };
  }, [e.shouldForwardProp, l2, u2]);
  return import_react2.default.createElement($e.Provider, { value: d }, import_react2.default.createElement(Le.Provider, { value: u2 }, e.children));
}
var We = function() {
  function e(e2, t) {
    var n = this;
    this.inject = function(e3, t2) {
      t2 === undefined && (t2 = ze);
      var o2 = n.name + t2.hash;
      e3.hasNameForId(n.id, o2) || e3.insertRules(n.id, o2, t2(n.rules, o2, "@keyframes"));
    }, this.name = e2, this.id = "sc-keyframes-".concat(e2), this.rules = t, ue(this, function() {
      throw he(12, String(n.name));
    });
  }
  return e.prototype.getName = function(e2) {
    return e2 === undefined && (e2 = ze), this.name + e2.hash;
  }, e;
}();
var qe = function(e) {
  return e >= "A" && e <= "Z";
};
function He(e) {
  for (var t = "", n = 0;n < e.length; n++) {
    var o2 = e[n];
    if (n === 1 && o2 === "-" && e[0] === "-")
      return e;
    qe(o2) ? t += "-" + o2.toLowerCase() : t += o2;
  }
  return t.startsWith("ms-") ? "-" + t : t;
}
var Ue = function(e) {
  return e == null || e === false || e === "";
};
var Je = function(t) {
  var n, o2, r2 = [];
  for (var s2 in t) {
    var i2 = t[s2];
    t.hasOwnProperty(s2) && !Ue(i2) && (Array.isArray(i2) && i2.isCss || re(i2) ? r2.push("".concat(He(s2), ":"), i2, ";") : ce(i2) ? r2.push.apply(r2, __spreadArray(__spreadArray(["".concat(s2, " {")], Je(i2), false), ["}"], false)) : r2.push("".concat(He(s2), ": ").concat((n = s2, (o2 = i2) == null || typeof o2 == "boolean" || o2 === "" ? "" : typeof o2 != "number" || o2 === 0 || (n in unitlessKeys) || n.startsWith("--") ? String(o2).trim() : "".concat(o2, "px")), ";")));
  }
  return r2;
};
function Xe(e, t, n, o2) {
  if (Ue(e))
    return [];
  if (se(e))
    return [".".concat(e.styledComponentId)];
  if (re(e)) {
    if (!re(s2 = e) || s2.prototype && s2.prototype.isReactComponent || !t)
      return [e];
    var r2 = e(t);
    return true, Xe(r2, t, n, o2);
  }
  var s2;
  return e instanceof We ? n ? (e.inject(n, o2), [e.getName(o2)]) : [e] : ce(e) ? Je(e) : Array.isArray(e) ? Array.prototype.concat.apply(_, e.map(function(e2) {
    return Xe(e2, t, n, o2);
  })) : [e.toString()];
}
function Ze(e) {
  for (var t = 0;t < e.length; t += 1) {
    var n = e[t];
    if (re(n) && !se(n))
      return false;
  }
  return true;
}
var Ke = z(v);
var Qe = function() {
  function e(e2, t, n) {
    this.rules = e2, this.staticRulesId = "", this.isStatic = (n === undefined || n.isStatic) && Ze(e2), this.componentId = t, this.baseHash = M(Ke, t), this.baseStyle = n, ke.registerId(t);
  }
  return e.prototype.generateAndInjectStyles = function(e2, t, n) {
    var o2 = this.baseStyle ? this.baseStyle.generateAndInjectStyles(e2, t, n) : "";
    if (this.isStatic && !n.hash)
      if (this.staticRulesId && t.hasNameForId(this.componentId, this.staticRulesId))
        o2 = ie(o2, this.staticRulesId);
      else {
        var r2 = ae(Xe(this.rules, e2, t, n)), s2 = x(M(this.baseHash, r2) >>> 0);
        if (!t.hasNameForId(this.componentId, s2)) {
          var i2 = n(r2, ".".concat(s2), undefined, this.componentId);
          t.insertRules(this.componentId, s2, i2);
        }
        o2 = ie(o2, s2), this.staticRulesId = s2;
      }
    else {
      for (var a2 = M(this.baseHash, n.hash), c2 = "", l2 = 0;l2 < this.rules.length; l2++) {
        var u2 = this.rules[l2];
        if (typeof u2 == "string")
          c2 += u2;
        else if (u2) {
          var p2 = ae(Xe(u2, e2, t, n));
          a2 = M(a2, p2 + l2), c2 += p2;
        }
      }
      if (c2) {
        var d = x(a2 >>> 0);
        t.hasNameForId(this.componentId, d) || t.insertRules(this.componentId, d, n(c2, ".".concat(d), undefined, this.componentId)), o2 = ie(o2, d);
      }
    }
    return o2;
  }, e;
}();
var et = import_react2.default.createContext(undefined);
var tt = et.Consumer;
var rt = {};
var st = new Set;
function it(e, r2, s2) {
  var i2 = se(e), a2 = e, c2 = !L(e), p2 = r2.attrs, d = p2 === undefined ? _ : p2, h = r2.componentId, f2 = h === undefined ? function(e2, t) {
    var n = typeof e2 != "string" ? "sc" : R(e2);
    rt[n] = (rt[n] || 0) + 1;
    var o2 = "".concat(n, "-").concat($(v + n + rt[n]));
    return t ? "".concat(t, "-").concat(o2) : o2;
  }(r2.displayName, r2.parentComponentId) : h, m2 = r2.displayName, y2 = m2 === undefined ? function(e2) {
    return L(e2) ? "styled.".concat(e2) : "Styled(".concat(B(e2), ")");
  }(e) : m2, g2 = r2.displayName && r2.componentId ? "".concat(R(r2.displayName), "-").concat(r2.componentId) : r2.componentId || f2, S2 = i2 && a2.attrs ? a2.attrs.concat(d).filter(Boolean) : d, w2 = r2.shouldForwardProp;
  if (i2 && a2.shouldForwardProp) {
    var b = a2.shouldForwardProp;
    if (r2.shouldForwardProp) {
      var E = r2.shouldForwardProp;
      w2 = function(e2, t) {
        return b(e2, t) && E(e2, t);
      };
    } else
      w2 = b;
  }
  var N2 = new Qe(s2, g2, i2 ? a2.componentStyle : undefined);
  function O2(e2, r3) {
    return function(e3, r4, s3) {
      var { attrs: i3, componentStyle: a3, defaultProps: c3, foldedComponentIds: p3, styledComponentId: d2, target: h2 } = e3, f3 = import_react2.default.useContext(et), m3 = Ge(), y3 = e3.shouldForwardProp || m3.shouldForwardProp;
      var v2 = I(r4, f3, c3) || C, g3 = function(e4, n, o2) {
        for (var r5, s4 = __assign(__assign({}, n), { className: undefined, theme: o2 }), i4 = 0;i4 < e4.length; i4 += 1) {
          var a4 = re(r5 = e4[i4]) ? r5(s4) : r5;
          for (var c4 in a4)
            s4[c4] = c4 === "className" ? ie(s4[c4], a4[c4]) : c4 === "style" ? __assign(__assign({}, s4[c4]), a4[c4]) : a4[c4];
        }
        return n.className && (s4.className = ie(s4.className, n.className)), s4;
      }(i3, r4, v2), S3 = g3.as || h2, w3 = {};
      for (var b2 in g3)
        g3[b2] === undefined || b2[0] === "$" || b2 === "as" || b2 === "theme" && g3.theme === v2 || (b2 === "forwardedAs" ? w3.as = g3.forwardedAs : y3 && !y3(b2, S3) || (w3[b2] = g3[b2]));
      var E2 = function(e4, t) {
        var n = Ge(), o2 = e4.generateAndInjectStyles(t, n.styleSheet, n.stylis);
        return false, o2;
      }(a3, g3);
      var N3 = ie(p3, d2);
      return E2 && (N3 += " " + E2), g3.className && (N3 += " " + g3.className), w3[L(S3) && !A.has(S3) ? "class" : "className"] = N3, s3 && (w3.ref = s3), import_react2.createElement(S3, w3);
    }(D2, e2, r3);
  }
  O2.displayName = y2;
  var D2 = import_react2.default.forwardRef(O2);
  return D2.attrs = S2, D2.componentStyle = N2, D2.displayName = y2, D2.shouldForwardProp = w2, D2.foldedComponentIds = i2 ? ie(a2.foldedComponentIds, a2.styledComponentId) : "", D2.styledComponentId = g2, D2.target = i2 ? a2.target : e, Object.defineProperty(D2, "defaultProps", { get: function() {
    return this._foldedDefaultProps;
  }, set: function(e2) {
    this._foldedDefaultProps = i2 ? function(e3) {
      for (var t = [], n = 1;n < arguments.length; n++)
        t[n - 1] = arguments[n];
      for (var o2 = 0, r3 = t;o2 < r3.length; o2++)
        le(e3, r3[o2], true);
      return e3;
    }({}, a2.defaultProps, e2) : e2;
  } }), false, ue(D2, function() {
    return ".".concat(D2.styledComponentId);
  }), c2 && oe(D2, e, { attrs: true, componentStyle: true, displayName: true, foldedComponentIds: true, shouldForwardProp: true, styledComponentId: true, target: true }), D2;
}
function at(e, t) {
  for (var n = [e[0]], o2 = 0, r2 = t.length;o2 < r2; o2 += 1)
    n.push(t[o2], e[o2 + 1]);
  return n;
}
var ct = function(e) {
  return Object.assign(e, { isCss: true });
};
function lt(t) {
  for (var n = [], o2 = 1;o2 < arguments.length; o2++)
    n[o2 - 1] = arguments[o2];
  if (re(t) || ce(t))
    return ct(Xe(at(_, __spreadArray([t], n, true))));
  var r2 = t;
  return n.length === 0 && r2.length === 1 && typeof r2[0] == "string" ? Xe(r2) : ct(Xe(at(r2, n)));
}
function ut(n, o2, r2) {
  if (r2 === undefined && (r2 = C), !o2)
    throw he(1, o2);
  var s2 = function(t) {
    for (var s3 = [], i2 = 1;i2 < arguments.length; i2++)
      s3[i2 - 1] = arguments[i2];
    return n(o2, r2, lt.apply(undefined, __spreadArray([t], s3, false)));
  };
  return s2.attrs = function(e) {
    return ut(n, o2, __assign(__assign({}, r2), { attrs: Array.prototype.concat(r2.attrs, e).filter(Boolean) }));
  }, s2.withConfig = function(e) {
    return ut(n, o2, __assign(__assign({}, r2), e));
  }, s2;
}
var pt = function(e) {
  return ut(it, e);
};
var dt = pt;
A.forEach(function(e) {
  dt[e] = pt(e);
});
var ht = function() {
  function e(e2, t) {
    this.rules = e2, this.componentId = t, this.isStatic = Ze(e2), ke.registerId(this.componentId + 1);
  }
  return e.prototype.createStyles = function(e2, t, n, o2) {
    var r2 = o2(ae(Xe(this.rules, t, n, o2)), ""), s2 = this.componentId + e2;
    n.insertRules(s2, s2, r2);
  }, e.prototype.removeStyles = function(e2, t) {
    t.clearRules(this.componentId + e2);
  }, e.prototype.renderStyles = function(e2, t, n, o2) {
    e2 > 2 && ke.registerId(this.componentId + e2), this.removeStyles(e2, n), this.createStyles(e2, t, n, o2);
  }, e;
}();
var vt = function() {
  function e() {
    var e2 = this;
    this._emitSheetCSS = function() {
      var t = e2.instance.toString();
      if (!t)
        return "";
      var n = Ce(), o2 = ae([n && 'nonce="'.concat(n, '"'), "".concat(f, '="true"'), "".concat(y, '="').concat(v, '"')].filter(Boolean), " ");
      return "<style ".concat(o2, ">").concat(t, "</style>");
    }, this.getStyleTags = function() {
      if (e2.sealed)
        throw he(2);
      return e2._emitSheetCSS();
    }, this.getStyleElement = function() {
      var n;
      if (e2.sealed)
        throw he(2);
      var r2 = e2.instance.toString();
      if (!r2)
        return [];
      var s2 = ((n = {})[f] = "", n[y] = v, n.dangerouslySetInnerHTML = { __html: r2 }, n), i2 = Ce();
      return i2 && (s2.nonce = i2), [import_react2.default.createElement("style", __assign({}, s2, { key: "sc-0-0" }))];
    }, this.seal = function() {
      e2.sealed = true;
    }, this.instance = new ke({ isServer: true }), this.sealed = false;
  }
  return e.prototype.collectStyles = function(e2) {
    if (this.sealed)
      throw he(2);
    return import_react2.default.createElement(Ye, { sheet: this.instance }, e2);
  }, e.prototype.interleaveWithNodeStream = function(e2) {
    throw he(3);
  }, e;
}();
var St = "__sc-".concat(f, "__");

// node_modules/tslib/tslib.es6.mjs
var __assign2 = function() {
  __assign2 = Object.assign || function __assign(t) {
    for (var s2, i2 = 1, n = arguments.length;i2 < n; i2++) {
      s2 = arguments[i2];
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2))
          t[p2] = s2[p2];
    }
    return t;
  };
  return __assign2.apply(this, arguments);
};
function __rest(s2, e) {
  var t = {};
  for (var p2 in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0)
      t[p2] = s2[p2];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2);i2 < p2.length; i2++) {
      if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
        t[p2[i2]] = s2[p2[i2]];
    }
  return t;
}
function __spreadArray2(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i2 = 0, l2 = from2.length, ar;i2 < l2; i2++) {
      if (ar || !(i2 in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i2);
        ar[i2] = from2[i2];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
}

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var React12 = __toESM(require_react(), 1);

// node_modules/react-remove-scroll/dist/es2015/UI.js
var React8 = __toESM(require_react(), 1);

// node_modules/react-remove-scroll-bar/dist/es2015/constants.js
var zeroRightClassName = "right-scroll-bar-position";
var fullWidthClassName = "width-before-scroll-bar";
var noScrollbarsClassName = "with-scroll-bars-hidden";
var removedBarSizeVariable = "--removed-body-scroll-bar-size";

// node_modules/use-callback-ref/dist/es2015/assignRef.js
function assignRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
  return ref;
}

// node_modules/use-callback-ref/dist/es2015/useRef.js
var import_react3 = __toESM(require_react(), 1);
function useCallbackRef(initialValue, callback) {
  var ref = import_react3.useState(function() {
    return {
      value: initialValue,
      callback,
      facade: {
        get current() {
          return ref.value;
        },
        set current(value) {
          var last = ref.value;
          if (last !== value) {
            ref.value = value;
            ref.callback(value, last);
          }
        }
      }
    };
  })[0];
  ref.callback = callback;
  return ref.facade;
}

// node_modules/use-callback-ref/dist/es2015/useMergeRef.js
var React4 = __toESM(require_react(), 1);
var useIsomorphicLayoutEffect = typeof window !== "undefined" ? React4.useLayoutEffect : React4.useEffect;
var currentValues = new WeakMap;
function useMergeRefs(refs, defaultValue) {
  var callbackRef = useCallbackRef(defaultValue || null, function(newValue) {
    return refs.forEach(function(ref) {
      return assignRef(ref, newValue);
    });
  });
  useIsomorphicLayoutEffect(function() {
    var oldValue = currentValues.get(callbackRef);
    if (oldValue) {
      var prevRefs_1 = new Set(oldValue);
      var nextRefs_1 = new Set(refs);
      var current_1 = callbackRef.current;
      prevRefs_1.forEach(function(ref) {
        if (!nextRefs_1.has(ref)) {
          assignRef(ref, null);
        }
      });
      nextRefs_1.forEach(function(ref) {
        if (!prevRefs_1.has(ref)) {
          assignRef(ref, current_1);
        }
      });
    }
    currentValues.set(callbackRef, refs);
  }, [refs]);
  return callbackRef;
}
// node_modules/use-sidecar/dist/es2015/hoc.js
var React5 = __toESM(require_react(), 1);

// node_modules/use-sidecar/dist/es2015/hook.js
var import_react4 = __toESM(require_react(), 1);
var cache = new WeakMap;
// node_modules/use-sidecar/dist/es2015/medium.js
function ItoI(a2) {
  return a2;
}
function innerCreateMedium(defaults, middleware2) {
  if (middleware2 === undefined) {
    middleware2 = ItoI;
  }
  var buffer = [];
  var assigned = false;
  var medium = {
    read: function() {
      if (assigned) {
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      }
      if (buffer.length) {
        return buffer[buffer.length - 1];
      }
      return defaults;
    },
    useMedium: function(data) {
      var item = middleware2(data, assigned);
      buffer.push(item);
      return function() {
        buffer = buffer.filter(function(x2) {
          return x2 !== item;
        });
      };
    },
    assignSyncMedium: function(cb) {
      assigned = true;
      while (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
      }
      buffer = {
        push: function(x2) {
          return cb(x2);
        },
        filter: function() {
          return buffer;
        }
      };
    },
    assignMedium: function(cb) {
      assigned = true;
      var pendingQueue = [];
      if (buffer.length) {
        var cbs = buffer;
        buffer = [];
        cbs.forEach(cb);
        pendingQueue = buffer;
      }
      var executeQueue = function() {
        var cbs2 = pendingQueue;
        pendingQueue = [];
        cbs2.forEach(cb);
      };
      var cycle = function() {
        return Promise.resolve().then(executeQueue);
      };
      cycle();
      buffer = {
        push: function(x2) {
          pendingQueue.push(x2);
          cycle();
        },
        filter: function(filter2) {
          pendingQueue = pendingQueue.filter(filter2);
          return buffer;
        }
      };
    }
  };
  return medium;
}
function createSidecarMedium(options) {
  if (options === undefined) {
    options = {};
  }
  var medium = innerCreateMedium(null);
  medium.options = __assign2({ async: true, ssr: false }, options);
  return medium;
}
// node_modules/use-sidecar/dist/es2015/renderProp.js
var React6 = __toESM(require_react(), 1);
var import_react5 = __toESM(require_react(), 1);
// node_modules/use-sidecar/dist/es2015/exports.js
var React7 = __toESM(require_react(), 1);
var SideCar = function(_a) {
  var sideCar = _a.sideCar, rest = __rest(_a, ["sideCar"]);
  if (!sideCar) {
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  }
  var Target = sideCar.read();
  if (!Target) {
    throw new Error("Sidecar medium not found");
  }
  return React7.createElement(Target, __assign2({}, rest));
};
SideCar.isSideCarExport = true;
function exportSidecar(medium, exported) {
  medium.useMedium(exported);
  return SideCar;
}
// node_modules/react-remove-scroll/dist/es2015/medium.js
var effectCar = createSidecarMedium();

// node_modules/react-remove-scroll/dist/es2015/UI.js
var nothing = function() {
  return;
};
var RemoveScroll = React8.forwardRef(function(props, parentRef) {
  var ref = React8.useRef(null);
  var _a = React8.useState({
    onScrollCapture: nothing,
    onWheelCapture: nothing,
    onTouchMoveCapture: nothing
  }), callbacks = _a[0], setCallbacks = _a[1];
  var { forwardProps, children, className, removeScrollBar, enabled, shards, sideCar, noIsolation, inert, allowPinchZoom, as: _b } = props, Container = _b === undefined ? "div" : _b, gapMode = props.gapMode, rest = __rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as", "gapMode"]);
  var SideCar2 = sideCar;
  var containerRef = useMergeRefs([ref, parentRef]);
  var containerProps = __assign2(__assign2({}, rest), callbacks);
  return React8.createElement(React8.Fragment, null, enabled && React8.createElement(SideCar2, { sideCar: effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref, gapMode }), forwardProps ? React8.cloneElement(React8.Children.only(children), __assign2(__assign2({}, containerProps), { ref: containerRef })) : React8.createElement(Container, __assign2({}, containerProps, { className, ref: containerRef }), children));
});
RemoveScroll.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
RemoveScroll.classNames = {
  fullWidth: fullWidthClassName,
  zeroRight: zeroRightClassName
};

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var React11 = __toESM(require_react(), 1);

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var React10 = __toESM(require_react(), 1);

// node_modules/react-style-singleton/dist/es2015/hook.js
var React9 = __toESM(require_react(), 1);

// node_modules/get-nonce/dist/es2015/index.js
var currentNonce;
var getNonce = function() {
  if (currentNonce) {
    return currentNonce;
  }
  if (typeof __webpack_nonce__ !== "undefined") {
    return __webpack_nonce__;
  }
  return;
};

// node_modules/react-style-singleton/dist/es2015/singleton.js
function makeStyleTag() {
  if (!document)
    return null;
  var tag = document.createElement("style");
  tag.type = "text/css";
  var nonce = getNonce();
  if (nonce) {
    tag.setAttribute("nonce", nonce);
  }
  return tag;
}
function injectStyles(tag, css) {
  if (tag.styleSheet) {
    tag.styleSheet.cssText = css;
  } else {
    tag.appendChild(document.createTextNode(css));
  }
}
function insertStyleTag(tag) {
  var head = document.head || document.getElementsByTagName("head")[0];
  head.appendChild(tag);
}
var stylesheetSingleton = function() {
  var counter = 0;
  var stylesheet = null;
  return {
    add: function(style2) {
      if (counter == 0) {
        if (stylesheet = makeStyleTag()) {
          injectStyles(stylesheet, style2);
          insertStyleTag(stylesheet);
        }
      }
      counter++;
    },
    remove: function() {
      counter--;
      if (!counter && stylesheet) {
        stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
        stylesheet = null;
      }
    }
  };
};

// node_modules/react-style-singleton/dist/es2015/hook.js
var styleHookSingleton = function() {
  var sheet = stylesheetSingleton();
  return function(styles, isDynamic) {
    React9.useEffect(function() {
      sheet.add(styles);
      return function() {
        sheet.remove();
      };
    }, [styles && isDynamic]);
  };
};

// node_modules/react-style-singleton/dist/es2015/component.js
var styleSingleton = function() {
  var useStyle = styleHookSingleton();
  var Sheet = function(_a) {
    var { styles, dynamic } = _a;
    useStyle(styles, dynamic);
    return null;
  };
  return Sheet;
};
// node_modules/react-remove-scroll-bar/dist/es2015/utils.js
var zeroGap = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0
};
var parse2 = function(x2) {
  return parseInt(x2 || "", 10) || 0;
};
var getOffset = function(gapMode) {
  var cs = window.getComputedStyle(document.body);
  var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
  var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
  var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
  return [parse2(left), parse2(top), parse2(right)];
};
var getGapWidth = function(gapMode) {
  if (gapMode === undefined) {
    gapMode = "margin";
  }
  if (typeof window === "undefined") {
    return zeroGap;
  }
  var offsets = getOffset(gapMode);
  var documentWidth = document.documentElement.clientWidth;
  var windowWidth = window.innerWidth;
  return {
    left: offsets[0],
    top: offsets[1],
    right: offsets[2],
    gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
  };
};

// node_modules/react-remove-scroll-bar/dist/es2015/component.js
var Style = styleSingleton();
var lockAttribute = "data-scroll-locked";
var getStyles = function(_a, allowRelative, gapMode, important) {
  var { left, top, right, gap } = _a;
  if (gapMode === undefined) {
    gapMode = "margin";
  }
  return `
  .`.concat(noScrollbarsClassName, ` {
   overflow: hidden `).concat(important, `;
   padding-right: `).concat(gap, "px ").concat(important, `;
  }
  body[`).concat(lockAttribute, `] {
    overflow: hidden `).concat(important, `;
    overscroll-behavior: contain;
    `).concat([
    allowRelative && "position: relative ".concat(important, ";"),
    gapMode === "margin" && `
    padding-left: `.concat(left, `px;
    padding-top: `).concat(top, `px;
    padding-right: `).concat(right, `px;
    margin-left:0;
    margin-top:0;
    margin-right: `).concat(gap, "px ").concat(important, `;
    `),
    gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
  ].filter(Boolean).join(""), `
  }
  
  .`).concat(zeroRightClassName, ` {
    right: `).concat(gap, "px ").concat(important, `;
  }
  
  .`).concat(fullWidthClassName, ` {
    margin-right: `).concat(gap, "px ").concat(important, `;
  }
  
  .`).concat(zeroRightClassName, " .").concat(zeroRightClassName, ` {
    right: 0 `).concat(important, `;
  }
  
  .`).concat(fullWidthClassName, " .").concat(fullWidthClassName, ` {
    margin-right: 0 `).concat(important, `;
  }
  
  body[`).concat(lockAttribute, `] {
    `).concat(removedBarSizeVariable, ": ").concat(gap, `px;
  }
`);
};
var getCurrentUseCounter = function() {
  var counter = parseInt(document.body.getAttribute(lockAttribute) || "0", 10);
  return isFinite(counter) ? counter : 0;
};
var useLockAttribute = function() {
  React10.useEffect(function() {
    document.body.setAttribute(lockAttribute, (getCurrentUseCounter() + 1).toString());
    return function() {
      var newCounter = getCurrentUseCounter() - 1;
      if (newCounter <= 0) {
        document.body.removeAttribute(lockAttribute);
      } else {
        document.body.setAttribute(lockAttribute, newCounter.toString());
      }
    };
  }, []);
};
var RemoveScrollBar = function(_a) {
  var { noRelative, noImportant, gapMode: _b } = _a, gapMode = _b === undefined ? "margin" : _b;
  useLockAttribute();
  var gap = React10.useMemo(function() {
    return getGapWidth(gapMode);
  }, [gapMode]);
  return React10.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
};

// node_modules/react-remove-scroll/dist/es2015/aggresiveCapture.js
var passiveSupported = false;
if (typeof window !== "undefined") {
  try {
    options = Object.defineProperty({}, "passive", {
      get: function() {
        passiveSupported = true;
        return true;
      }
    });
    window.addEventListener("test", options, options);
    window.removeEventListener("test", options, options);
  } catch (err) {
    passiveSupported = false;
  }
}
var options;
var nonPassive = passiveSupported ? { passive: false } : false;

// node_modules/react-remove-scroll/dist/es2015/handleScroll.js
var alwaysContainsScroll = function(node2) {
  return node2.tagName === "TEXTAREA";
};
var elementCanBeScrolled = function(node2, overflow) {
  if (!(node2 instanceof Element)) {
    return false;
  }
  var styles = window.getComputedStyle(node2);
  return styles[overflow] !== "hidden" && !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node2) && styles[overflow] === "visible");
};
var elementCouldBeVScrolled = function(node2) {
  return elementCanBeScrolled(node2, "overflowY");
};
var elementCouldBeHScrolled = function(node2) {
  return elementCanBeScrolled(node2, "overflowX");
};
var locationCouldBeScrolled = function(axis, node2) {
  var ownerDocument = node2.ownerDocument;
  var current2 = node2;
  do {
    if (typeof ShadowRoot !== "undefined" && current2 instanceof ShadowRoot) {
      current2 = current2.host;
    }
    var isScrollable = elementCouldBeScrolled(axis, current2);
    if (isScrollable) {
      var _a = getScrollVariables(axis, current2), scrollHeight = _a[1], clientHeight = _a[2];
      if (scrollHeight > clientHeight) {
        return true;
      }
    }
    current2 = current2.parentNode;
  } while (current2 && current2 !== ownerDocument.body);
  return false;
};
var getVScrollVariables = function(_a) {
  var { scrollTop, scrollHeight, clientHeight } = _a;
  return [
    scrollTop,
    scrollHeight,
    clientHeight
  ];
};
var getHScrollVariables = function(_a) {
  var { scrollLeft, scrollWidth, clientWidth } = _a;
  return [
    scrollLeft,
    scrollWidth,
    clientWidth
  ];
};
var elementCouldBeScrolled = function(axis, node2) {
  return axis === "v" ? elementCouldBeVScrolled(node2) : elementCouldBeHScrolled(node2);
};
var getScrollVariables = function(axis, node2) {
  return axis === "v" ? getVScrollVariables(node2) : getHScrollVariables(node2);
};
var getDirectionFactor = function(axis, direction) {
  return axis === "h" && direction === "rtl" ? -1 : 1;
};
var handleScroll = function(axis, endTarget, event, sourceDelta, noOverscroll) {
  var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
  var delta = directionFactor * sourceDelta;
  var target = event.target;
  var targetInLock = endTarget.contains(target);
  var shouldCancelScroll = false;
  var isDeltaPositive = delta > 0;
  var availableScroll = 0;
  var availableScrollTop = 0;
  do {
    var _a = getScrollVariables(axis, target), position2 = _a[0], scroll_1 = _a[1], capacity = _a[2];
    var elementScroll = scroll_1 - capacity - directionFactor * position2;
    if (position2 || elementScroll) {
      if (elementCouldBeScrolled(axis, target)) {
        availableScroll += elementScroll;
        availableScrollTop += position2;
      }
    }
    if (target instanceof ShadowRoot) {
      target = target.host;
    } else {
      target = target.parentNode;
    }
  } while (!targetInLock && target !== document.body || targetInLock && (endTarget.contains(target) || endTarget === target));
  if (isDeltaPositive && (noOverscroll && Math.abs(availableScroll) < 1 || !noOverscroll && delta > availableScroll)) {
    shouldCancelScroll = true;
  } else if (!isDeltaPositive && (noOverscroll && Math.abs(availableScrollTop) < 1 || !noOverscroll && -delta > availableScrollTop)) {
    shouldCancelScroll = true;
  }
  return shouldCancelScroll;
};

// node_modules/react-remove-scroll/dist/es2015/SideEffect.js
var getTouchXY = function(event) {
  return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
};
var getDeltaXY = function(event) {
  return [event.deltaX, event.deltaY];
};
var extractRef = function(ref) {
  return ref && "current" in ref ? ref.current : ref;
};
var deltaCompare = function(x2, y2) {
  return x2[0] === y2[0] && x2[1] === y2[1];
};
var generateStyle = function(id) {
  return `
  .block-interactivity-`.concat(id, ` {pointer-events: none;}
  .allow-interactivity-`).concat(id, ` {pointer-events: all;}
`);
};
var idCounter = 0;
var lockStack = [];
function RemoveScrollSideCar(props) {
  var shouldPreventQueue = React11.useRef([]);
  var touchStartRef = React11.useRef([0, 0]);
  var activeAxis = React11.useRef();
  var id = React11.useState(idCounter++)[0];
  var Style2 = React11.useState(styleSingleton)[0];
  var lastProps = React11.useRef(props);
  React11.useEffect(function() {
    lastProps.current = props;
  }, [props]);
  React11.useEffect(function() {
    if (props.inert) {
      document.body.classList.add("block-interactivity-".concat(id));
      var allow_1 = __spreadArray2([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
      allow_1.forEach(function(el) {
        return el.classList.add("allow-interactivity-".concat(id));
      });
      return function() {
        document.body.classList.remove("block-interactivity-".concat(id));
        allow_1.forEach(function(el) {
          return el.classList.remove("allow-interactivity-".concat(id));
        });
      };
    }
    return;
  }, [props.inert, props.lockRef.current, props.shards]);
  var shouldCancelEvent = React11.useCallback(function(event, parent) {
    if ("touches" in event && event.touches.length === 2 || event.type === "wheel" && event.ctrlKey) {
      return !lastProps.current.allowPinchZoom;
    }
    var touch = getTouchXY(event);
    var touchStart = touchStartRef.current;
    var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
    var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
    var currentAxis;
    var target = event.target;
    var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
    if ("touches" in event && moveDirection === "h" && target.type === "range") {
      return false;
    }
    var canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    if (!canBeScrolledInMainDirection) {
      return true;
    }
    if (canBeScrolledInMainDirection) {
      currentAxis = moveDirection;
    } else {
      currentAxis = moveDirection === "v" ? "h" : "v";
      canBeScrolledInMainDirection = locationCouldBeScrolled(moveDirection, target);
    }
    if (!canBeScrolledInMainDirection) {
      return false;
    }
    if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
      activeAxis.current = currentAxis;
    }
    if (!currentAxis) {
      return true;
    }
    var cancelingAxis = activeAxis.current || currentAxis;
    return handleScroll(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
  }, []);
  var shouldPrevent = React11.useCallback(function(_event) {
    var event = _event;
    if (!lockStack.length || lockStack[lockStack.length - 1] !== Style2) {
      return;
    }
    var delta = "deltaY" in event ? getDeltaXY(event) : getTouchXY(event);
    var sourceEvent = shouldPreventQueue.current.filter(function(e) {
      return e.name === event.type && (e.target === event.target || event.target === e.shadowParent) && deltaCompare(e.delta, delta);
    })[0];
    if (sourceEvent && sourceEvent.should) {
      if (event.cancelable) {
        event.preventDefault();
      }
      return;
    }
    if (!sourceEvent) {
      var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node2) {
        return node2.contains(event.target);
      });
      var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
      if (shouldStop) {
        if (event.cancelable) {
          event.preventDefault();
        }
      }
    }
  }, []);
  var shouldCancel = React11.useCallback(function(name, delta, target, should) {
    var event = { name, delta, target, should, shadowParent: getOutermostShadowParent(target) };
    shouldPreventQueue.current.push(event);
    setTimeout(function() {
      shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
        return e !== event;
      });
    }, 1);
  }, []);
  var scrollTouchStart = React11.useCallback(function(event) {
    touchStartRef.current = getTouchXY(event);
    activeAxis.current = undefined;
  }, []);
  var scrollWheel = React11.useCallback(function(event) {
    shouldCancel(event.type, getDeltaXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  var scrollTouchMove = React11.useCallback(function(event) {
    shouldCancel(event.type, getTouchXY(event), event.target, shouldCancelEvent(event, props.lockRef.current));
  }, []);
  React11.useEffect(function() {
    lockStack.push(Style2);
    props.setCallbacks({
      onScrollCapture: scrollWheel,
      onWheelCapture: scrollWheel,
      onTouchMoveCapture: scrollTouchMove
    });
    document.addEventListener("wheel", shouldPrevent, nonPassive);
    document.addEventListener("touchmove", shouldPrevent, nonPassive);
    document.addEventListener("touchstart", scrollTouchStart, nonPassive);
    return function() {
      lockStack = lockStack.filter(function(inst) {
        return inst !== Style2;
      });
      document.removeEventListener("wheel", shouldPrevent, nonPassive);
      document.removeEventListener("touchmove", shouldPrevent, nonPassive);
      document.removeEventListener("touchstart", scrollTouchStart, nonPassive);
    };
  }, []);
  var { removeScrollBar, inert } = props;
  return React11.createElement(React11.Fragment, null, inert ? React11.createElement(Style2, { styles: generateStyle(id) }) : null, removeScrollBar ? React11.createElement(RemoveScrollBar, { gapMode: props.gapMode }) : null);
}
function getOutermostShadowParent(node2) {
  var shadowParent = null;
  while (node2 !== null) {
    if (node2 instanceof ShadowRoot) {
      shadowParent = node2.host;
      node2 = node2.host;
    }
    node2 = node2.parentNode;
  }
  return shadowParent;
}

// node_modules/react-remove-scroll/dist/es2015/sidecar.js
var sidecar_default = exportSidecar(effectCar, RemoveScrollSideCar);

// node_modules/react-remove-scroll/dist/es2015/Combination.js
var ReactRemoveScroll = React12.forwardRef(function(props, ref) {
  return React12.createElement(RemoveScroll, __assign2({}, props, { ref, sideCar: sidecar_default }));
});
ReactRemoveScroll.classNames = RemoveScroll.classNames;
var Combination_default = ReactRemoveScroll;
// node_modules/@mantine/core/esm/core/utils/keys/keys.mjs
"use client";
function keys(object) {
  return Object.keys(object);
}

// node_modules/@mantine/core/esm/core/utils/deep-merge/deep-merge.mjs
function isObject(item) {
  return item && typeof item === "object" && !Array.isArray(item);
}
function deepMerge(target, source) {
  const result = { ...target };
  const _source = source;
  if (isObject(target) && isObject(source)) {
    Object.keys(source).forEach((key) => {
      if (isObject(_source[key])) {
        if (!(key in target)) {
          result[key] = _source[key];
        } else {
          result[key] = deepMerge(result[key], _source[key]);
        }
      } else {
        result[key] = _source[key];
      }
    });
  }
  return result;
}

// node_modules/@mantine/core/esm/core/utils/camel-to-kebab-case/camel-to-kebab-case.mjs
"use client";
function camelToKebabCase(value) {
  return value.replace(/[A-Z]/g, (letter) => `-${letter.toLowerCase()}`);
}

// node_modules/@mantine/core/esm/core/utils/units-converters/px.mjs
function getTransformedScaledValue(value) {
  if (typeof value !== "string" || !value.includes("var(--mantine-scale)")) {
    return value;
  }
  return value.match(/^calc\((.*?)\)$/)?.[1].split("*")[0].trim();
}
function px(value) {
  const transformedValue = getTransformedScaledValue(value);
  if (typeof transformedValue === "number") {
    return transformedValue;
  }
  if (typeof transformedValue === "string") {
    if (transformedValue.includes("calc") || transformedValue.includes("var")) {
      return transformedValue;
    }
    if (transformedValue.includes("px")) {
      return Number(transformedValue.replace("px", ""));
    }
    if (transformedValue.includes("rem")) {
      return Number(transformedValue.replace("rem", "")) * 16;
    }
    if (transformedValue.includes("em")) {
      return Number(transformedValue.replace("em", "")) * 16;
    }
    return Number(transformedValue);
  }
  return NaN;
}

// node_modules/@mantine/core/esm/core/utils/units-converters/rem.mjs
function scaleRem(remValue) {
  if (remValue === "0rem") {
    return "0rem";
  }
  return `calc(${remValue} * var(--mantine-scale))`;
}
function createConverter(units, { shouldScale = false } = {}) {
  function converter(value) {
    if (value === 0 || value === "0") {
      return `0${units}`;
    }
    if (typeof value === "number") {
      const val = `${value / 16}${units}`;
      return shouldScale ? scaleRem(val) : val;
    }
    if (typeof value === "string") {
      if (value === "") {
        return value;
      }
      if (value.startsWith("calc(") || value.startsWith("clamp(") || value.includes("rgba(")) {
        return value;
      }
      if (value.includes(",")) {
        return value.split(",").map((val) => converter(val)).join(",");
      }
      if (value.includes(" ")) {
        return value.split(" ").map((val) => converter(val)).join(" ");
      }
      if (value.includes(units)) {
        return shouldScale ? scaleRem(value) : value;
      }
      const replaced = value.replace("px", "");
      if (!Number.isNaN(Number(replaced))) {
        const val = `${Number(replaced) / 16}${units}`;
        return shouldScale ? scaleRem(val) : val;
      }
    }
    return value;
  }
  return converter;
}
var rem = createConverter("rem", { shouldScale: true });
var em = createConverter("em");

// node_modules/@mantine/core/esm/core/utils/filter-props/filter-props.mjs
"use client";
function filterProps(props) {
  return Object.keys(props).reduce((acc, key) => {
    if (props[key] !== undefined) {
      acc[key] = props[key];
    }
    return acc;
  }, {});
}

// node_modules/@mantine/core/esm/core/utils/is-number-like/is-number-like.mjs
"use client";
function isNumberLike(value) {
  if (typeof value === "number") {
    return true;
  }
  if (typeof value === "string") {
    if (value.startsWith("calc(") || value.startsWith("var(") || value.includes(" ") && value.trim() !== "") {
      return true;
    }
    const cssUnitsRegex = /^[+-]?[0-9]+(\.[0-9]+)?(px|em|rem|ex|ch|lh|rlh|vw|vh|vmin|vmax|vb|vi|svw|svh|lvw|lvh|dvw|dvh|cm|mm|in|pt|pc|q|cqw|cqh|cqi|cqb|cqmin|cqmax|%)?$/;
    const values = value.trim().split(/\s+/);
    return values.every((val) => cssUnitsRegex.test(val));
  }
  return false;
}

// node_modules/@mantine/core/esm/core/utils/is-element/is-element.mjs
var import_react6 = __toESM(require_react(), 1);
"use client";
function isElement(value) {
  if (Array.isArray(value) || value === null) {
    return false;
  }
  if (typeof value === "object") {
    if (value.type === import_react6.Fragment) {
      return false;
    }
    return true;
  }
  return false;
}

// node_modules/@mantine/core/esm/core/utils/create-safe-context/create-safe-context.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react7 = __toESM(require_react(), 1);
"use client";
function createSafeContext(errorMessage) {
  const Context = import_react7.createContext(null);
  const useSafeContext = () => {
    const ctx = import_react7.useContext(Context);
    if (ctx === null) {
      throw new Error(errorMessage);
    }
    return ctx;
  };
  const Provider = ({ children, value }) => /* @__PURE__ */ import_jsx_runtime.jsx(Context.Provider, { value, children });
  return [Provider, useSafeContext];
}

// node_modules/@mantine/core/esm/core/utils/create-optional-context/create-optional-context.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react8 = __toESM(require_react(), 1);
"use client";
function createOptionalContext(initialValue = null) {
  const Context = import_react8.createContext(initialValue);
  const useOptionalContext = () => import_react8.useContext(Context);
  const Provider = ({ children, value }) => /* @__PURE__ */ import_jsx_runtime2.jsx(Context.Provider, { value, children });
  return [Provider, useOptionalContext];
}

// node_modules/@mantine/core/esm/core/utils/find-element-ancestor/find-element-ancestor.mjs
"use client";
function findElementAncestor(element, selector) {
  let _element = element;
  while ((_element = _element.parentElement) && !_element.matches(selector)) {
  }
  return _element;
}

// node_modules/@mantine/core/esm/core/utils/create-scoped-keydown-handler/create-scoped-keydown-handler.mjs
"use client";
function getPreviousIndex(current2, elements, loop) {
  for (let i2 = current2 - 1;i2 >= 0; i2 -= 1) {
    if (!elements[i2].disabled) {
      return i2;
    }
  }
  if (loop) {
    for (let i2 = elements.length - 1;i2 > -1; i2 -= 1) {
      if (!elements[i2].disabled) {
        return i2;
      }
    }
  }
  return current2;
}
function getNextIndex(current2, elements, loop) {
  for (let i2 = current2 + 1;i2 < elements.length; i2 += 1) {
    if (!elements[i2].disabled) {
      return i2;
    }
  }
  if (loop) {
    for (let i2 = 0;i2 < elements.length; i2 += 1) {
      if (!elements[i2].disabled) {
        return i2;
      }
    }
  }
  return current2;
}
function onSameLevel(target, sibling, parentSelector) {
  return findElementAncestor(target, parentSelector) === findElementAncestor(sibling, parentSelector);
}
function createScopedKeydownHandler({
  parentSelector,
  siblingSelector,
  onKeyDown,
  loop = true,
  activateOnFocus = false,
  dir = "rtl",
  orientation
}) {
  return (event) => {
    onKeyDown?.(event);
    const elements = Array.from(findElementAncestor(event.currentTarget, parentSelector)?.querySelectorAll(siblingSelector) || []).filter((node2) => onSameLevel(event.currentTarget, node2, parentSelector));
    const current2 = elements.findIndex((el) => event.currentTarget === el);
    const _nextIndex = getNextIndex(current2, elements, loop);
    const _previousIndex = getPreviousIndex(current2, elements, loop);
    const nextIndex = dir === "rtl" ? _previousIndex : _nextIndex;
    const previousIndex = dir === "rtl" ? _nextIndex : _previousIndex;
    switch (event.key) {
      case "ArrowRight": {
        if (orientation === "horizontal") {
          event.stopPropagation();
          event.preventDefault();
          elements[nextIndex].focus();
          activateOnFocus && elements[nextIndex].click();
        }
        break;
      }
      case "ArrowLeft": {
        if (orientation === "horizontal") {
          event.stopPropagation();
          event.preventDefault();
          elements[previousIndex].focus();
          activateOnFocus && elements[previousIndex].click();
        }
        break;
      }
      case "ArrowUp": {
        if (orientation === "vertical") {
          event.stopPropagation();
          event.preventDefault();
          elements[_previousIndex].focus();
          activateOnFocus && elements[_previousIndex].click();
        }
        break;
      }
      case "ArrowDown": {
        if (orientation === "vertical") {
          event.stopPropagation();
          event.preventDefault();
          elements[_nextIndex].focus();
          activateOnFocus && elements[_nextIndex].click();
        }
        break;
      }
      case "Home": {
        event.stopPropagation();
        event.preventDefault();
        !elements[0].disabled && elements[0].focus();
        break;
      }
      case "End": {
        event.stopPropagation();
        event.preventDefault();
        const last = elements.length - 1;
        !elements[last].disabled && elements[last].focus();
        break;
      }
    }
  };
}

// node_modules/@mantine/core/esm/core/utils/get-default-z-index/get-default-z-index.mjs
"use client";
var elevations = {
  app: 100,
  modal: 200,
  popover: 300,
  overlay: 400,
  max: 9999
};
function getDefaultZIndex(level) {
  return elevations[level];
}

// node_modules/@mantine/core/esm/core/utils/noop/noop.mjs
"use client";
var noop4 = () => {
};

// node_modules/@mantine/core/esm/core/utils/close-on-escape/close-on-escape.mjs
"use client";
function closeOnEscape(callback, options = { active: true }) {
  if (typeof callback !== "function" || !options.active) {
    return options.onKeyDown || noop4;
  }
  return (event) => {
    if (event.key === "Escape") {
      callback(event);
      options.onTrigger?.();
    }
  };
}

// node_modules/@mantine/core/esm/core/utils/get-size/get-size.mjs
"use client";
function getSize(size, prefix3 = "size", convertToRem = true) {
  if (size === undefined) {
    return;
  }
  return isNumberLike(size) ? convertToRem ? rem(size) : size : `var(--${prefix3}-${size})`;
}
function getSpacing(size) {
  return getSize(size, "mantine-spacing");
}
function getRadius(size) {
  if (size === undefined) {
    return "var(--mantine-radius-default)";
  }
  return getSize(size, "mantine-radius");
}
function getFontSize(size) {
  return getSize(size, "mantine-font-size");
}
function getLineHeight(size) {
  return getSize(size, "mantine-line-height", false);
}
function getShadow(size) {
  if (!size) {
    return;
  }
  return getSize(size, "mantine-shadow", false);
}

// node_modules/@mantine/core/esm/core/utils/create-event-handler/create-event-handler.mjs
"use client";
function createEventHandler(parentEventHandler, eventHandler) {
  return (event) => {
    parentEventHandler?.(event);
    eventHandler?.(event);
  };
}

// node_modules/@mantine/core/esm/core/utils/get-breakpoint-value/get-breakpoint-value.mjs
"use client";
function getBreakpointValue(breakpoint, breakpoints) {
  if (breakpoint in breakpoints) {
    return px(breakpoints[breakpoint]);
  }
  return px(breakpoint);
}

// node_modules/@mantine/core/esm/core/utils/get-sorted-breakpoints/get-sorted-breakpoints.mjs
"use client";
function getSortedBreakpoints(values, breakpoints) {
  const convertedBreakpoints = values.map((breakpoint) => ({
    value: breakpoint,
    px: getBreakpointValue(breakpoint, breakpoints)
  }));
  convertedBreakpoints.sort((a2, b) => a2.px - b.px);
  return convertedBreakpoints;
}

// node_modules/@mantine/core/esm/core/utils/get-base-value/get-base-value.mjs
"use client";
function getBaseValue(value) {
  if (typeof value === "object" && value !== null) {
    if ("base" in value) {
      return value.base;
    }
    return;
  }
  return value;
}

// node_modules/@mantine/core/esm/core/utils/get-context-item-index/get-context-item-index.mjs
"use client";
function getContextItemIndex(elementSelector, parentSelector, node2) {
  if (!node2) {
    return null;
  }
  return Array.from(findElementAncestor(node2, parentSelector)?.querySelectorAll(elementSelector) || []).findIndex((element) => element === node2);
}

// node_modules/@mantine/core/esm/core/utils/use-hovered/use-hovered.mjs
var import_react9 = __toESM(require_react(), 1);
"use client";
function useHovered() {
  const [hovered, setHovered] = import_react9.useState(-1);
  const resetHovered = () => setHovered(-1);
  return [hovered, { setHovered, resetHovered }];
}

// node_modules/@mantine/hooks/esm/utils/clamp/clamp.mjs
"use client";
function clamp(value, min, max) {
  if (min === undefined && max === undefined) {
    return value;
  }
  if (min !== undefined && max === undefined) {
    return Math.max(value, min);
  }
  if (min === undefined && max !== undefined) {
    return Math.min(value, max);
  }
  return Math.min(Math.max(value, min), max);
}
// node_modules/@mantine/hooks/esm/utils/random-id/random-id.mjs
"use client";
function randomId(prefix3 = "mantine-") {
  return `${prefix3}${Math.random().toString(36).slice(2, 11)}`;
}

// node_modules/@mantine/hooks/esm/use-callback-ref/use-callback-ref.mjs
var import_react10 = __toESM(require_react(), 1);
"use client";
function useCallbackRef2(callback) {
  const callbackRef = import_react10.useRef(callback);
  import_react10.useEffect(() => {
    callbackRef.current = callback;
  });
  return import_react10.useMemo(() => (...args) => callbackRef.current?.(...args), []);
}
// node_modules/@mantine/hooks/esm/use-debounced-callback/use-debounced-callback.mjs
var import_react11 = __toESM(require_react(), 1);
"use client";
var noop5 = () => {
};
function useDebouncedCallback(callback, options) {
  const delay = typeof options === "number" ? options : options.delay;
  const flushOnUnmount = typeof options === "number" ? false : options.flushOnUnmount;
  const handleCallback = useCallbackRef2(callback);
  const debounceTimerRef = import_react11.useRef(0);
  const lastCallback = Object.assign(import_react11.useCallback((...args) => {
    window.clearTimeout(debounceTimerRef.current);
    const flush = () => {
      if (debounceTimerRef.current !== 0) {
        debounceTimerRef.current = 0;
        handleCallback(...args);
      }
    };
    lastCallback.flush = flush;
    debounceTimerRef.current = window.setTimeout(flush, delay);
  }, [handleCallback, delay]), { flush: noop5 });
  import_react11.useEffect(() => () => {
    window.clearTimeout(debounceTimerRef.current);
    if (flushOnUnmount) {
      lastCallback.flush();
    }
  }, [lastCallback, flushOnUnmount]);
  return lastCallback;
}
// node_modules/@mantine/hooks/esm/use-click-outside/use-click-outside.mjs
var import_react12 = __toESM(require_react(), 1);
"use client";
var DEFAULT_EVENTS = ["mousedown", "touchstart"];
function useClickOutside(handler, events, nodes) {
  const ref = import_react12.useRef(null);
  import_react12.useEffect(() => {
    const listener = (event) => {
      const { target } = event ?? {};
      if (Array.isArray(nodes)) {
        const shouldIgnore = target?.hasAttribute("data-ignore-outside-clicks") || !document.body.contains(target) && target.tagName !== "HTML";
        const shouldTrigger = nodes.every((node2) => !!node2 && !event.composedPath().includes(node2));
        shouldTrigger && !shouldIgnore && handler();
      } else if (ref.current && !ref.current.contains(target)) {
        handler();
      }
    };
    (events || DEFAULT_EVENTS).forEach((fn) => document.addEventListener(fn, listener));
    return () => {
      (events || DEFAULT_EVENTS).forEach((fn) => document.removeEventListener(fn, listener));
    };
  }, [ref, handler, nodes]);
  return ref;
}
// node_modules/@mantine/hooks/esm/use-media-query/use-media-query.mjs
var import_react13 = __toESM(require_react(), 1);
"use client";
function attachMediaListener(query, callback) {
  try {
    query.addEventListener("change", callback);
    return () => query.removeEventListener("change", callback);
  } catch (e) {
    query.addListener(callback);
    return () => query.removeListener(callback);
  }
}
function getInitialValue(query, initialValue) {
  if (typeof window !== "undefined" && "matchMedia" in window) {
    return window.matchMedia(query).matches;
  }
  return false;
}
function useMediaQuery(query, initialValue, { getInitialValueInEffect } = {
  getInitialValueInEffect: true
}) {
  const [matches, setMatches] = import_react13.useState(getInitialValueInEffect ? initialValue : getInitialValue(query));
  const queryRef = import_react13.useRef(null);
  import_react13.useEffect(() => {
    if ("matchMedia" in window) {
      queryRef.current = window.matchMedia(query);
      setMatches(queryRef.current.matches);
      return attachMediaListener(queryRef.current, (event) => setMatches(event.matches));
    }
    return;
  }, [query]);
  return matches;
}

// node_modules/@mantine/hooks/esm/use-isomorphic-effect/use-isomorphic-effect.mjs
var import_react14 = __toESM(require_react(), 1);
"use client";
var useIsomorphicEffect = typeof document !== "undefined" ? import_react14.useLayoutEffect : import_react14.useEffect;

// node_modules/@mantine/hooks/esm/use-focus-return/use-focus-return.mjs
var import_react16 = __toESM(require_react(), 1);

// node_modules/@mantine/hooks/esm/use-did-update/use-did-update.mjs
var import_react15 = __toESM(require_react(), 1);
"use client";
function useDidUpdate(fn, dependencies) {
  const mounted = import_react15.useRef(false);
  import_react15.useEffect(() => () => {
    mounted.current = false;
  }, []);
  import_react15.useEffect(() => {
    if (mounted.current) {
      return fn();
    }
    mounted.current = true;
    return;
  }, dependencies);
}

// node_modules/@mantine/hooks/esm/use-focus-return/use-focus-return.mjs
"use client";
function useFocusReturn({ opened, shouldReturnFocus = true }) {
  const lastActiveElement = import_react16.useRef(null);
  const returnFocus = () => {
    if (lastActiveElement.current && "focus" in lastActiveElement.current && typeof lastActiveElement.current.focus === "function") {
      lastActiveElement.current?.focus({ preventScroll: true });
    }
  };
  useDidUpdate(() => {
    let timeout = -1;
    const clearFocusTimeout = (event) => {
      if (event.key === "Tab") {
        window.clearTimeout(timeout);
      }
    };
    document.addEventListener("keydown", clearFocusTimeout);
    if (opened) {
      lastActiveElement.current = document.activeElement;
    } else if (shouldReturnFocus) {
      timeout = window.setTimeout(returnFocus, 10);
    }
    return () => {
      window.clearTimeout(timeout);
      document.removeEventListener("keydown", clearFocusTimeout);
    };
  }, [opened, shouldReturnFocus]);
  return returnFocus;
}
// node_modules/@mantine/hooks/esm/use-focus-trap/use-focus-trap.mjs
var import_react17 = __toESM(require_react(), 1);

// node_modules/@mantine/hooks/esm/use-focus-trap/tabbable.mjs
"use client";
var TABBABLE_NODES = /input|select|textarea|button|object/;
var FOCUS_SELECTOR = "a, input, select, textarea, button, object, [tabindex]";
function hidden(element) {
  if (false) {
  }
  return element.style.display === "none";
}
function visible(element) {
  const isHidden = element.getAttribute("aria-hidden") || element.getAttribute("hidden") || element.getAttribute("type") === "hidden";
  if (isHidden) {
    return false;
  }
  let parentElement = element;
  while (parentElement) {
    if (parentElement === document.body || parentElement.nodeType === 11) {
      break;
    }
    if (hidden(parentElement)) {
      return false;
    }
    parentElement = parentElement.parentNode;
  }
  return true;
}
function getElementTabIndex(element) {
  let tabIndex = element.getAttribute("tabindex");
  if (tabIndex === null) {
    tabIndex = undefined;
  }
  return parseInt(tabIndex, 10);
}
function focusable(element) {
  const nodeName = element.nodeName.toLowerCase();
  const isTabIndexNotNaN = !Number.isNaN(getElementTabIndex(element));
  const res = TABBABLE_NODES.test(nodeName) && !element.disabled || (element instanceof HTMLAnchorElement ? element.href || isTabIndexNotNaN : isTabIndexNotNaN);
  return res && visible(element);
}
function tabbable(element) {
  const tabIndex = getElementTabIndex(element);
  const isTabIndexNaN = Number.isNaN(tabIndex);
  return (isTabIndexNaN || tabIndex >= 0) && focusable(element);
}
function findTabbableDescendants(element) {
  return Array.from(element.querySelectorAll(FOCUS_SELECTOR)).filter(tabbable);
}

// node_modules/@mantine/hooks/esm/use-focus-trap/scope-tab.mjs
"use client";
function scopeTab(node2, event) {
  const tabbable2 = findTabbableDescendants(node2);
  if (!tabbable2.length) {
    event.preventDefault();
    return;
  }
  const finalTabbable = tabbable2[event.shiftKey ? 0 : tabbable2.length - 1];
  const root2 = node2.getRootNode();
  let leavingFinalTabbable = finalTabbable === root2.activeElement || node2 === root2.activeElement;
  const activeElement2 = root2.activeElement;
  const activeElementIsRadio = activeElement2.tagName === "INPUT" && activeElement2.getAttribute("type") === "radio";
  if (activeElementIsRadio) {
    const activeRadioGroup = tabbable2.filter((element) => element.getAttribute("type") === "radio" && element.getAttribute("name") === activeElement2.getAttribute("name"));
    leavingFinalTabbable = activeRadioGroup.includes(finalTabbable);
  }
  if (!leavingFinalTabbable) {
    return;
  }
  event.preventDefault();
  const target = tabbable2[event.shiftKey ? tabbable2.length - 1 : 0];
  if (target) {
    target.focus();
  }
}

// node_modules/@mantine/hooks/esm/use-focus-trap/use-focus-trap.mjs
"use client";
function useFocusTrap(active = true) {
  const ref = import_react17.useRef(null);
  const focusNode = (node2) => {
    let focusElement = node2.querySelector("[data-autofocus]");
    if (!focusElement) {
      const children = Array.from(node2.querySelectorAll(FOCUS_SELECTOR));
      focusElement = children.find(tabbable) || children.find(focusable) || null;
      if (!focusElement && focusable(node2)) {
        focusElement = node2;
      }
    }
    if (focusElement) {
      focusElement.focus({ preventScroll: true });
    } else if (false) {
    }
  };
  const setRef = import_react17.useCallback((node2) => {
    if (!active) {
      return;
    }
    if (node2 === null) {
      return;
    }
    if (ref.current === node2) {
      return;
    }
    if (node2) {
      setTimeout(() => {
        if (node2.getRootNode()) {
          focusNode(node2);
        } else if (false) {
        }
      });
      ref.current = node2;
    } else {
      ref.current = null;
    }
  }, [active]);
  import_react17.useEffect(() => {
    if (!active) {
      return;
    }
    ref.current && setTimeout(() => focusNode(ref.current));
    const handleKeyDown = (event) => {
      if (event.key === "Tab" && ref.current) {
        scopeTab(ref.current, event);
      }
    };
    document.addEventListener("keydown", handleKeyDown);
    return () => document.removeEventListener("keydown", handleKeyDown);
  }, [active]);
  return setRef;
}
// node_modules/@mantine/hooks/esm/use-id/use-id.mjs
var import_react19 = __toESM(require_react(), 1);

// node_modules/@mantine/hooks/esm/use-id/use-react-id.mjs
var import_react18 = __toESM(require_react(), 1);
"use client";
var __useId = import_react18.default["useId".toString()] || (() => {
  return;
});
function useReactId() {
  const id = __useId();
  return id ? `mantine-${id.replace(/:/g, "")}` : "";
}

// node_modules/@mantine/hooks/esm/use-id/use-id.mjs
"use client";
function useId(staticId) {
  const reactId = useReactId();
  const [uuid, setUuid] = import_react19.useState(reactId);
  useIsomorphicEffect(() => {
    setUuid(randomId());
  }, []);
  if (typeof staticId === "string") {
    return staticId;
  }
  if (typeof window === "undefined") {
    return reactId;
  }
  return uuid;
}
// node_modules/@mantine/hooks/esm/use-window-event/use-window-event.mjs
var import_react20 = __toESM(require_react(), 1);
"use client";
function useWindowEvent(type, listener, options) {
  import_react20.useEffect(() => {
    window.addEventListener(type, listener, options);
    return () => window.removeEventListener(type, listener, options);
  }, [type, listener]);
}

// node_modules/@mantine/hooks/esm/use-merged-ref/use-merged-ref.mjs
var import_react21 = __toESM(require_react(), 1);
"use client";
function assignRef2(ref, value) {
  if (typeof ref === "function") {
    return ref(value);
  } else if (typeof ref === "object" && ref !== null && "current" in ref) {
    ref.current = value;
  }
}
function mergeRefs(...refs) {
  const cleanupMap = /* @__PURE__ */ new Map;
  return (node2) => {
    refs.forEach((ref) => {
      const cleanup = assignRef2(ref, node2);
      if (cleanup) {
        cleanupMap.set(ref, cleanup);
      }
    });
    if (cleanupMap.size > 0) {
      return () => {
        refs.forEach((ref) => {
          const cleanup = cleanupMap.get(ref);
          if (cleanup) {
            cleanup();
          } else {
            assignRef2(ref, null);
          }
        });
        cleanupMap.clear();
      };
    }
  };
}
function useMergedRef(...refs) {
  return import_react21.useCallback(mergeRefs(...refs), refs);
}
// node_modules/@mantine/hooks/esm/use-uncontrolled/use-uncontrolled.mjs
var import_react22 = __toESM(require_react(), 1);
"use client";
function useUncontrolled({
  value,
  defaultValue,
  finalValue,
  onChange = () => {
  }
}) {
  const [uncontrolledValue, setUncontrolledValue] = import_react22.useState(defaultValue !== undefined ? defaultValue : finalValue);
  const handleUncontrolledChange = (val, ...payload) => {
    setUncontrolledValue(val);
    onChange?.(val, ...payload);
  };
  if (value !== undefined) {
    return [value, onChange, true];
  }
  return [uncontrolledValue, handleUncontrolledChange, false];
}

// node_modules/@mantine/hooks/esm/use-reduced-motion/use-reduced-motion.mjs
"use client";
function useReducedMotion(initialValue, options) {
  return useMediaQuery("(prefers-reduced-motion: reduce)", initialValue, options);
}
// node_modules/@mantine/hooks/esm/use-previous/use-previous.mjs
var import_react23 = __toESM(require_react(), 1);
"use client";
function usePrevious(value) {
  const ref = import_react23.useRef(undefined);
  import_react23.useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}
// node_modules/@mantine/core/esm/core/utils/memoize/memoize.mjs
"use client";
function memoize2(func) {
  const cache2 = /* @__PURE__ */ new Map;
  return (...args) => {
    const key = JSON.stringify(args);
    if (cache2.has(key)) {
      return cache2.get(key);
    }
    const result = func(...args);
    cache2.set(key, result);
    return result;
  };
}

// node_modules/@mantine/core/esm/core/utils/get-ref-prop/get-ref-prop.mjs
var import_react24 = __toESM(require_react(), 1);
"use client";
function getRefProp(element) {
  const version2 = import_react24.default.version;
  if (typeof import_react24.default.version !== "string") {
    return element?.ref;
  }
  if (version2.startsWith("18.")) {
    return element?.ref;
  }
  return element?.props?.ref;
}

// node_modules/@mantine/core/esm/core/styles-api/create-vars-resolver/create-vars-resolver.mjs
"use client";
function createVarsResolver(resolver) {
  return resolver;
}

// node_modules/clsx/dist/clsx.mjs
function r2(e) {
  var t, f2, n = "";
  if (typeof e == "string" || typeof e == "number")
    n += e;
  else if (typeof e == "object")
    if (Array.isArray(e)) {
      var o2 = e.length;
      for (t = 0;t < o2; t++)
        e[t] && (f2 = r2(e[t])) && (n && (n += " "), n += f2);
    } else
      for (f2 in e)
        e[f2] && (n && (n += " "), n += f2);
  return n;
}
function clsx() {
  for (var e, t, f2 = 0, n = "", o2 = arguments.length;f2 < o2; f2++)
    (e = arguments[f2]) && (t = r2(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_default = clsx;

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-class-name/resolve-class-names/resolve-class-names.mjs
"use client";
var EMPTY_CLASS_NAMES = {};
function mergeClassNames(objects) {
  const merged = {};
  objects.forEach((obj) => {
    Object.entries(obj).forEach(([key, value]) => {
      if (merged[key]) {
        merged[key] = clsx_default(merged[key], value);
      } else {
        merged[key] = value;
      }
    });
  });
  return merged;
}
function resolveClassNames({ theme, classNames, props, stylesCtx }) {
  const arrayClassNames = Array.isArray(classNames) ? classNames : [classNames];
  const resolvedClassNames = arrayClassNames.map((item) => typeof item === "function" ? item(theme, props, stylesCtx) : item || EMPTY_CLASS_NAMES);
  return mergeClassNames(resolvedClassNames);
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-style/resolve-styles/resolve-styles.mjs
"use client";
function resolveStyles({ theme, styles, props, stylesCtx }) {
  const arrayStyles = Array.isArray(styles) ? styles : [styles];
  return arrayStyles.reduce((acc, style2) => {
    if (typeof style2 === "function") {
      return { ...acc, ...style2(theme, props, stylesCtx) };
    }
    return { ...acc, ...style2 };
  }, {});
}

// node_modules/@mantine/core/esm/core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs
var import_react38 = __toESM(require_react(), 1);
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mantine/core/esm/core/MantineProvider/Mantine.context.mjs
var import_react25 = __toESM(require_react(), 1);
"use client";
var MantineContext = import_react25.createContext(null);
function useMantineContext() {
  const ctx = import_react25.useContext(MantineContext);
  if (!ctx) {
    throw new Error("[@mantine/core] MantineProvider was not found in tree");
  }
  return ctx;
}
function useMantineCssVariablesResolver() {
  return useMantineContext().cssVariablesResolver;
}
function useMantineClassNamesPrefix() {
  return useMantineContext().classNamesPrefix;
}
function useMantineStyleNonce() {
  return useMantineContext().getStyleNonce;
}
function useMantineWithStaticClasses() {
  return useMantineContext().withStaticClasses;
}
function useMantineIsHeadless() {
  return useMantineContext().headless;
}
function useMantineSxTransform() {
  return useMantineContext().stylesTransform?.sx;
}
function useMantineStylesTransform() {
  return useMantineContext().stylesTransform?.styles;
}
function useMantineEnv() {
  return useMantineContext().env || "default";
}

// node_modules/@mantine/core/esm/core/MantineProvider/default-theme.mjs
var import_react27 = __toESM(require_react(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mantine/core/esm/core/MantineProvider/color-functions/default-variant-colors-resolver/default-variant-colors-resolver.mjs
var import_react26 = __toESM(require_react(), 1);
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mantine/core/esm/core/MantineProvider/color-functions/to-rgba/to-rgba.mjs
function isHexColor(hex) {
  const HEX_REGEXP = /^#?([0-9A-F]{3}){1,2}([0-9A-F]{2})?$/i;
  return HEX_REGEXP.test(hex);
}
function hexToRgba(color) {
  let hexString = color.replace("#", "");
  if (hexString.length === 3) {
    const shorthandHex = hexString.split("");
    hexString = [
      shorthandHex[0],
      shorthandHex[0],
      shorthandHex[1],
      shorthandHex[1],
      shorthandHex[2],
      shorthandHex[2]
    ].join("");
  }
  if (hexString.length === 8) {
    const alpha = parseInt(hexString.slice(6, 8), 16) / 255;
    return {
      r: parseInt(hexString.slice(0, 2), 16),
      g: parseInt(hexString.slice(2, 4), 16),
      b: parseInt(hexString.slice(4, 6), 16),
      a: alpha
    };
  }
  const parsed = parseInt(hexString, 16);
  const r3 = parsed >> 16 & 255;
  const g2 = parsed >> 8 & 255;
  const b = parsed & 255;
  return {
    r: r3,
    g: g2,
    b,
    a: 1
  };
}
function rgbStringToRgba(color) {
  const [r3, g2, b, a2] = color.replace(/[^0-9,./]/g, "").split(/[/,]/).map(Number);
  return { r: r3, g: g2, b, a: a2 || 1 };
}
function hslStringToRgba(hslaString) {
  const hslaRegex = /^hsla?\(\s*(\d+)\s*,\s*(\d+%)\s*,\s*(\d+%)\s*(,\s*(0?\.\d+|\d+(\.\d+)?))?\s*\)$/i;
  const matches = hslaString.match(hslaRegex);
  if (!matches) {
    return {
      r: 0,
      g: 0,
      b: 0,
      a: 1
    };
  }
  const h = parseInt(matches[1], 10);
  const s2 = parseInt(matches[2], 10) / 100;
  const l2 = parseInt(matches[3], 10) / 100;
  const a2 = matches[5] ? parseFloat(matches[5]) : undefined;
  const chroma = (1 - Math.abs(2 * l2 - 1)) * s2;
  const huePrime = h / 60;
  const x2 = chroma * (1 - Math.abs(huePrime % 2 - 1));
  const m2 = l2 - chroma / 2;
  let r3;
  let g2;
  let b;
  if (huePrime >= 0 && huePrime < 1) {
    r3 = chroma;
    g2 = x2;
    b = 0;
  } else if (huePrime >= 1 && huePrime < 2) {
    r3 = x2;
    g2 = chroma;
    b = 0;
  } else if (huePrime >= 2 && huePrime < 3) {
    r3 = 0;
    g2 = chroma;
    b = x2;
  } else if (huePrime >= 3 && huePrime < 4) {
    r3 = 0;
    g2 = x2;
    b = chroma;
  } else if (huePrime >= 4 && huePrime < 5) {
    r3 = x2;
    g2 = 0;
    b = chroma;
  } else {
    r3 = chroma;
    g2 = 0;
    b = x2;
  }
  return {
    r: Math.round((r3 + m2) * 255),
    g: Math.round((g2 + m2) * 255),
    b: Math.round((b + m2) * 255),
    a: a2 || 1
  };
}
function toRgba(color) {
  if (isHexColor(color)) {
    return hexToRgba(color);
  }
  if (color.startsWith("rgb")) {
    return rgbStringToRgba(color);
  }
  if (color.startsWith("hsl")) {
    return hslStringToRgba(color);
  }
  return {
    r: 0,
    g: 0,
    b: 0,
    a: 1
  };
}

// node_modules/@mantine/core/esm/core/MantineProvider/color-functions/darken/darken.mjs
function darken(color, alpha) {
  if (color.startsWith("var(")) {
    return `color-mix(in srgb, ${color}, black ${alpha * 100}%)`;
  }
  const { r: r3, g: g2, b, a: a2 } = toRgba(color);
  const f2 = 1 - alpha;
  const dark = (input) => Math.round(input * f2);
  return `rgba(${dark(r3)}, ${dark(g2)}, ${dark(b)}, ${a2})`;
}

// node_modules/@mantine/core/esm/core/MantineProvider/color-functions/get-primary-shade/get-primary-shade.mjs
"use client";
function getPrimaryShade(theme, colorScheme) {
  if (typeof theme.primaryShade === "number") {
    return theme.primaryShade;
  }
  if (colorScheme === "dark") {
    return theme.primaryShade.dark;
  }
  return theme.primaryShade.light;
}

// node_modules/@mantine/core/esm/core/MantineProvider/color-functions/luminance/luminance.mjs
function gammaCorrect(c2) {
  return c2 <= 0.03928 ? c2 / 12.92 : ((c2 + 0.055) / 1.055) ** 2.4;
}
function getLightnessFromOklch(oklchColor) {
  const match2 = oklchColor.match(/oklch\((.*?)%\s/);
  return match2 ? parseFloat(match2[1]) : null;
}
function luminance(color) {
  if (color.startsWith("oklch(")) {
    return (getLightnessFromOklch(color) || 0) / 100;
  }
  const { r: r3, g: g2, b } = toRgba(color);
  const sR = r3 / 255;
  const sG = g2 / 255;
  const sB = b / 255;
  const rLinear = gammaCorrect(sR);
  const gLinear = gammaCorrect(sG);
  const bLinear = gammaCorrect(sB);
  return 0.2126 * rLinear + 0.7152 * gLinear + 0.0722 * bLinear;
}
function isLightColor(color, luminanceThreshold = 0.179) {
  if (color.startsWith("var(")) {
    return false;
  }
  return luminance(color) > luminanceThreshold;
}

// node_modules/@mantine/core/esm/core/MantineProvider/color-functions/parse-theme-color/parse-theme-color.mjs
"use client";
function parseThemeColor({
  color,
  theme,
  colorScheme
}) {
  if (typeof color !== "string") {
    throw new Error(`[@mantine/core] Failed to parse color. Expected color to be a string, instead got ${typeof color}`);
  }
  if (color === "bright") {
    return {
      color,
      value: colorScheme === "dark" ? theme.white : theme.black,
      shade: undefined,
      isThemeColor: false,
      isLight: isLightColor(colorScheme === "dark" ? theme.white : theme.black, theme.luminanceThreshold),
      variable: "--mantine-color-bright"
    };
  }
  if (color === "dimmed") {
    return {
      color,
      value: colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[7],
      shade: undefined,
      isThemeColor: false,
      isLight: isLightColor(colorScheme === "dark" ? theme.colors.dark[2] : theme.colors.gray[6], theme.luminanceThreshold),
      variable: "--mantine-color-dimmed"
    };
  }
  if (color === "white" || color === "black") {
    return {
      color,
      value: color === "white" ? theme.white : theme.black,
      shade: undefined,
      isThemeColor: false,
      isLight: isLightColor(color === "white" ? theme.white : theme.black, theme.luminanceThreshold),
      variable: `--mantine-color-${color}`
    };
  }
  const [_color, shade] = color.split(".");
  const colorShade = shade ? Number(shade) : undefined;
  const isThemeColor = _color in theme.colors;
  if (isThemeColor) {
    const colorValue = colorShade !== undefined ? theme.colors[_color][colorShade] : theme.colors[_color][getPrimaryShade(theme, colorScheme || "light")];
    return {
      color: _color,
      value: colorValue,
      shade: colorShade,
      isThemeColor,
      isLight: isLightColor(colorValue, theme.luminanceThreshold),
      variable: shade ? `--mantine-color-${_color}-${colorShade}` : `--mantine-color-${_color}-filled`
    };
  }
  return {
    color,
    value: color,
    isThemeColor,
    isLight: isLightColor(color, theme.luminanceThreshold),
    shade: colorShade,
    variable: undefined
  };
}

// node_modules/@mantine/core/esm/core/MantineProvider/color-functions/get-theme-color/get-theme-color.mjs
"use client";
function getThemeColor(color, theme) {
  const parsed = parseThemeColor({ color: color || theme.primaryColor, theme });
  return parsed.variable ? `var(${parsed.variable})` : color;
}

// node_modules/@mantine/core/esm/core/MantineProvider/color-functions/get-gradient/get-gradient.mjs
"use client";
function getGradient(gradient, theme) {
  const merged = {
    from: gradient?.from || theme.defaultGradient.from,
    to: gradient?.to || theme.defaultGradient.to,
    deg: gradient?.deg ?? theme.defaultGradient.deg ?? 0
  };
  const fromColor = getThemeColor(merged.from, theme);
  const toColor = getThemeColor(merged.to, theme);
  return `linear-gradient(${merged.deg}deg, ${fromColor} 0%, ${toColor} 100%)`;
}

// node_modules/@mantine/core/esm/core/MantineProvider/color-functions/rgba/rgba.mjs
function rgba(color, alpha2) {
  if (typeof color !== "string" || alpha2 > 1 || alpha2 < 0) {
    return "rgba(0, 0, 0, 1)";
  }
  if (color.startsWith("var(")) {
    const mixPercentage = (1 - alpha2) * 100;
    return `color-mix(in srgb, ${color}, transparent ${mixPercentage}%)`;
  }
  if (color.startsWith("oklch")) {
    if (color.includes("/")) {
      return color.replace(/\/\s*[\d.]+\s*\)/, `/ ${alpha2})`);
    }
    return color.replace(")", ` / ${alpha2})`);
  }
  const { r: r3, g: g2, b } = toRgba(color);
  return `rgba(${r3}, ${g2}, ${b}, ${alpha2})`;
}
var alpha = rgba;

// node_modules/@mantine/core/esm/core/MantineProvider/color-functions/default-variant-colors-resolver/default-variant-colors-resolver.mjs
"use client";
var defaultVariantColorsResolver = ({
  color,
  theme,
  variant,
  gradient,
  autoContrast
}) => {
  const parsed = parseThemeColor({ color, theme });
  const _autoContrast = typeof autoContrast === "boolean" ? autoContrast : theme.autoContrast;
  if (variant === "filled") {
    const textColor = _autoContrast ? parsed.isLight ? "var(--mantine-color-black)" : "var(--mantine-color-white)" : "var(--mantine-color-white)";
    if (parsed.isThemeColor) {
      if (parsed.shade === undefined) {
        return {
          background: `var(--mantine-color-${color}-filled)`,
          hover: `var(--mantine-color-${color}-filled-hover)`,
          color: textColor,
          border: `${rem(1)} solid transparent`
        };
      }
      return {
        background: `var(--mantine-color-${parsed.color}-${parsed.shade})`,
        hover: `var(--mantine-color-${parsed.color}-${parsed.shade === 9 ? 8 : parsed.shade + 1})`,
        color: textColor,
        border: `${rem(1)} solid transparent`
      };
    }
    return {
      background: color,
      hover: darken(color, 0.1),
      color: textColor,
      border: `${rem(1)} solid transparent`
    };
  }
  if (variant === "light") {
    if (parsed.isThemeColor) {
      if (parsed.shade === undefined) {
        return {
          background: `var(--mantine-color-${color}-light)`,
          hover: `var(--mantine-color-${color}-light-hover)`,
          color: `var(--mantine-color-${color}-light-color)`,
          border: `${rem(1)} solid transparent`
        };
      }
      const parsedColor = theme.colors[parsed.color][parsed.shade];
      return {
        background: rgba(parsedColor, 0.1),
        hover: rgba(parsedColor, 0.12),
        color: `var(--mantine-color-${parsed.color}-${Math.min(parsed.shade, 6)})`,
        border: `${rem(1)} solid transparent`
      };
    }
    return {
      background: rgba(color, 0.1),
      hover: rgba(color, 0.12),
      color,
      border: `${rem(1)} solid transparent`
    };
  }
  if (variant === "outline") {
    if (parsed.isThemeColor) {
      if (parsed.shade === undefined) {
        return {
          background: "transparent",
          hover: `var(--mantine-color-${color}-outline-hover)`,
          color: `var(--mantine-color-${color}-outline)`,
          border: `${rem(1)} solid var(--mantine-color-${color}-outline)`
        };
      }
      return {
        background: "transparent",
        hover: rgba(theme.colors[parsed.color][parsed.shade], 0.05),
        color: `var(--mantine-color-${parsed.color}-${parsed.shade})`,
        border: `${rem(1)} solid var(--mantine-color-${parsed.color}-${parsed.shade})`
      };
    }
    return {
      background: "transparent",
      hover: rgba(color, 0.05),
      color,
      border: `${rem(1)} solid ${color}`
    };
  }
  if (variant === "subtle") {
    if (parsed.isThemeColor) {
      if (parsed.shade === undefined) {
        return {
          background: "transparent",
          hover: `var(--mantine-color-${color}-light-hover)`,
          color: `var(--mantine-color-${color}-light-color)`,
          border: `${rem(1)} solid transparent`
        };
      }
      const parsedColor = theme.colors[parsed.color][parsed.shade];
      return {
        background: "transparent",
        hover: rgba(parsedColor, 0.12),
        color: `var(--mantine-color-${parsed.color}-${Math.min(parsed.shade, 6)})`,
        border: `${rem(1)} solid transparent`
      };
    }
    return {
      background: "transparent",
      hover: rgba(color, 0.12),
      color,
      border: `${rem(1)} solid transparent`
    };
  }
  if (variant === "transparent") {
    if (parsed.isThemeColor) {
      if (parsed.shade === undefined) {
        return {
          background: "transparent",
          hover: "transparent",
          color: `var(--mantine-color-${color}-light-color)`,
          border: `${rem(1)} solid transparent`
        };
      }
      return {
        background: "transparent",
        hover: "transparent",
        color: `var(--mantine-color-${parsed.color}-${Math.min(parsed.shade, 6)})`,
        border: `${rem(1)} solid transparent`
      };
    }
    return {
      background: "transparent",
      hover: "transparent",
      color,
      border: `${rem(1)} solid transparent`
    };
  }
  if (variant === "white") {
    if (parsed.isThemeColor) {
      if (parsed.shade === undefined) {
        return {
          background: "var(--mantine-color-white)",
          hover: darken(theme.white, 0.01),
          color: `var(--mantine-color-${color}-filled)`,
          border: `${rem(1)} solid transparent`
        };
      }
      return {
        background: "var(--mantine-color-white)",
        hover: darken(theme.white, 0.01),
        color: `var(--mantine-color-${parsed.color}-${parsed.shade})`,
        border: `${rem(1)} solid transparent`
      };
    }
    return {
      background: "var(--mantine-color-white)",
      hover: darken(theme.white, 0.01),
      color,
      border: `${rem(1)} solid transparent`
    };
  }
  if (variant === "gradient") {
    return {
      background: getGradient(gradient, theme),
      hover: getGradient(gradient, theme),
      color: "var(--mantine-color-white)",
      border: "none"
    };
  }
  if (variant === "default") {
    return {
      background: "var(--mantine-color-default)",
      hover: "var(--mantine-color-default-hover)",
      color: "var(--mantine-color-default-color)",
      border: `${rem(1)} solid var(--mantine-color-default-border)`
    };
  }
  return {};
};

// node_modules/@mantine/core/esm/core/MantineProvider/default-colors.mjs
var DEFAULT_COLORS = {
  dark: [
    "#C9C9C9",
    "#b8b8b8",
    "#828282",
    "#696969",
    "#424242",
    "#3b3b3b",
    "#2e2e2e",
    "#242424",
    "#1f1f1f",
    "#141414"
  ],
  gray: [
    "#f8f9fa",
    "#f1f3f5",
    "#e9ecef",
    "#dee2e6",
    "#ced4da",
    "#adb5bd",
    "#868e96",
    "#495057",
    "#343a40",
    "#212529"
  ],
  red: [
    "#fff5f5",
    "#ffe3e3",
    "#ffc9c9",
    "#ffa8a8",
    "#ff8787",
    "#ff6b6b",
    "#fa5252",
    "#f03e3e",
    "#e03131",
    "#c92a2a"
  ],
  pink: [
    "#fff0f6",
    "#ffdeeb",
    "#fcc2d7",
    "#faa2c1",
    "#f783ac",
    "#f06595",
    "#e64980",
    "#d6336c",
    "#c2255c",
    "#a61e4d"
  ],
  grape: [
    "#f8f0fc",
    "#f3d9fa",
    "#eebefa",
    "#e599f7",
    "#da77f2",
    "#cc5de8",
    "#be4bdb",
    "#ae3ec9",
    "#9c36b5",
    "#862e9c"
  ],
  violet: [
    "#f3f0ff",
    "#e5dbff",
    "#d0bfff",
    "#b197fc",
    "#9775fa",
    "#845ef7",
    "#7950f2",
    "#7048e8",
    "#6741d9",
    "#5f3dc4"
  ],
  indigo: [
    "#edf2ff",
    "#dbe4ff",
    "#bac8ff",
    "#91a7ff",
    "#748ffc",
    "#5c7cfa",
    "#4c6ef5",
    "#4263eb",
    "#3b5bdb",
    "#364fc7"
  ],
  blue: [
    "#e7f5ff",
    "#d0ebff",
    "#a5d8ff",
    "#74c0fc",
    "#4dabf7",
    "#339af0",
    "#228be6",
    "#1c7ed6",
    "#1971c2",
    "#1864ab"
  ],
  cyan: [
    "#e3fafc",
    "#c5f6fa",
    "#99e9f2",
    "#66d9e8",
    "#3bc9db",
    "#22b8cf",
    "#15aabf",
    "#1098ad",
    "#0c8599",
    "#0b7285"
  ],
  teal: [
    "#e6fcf5",
    "#c3fae8",
    "#96f2d7",
    "#63e6be",
    "#38d9a9",
    "#20c997",
    "#12b886",
    "#0ca678",
    "#099268",
    "#087f5b"
  ],
  green: [
    "#ebfbee",
    "#d3f9d8",
    "#b2f2bb",
    "#8ce99a",
    "#69db7c",
    "#51cf66",
    "#40c057",
    "#37b24d",
    "#2f9e44",
    "#2b8a3e"
  ],
  lime: [
    "#f4fce3",
    "#e9fac8",
    "#d8f5a2",
    "#c0eb75",
    "#a9e34b",
    "#94d82d",
    "#82c91e",
    "#74b816",
    "#66a80f",
    "#5c940d"
  ],
  yellow: [
    "#fff9db",
    "#fff3bf",
    "#ffec99",
    "#ffe066",
    "#ffd43b",
    "#fcc419",
    "#fab005",
    "#f59f00",
    "#f08c00",
    "#e67700"
  ],
  orange: [
    "#fff4e6",
    "#ffe8cc",
    "#ffd8a8",
    "#ffc078",
    "#ffa94d",
    "#ff922b",
    "#fd7e14",
    "#f76707",
    "#e8590c",
    "#d9480f"
  ]
};

// node_modules/@mantine/core/esm/core/MantineProvider/default-theme.mjs
var DEFAULT_FONT_FAMILY = "-apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif, Apple Color Emoji, Segoe UI Emoji";
var DEFAULT_THEME = {
  scale: 1,
  fontSmoothing: true,
  focusRing: "auto",
  white: "#fff",
  black: "#000",
  colors: DEFAULT_COLORS,
  primaryShade: { light: 6, dark: 8 },
  primaryColor: "blue",
  variantColorResolver: defaultVariantColorsResolver,
  autoContrast: false,
  luminanceThreshold: 0.3,
  fontFamily: DEFAULT_FONT_FAMILY,
  fontFamilyMonospace: "ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, Liberation Mono, Courier New, monospace",
  respectReducedMotion: false,
  cursorType: "default",
  defaultGradient: { from: "blue", to: "cyan", deg: 45 },
  defaultRadius: "sm",
  activeClassName: "mantine-active",
  focusClassName: "",
  headings: {
    fontFamily: DEFAULT_FONT_FAMILY,
    fontWeight: "700",
    textWrap: "wrap",
    sizes: {
      h1: { fontSize: rem(34), lineHeight: "1.3" },
      h2: { fontSize: rem(26), lineHeight: "1.35" },
      h3: { fontSize: rem(22), lineHeight: "1.4" },
      h4: { fontSize: rem(18), lineHeight: "1.45" },
      h5: { fontSize: rem(16), lineHeight: "1.5" },
      h6: { fontSize: rem(14), lineHeight: "1.5" }
    }
  },
  fontSizes: {
    xs: rem(12),
    sm: rem(14),
    md: rem(16),
    lg: rem(18),
    xl: rem(20)
  },
  lineHeights: {
    xs: "1.4",
    sm: "1.45",
    md: "1.55",
    lg: "1.6",
    xl: "1.65"
  },
  radius: {
    xs: rem(2),
    sm: rem(4),
    md: rem(8),
    lg: rem(16),
    xl: rem(32)
  },
  spacing: {
    xs: rem(10),
    sm: rem(12),
    md: rem(16),
    lg: rem(20),
    xl: rem(32)
  },
  breakpoints: {
    xs: "36em",
    sm: "48em",
    md: "62em",
    lg: "75em",
    xl: "88em"
  },
  shadows: {
    xs: `0 ${rem(1)} ${rem(3)} rgba(0, 0, 0, 0.05), 0 ${rem(1)} ${rem(2)} rgba(0, 0, 0, 0.1)`,
    sm: `0 ${rem(1)} ${rem(3)} rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 ${rem(10)} ${rem(15)} ${rem(-5)}, rgba(0, 0, 0, 0.04) 0 ${rem(7)} ${rem(7)} ${rem(-5)}`,
    md: `0 ${rem(1)} ${rem(3)} rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 ${rem(20)} ${rem(25)} ${rem(-5)}, rgba(0, 0, 0, 0.04) 0 ${rem(10)} ${rem(10)} ${rem(-5)}`,
    lg: `0 ${rem(1)} ${rem(3)} rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 ${rem(28)} ${rem(23)} ${rem(-7)}, rgba(0, 0, 0, 0.04) 0 ${rem(12)} ${rem(12)} ${rem(-7)}`,
    xl: `0 ${rem(1)} ${rem(3)} rgba(0, 0, 0, 0.05), rgba(0, 0, 0, 0.05) 0 ${rem(36)} ${rem(28)} ${rem(-7)}, rgba(0, 0, 0, 0.04) 0 ${rem(17)} ${rem(17)} ${rem(-7)}`
  },
  other: {},
  components: {}
};

// node_modules/@mantine/core/esm/core/MantineProvider/MantineProvider.mjs
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mantine/core/esm/core/MantineProvider/color-scheme-managers/is-mantine-color-scheme.mjs
"use client";
function isMantineColorScheme(value) {
  return value === "auto" || value === "dark" || value === "light";
}

// node_modules/@mantine/core/esm/core/MantineProvider/color-scheme-managers/local-storage-manager.mjs
"use client";
function localStorageColorSchemeManager({
  key = "mantine-color-scheme-value"
} = {}) {
  let handleStorageEvent;
  return {
    get: (defaultValue) => {
      if (typeof window === "undefined") {
        return defaultValue;
      }
      try {
        const storedColorScheme = window.localStorage.getItem(key);
        return isMantineColorScheme(storedColorScheme) ? storedColorScheme : defaultValue;
      } catch {
        return defaultValue;
      }
    },
    set: (value) => {
      try {
        window.localStorage.setItem(key, value);
      } catch (error) {
        console.warn("[@mantine/core] Local storage color scheme manager was unable to save color scheme.", error);
      }
    },
    subscribe: (onUpdate) => {
      handleStorageEvent = (event) => {
        if (event.storageArea === window.localStorage && event.key === key) {
          isMantineColorScheme(event.newValue) && onUpdate(event.newValue);
        }
      };
      window.addEventListener("storage", handleStorageEvent);
    },
    unsubscribe: () => {
      window.removeEventListener("storage", handleStorageEvent);
    },
    clear: () => {
      window.localStorage.removeItem(key);
    }
  };
}

// node_modules/@mantine/core/esm/core/MantineProvider/MantineClasses/MantineClasses.mjs
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var import_react30 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var import_react29 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/core/MantineProvider/merge-mantine-theme/merge-mantine-theme.mjs
var import_react28 = __toESM(require_react(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var INVALID_PRIMARY_COLOR_ERROR = "[@mantine/core] MantineProvider: Invalid theme.primaryColor, it accepts only key of theme.colors, learn more – https://mantine.dev/theming/colors/#primary-color";
var INVALID_PRIMARY_SHADE_ERROR = "[@mantine/core] MantineProvider: Invalid theme.primaryShade, it accepts only 0-9 integers or an object { light: 0-9, dark: 0-9 }";
function isValidPrimaryShade(shade) {
  if (shade < 0 || shade > 9) {
    return false;
  }
  return parseInt(shade.toString(), 10) === shade;
}
function validateMantineTheme(theme) {
  if (!(theme.primaryColor in theme.colors)) {
    throw new Error(INVALID_PRIMARY_COLOR_ERROR);
  }
  if (typeof theme.primaryShade === "object") {
    if (!isValidPrimaryShade(theme.primaryShade.dark) || !isValidPrimaryShade(theme.primaryShade.light)) {
      throw new Error(INVALID_PRIMARY_SHADE_ERROR);
    }
  }
  if (typeof theme.primaryShade === "number" && !isValidPrimaryShade(theme.primaryShade)) {
    throw new Error(INVALID_PRIMARY_SHADE_ERROR);
  }
}
function mergeMantineTheme(currentTheme, themeOverride) {
  if (!themeOverride) {
    validateMantineTheme(currentTheme);
    return currentTheme;
  }
  const result = deepMerge(currentTheme, themeOverride);
  if (themeOverride.fontFamily && !themeOverride.headings?.fontFamily) {
    result.headings.fontFamily = themeOverride.fontFamily;
  }
  validateMantineTheme(result);
  return result;
}

// node_modules/@mantine/core/esm/core/MantineProvider/MantineThemeProvider/MantineThemeProvider.mjs
"use client";
var MantineThemeContext = import_react29.createContext(null);
var useSafeMantineTheme = () => import_react29.useContext(MantineThemeContext) || DEFAULT_THEME;
function useMantineTheme() {
  const ctx = import_react29.useContext(MantineThemeContext);
  if (!ctx) {
    throw new Error("@mantine/core: MantineProvider was not found in component tree, make sure you have it in your app");
  }
  return ctx;
}
function MantineThemeProvider({
  theme,
  children,
  inherit = true
}) {
  const parentTheme = useSafeMantineTheme();
  const mergedTheme = import_react29.useMemo(() => mergeMantineTheme(inherit ? parentTheme : DEFAULT_THEME, theme), [theme, parentTheme, inherit]);
  return /* @__PURE__ */ import_jsx_runtime6.jsx(MantineThemeContext.Provider, { value: mergedTheme, children });
}
MantineThemeProvider.displayName = "@mantine/core/MantineThemeProvider";

// node_modules/@mantine/core/esm/core/MantineProvider/MantineClasses/MantineClasses.mjs
"use client";
function MantineClasses() {
  const theme = useMantineTheme();
  const nonce = useMantineStyleNonce();
  const classes = keys(theme.breakpoints).reduce((acc, breakpoint) => {
    const isPxBreakpoint = theme.breakpoints[breakpoint].includes("px");
    const pxValue = px(theme.breakpoints[breakpoint]);
    const maxWidthBreakpoint = isPxBreakpoint ? `${pxValue - 0.1}px` : em(pxValue - 0.1);
    const minWidthBreakpoint = isPxBreakpoint ? `${pxValue}px` : em(pxValue);
    return `${acc}@media (max-width: ${maxWidthBreakpoint}) {.mantine-visible-from-${breakpoint} {display: none !important;}}@media (min-width: ${minWidthBreakpoint}) {.mantine-hidden-from-${breakpoint} {display: none !important;}}`;
  }, "");
  return /* @__PURE__ */ import_jsx_runtime7.jsx("style", {
    "data-mantine-styles": "classes",
    nonce: nonce?.(),
    dangerouslySetInnerHTML: { __html: classes }
  });
}

// node_modules/@mantine/core/esm/core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mantine/core/esm/core/MantineProvider/convert-css-variables/css-variables-object-to-string.mjs
"use client";
function cssVariablesObjectToString(variables) {
  return Object.entries(variables).map(([name, value]) => `${name}: ${value};`).join("");
}

// node_modules/@mantine/core/esm/core/MantineProvider/convert-css-variables/wrap-with-selector.mjs
"use client";
function wrapWithSelector(selectors, code) {
  const _selectors = Array.isArray(selectors) ? selectors : [selectors];
  return _selectors.reduce((acc, selector) => `${selector}{${acc}}`, code);
}

// node_modules/@mantine/core/esm/core/MantineProvider/convert-css-variables/convert-css-variables.mjs
"use client";
function convertCssVariables(input, selector) {
  const sharedVariables = cssVariablesObjectToString(input.variables);
  const shared = sharedVariables ? wrapWithSelector(selector, sharedVariables) : "";
  const dark = cssVariablesObjectToString(input.dark);
  const light = cssVariablesObjectToString(input.light);
  const darkForced = dark ? selector === ":host" ? wrapWithSelector(`${selector}([data-mantine-color-scheme="dark"])`, dark) : wrapWithSelector(`${selector}[data-mantine-color-scheme="dark"]`, dark) : "";
  const lightForced = light ? selector === ":host" ? wrapWithSelector(`${selector}([data-mantine-color-scheme="light"])`, light) : wrapWithSelector(`${selector}[data-mantine-color-scheme="light"]`, light) : "";
  return `${shared}${darkForced}${lightForced}`;
}

// node_modules/@mantine/core/esm/core/MantineProvider/MantineCssVariables/get-merged-variables.mjs
var import_react34 = __toESM(require_react(), 1);
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mantine/core/esm/core/MantineProvider/MantineCssVariables/default-css-variables-resolver.mjs
var import_react33 = __toESM(require_react(), 1);
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mantine/core/esm/core/MantineProvider/color-functions/get-contrast-color/get-contrast-color.mjs
"use client";
function getContrastColor({ color, theme, autoContrast }) {
  const _autoContrast = typeof autoContrast === "boolean" ? autoContrast : theme.autoContrast;
  if (!_autoContrast) {
    return "var(--mantine-color-white)";
  }
  const parsed = parseThemeColor({ color: color || theme.primaryColor, theme });
  return parsed.isLight ? "var(--mantine-color-black)" : "var(--mantine-color-white)";
}
function getPrimaryContrastColor(theme, colorScheme) {
  return getContrastColor({
    color: theme.colors[theme.primaryColor][getPrimaryShade(theme, colorScheme)],
    theme,
    autoContrast: null
  });
}

// node_modules/@mantine/core/esm/core/MantineProvider/MantineCssVariables/get-css-color-variables.mjs
var import_react31 = __toESM(require_react(), 1);
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
"use client";
function getCSSColorVariables({
  theme,
  color,
  colorScheme,
  name = color,
  withColorValues = true
}) {
  if (!theme.colors[color]) {
    return {};
  }
  if (colorScheme === "light") {
    const primaryShade2 = getPrimaryShade(theme, "light");
    const dynamicVariables2 = {
      [`--mantine-color-${name}-text`]: `var(--mantine-color-${name}-filled)`,
      [`--mantine-color-${name}-filled`]: `var(--mantine-color-${name}-${primaryShade2})`,
      [`--mantine-color-${name}-filled-hover`]: `var(--mantine-color-${name}-${primaryShade2 === 9 ? 8 : primaryShade2 + 1})`,
      [`--mantine-color-${name}-light`]: alpha(theme.colors[color][primaryShade2], 0.1),
      [`--mantine-color-${name}-light-hover`]: alpha(theme.colors[color][primaryShade2], 0.12),
      [`--mantine-color-${name}-light-color`]: `var(--mantine-color-${name}-${primaryShade2})`,
      [`--mantine-color-${name}-outline`]: `var(--mantine-color-${name}-${primaryShade2})`,
      [`--mantine-color-${name}-outline-hover`]: alpha(theme.colors[color][primaryShade2], 0.05)
    };
    if (!withColorValues) {
      return dynamicVariables2;
    }
    return {
      [`--mantine-color-${name}-0`]: theme.colors[color][0],
      [`--mantine-color-${name}-1`]: theme.colors[color][1],
      [`--mantine-color-${name}-2`]: theme.colors[color][2],
      [`--mantine-color-${name}-3`]: theme.colors[color][3],
      [`--mantine-color-${name}-4`]: theme.colors[color][4],
      [`--mantine-color-${name}-5`]: theme.colors[color][5],
      [`--mantine-color-${name}-6`]: theme.colors[color][6],
      [`--mantine-color-${name}-7`]: theme.colors[color][7],
      [`--mantine-color-${name}-8`]: theme.colors[color][8],
      [`--mantine-color-${name}-9`]: theme.colors[color][9],
      ...dynamicVariables2
    };
  }
  const primaryShade = getPrimaryShade(theme, "dark");
  const dynamicVariables = {
    [`--mantine-color-${name}-text`]: `var(--mantine-color-${name}-4)`,
    [`--mantine-color-${name}-filled`]: `var(--mantine-color-${name}-${primaryShade})`,
    [`--mantine-color-${name}-filled-hover`]: `var(--mantine-color-${name}-${primaryShade === 9 ? 8 : primaryShade + 1})`,
    [`--mantine-color-${name}-light`]: alpha(theme.colors[color][Math.max(0, primaryShade - 2)], 0.15),
    [`--mantine-color-${name}-light-hover`]: alpha(theme.colors[color][Math.max(0, primaryShade - 2)], 0.2),
    [`--mantine-color-${name}-light-color`]: `var(--mantine-color-${name}-${Math.max(primaryShade - 5, 0)})`,
    [`--mantine-color-${name}-outline`]: `var(--mantine-color-${name}-${Math.max(primaryShade - 4, 0)})`,
    [`--mantine-color-${name}-outline-hover`]: alpha(theme.colors[color][Math.max(primaryShade - 4, 0)], 0.05)
  };
  if (!withColorValues) {
    return dynamicVariables;
  }
  return {
    [`--mantine-color-${name}-0`]: theme.colors[color][0],
    [`--mantine-color-${name}-1`]: theme.colors[color][1],
    [`--mantine-color-${name}-2`]: theme.colors[color][2],
    [`--mantine-color-${name}-3`]: theme.colors[color][3],
    [`--mantine-color-${name}-4`]: theme.colors[color][4],
    [`--mantine-color-${name}-5`]: theme.colors[color][5],
    [`--mantine-color-${name}-6`]: theme.colors[color][6],
    [`--mantine-color-${name}-7`]: theme.colors[color][7],
    [`--mantine-color-${name}-8`]: theme.colors[color][8],
    [`--mantine-color-${name}-9`]: theme.colors[color][9],
    ...dynamicVariables
  };
}

// node_modules/@mantine/core/esm/core/MantineProvider/MantineCssVariables/virtual-color/virtual-color.mjs
var import_react32 = __toESM(require_react(), 1);
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
function isVirtualColor(value) {
  return !!value && typeof value === "object" && "mantine-virtual-color" in value;
}

// node_modules/@mantine/core/esm/core/MantineProvider/MantineCssVariables/default-css-variables-resolver.mjs
"use client";
function assignSizeVariables(variables, sizes, name) {
  keys(sizes).forEach((size) => Object.assign(variables, { [`--mantine-${name}-${size}`]: sizes[size] }));
}
var defaultCssVariablesResolver = (theme) => {
  const lightPrimaryShade = getPrimaryShade(theme, "light");
  const defaultRadius = theme.defaultRadius in theme.radius ? theme.radius[theme.defaultRadius] : rem(theme.defaultRadius);
  const result = {
    variables: {
      "--mantine-scale": theme.scale.toString(),
      "--mantine-cursor-type": theme.cursorType,
      "--mantine-color-scheme": "light dark",
      "--mantine-webkit-font-smoothing": theme.fontSmoothing ? "antialiased" : "unset",
      "--mantine-moz-font-smoothing": theme.fontSmoothing ? "grayscale" : "unset",
      "--mantine-color-white": theme.white,
      "--mantine-color-black": theme.black,
      "--mantine-line-height": theme.lineHeights.md,
      "--mantine-font-family": theme.fontFamily,
      "--mantine-font-family-monospace": theme.fontFamilyMonospace,
      "--mantine-font-family-headings": theme.headings.fontFamily,
      "--mantine-heading-font-weight": theme.headings.fontWeight,
      "--mantine-heading-text-wrap": theme.headings.textWrap,
      "--mantine-radius-default": defaultRadius,
      "--mantine-primary-color-filled": `var(--mantine-color-${theme.primaryColor}-filled)`,
      "--mantine-primary-color-filled-hover": `var(--mantine-color-${theme.primaryColor}-filled-hover)`,
      "--mantine-primary-color-light": `var(--mantine-color-${theme.primaryColor}-light)`,
      "--mantine-primary-color-light-hover": `var(--mantine-color-${theme.primaryColor}-light-hover)`,
      "--mantine-primary-color-light-color": `var(--mantine-color-${theme.primaryColor}-light-color)`
    },
    light: {
      "--mantine-primary-color-contrast": getPrimaryContrastColor(theme, "light"),
      "--mantine-color-bright": "var(--mantine-color-black)",
      "--mantine-color-text": theme.black,
      "--mantine-color-body": theme.white,
      "--mantine-color-error": "var(--mantine-color-red-6)",
      "--mantine-color-placeholder": "var(--mantine-color-gray-5)",
      "--mantine-color-anchor": `var(--mantine-color-${theme.primaryColor}-${lightPrimaryShade})`,
      "--mantine-color-default": "var(--mantine-color-white)",
      "--mantine-color-default-hover": "var(--mantine-color-gray-0)",
      "--mantine-color-default-color": "var(--mantine-color-black)",
      "--mantine-color-default-border": "var(--mantine-color-gray-4)",
      "--mantine-color-dimmed": "var(--mantine-color-gray-6)"
    },
    dark: {
      "--mantine-primary-color-contrast": getPrimaryContrastColor(theme, "dark"),
      "--mantine-color-bright": "var(--mantine-color-white)",
      "--mantine-color-text": "var(--mantine-color-dark-0)",
      "--mantine-color-body": "var(--mantine-color-dark-7)",
      "--mantine-color-error": "var(--mantine-color-red-8)",
      "--mantine-color-placeholder": "var(--mantine-color-dark-3)",
      "--mantine-color-anchor": `var(--mantine-color-${theme.primaryColor}-4)`,
      "--mantine-color-default": "var(--mantine-color-dark-6)",
      "--mantine-color-default-hover": "var(--mantine-color-dark-5)",
      "--mantine-color-default-color": "var(--mantine-color-white)",
      "--mantine-color-default-border": "var(--mantine-color-dark-4)",
      "--mantine-color-dimmed": "var(--mantine-color-dark-2)"
    }
  };
  assignSizeVariables(result.variables, theme.breakpoints, "breakpoint");
  assignSizeVariables(result.variables, theme.spacing, "spacing");
  assignSizeVariables(result.variables, theme.fontSizes, "font-size");
  assignSizeVariables(result.variables, theme.lineHeights, "line-height");
  assignSizeVariables(result.variables, theme.shadows, "shadow");
  assignSizeVariables(result.variables, theme.radius, "radius");
  theme.colors[theme.primaryColor].forEach((_2, index2) => {
    result.variables[`--mantine-primary-color-${index2}`] = `var(--mantine-color-${theme.primaryColor}-${index2})`;
  });
  keys(theme.colors).forEach((color) => {
    const value = theme.colors[color];
    if (isVirtualColor(value)) {
      Object.assign(result.light, getCSSColorVariables({
        theme,
        name: value.name,
        color: value.light,
        colorScheme: "light",
        withColorValues: true
      }));
      Object.assign(result.dark, getCSSColorVariables({
        theme,
        name: value.name,
        color: value.dark,
        colorScheme: "dark",
        withColorValues: true
      }));
      return;
    }
    value.forEach((shade, index2) => {
      result.variables[`--mantine-color-${color}-${index2}`] = shade;
    });
    Object.assign(result.light, getCSSColorVariables({
      theme,
      color,
      colorScheme: "light",
      withColorValues: false
    }));
    Object.assign(result.dark, getCSSColorVariables({
      theme,
      color,
      colorScheme: "dark",
      withColorValues: false
    }));
  });
  const headings = theme.headings.sizes;
  keys(headings).forEach((heading) => {
    result.variables[`--mantine-${heading}-font-size`] = headings[heading].fontSize;
    result.variables[`--mantine-${heading}-line-height`] = headings[heading].lineHeight;
    result.variables[`--mantine-${heading}-font-weight`] = headings[heading].fontWeight || theme.headings.fontWeight;
  });
  return result;
};

// node_modules/@mantine/core/esm/core/MantineProvider/MantineCssVariables/get-merged-variables.mjs
"use client";
function getMergedVariables({ theme, generator }) {
  const defaultResolver = defaultCssVariablesResolver(theme);
  const providerGenerator = generator?.(theme);
  return providerGenerator ? deepMerge(defaultResolver, providerGenerator) : defaultResolver;
}

// node_modules/@mantine/core/esm/core/MantineProvider/MantineCssVariables/remove-default-variables.mjs
var import_react35 = __toESM(require_react(), 1);
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
"use client";
var defaultCssVariables = defaultCssVariablesResolver(DEFAULT_THEME);
function removeDefaultVariables(input) {
  const cleaned = {
    variables: {},
    light: {},
    dark: {}
  };
  keys(input.variables).forEach((key) => {
    if (defaultCssVariables.variables[key] !== input.variables[key]) {
      cleaned.variables[key] = input.variables[key];
    }
  });
  keys(input.light).forEach((key) => {
    if (defaultCssVariables.light[key] !== input.light[key]) {
      cleaned.light[key] = input.light[key];
    }
  });
  keys(input.dark).forEach((key) => {
    if (defaultCssVariables.dark[key] !== input.dark[key]) {
      cleaned.dark[key] = input.dark[key];
    }
  });
  return cleaned;
}

// node_modules/@mantine/core/esm/core/MantineProvider/MantineCssVariables/MantineCssVariables.mjs
"use client";
function getColorSchemeCssVariables(selector) {
  return `
  ${selector}[data-mantine-color-scheme="dark"] { --mantine-color-scheme: dark; }
  ${selector}[data-mantine-color-scheme="light"] { --mantine-color-scheme: light; }
`;
}
function MantineCssVariables({
  cssVariablesSelector,
  deduplicateCssVariables
}) {
  const theme = useMantineTheme();
  const nonce = useMantineStyleNonce();
  const generator = useMantineCssVariablesResolver();
  const mergedVariables = getMergedVariables({ theme, generator });
  const shouldCleanVariables = cssVariablesSelector === ":root" && deduplicateCssVariables;
  const cleanedVariables = shouldCleanVariables ? removeDefaultVariables(mergedVariables) : mergedVariables;
  const css = convertCssVariables(cleanedVariables, cssVariablesSelector);
  if (css) {
    return /* @__PURE__ */ import_jsx_runtime13.jsx("style", {
      "data-mantine-styles": true,
      nonce: nonce?.(),
      dangerouslySetInnerHTML: {
        __html: `${css}${shouldCleanVariables ? "" : getColorSchemeCssVariables(cssVariablesSelector)}`
      }
    });
  }
  return null;
}
MantineCssVariables.displayName = "@mantine/CssVariables";

// node_modules/@mantine/core/esm/core/MantineProvider/MantineProvider.mjs
var import_react37 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/core/MantineProvider/suppress-nextjs-warning.mjs
"use client";
function suppressNextjsWarning() {
  const originalError = console.error;
  console.error = (...args) => {
    if (args.length > 1 && typeof args[0] === "string" && args[0].toLowerCase().includes("extra attributes from the server") && typeof args[1] === "string" && args[1].toLowerCase().includes("data-mantine-color-scheme"))
      ;
    else {
      originalError(...args);
    }
  };
}

// node_modules/@mantine/core/esm/core/MantineProvider/use-mantine-color-scheme/use-provider-color-scheme.mjs
var import_react36 = __toESM(require_react(), 1);
"use client";
function setColorSchemeAttribute(colorScheme, getRootElement) {
  const hasDarkColorScheme = typeof window !== "undefined" && "matchMedia" in window && window.matchMedia("(prefers-color-scheme: dark)")?.matches;
  const computedColorScheme = colorScheme !== "auto" ? colorScheme : hasDarkColorScheme ? "dark" : "light";
  getRootElement()?.setAttribute("data-mantine-color-scheme", computedColorScheme);
}
function useProviderColorScheme({
  manager,
  defaultColorScheme,
  getRootElement,
  forceColorScheme
}) {
  const media = import_react36.useRef(null);
  const [value, setValue] = import_react36.useState(() => manager.get(defaultColorScheme));
  const colorSchemeValue = forceColorScheme || value;
  const setColorScheme = import_react36.useCallback((colorScheme) => {
    if (!forceColorScheme) {
      setColorSchemeAttribute(colorScheme, getRootElement);
      setValue(colorScheme);
      manager.set(colorScheme);
    }
  }, [manager.set, colorSchemeValue, forceColorScheme]);
  const clearColorScheme = import_react36.useCallback(() => {
    setValue(defaultColorScheme);
    setColorSchemeAttribute(defaultColorScheme, getRootElement);
    manager.clear();
  }, [manager.clear, defaultColorScheme]);
  import_react36.useEffect(() => {
    manager.subscribe(setColorScheme);
    return manager.unsubscribe;
  }, [manager.subscribe, manager.unsubscribe]);
  useIsomorphicEffect(() => {
    setColorSchemeAttribute(manager.get(defaultColorScheme), getRootElement);
  }, []);
  import_react36.useEffect(() => {
    if (forceColorScheme) {
      setColorSchemeAttribute(forceColorScheme, getRootElement);
      return () => {
      };
    }
    if (forceColorScheme === undefined) {
      setColorSchemeAttribute(value, getRootElement);
    }
    if (typeof window !== "undefined" && "matchMedia" in window) {
      media.current = window.matchMedia("(prefers-color-scheme: dark)");
    }
    const listener = (event) => {
      if (value === "auto") {
        setColorSchemeAttribute(event.matches ? "dark" : "light", getRootElement);
      }
    };
    media.current?.addEventListener("change", listener);
    return () => media.current?.removeEventListener("change", listener);
  }, [value, forceColorScheme]);
  return { colorScheme: colorSchemeValue, setColorScheme, clearColorScheme };
}

// node_modules/@mantine/core/esm/core/MantineProvider/use-respect-reduce-motion/use-respect-reduce-motion.mjs
"use client";
function useRespectReduceMotion({
  respectReducedMotion,
  getRootElement
}) {
  useIsomorphicEffect(() => {
    if (respectReducedMotion) {
      getRootElement()?.setAttribute("data-respect-reduced-motion", "true");
    }
  }, [respectReducedMotion]);
}

// node_modules/@mantine/core/esm/core/MantineProvider/MantineProvider.mjs
"use client";
suppressNextjsWarning();
function MantineProvider({
  theme,
  children,
  getStyleNonce,
  withStaticClasses = true,
  withGlobalClasses = true,
  deduplicateCssVariables = true,
  withCssVariables = true,
  cssVariablesSelector = ":root",
  classNamesPrefix = "mantine",
  colorSchemeManager = localStorageColorSchemeManager(),
  defaultColorScheme = "light",
  getRootElement = () => document.documentElement,
  cssVariablesResolver,
  forceColorScheme,
  stylesTransform,
  env: env2
}) {
  const { colorScheme, setColorScheme, clearColorScheme } = useProviderColorScheme({
    defaultColorScheme,
    forceColorScheme,
    manager: colorSchemeManager,
    getRootElement
  });
  useRespectReduceMotion({
    respectReducedMotion: theme?.respectReducedMotion || false,
    getRootElement
  });
  return /* @__PURE__ */ import_jsx_runtime14.jsx(MantineContext.Provider, {
    value: {
      colorScheme,
      setColorScheme,
      clearColorScheme,
      getRootElement,
      classNamesPrefix,
      getStyleNonce,
      cssVariablesResolver,
      cssVariablesSelector,
      withStaticClasses,
      stylesTransform,
      env: env2
    },
    children: /* @__PURE__ */ import_jsx_runtime14.jsxs(MantineThemeProvider, { theme, children: [
      withCssVariables && /* @__PURE__ */ import_jsx_runtime14.jsx(MantineCssVariables, {
        cssVariablesSelector,
        deduplicateCssVariables
      }),
      withGlobalClasses && /* @__PURE__ */ import_jsx_runtime14.jsx(MantineClasses, {}),
      children
    ] })
  });
}
MantineProvider.displayName = "@mantine/core/MantineProvider";
function HeadlessMantineProvider({ children, theme }) {
  return /* @__PURE__ */ import_jsx_runtime14.jsx(MantineContext.Provider, {
    value: {
      colorScheme: "auto",
      setColorScheme: () => {
      },
      clearColorScheme: () => {
      },
      getRootElement: () => document.documentElement,
      classNamesPrefix: "mantine",
      cssVariablesSelector: ":root",
      withStaticClasses: false,
      headless: true
    },
    children: /* @__PURE__ */ import_jsx_runtime14.jsx(MantineThemeProvider, { theme, children })
  });
}
HeadlessMantineProvider.displayName = "@mantine/core/HeadlessMantineProvider";

// node_modules/@mantine/core/esm/core/styles-api/use-resolved-styles-api/use-resolved-styles-api.mjs
"use client";
function useResolvedStylesApi({
  classNames,
  styles,
  props,
  stylesCtx
}) {
  const theme = useMantineTheme();
  return {
    resolvedClassNames: resolveClassNames({
      theme,
      classNames,
      props,
      stylesCtx: stylesCtx || undefined
    }),
    resolvedStyles: resolveStyles({
      theme,
      styles,
      props,
      stylesCtx: stylesCtx || undefined
    })
  };
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-class-name/get-global-class-names/get-global-class-names.mjs
"use client";
var FOCUS_CLASS_NAMES = {
  always: "mantine-focus-always",
  auto: "mantine-focus-auto",
  never: "mantine-focus-never"
};
function getGlobalClassNames({ theme, options, unstyled }) {
  return clsx_default(options?.focusable && !unstyled && (theme.focusClassName || FOCUS_CLASS_NAMES[theme.focusRing]), options?.active && !unstyled && theme.activeClassName);
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/use-styles.mjs
var import_react41 = __toESM(require_react(), 1);
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-class-name/get-options-class-names/get-options-class-names.mjs
"use client";
function getOptionsClassNames({
  selector,
  stylesCtx,
  options,
  props,
  theme
}) {
  return resolveClassNames({
    theme,
    classNames: options?.classNames,
    props: options?.props || props,
    stylesCtx
  })[selector];
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-class-name/get-resolved-class-names/get-resolved-class-names.mjs
"use client";
function getResolvedClassNames({
  selector,
  stylesCtx,
  theme,
  classNames,
  props
}) {
  return resolveClassNames({ theme, classNames, props, stylesCtx })[selector];
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-class-name/get-root-class-name/get-root-class-name.mjs
"use client";
function getRootClassName({ rootSelector, selector, className }) {
  return rootSelector === selector ? className : undefined;
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-class-name/get-selector-class-name/get-selector-class-name.mjs
"use client";
function getSelectorClassName({ selector, classes, unstyled }) {
  return unstyled ? undefined : classes[selector];
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-class-name/get-static-class-names/get-static-class-names.mjs
"use client";
function getStaticClassNames({
  themeName,
  classNamesPrefix,
  selector,
  withStaticClass
}) {
  if (withStaticClass === false) {
    return [];
  }
  return themeName.map((n) => `${classNamesPrefix}-${n}-${selector}`);
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-class-name/get-theme-class-names/get-theme-class-names.mjs
"use client";
function getThemeClassNames({
  themeName,
  theme,
  selector,
  props,
  stylesCtx
}) {
  return themeName.map((n) => resolveClassNames({
    theme,
    classNames: theme.components[n]?.classNames,
    props,
    stylesCtx
  })?.[selector]);
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-class-name/get-variant-class-name/get-variant-class-name.mjs
"use client";
function getVariantClassName({
  options,
  classes,
  selector,
  unstyled
}) {
  return options?.variant && !unstyled ? classes[`${selector}--${options.variant}`] : undefined;
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-class-name/get-class-name.mjs
"use client";
function getClassName({
  theme,
  options,
  themeName,
  selector,
  classNamesPrefix,
  classNames,
  classes,
  unstyled,
  className,
  rootSelector,
  props,
  stylesCtx,
  withStaticClasses,
  headless,
  transformedStyles
}) {
  return clsx_default(getGlobalClassNames({ theme, options, unstyled: unstyled || headless }), getThemeClassNames({ theme, themeName, selector, props, stylesCtx }), getVariantClassName({ options, classes, selector, unstyled }), getResolvedClassNames({ selector, stylesCtx, theme, classNames, props }), getResolvedClassNames({ selector, stylesCtx, theme, classNames: transformedStyles, props }), getOptionsClassNames({ selector, stylesCtx, options, props, theme }), getRootClassName({ rootSelector, selector, className }), getSelectorClassName({ selector, classes, unstyled: unstyled || headless }), withStaticClasses && !headless && getStaticClassNames({
    themeName,
    classNamesPrefix,
    selector,
    withStaticClass: options?.withStaticClass
  }), options?.className);
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-style/get-theme-styles/get-theme-styles.mjs
"use client";
function getThemeStyles({
  theme,
  themeName,
  props,
  stylesCtx,
  selector
}) {
  return themeName.map((n) => resolveStyles({
    theme,
    styles: theme.components[n]?.styles,
    props,
    stylesCtx
  })[selector]).reduce((acc, val) => ({ ...acc, ...val }), {});
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-style/resolve-style/resolve-style.mjs
"use client";
function resolveStyle({ style: style2, theme }) {
  if (Array.isArray(style2)) {
    return [...style2].reduce((acc, item) => ({ ...acc, ...resolveStyle({ style: item, theme }) }), {});
  }
  if (typeof style2 === "function") {
    return style2(theme);
  }
  if (style2 == null) {
    return {};
  }
  return style2;
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-style/resolve-vars/merge-vars.mjs
var import_react39 = __toESM(require_react(), 1);
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
"use client";
function mergeVars(vars) {
  return vars.reduce((acc, current2) => {
    if (current2) {
      Object.keys(current2).forEach((key) => {
        acc[key] = { ...acc[key], ...filterProps(current2[key]) };
      });
    }
    return acc;
  }, {});
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-style/resolve-vars/resolve-vars.mjs
"use client";
function resolveVars({
  vars,
  varsResolver,
  theme,
  props,
  stylesCtx,
  selector,
  themeName,
  headless
}) {
  return mergeVars([
    headless ? {} : varsResolver?.(theme, props, stylesCtx),
    ...themeName.map((name) => theme.components?.[name]?.vars?.(theme, props, stylesCtx)),
    vars?.(theme, props, stylesCtx)
  ])?.[selector];
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/get-style/get-style.mjs
"use client";
function getStyle({
  theme,
  themeName,
  selector,
  options,
  props,
  stylesCtx,
  rootSelector,
  styles,
  style: style2,
  vars,
  varsResolver,
  headless,
  withStylesTransform
}) {
  return {
    ...!withStylesTransform && getThemeStyles({ theme, themeName, props, stylesCtx, selector }),
    ...!withStylesTransform && resolveStyles({ theme, styles, props, stylesCtx })[selector],
    ...!withStylesTransform && resolveStyles({ theme, styles: options?.styles, props: options?.props || props, stylesCtx })[selector],
    ...resolveVars({ theme, props, stylesCtx, vars, varsResolver, selector, themeName, headless }),
    ...rootSelector === selector ? resolveStyle({ style: style2, theme }) : null,
    ...resolveStyle({ style: options?.style, theme })
  };
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/use-transformed-styles.mjs
var import_react40 = __toESM(require_react(), 1);
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
"use client";
function useStylesTransform({ props, stylesCtx, themeName }) {
  const theme = useMantineTheme();
  const stylesTransform = useMantineStylesTransform()?.();
  const getTransformedStyles = (styles) => {
    if (!stylesTransform) {
      return [];
    }
    const transformedStyles = styles.map((style2) => stylesTransform(style2, { props, theme, ctx: stylesCtx }));
    return [
      ...transformedStyles,
      ...themeName.map((n) => stylesTransform(theme.components[n]?.styles, { props, theme, ctx: stylesCtx }))
    ].filter(Boolean);
  };
  return {
    getTransformedStyles,
    withStylesTransform: !!stylesTransform
  };
}

// node_modules/@mantine/core/esm/core/styles-api/use-styles/use-styles.mjs
"use client";
function useStyles({
  name,
  classes,
  props,
  stylesCtx,
  className,
  style: style2,
  rootSelector = "root",
  unstyled,
  classNames,
  styles,
  vars,
  varsResolver
}) {
  const theme = useMantineTheme();
  const classNamesPrefix = useMantineClassNamesPrefix();
  const withStaticClasses = useMantineWithStaticClasses();
  const headless = useMantineIsHeadless();
  const themeName = (Array.isArray(name) ? name : [name]).filter((n) => n);
  const { withStylesTransform, getTransformedStyles } = useStylesTransform({
    props,
    stylesCtx,
    themeName
  });
  return (selector, options) => ({
    className: getClassName({
      theme,
      options,
      themeName,
      selector,
      classNamesPrefix,
      classNames,
      classes,
      unstyled,
      className,
      rootSelector,
      props,
      stylesCtx,
      withStaticClasses,
      headless,
      transformedStyles: getTransformedStyles([options?.styles, styles])
    }),
    style: getStyle({
      theme,
      themeName,
      selector,
      options,
      props,
      stylesCtx,
      rootSelector,
      styles,
      style: style2,
      vars,
      varsResolver,
      headless,
      withStylesTransform
    })
  });
}

// node_modules/@mantine/core/esm/core/MantineProvider/color-functions/get-auto-contrast-value/get-auto-contrast-value.mjs
"use client";
function getAutoContrastValue(autoContrast, theme) {
  return typeof autoContrast === "boolean" ? autoContrast : theme.autoContrast;
}
// node_modules/@mantine/core/esm/core/MantineProvider/use-props/use-props.mjs
var import_react42 = __toESM(require_react(), 1);
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
"use client";
function useProps(component, defaultProps, props) {
  const theme = useMantineTheme();
  const contextPropsPayload = theme.components[component]?.defaultProps;
  const contextProps = typeof contextPropsPayload === "function" ? contextPropsPayload(theme) : contextPropsPayload;
  return { ...defaultProps, ...contextProps, ...filterProps(props) };
}

// node_modules/@mantine/core/esm/core/MantineProvider/create-theme/create-theme.mjs
function createTheme(theme) {
  return theme;
}
// node_modules/@mantine/core/esm/core/InlineStyles/InlineStyles.mjs
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
var import_react44 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/core/InlineStyles/css-object-to-string/css-object-to-string.mjs
var import_react43 = __toESM(require_react(), 1);
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
"use client";
function cssObjectToString(css) {
  return keys(css).reduce((acc, rule) => css[rule] !== undefined ? `${acc}${camelToKebabCase(rule)}:${css[rule]};` : acc, "").trim();
}

// node_modules/@mantine/core/esm/core/InlineStyles/styles-to-string/styles-to-string.mjs
"use client";
function stylesToString({ selector, styles, media, container }) {
  const baseStyles = styles ? cssObjectToString(styles) : "";
  const mediaQueryStyles = !Array.isArray(media) ? [] : media.map((item) => `@media${item.query}{${selector}{${cssObjectToString(item.styles)}}}`);
  const containerStyles = !Array.isArray(container) ? [] : container.map((item) => `@container ${item.query}{${selector}{${cssObjectToString(item.styles)}}}`);
  return `${baseStyles ? `${selector}{${baseStyles}}` : ""}${mediaQueryStyles.join("")}${containerStyles.join("")}`.trim();
}

// node_modules/@mantine/core/esm/core/InlineStyles/InlineStyles.mjs
"use client";
function InlineStyles(props) {
  const nonce = useMantineStyleNonce();
  return /* @__PURE__ */ import_jsx_runtime21.jsx("style", {
    "data-mantine-styles": "inline",
    nonce: nonce?.(),
    dangerouslySetInnerHTML: { __html: stylesToString(props) }
  });
}

// node_modules/@mantine/core/esm/core/Box/style-props/extract-style-props/extract-style-props.mjs
var import_react45 = __toESM(require_react(), 1);
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
"use client";
function extractStyleProps(others) {
  const {
    m: m2,
    mx,
    my,
    mt,
    mb,
    ml,
    mr,
    me: me2,
    ms,
    p: p2,
    px: px2,
    py,
    pt: pt2,
    pb,
    pl,
    pr,
    pe,
    ps,
    bd,
    bg,
    c: c2,
    opacity,
    ff,
    fz,
    fw,
    lts,
    ta,
    lh,
    fs,
    tt: tt2,
    td,
    w: w2,
    miw,
    maw,
    h,
    mih,
    mah,
    bgsz,
    bgp,
    bgr,
    bga,
    pos,
    top,
    left,
    bottom,
    right,
    inset,
    display,
    flex,
    hiddenFrom,
    visibleFrom,
    lightHidden,
    darkHidden,
    sx,
    ...rest
  } = others;
  const styleProps = filterProps({
    m: m2,
    mx,
    my,
    mt,
    mb,
    ml,
    mr,
    me: me2,
    ms,
    p: p2,
    px: px2,
    py,
    pt: pt2,
    pb,
    pl,
    pr,
    pe,
    ps,
    bd,
    bg,
    c: c2,
    opacity,
    ff,
    fz,
    fw,
    lts,
    ta,
    lh,
    fs,
    tt: tt2,
    td,
    w: w2,
    miw,
    maw,
    h,
    mih,
    mah,
    bgsz,
    bgp,
    bgr,
    bga,
    pos,
    top,
    left,
    bottom,
    right,
    inset,
    display,
    flex,
    hiddenFrom,
    visibleFrom,
    lightHidden,
    darkHidden,
    sx
  });
  return { styleProps, rest };
}

// node_modules/@mantine/core/esm/core/Box/style-props/style-props-data.mjs
"use client";
var STYlE_PROPS_DATA = {
  m: { type: "spacing", property: "margin" },
  mt: { type: "spacing", property: "marginTop" },
  mb: { type: "spacing", property: "marginBottom" },
  ml: { type: "spacing", property: "marginLeft" },
  mr: { type: "spacing", property: "marginRight" },
  ms: { type: "spacing", property: "marginInlineStart" },
  me: { type: "spacing", property: "marginInlineEnd" },
  mx: { type: "spacing", property: "marginInline" },
  my: { type: "spacing", property: "marginBlock" },
  p: { type: "spacing", property: "padding" },
  pt: { type: "spacing", property: "paddingTop" },
  pb: { type: "spacing", property: "paddingBottom" },
  pl: { type: "spacing", property: "paddingLeft" },
  pr: { type: "spacing", property: "paddingRight" },
  ps: { type: "spacing", property: "paddingInlineStart" },
  pe: { type: "spacing", property: "paddingInlineEnd" },
  px: { type: "spacing", property: "paddingInline" },
  py: { type: "spacing", property: "paddingBlock" },
  bd: { type: "border", property: "border" },
  bg: { type: "color", property: "background" },
  c: { type: "textColor", property: "color" },
  opacity: { type: "identity", property: "opacity" },
  ff: { type: "fontFamily", property: "fontFamily" },
  fz: { type: "fontSize", property: "fontSize" },
  fw: { type: "identity", property: "fontWeight" },
  lts: { type: "size", property: "letterSpacing" },
  ta: { type: "identity", property: "textAlign" },
  lh: { type: "lineHeight", property: "lineHeight" },
  fs: { type: "identity", property: "fontStyle" },
  tt: { type: "identity", property: "textTransform" },
  td: { type: "identity", property: "textDecoration" },
  w: { type: "spacing", property: "width" },
  miw: { type: "spacing", property: "minWidth" },
  maw: { type: "spacing", property: "maxWidth" },
  h: { type: "spacing", property: "height" },
  mih: { type: "spacing", property: "minHeight" },
  mah: { type: "spacing", property: "maxHeight" },
  bgsz: { type: "size", property: "backgroundSize" },
  bgp: { type: "identity", property: "backgroundPosition" },
  bgr: { type: "identity", property: "backgroundRepeat" },
  bga: { type: "identity", property: "backgroundAttachment" },
  pos: { type: "identity", property: "position" },
  top: { type: "size", property: "top" },
  left: { type: "size", property: "left" },
  bottom: { type: "size", property: "bottom" },
  right: { type: "size", property: "right" },
  inset: { type: "size", property: "inset" },
  display: { type: "identity", property: "display" },
  flex: { type: "identity", property: "flex" }
};

// node_modules/@mantine/core/esm/core/Box/style-props/parse-style-props/parse-style-props.mjs
var import_react51 = __toESM(require_react(), 1);
var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mantine/core/esm/core/Box/style-props/resolvers/border-resolver/border-resolver.mjs
var import_react47 = __toESM(require_react(), 1);
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mantine/core/esm/core/Box/style-props/resolvers/color-resolver/color-resolver.mjs
var import_react46 = __toESM(require_react(), 1);
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
"use client";
function colorResolver(color, theme) {
  const parsedColor = parseThemeColor({ color, theme });
  if (parsedColor.color === "dimmed") {
    return "var(--mantine-color-dimmed)";
  }
  if (parsedColor.color === "bright") {
    return "var(--mantine-color-bright)";
  }
  return parsedColor.variable ? `var(${parsedColor.variable})` : parsedColor.color;
}
function textColorResolver(color, theme) {
  const parsedColor = parseThemeColor({ color, theme });
  if (parsedColor.isThemeColor && parsedColor.shade === undefined) {
    return `var(--mantine-color-${parsedColor.color}-text)`;
  }
  return colorResolver(color, theme);
}

// node_modules/@mantine/core/esm/core/Box/style-props/resolvers/border-resolver/border-resolver.mjs
"use client";
function borderResolver(value, theme) {
  if (typeof value === "number") {
    return rem(value);
  }
  if (typeof value === "string") {
    const [size, style2, ...colorTuple] = value.split(" ").filter((val) => val.trim() !== "");
    let result = `${rem(size)}`;
    style2 && (result += ` ${style2}`);
    colorTuple.length > 0 && (result += ` ${colorResolver(colorTuple.join(" "), theme)}`);
    return result.trim();
  }
  return value;
}

// node_modules/@mantine/core/esm/core/Box/style-props/resolvers/font-family-resolver/font-family-resolver.mjs
"use client";
var values = {
  text: "var(--mantine-font-family)",
  mono: "var(--mantine-font-family-monospace)",
  monospace: "var(--mantine-font-family-monospace)",
  heading: "var(--mantine-font-family-headings)",
  headings: "var(--mantine-font-family-headings)"
};
function fontFamilyResolver(fontFamily) {
  if (typeof fontFamily === "string" && fontFamily in values) {
    return values[fontFamily];
  }
  return fontFamily;
}

// node_modules/@mantine/core/esm/core/Box/style-props/resolvers/font-size-resolver/font-size-resolver.mjs
var import_react48 = __toESM(require_react(), 1);
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
"use client";
var headings = ["h1", "h2", "h3", "h4", "h5", "h6"];
function fontSizeResolver(value, theme) {
  if (typeof value === "string" && value in theme.fontSizes) {
    return `var(--mantine-font-size-${value})`;
  }
  if (typeof value === "string" && headings.includes(value)) {
    return `var(--mantine-${value}-font-size)`;
  }
  if (typeof value === "number") {
    return rem(value);
  }
  if (typeof value === "string") {
    return rem(value);
  }
  return value;
}

// node_modules/@mantine/core/esm/core/Box/style-props/resolvers/identity-resolver/identity-resolver.mjs
"use client";
function identityResolver(value) {
  return value;
}

// node_modules/@mantine/core/esm/core/Box/style-props/resolvers/line-height-resolver/line-height-resolver.mjs
"use client";
var headings2 = ["h1", "h2", "h3", "h4", "h5", "h6"];
function lineHeightResolver(value, theme) {
  if (typeof value === "string" && value in theme.lineHeights) {
    return `var(--mantine-line-height-${value})`;
  }
  if (typeof value === "string" && headings2.includes(value)) {
    return `var(--mantine-${value}-line-height)`;
  }
  return value;
}

// node_modules/@mantine/core/esm/core/Box/style-props/resolvers/size-resolver/size-resolver.mjs
var import_react49 = __toESM(require_react(), 1);
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
"use client";
function sizeResolver(value) {
  if (typeof value === "number") {
    return rem(value);
  }
  return value;
}

// node_modules/@mantine/core/esm/core/Box/style-props/resolvers/spacing-resolver/spacing-resolver.mjs
var import_react50 = __toESM(require_react(), 1);
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
"use client";
function spacingResolver(value, theme) {
  if (typeof value === "number") {
    return rem(value);
  }
  if (typeof value === "string") {
    const mod = value.replace("-", "");
    if (!(mod in theme.spacing)) {
      return rem(value);
    }
    const variable = `--mantine-spacing-${mod}`;
    return value.startsWith("-") ? `calc(var(${variable}) * -1)` : `var(${variable})`;
  }
  return value;
}

// node_modules/@mantine/core/esm/core/Box/style-props/resolvers/index.mjs
"use client";
var resolvers = {
  color: colorResolver,
  textColor: textColorResolver,
  fontSize: fontSizeResolver,
  spacing: spacingResolver,
  identity: identityResolver,
  size: sizeResolver,
  lineHeight: lineHeightResolver,
  fontFamily: fontFamilyResolver,
  border: borderResolver
};

// node_modules/@mantine/core/esm/core/Box/style-props/parse-style-props/sort-media-queries.mjs
"use client";
function replaceMediaQuery(query) {
  return query.replace("(min-width: ", "").replace("em)", "");
}
function sortMediaQueries({
  media,
  ...props
}) {
  const breakpoints = Object.keys(media);
  const sortedMedia = breakpoints.sort((a2, b) => Number(replaceMediaQuery(a2)) - Number(replaceMediaQuery(b))).map((query) => ({ query, styles: media[query] }));
  return { ...props, media: sortedMedia };
}

// node_modules/@mantine/core/esm/core/Box/style-props/parse-style-props/parse-style-props.mjs
"use client";
function hasResponsiveStyles(styleProp) {
  if (typeof styleProp !== "object" || styleProp === null) {
    return false;
  }
  const breakpoints = Object.keys(styleProp);
  if (breakpoints.length === 1 && breakpoints[0] === "base") {
    return false;
  }
  return true;
}
function getBaseValue2(value) {
  if (typeof value === "object" && value !== null) {
    if ("base" in value) {
      return value.base;
    }
    return;
  }
  return value;
}
function getBreakpointKeys(value) {
  if (typeof value === "object" && value !== null) {
    return keys(value).filter((key) => key !== "base");
  }
  return [];
}
function getBreakpointValue2(value, breakpoint) {
  if (typeof value === "object" && value !== null && breakpoint in value) {
    return value[breakpoint];
  }
  return value;
}
function parseStyleProps({
  styleProps,
  data,
  theme
}) {
  return sortMediaQueries(keys(styleProps).reduce((acc, styleProp) => {
    if (styleProp === "hiddenFrom" || styleProp === "visibleFrom" || styleProp === "sx") {
      return acc;
    }
    const propertyData = data[styleProp];
    const properties = Array.isArray(propertyData.property) ? propertyData.property : [propertyData.property];
    const baseValue = getBaseValue2(styleProps[styleProp]);
    if (!hasResponsiveStyles(styleProps[styleProp])) {
      properties.forEach((property) => {
        acc.inlineStyles[property] = resolvers[propertyData.type](baseValue, theme);
      });
      return acc;
    }
    acc.hasResponsiveStyles = true;
    const breakpoints = getBreakpointKeys(styleProps[styleProp]);
    properties.forEach((property) => {
      if (baseValue) {
        acc.styles[property] = resolvers[propertyData.type](baseValue, theme);
      }
      breakpoints.forEach((breakpoint) => {
        const bp = `(min-width: ${theme.breakpoints[breakpoint]})`;
        acc.media[bp] = {
          ...acc.media[bp],
          [property]: resolvers[propertyData.type](getBreakpointValue2(styleProps[styleProp], breakpoint), theme)
        };
      });
    });
    return acc;
  }, {
    hasResponsiveStyles: false,
    styles: {},
    inlineStyles: {},
    media: {}
  }));
}

// node_modules/@mantine/core/esm/core/Box/use-random-classname/use-random-classname.mjs
var import_react52 = __toESM(require_react(), 1);
"use client";
function useRandomClassName() {
  const id = import_react52.useId().replace(/:/g, "");
  return `__m__-${id}`;
}

// node_modules/@mantine/core/esm/core/Box/get-style-object/get-style-object.mjs
"use client";
function getStyleObject(style2, theme) {
  if (Array.isArray(style2)) {
    return [...style2].reduce((acc, item) => ({ ...acc, ...getStyleObject(item, theme) }), {});
  }
  if (typeof style2 === "function") {
    return style2(theme);
  }
  if (style2 == null) {
    return {};
  }
  return style2;
}

// node_modules/@mantine/core/esm/core/Box/Box.mjs
var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
var import_react53 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/core/factory/create-polymorphic-component.mjs
function createPolymorphicComponent(component) {
  return component;
}

// node_modules/@mantine/core/esm/core/Box/get-box-mod/get-box-mod.mjs
"use client";
function transformModKey(key) {
  return key.startsWith("data-") ? key : `data-${key}`;
}
function getMod(props) {
  return Object.keys(props).reduce((acc, key) => {
    const value = props[key];
    if (value === undefined || value === "" || value === false || value === null) {
      return acc;
    }
    acc[transformModKey(key)] = props[key];
    return acc;
  }, {});
}
function getBoxMod(mod) {
  if (!mod) {
    return null;
  }
  if (typeof mod === "string") {
    return { [transformModKey(mod)]: true };
  }
  if (Array.isArray(mod)) {
    return [...mod].reduce((acc, value) => ({ ...acc, ...getBoxMod(value) }), {});
  }
  return getMod(mod);
}

// node_modules/@mantine/core/esm/core/Box/get-box-style/get-box-style.mjs
"use client";
function mergeStyles(styles, theme) {
  if (Array.isArray(styles)) {
    return [...styles].reduce((acc, item) => ({ ...acc, ...mergeStyles(item, theme) }), {});
  }
  if (typeof styles === "function") {
    return styles(theme);
  }
  if (styles == null) {
    return {};
  }
  return styles;
}
function getBoxStyle({
  theme,
  style: style2,
  vars,
  styleProps
}) {
  const _style = mergeStyles(style2, theme);
  const _vars = mergeStyles(vars, theme);
  return { ..._style, ..._vars, ...styleProps };
}

// node_modules/@mantine/core/esm/core/Box/Box.mjs
"use client";
var _Box = import_react53.forwardRef(({
  component,
  style: style2,
  __vars,
  className,
  variant,
  mod,
  size,
  hiddenFrom,
  visibleFrom,
  lightHidden,
  darkHidden,
  renderRoot,
  __size,
  ...others
}, ref) => {
  const theme = useMantineTheme();
  const Element2 = component || "div";
  const { styleProps, rest } = extractStyleProps(others);
  const useSxTransform = useMantineSxTransform();
  const transformedSx = useSxTransform?.()?.(styleProps.sx);
  const responsiveClassName = useRandomClassName();
  const parsedStyleProps = parseStyleProps({
    styleProps,
    theme,
    data: STYlE_PROPS_DATA
  });
  const props = {
    ref,
    style: getBoxStyle({
      theme,
      style: style2,
      vars: __vars,
      styleProps: parsedStyleProps.inlineStyles
    }),
    className: clsx_default(className, transformedSx, {
      [responsiveClassName]: parsedStyleProps.hasResponsiveStyles,
      "mantine-light-hidden": lightHidden,
      "mantine-dark-hidden": darkHidden,
      [`mantine-hidden-from-${hiddenFrom}`]: hiddenFrom,
      [`mantine-visible-from-${visibleFrom}`]: visibleFrom
    }),
    "data-variant": variant,
    "data-size": isNumberLike(size) ? undefined : size || undefined,
    size: __size,
    ...getBoxMod(mod),
    ...rest
  };
  return /* @__PURE__ */ import_jsx_runtime29.jsxs(import_jsx_runtime29.Fragment, { children: [
    parsedStyleProps.hasResponsiveStyles && /* @__PURE__ */ import_jsx_runtime29.jsx(InlineStyles, {
      selector: `.${responsiveClassName}`,
      styles: parsedStyleProps.styles,
      media: parsedStyleProps.media
    }),
    typeof renderRoot === "function" ? renderRoot(props) : /* @__PURE__ */ import_jsx_runtime29.jsx(Element2, { ...props })
  ] });
});
_Box.displayName = "@mantine/core/Box";
var Box = createPolymorphicComponent(_Box);
// node_modules/@mantine/core/esm/core/factory/factory.mjs
var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
var import_react54 = __toESM(require_react(), 1);
"use client";
function identity2(value) {
  return value;
}
function getWithProps(Component2) {
  const _Component = Component2;
  return (fixedProps) => {
    const Extended = import_react54.forwardRef((props, ref) => /* @__PURE__ */ import_jsx_runtime30.jsx(_Component, { ...fixedProps, ...props, ref }));
    Extended.extend = _Component.extend;
    Extended.displayName = `WithProps(${_Component.displayName})`;
    return Extended;
  };
}
function factory(ui) {
  const Component2 = import_react54.forwardRef(ui);
  Component2.extend = identity2;
  Component2.withProps = (fixedProps) => {
    const Extended = import_react54.forwardRef((props, ref) => /* @__PURE__ */ import_jsx_runtime30.jsx(Component2, { ...fixedProps, ...props, ref }));
    Extended.extend = Component2.extend;
    Extended.displayName = `WithProps(${Component2.displayName})`;
    return Extended;
  };
  return Component2;
}

// node_modules/@mantine/core/esm/core/factory/polymorphic-factory.mjs
var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
var import_react55 = __toESM(require_react(), 1);
"use client";
function polymorphicFactory(ui) {
  const Component2 = import_react55.forwardRef(ui);
  Component2.withProps = (fixedProps) => {
    const Extended = import_react55.forwardRef((props, ref) => /* @__PURE__ */ import_jsx_runtime31.jsx(Component2, { ...fixedProps, ...props, ref }));
    Extended.extend = Component2.extend;
    Extended.displayName = `WithProps(${Component2.displayName})`;
    return Extended;
  };
  Component2.extend = identity2;
  return Component2;
}

// node_modules/@mantine/core/esm/core/DirectionProvider/DirectionProvider.mjs
var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
var import_react56 = __toESM(require_react(), 1);
"use client";
var DirectionContext = import_react56.createContext({
  dir: "ltr",
  toggleDirection: () => {
  },
  setDirection: () => {
  }
});
function useDirection() {
  return import_react56.useContext(DirectionContext);
}

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollArea.mjs
var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
var import_react73 = __toESM(require_react(), 1);

// node_modules/@floating-ui/react/dist/floating-ui.react.mjs
var React16 = __toESM(require_react(), 1);
var import_react58 = __toESM(require_react(), 1);

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function hasWindow() {
  return typeof window !== "undefined";
}
function getNodeName(node2) {
  if (isNode2(node2)) {
    return (node2.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node2) {
  var _node$ownerDocument;
  return (node2 == null || (_node$ownerDocument = node2.ownerDocument) == null ? undefined : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node2) {
  var _ref;
  return (_ref = (isNode2(node2) ? node2.ownerDocument : node2.document) || window.document) == null ? undefined : _ref.documentElement;
}
function isNode2(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement2(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isTopLayer(element) {
  return [":popover-open", ":modal"].some((selector) => {
    try {
      return element.matches(selector);
    } catch (e) {
      return false;
    }
  });
}
function isContainingBlock(elementOrCss) {
  const webkit = isWebKit();
  const css = isElement2(elementOrCss) ? getComputedStyle2(elementOrCss) : elementOrCss;
  return ["transform", "translate", "scale", "rotate", "perspective"].some((value) => css[value] ? css[value] !== "none" : false) || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "translate", "scale", "rotate", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else if (isTopLayer(currentNode)) {
      return null;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node2) {
  return ["html", "body", "#document"].includes(getNodeName(node2));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement2(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY
  };
}
function getParentNode(node2) {
  if (getNodeName(node2) === "html") {
    return node2;
  }
  const result = node2.assignedSlot || node2.parentNode || isShadowRoot(node2) && node2.host || getDocumentElement(node2);
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node2) {
  const parentNode = getParentNode(node2);
  if (isLastTraversableNode(parentNode)) {
    return node2.ownerDocument ? node2.ownerDocument.body : node2.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node2, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === undefined) {
    list = [];
  }
  if (traverseIframes === undefined) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node2);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node2.ownerDocument) == null ? undefined : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
}

// node_modules/@floating-ui/react/dist/floating-ui.react.utils.mjs
function activeElement2(doc) {
  let activeElement3 = doc.activeElement;
  while (((_activeElement = activeElement3) == null || (_activeElement = _activeElement.shadowRoot) == null ? undefined : _activeElement.activeElement) != null) {
    var _activeElement;
    activeElement3 = activeElement3.shadowRoot.activeElement;
  }
  return activeElement3;
}
function contains(parent, child) {
  if (!parent || !child) {
    return false;
  }
  const rootNode = child.getRootNode == null ? undefined : child.getRootNode();
  if (parent.contains(child)) {
    return true;
  }
  if (rootNode && isShadowRoot(rootNode)) {
    let next2 = child;
    while (next2) {
      if (parent === next2) {
        return true;
      }
      next2 = next2.parentNode || next2.host;
    }
  }
  return false;
}
function getPlatform() {
  const uaData = navigator.userAgentData;
  if (uaData != null && uaData.platform) {
    return uaData.platform;
  }
  return navigator.platform;
}
function getUserAgent() {
  const uaData = navigator.userAgentData;
  if (uaData && Array.isArray(uaData.brands)) {
    return uaData.brands.map((_ref) => {
      let {
        brand,
        version: version2
      } = _ref;
      return brand + "/" + version2;
    }).join(" ");
  }
  return navigator.userAgent;
}
function isVirtualPointerEvent(event) {
  if (isJSDOM())
    return false;
  return !isAndroid() && event.width === 0 && event.height === 0 || isAndroid() && event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "mouse" || event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0 && event.pointerType === "touch";
}
function isSafari() {
  return /apple/i.test(navigator.vendor);
}
function isAndroid() {
  const re2 = /android/i;
  return re2.test(getPlatform()) || re2.test(getUserAgent());
}
function isMac() {
  return getPlatform().toLowerCase().startsWith("mac") && !navigator.maxTouchPoints;
}
function isJSDOM() {
  return getUserAgent().includes("jsdom/");
}
function isMouseLikePointerType(pointerType, strict) {
  const values2 = ["mouse", "pen"];
  if (!strict) {
    values2.push("", undefined);
  }
  return values2.includes(pointerType);
}
function isReactEvent(event) {
  return "nativeEvent" in event;
}
function isRootElement(element) {
  return element.matches("html,body");
}
function getDocument(node2) {
  return (node2 == null ? undefined : node2.ownerDocument) || document;
}
function isEventTargetWithin(event, node2) {
  if (node2 == null) {
    return false;
  }
  if ("composedPath" in event) {
    return event.composedPath().includes(node2);
  }
  const e = event;
  return e.target != null && node2.contains(e.target);
}
function getTarget(event) {
  if ("composedPath" in event) {
    return event.composedPath()[0];
  }
  return event.target;
}
var TYPEABLE_SELECTOR = "input:not([type='hidden']):not([disabled])," + "[contenteditable]:not([contenteditable='false']),textarea:not([disabled])";
function isTypeableElement(element) {
  return isHTMLElement(element) && element.matches(TYPEABLE_SELECTOR);
}

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var min = Math.min;
var max = Math.max;
var round = Math.round;
var floor = Math.floor;
var createCoords = (v2) => ({
  x: v2,
  y: v2
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp2(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === undefined) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length2 = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length2] > rects.floating[length2]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x: x2,
    y: y2,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y2,
    left: x2,
    right: x2 + width,
    bottom: y2 + height,
    x: x2,
    y: y2
  };
}

// node_modules/@floating-ui/react/dist/floating-ui.react.mjs
var ReactDOM3 = __toESM(require_react_dom(), 1);

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware: middleware2 = [],
    platform
  } = config;
  const validMiddleware = middleware2.filter(Boolean);
  const rtl = await (platform.isRTL == null ? undefined : platform.isRTL(floating));
  let rects = await platform.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x: x2,
    y: y2
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i2 = 0;i2 < validMiddleware.length; i2++) {
    const {
      name,
      fn
    } = validMiddleware[i2];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x: x2,
      y: y2,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform,
      elements: {
        reference,
        floating
      }
    });
    x2 = nextX != null ? nextX : x2;
    y2 = nextY != null ? nextY : y2;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x: x2,
          y: y2
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i2 = -1;
    }
  }
  return {
    x: x2,
    y: y2,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === undefined) {
    options = {};
  }
  const {
    x: x2,
    y: y2,
    platform,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform.getClippingRect({
    element: ((_await$platform$isEle = await (platform.isElement == null ? undefined : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform.getDocumentElement == null ? undefined : platform.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x: x2,
    y: y2,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform.getOffsetParent == null ? undefined : platform.getOffsetParent(elements.floating));
  const offsetScale = await (platform.isElement == null ? undefined : platform.isElement(offsetParent)) ? await (platform.getScale == null ? undefined : platform.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var arrow = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x: x2,
      y: y2,
      placement,
      rects,
      platform,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x: x2,
      y: y2
    };
    const axis = getAlignmentAxis(placement);
    const length2 = getAxisLength(axis);
    const arrowDimensions = await platform.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length2] + rects.reference[axis] - coords[axis] - rects.floating[length2];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform.getOffsetParent == null ? undefined : platform.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform.isElement == null ? undefined : platform.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length2];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length2] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length2] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length2] / 2 + centerToReference;
    const offset = clamp2(min$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length2] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length2] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset,
        centerOffset: center - offset - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
var flip = function(options) {
  if (options === undefined) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const initialSideAxis = getSideAxis(initialPlacement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform.isRTL == null ? undefined : platform.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? undefined : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? undefined : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a2, b) => a2.overflows[1] - b.overflows[1])[0]) == null ? undefined : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$filter2;
              const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                if (hasFallbackAxisSideDirection) {
                  const currentSideAxis = getSideAxis(d.placement);
                  return currentSideAxis === initialSideAxis || currentSideAxis === "y";
                }
                return true;
              }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a2, b) => a2[1] - b[1])[0]) == null ? undefined : _overflowsData$filter2[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
function getBoundingRect(rects) {
  const minX = min(...rects.map((rect) => rect.left));
  const minY = min(...rects.map((rect) => rect.top));
  const maxX = max(...rects.map((rect) => rect.right));
  const maxY = max(...rects.map((rect) => rect.bottom));
  return {
    x: minX,
    y: minY,
    width: maxX - minX,
    height: maxY - minY
  };
}
function getRectsByLine(rects) {
  const sortedRects = rects.slice().sort((a2, b) => a2.y - b.y);
  const groups = [];
  let prevRect = null;
  for (let i2 = 0;i2 < sortedRects.length; i2++) {
    const rect = sortedRects[i2];
    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {
      groups.push([rect]);
    } else {
      groups[groups.length - 1].push(rect);
    }
    prevRect = rect;
  }
  return groups.map((rect) => rectToClientRect(getBoundingRect(rect)));
}
var inline = function(options) {
  if (options === undefined) {
    options = {};
  }
  return {
    name: "inline",
    options,
    async fn(state) {
      const {
        placement,
        elements,
        rects,
        platform,
        strategy
      } = state;
      const {
        padding = 2,
        x: x2,
        y: y2
      } = evaluate(options, state);
      const nativeClientRects = Array.from(await (platform.getClientRects == null ? undefined : platform.getClientRects(elements.reference)) || []);
      const clientRects = getRectsByLine(nativeClientRects);
      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));
      const paddingObject = getPaddingObject(padding);
      function getBoundingClientRect() {
        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x2 != null && y2 != null) {
          return clientRects.find((rect) => x2 > rect.left - paddingObject.left && x2 < rect.right + paddingObject.right && y2 > rect.top - paddingObject.top && y2 < rect.bottom + paddingObject.bottom) || fallback;
        }
        if (clientRects.length >= 2) {
          if (getSideAxis(placement) === "y") {
            const firstRect = clientRects[0];
            const lastRect = clientRects[clientRects.length - 1];
            const isTop = getSide(placement) === "top";
            const top2 = firstRect.top;
            const bottom2 = lastRect.bottom;
            const left2 = isTop ? firstRect.left : lastRect.left;
            const right2 = isTop ? firstRect.right : lastRect.right;
            const width2 = right2 - left2;
            const height2 = bottom2 - top2;
            return {
              top: top2,
              bottom: bottom2,
              left: left2,
              right: right2,
              width: width2,
              height: height2,
              x: left2,
              y: top2
            };
          }
          const isLeftSide = getSide(placement) === "left";
          const maxRight = max(...clientRects.map((rect) => rect.right));
          const minLeft = min(...clientRects.map((rect) => rect.left));
          const measureRects = clientRects.filter((rect) => isLeftSide ? rect.left === minLeft : rect.right === maxRight);
          const top = measureRects[0].top;
          const bottom = measureRects[measureRects.length - 1].bottom;
          const left = minLeft;
          const right = maxRight;
          const width = right - left;
          const height = bottom - top;
          return {
            top,
            bottom,
            left,
            right,
            width,
            height,
            x: left,
            y: top
          };
        }
        return fallback;
      }
      const resetRects = await platform.getElementRects({
        reference: {
          getBoundingClientRect
        },
        floating: elements.floating,
        strategy
      });
      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {
        return {
          reset: {
            rects: resetRects
          }
        };
      }
      return {};
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform,
    elements
  } = state;
  const rtl = await (platform.isRTL == null ? undefined : platform.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: rawValue.mainAxis || 0,
    crossAxis: rawValue.crossAxis || 0,
    alignmentAxis: rawValue.alignmentAxis
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(options) {
  if (options === undefined) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x: x2,
        y: y2,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? undefined : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x2 + diffCoords.x,
        y: y2 + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
var shift = function(options) {
  if (options === undefined) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x: x2,
        y: y2,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x3,
              y: y3
            } = _ref;
            return {
              x: x3,
              y: y3
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x: x2,
        y: y2
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp2(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp2(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x2,
          y: limitedCoords.y - y2,
          enabled: {
            [mainAxis]: checkMainAxis,
            [crossAxis]: checkCrossAxis
          }
        }
      };
    }
  };
};
var limitShift = function(options) {
  if (options === undefined) {
    options = {};
  }
  return {
    options,
    fn(state) {
      const {
        x: x2,
        y: y2,
        placement,
        rects,
        middlewareData
      } = state;
      const {
        offset: offset2 = 0,
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true
      } = evaluate(options, state);
      const coords = {
        x: x2,
        y: y2
      };
      const crossAxis = getSideAxis(placement);
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      const rawOffset = evaluate(offset2, state);
      const computedOffset = typeof rawOffset === "number" ? {
        mainAxis: rawOffset,
        crossAxis: 0
      } : {
        mainAxis: 0,
        crossAxis: 0,
        ...rawOffset
      };
      if (checkMainAxis) {
        const len = mainAxis === "y" ? "height" : "width";
        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
        if (mainAxisCoord < limitMin) {
          mainAxisCoord = limitMin;
        } else if (mainAxisCoord > limitMax) {
          mainAxisCoord = limitMax;
        }
      }
      if (checkCrossAxis) {
        var _middlewareData$offse, _middlewareData$offse2;
        const len = mainAxis === "y" ? "width" : "height";
        const isOriginSide = ["top", "left"].includes(getSide(placement));
        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? undefined : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? undefined : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
        if (crossAxisCoord < limitMin) {
          crossAxisCoord = limitMin;
        } else if (crossAxisCoord > limitMax) {
          crossAxisCoord = limitMax;
        }
      }
      return {
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      };
    }
  };
};
var size = function(options) {
  if (options === undefined) {
    options = {};
  }
  return {
    name: "size",
    options,
    async fn(state) {
      var _state$middlewareData, _state$middlewareData2;
      const {
        placement,
        rects,
        platform,
        elements
      } = state;
      const {
        apply = () => {
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const side = getSide(placement);
      const alignment = getAlignment(placement);
      const isYAxis = getSideAxis(placement) === "y";
      const {
        width,
        height
      } = rects.floating;
      let heightSide;
      let widthSide;
      if (side === "top" || side === "bottom") {
        heightSide = side;
        widthSide = alignment === (await (platform.isRTL == null ? undefined : platform.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
      } else {
        widthSide = side;
        heightSide = alignment === "end" ? "top" : "bottom";
      }
      const maximumClippingHeight = height - overflow.top - overflow.bottom;
      const maximumClippingWidth = width - overflow.left - overflow.right;
      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
      const noShift = !state.middlewareData.shift;
      let availableHeight = overflowAvailableHeight;
      let availableWidth = overflowAvailableWidth;
      if ((_state$middlewareData = state.middlewareData.shift) != null && _state$middlewareData.enabled.x) {
        availableWidth = maximumClippingWidth;
      }
      if ((_state$middlewareData2 = state.middlewareData.shift) != null && _state$middlewareData2.enabled.y) {
        availableHeight = maximumClippingHeight;
      }
      if (noShift && !alignment) {
        const xMin = max(overflow.left, 0);
        const xMax = max(overflow.right, 0);
        const yMin = max(overflow.top, 0);
        const yMax = max(overflow.bottom, 0);
        if (isYAxis) {
          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
        } else {
          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
        }
      }
      await apply({
        ...state,
        availableWidth,
        availableHeight
      });
      const nextDimensions = await platform.getDimensions(elements.floating);
      if (width !== nextDimensions.width || height !== nextDimensions.height) {
        return {
          reset: {
            rects: true
          }
        };
      }
      return {};
    }
  };
};

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement2(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $: $2
  } = getCssDimensions(domElement);
  let x2 = ($2 ? round(rect.width) : rect.width) / width;
  let y2 = ($2 ? round(rect.height) : rect.height) / height;
  if (!x2 || !Number.isFinite(x2)) {
    x2 = 1;
  }
  if (!y2 || !Number.isFinite(y2)) {
    y2 = 1;
  }
  return {
    x: x2,
    y: y2
  };
}
var noOffsets = /* @__PURE__ */ createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === undefined) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === undefined) {
    includeScale = false;
  }
  if (isFixedStrategy === undefined) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement2(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x2 = (clientRect.left + visualOffsets.x) / scale.x;
  let y2 = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement2(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x2 *= iframeScale.x;
      y2 *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x2 += left;
      y2 += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x: x2,
    y: y2
  });
}
function getWindowScrollBarX(element, rect) {
  const leftScroll = getNodeScroll(element).scrollLeft;
  if (!rect) {
    return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
  }
  return rect.left + leftScroll;
}
function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
  if (ignoreScrollbarX === undefined) {
    ignoreScrollbarX = false;
  }
  const htmlRect = documentElement.getBoundingClientRect();
  const x2 = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : getWindowScrollBarX(documentElement, htmlRect));
  const y2 = htmlRect.top + scroll.scrollTop;
  return {
    x: x2,
    y: y2
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x2 = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y2 = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x2 += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x2 = 0;
  let y2 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x2 = visualViewport.offsetLeft;
      y2 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x2 = left * scale.x;
  const y2 = top * scale.y;
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement2(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y,
      width: clippingAncestor.width,
      height: clippingAncestor.height
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement2(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache2) {
  const cachedResult = cache2.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement2(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement2(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache2.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
  const x2 = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
  const y2 = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
  return {
    x: x2,
    y: y2,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle2(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  let rawOffsetParent = element.offsetParent;
  if (getDocumentElement(element) === rawOffsetParent) {
    rawOffsetParent = rawOffsetParent.ownerDocument.body;
  }
  return rawOffsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement2(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
var getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement: isElement2,
  isRTL
};
function rectsAreEqual(a2, b) {
  return a2.x === b.x && a2.y === b.y && a2.width === b.width && a2.height === b.height;
}
function observeMove(element, onMove) {
  let io = null;
  let timeoutId;
  const root2 = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === undefined) {
      skip = false;
    }
    if (threshold === undefined) {
      threshold = 1;
    }
    cleanup();
    const elementRectForRootMargin = element.getBoundingClientRect();
    const {
      left,
      top,
      width,
      height
    } = elementRectForRootMargin;
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root2.clientWidth - (left + width));
    const insetBottom = floor(root2.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 0.0000001);
          }, 1000);
        } else {
          refresh(false, ratio);
        }
      }
      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
        refresh();
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        root: root2.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === undefined) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var offset2 = offset;
var shift2 = shift;
var flip2 = flip;
var size2 = size;
var arrow2 = arrow;
var inline2 = inline;
var limitShift2 = limitShift;
var computePosition2 = (reference, floating, options) => {
  const cache2 = new Map;
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache2
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
var React15 = __toESM(require_react(), 1);
var import_react57 = __toESM(require_react(), 1);
var ReactDOM2 = __toESM(require_react_dom(), 1);
var index2 = typeof document !== "undefined" ? import_react57.useLayoutEffect : import_react57.useEffect;
function deepEqual(a2, b) {
  if (a2 === b) {
    return true;
  }
  if (typeof a2 !== typeof b) {
    return false;
  }
  if (typeof a2 === "function" && a2.toString() === b.toString()) {
    return true;
  }
  let length2;
  let i2;
  let keys2;
  if (a2 && b && typeof a2 === "object") {
    if (Array.isArray(a2)) {
      length2 = a2.length;
      if (length2 !== b.length)
        return false;
      for (i2 = length2;i2-- !== 0; ) {
        if (!deepEqual(a2[i2], b[i2])) {
          return false;
        }
      }
      return true;
    }
    keys2 = Object.keys(a2);
    length2 = keys2.length;
    if (length2 !== Object.keys(b).length) {
      return false;
    }
    for (i2 = length2;i2-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b, keys2[i2])) {
        return false;
      }
    }
    for (i2 = length2;i2-- !== 0; ) {
      const key = keys2[i2];
      if (key === "_owner" && a2.$$typeof) {
        continue;
      }
      if (!deepEqual(a2[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  return a2 !== a2 && b !== b;
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef(value) {
  const ref = React15.useRef(value);
  index2(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating(options) {
  if (options === undefined) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware: middleware2 = [],
    platform: platform2,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React15.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React15.useState(middleware2);
  if (!deepEqual(latestMiddleware, middleware2)) {
    setLatestMiddleware(middleware2);
  }
  const [_reference, _setReference] = React15.useState(null);
  const [_floating, _setFloating] = React15.useState(null);
  const setReference = React15.useCallback((node2) => {
    if (node2 !== referenceRef.current) {
      referenceRef.current = node2;
      _setReference(node2);
    }
  }, []);
  const setFloating = React15.useCallback((node2) => {
    if (node2 !== floatingRef.current) {
      floatingRef.current = node2;
      _setFloating(node2);
    }
  }, []);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React15.useRef(null);
  const floatingRef = React15.useRef(null);
  const dataRef = React15.useRef(data);
  const hasWhileElementsMounted = whileElementsMounted != null;
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform2);
  const openRef = useLatestRef(open);
  const update = React15.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        isPositioned: openRef.current !== false
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM2.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef, openRef]);
  index2(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React15.useRef(false);
  index2(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index2(() => {
    if (referenceEl)
      referenceRef.current = referenceEl;
    if (floatingEl)
      floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      }
      update();
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
  const refs = React15.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React15.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React15.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x2 = roundByDPR(elements.floating, data.x);
    const y2 = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x2 + "px, " + y2 + "px)",
        ...getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x2,
      top: y2
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return React15.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}
var arrow$1 = (options) => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(state) {
      const {
        element,
        padding
      } = typeof options === "function" ? options(state) : options;
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow2({
            element: element.current,
            padding
          }).fn(state);
        }
        return {};
      }
      if (element) {
        return arrow2({
          element,
          padding
        }).fn(state);
      }
      return {};
    }
  };
};
var offset3 = (options, deps) => ({
  ...offset2(options),
  options: [options, deps]
});
var shift3 = (options, deps) => ({
  ...shift2(options),
  options: [options, deps]
});
var limitShift3 = (options, deps) => ({
  ...limitShift2(options),
  options: [options, deps]
});
var flip3 = (options, deps) => ({
  ...flip2(options),
  options: [options, deps]
});
var size3 = (options, deps) => ({
  ...size2(options),
  options: [options, deps]
});
var inline3 = (options, deps) => ({
  ...inline2(options),
  options: [options, deps]
});
var arrow3 = (options, deps) => ({
  ...arrow$1(options),
  options: [options, deps]
});

// node_modules/@floating-ui/react/dist/floating-ui.react.mjs
function useMergeRefs2(refs) {
  return React16.useMemo(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (value) => {
      refs.forEach((ref) => {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref != null) {
          ref.current = value;
        }
      });
    };
  }, refs);
}
var SafeReact = {
  ...React16
};
var useInsertionEffect = SafeReact.useInsertionEffect;
var useSafeInsertionEffect = useInsertionEffect || ((fn) => fn());
function useEffectEvent(callback) {
  const ref = React16.useRef(() => {
    if (false) {
    }
  });
  useSafeInsertionEffect(() => {
    ref.current = callback;
  });
  return React16.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0;_key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return ref.current == null ? undefined : ref.current(...args);
  }, []);
}
var ARROW_UP = "ArrowUp";
var ARROW_DOWN = "ArrowDown";
var ARROW_LEFT = "ArrowLeft";
var ARROW_RIGHT = "ArrowRight";
var index3 = typeof document !== "undefined" ? import_react58.useLayoutEffect : import_react58.useEffect;
var horizontalKeys = [ARROW_LEFT, ARROW_RIGHT];
var verticalKeys = [ARROW_UP, ARROW_DOWN];
var allKeys = [...horizontalKeys, ...verticalKeys];
var serverHandoffComplete = false;
var count = 0;
var genId = () => "floating-ui-" + Math.random().toString(36).slice(2, 6) + count++;
function useFloatingId() {
  const [id, setId] = React16.useState(() => serverHandoffComplete ? genId() : undefined);
  index3(() => {
    if (id == null) {
      setId(genId());
    }
  }, []);
  React16.useEffect(() => {
    serverHandoffComplete = true;
  }, []);
  return id;
}
var useReactId2 = SafeReact.useId;
var useId3 = useReactId2 || useFloatingId;
if (false) {
}
function createPubSub() {
  const map = new Map;
  return {
    emit(event, data) {
      var _map$get;
      (_map$get = map.get(event)) == null || _map$get.forEach((handler) => handler(data));
    },
    on(event, listener) {
      map.set(event, [...map.get(event) || [], listener]);
    },
    off(event, listener) {
      var _map$get2;
      map.set(event, ((_map$get2 = map.get(event)) == null ? undefined : _map$get2.filter((l2) => l2 !== listener)) || []);
    }
  };
}
var FloatingNodeContext = /* @__PURE__ */ React16.createContext(null);
var FloatingTreeContext = /* @__PURE__ */ React16.createContext(null);
var useFloatingParentNodeId = () => {
  var _React$useContext;
  return ((_React$useContext = React16.useContext(FloatingNodeContext)) == null ? undefined : _React$useContext.id) || null;
};
var useFloatingTree = () => React16.useContext(FloatingTreeContext);
function createAttribute(name) {
  return "data-floating-ui-" + name;
}
function useLatestRef2(value) {
  const ref = import_react58.useRef(value);
  index3(() => {
    ref.current = value;
  });
  return ref;
}
var safePolygonIdentifier = /* @__PURE__ */ createAttribute("safe-polygon");
function getDelay(value, prop, pointerType) {
  if (pointerType && !isMouseLikePointerType(pointerType)) {
    return 0;
  }
  if (typeof value === "number") {
    return value;
  }
  return value == null ? undefined : value[prop];
}
function useHover(context, props) {
  if (props === undefined) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    dataRef,
    events,
    elements
  } = context;
  const {
    enabled = true,
    delay = 0,
    handleClose = null,
    mouseOnly = false,
    restMs = 0,
    move = true
  } = props;
  const tree = useFloatingTree();
  const parentId = useFloatingParentNodeId();
  const handleCloseRef = useLatestRef2(handleClose);
  const delayRef = useLatestRef2(delay);
  const openRef = useLatestRef2(open);
  const pointerTypeRef = React16.useRef();
  const timeoutRef = React16.useRef(-1);
  const handlerRef = React16.useRef();
  const restTimeoutRef = React16.useRef(-1);
  const blockMouseMoveRef = React16.useRef(true);
  const performedPointerEventsMutationRef = React16.useRef(false);
  const unbindMouseMoveRef = React16.useRef(() => {
  });
  const restTimeoutPendingRef = React16.useRef(false);
  const isHoverOpen = React16.useCallback(() => {
    var _dataRef$current$open;
    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? undefined : _dataRef$current$open.type;
    return (type == null ? undefined : type.includes("mouse")) && type !== "mousedown";
  }, [dataRef]);
  React16.useEffect(() => {
    if (!enabled)
      return;
    function onOpenChange2(_ref) {
      let {
        open: open2
      } = _ref;
      if (!open2) {
        clearTimeout(timeoutRef.current);
        clearTimeout(restTimeoutRef.current);
        blockMouseMoveRef.current = true;
        restTimeoutPendingRef.current = false;
      }
    }
    events.on("openchange", onOpenChange2);
    return () => {
      events.off("openchange", onOpenChange2);
    };
  }, [enabled, events]);
  React16.useEffect(() => {
    if (!enabled)
      return;
    if (!handleCloseRef.current)
      return;
    if (!open)
      return;
    function onLeave(event) {
      if (isHoverOpen()) {
        onOpenChange(false, event, "hover");
      }
    }
    const html = getDocument(elements.floating).documentElement;
    html.addEventListener("mouseleave", onLeave);
    return () => {
      html.removeEventListener("mouseleave", onLeave);
    };
  }, [elements.floating, open, onOpenChange, enabled, handleCloseRef, isHoverOpen]);
  const closeWithDelay = React16.useCallback(function(event, runElseBranch, reason) {
    if (runElseBranch === undefined) {
      runElseBranch = true;
    }
    if (reason === undefined) {
      reason = "hover";
    }
    const closeDelay = getDelay(delayRef.current, "close", pointerTypeRef.current);
    if (closeDelay && !handlerRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = window.setTimeout(() => onOpenChange(false, event, reason), closeDelay);
    } else if (runElseBranch) {
      clearTimeout(timeoutRef.current);
      onOpenChange(false, event, reason);
    }
  }, [delayRef, onOpenChange]);
  const cleanupMouseMoveHandler = useEffectEvent(() => {
    unbindMouseMoveRef.current();
    handlerRef.current = undefined;
  });
  const clearPointerEvents = useEffectEvent(() => {
    if (performedPointerEventsMutationRef.current) {
      const body = getDocument(elements.floating).body;
      body.style.pointerEvents = "";
      body.removeAttribute(safePolygonIdentifier);
      performedPointerEventsMutationRef.current = false;
    }
  });
  const isClickLikeOpenEvent = useEffectEvent(() => {
    return dataRef.current.openEvent ? ["click", "mousedown"].includes(dataRef.current.openEvent.type) : false;
  });
  React16.useEffect(() => {
    if (!enabled)
      return;
    function onMouseEnter(event) {
      clearTimeout(timeoutRef.current);
      blockMouseMoveRef.current = false;
      if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && !getDelay(delayRef.current, "open")) {
        return;
      }
      const openDelay = getDelay(delayRef.current, "open", pointerTypeRef.current);
      if (openDelay) {
        timeoutRef.current = window.setTimeout(() => {
          if (!openRef.current) {
            onOpenChange(true, event, "hover");
          }
        }, openDelay);
      } else if (!open) {
        onOpenChange(true, event, "hover");
      }
    }
    function onMouseLeave(event) {
      if (isClickLikeOpenEvent())
        return;
      unbindMouseMoveRef.current();
      const doc = getDocument(elements.floating);
      clearTimeout(restTimeoutRef.current);
      restTimeoutPendingRef.current = false;
      if (handleCloseRef.current && dataRef.current.floatingContext) {
        if (!open) {
          clearTimeout(timeoutRef.current);
        }
        handlerRef.current = handleCloseRef.current({
          ...dataRef.current.floatingContext,
          tree,
          x: event.clientX,
          y: event.clientY,
          onClose() {
            clearPointerEvents();
            cleanupMouseMoveHandler();
            if (!isClickLikeOpenEvent()) {
              closeWithDelay(event, true, "safe-polygon");
            }
          }
        });
        const handler = handlerRef.current;
        doc.addEventListener("mousemove", handler);
        unbindMouseMoveRef.current = () => {
          doc.removeEventListener("mousemove", handler);
        };
        return;
      }
      const shouldClose = pointerTypeRef.current === "touch" ? !contains(elements.floating, event.relatedTarget) : true;
      if (shouldClose) {
        closeWithDelay(event);
      }
    }
    function onScrollMouseLeave(event) {
      if (isClickLikeOpenEvent())
        return;
      if (!dataRef.current.floatingContext)
        return;
      handleCloseRef.current == null || handleCloseRef.current({
        ...dataRef.current.floatingContext,
        tree,
        x: event.clientX,
        y: event.clientY,
        onClose() {
          clearPointerEvents();
          cleanupMouseMoveHandler();
          if (!isClickLikeOpenEvent()) {
            closeWithDelay(event);
          }
        }
      })(event);
    }
    if (isElement2(elements.domReference)) {
      var _elements$floating;
      const ref = elements.domReference;
      open && ref.addEventListener("mouseleave", onScrollMouseLeave);
      (_elements$floating = elements.floating) == null || _elements$floating.addEventListener("mouseleave", onScrollMouseLeave);
      move && ref.addEventListener("mousemove", onMouseEnter, {
        once: true
      });
      ref.addEventListener("mouseenter", onMouseEnter);
      ref.addEventListener("mouseleave", onMouseLeave);
      return () => {
        var _elements$floating2;
        open && ref.removeEventListener("mouseleave", onScrollMouseLeave);
        (_elements$floating2 = elements.floating) == null || _elements$floating2.removeEventListener("mouseleave", onScrollMouseLeave);
        move && ref.removeEventListener("mousemove", onMouseEnter);
        ref.removeEventListener("mouseenter", onMouseEnter);
        ref.removeEventListener("mouseleave", onMouseLeave);
      };
    }
  }, [elements, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, openRef, tree, delayRef, handleCloseRef, dataRef, isClickLikeOpenEvent]);
  index3(() => {
    var _handleCloseRef$curre;
    if (!enabled)
      return;
    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {
      performedPointerEventsMutationRef.current = true;
      const floatingEl = elements.floating;
      if (isElement2(elements.domReference) && floatingEl) {
        var _tree$nodesRef$curren;
        const body = getDocument(elements.floating).body;
        body.setAttribute(safePolygonIdentifier, "");
        const ref = elements.domReference;
        const parentFloating = tree == null || (_tree$nodesRef$curren = tree.nodesRef.current.find((node2) => node2.id === parentId)) == null || (_tree$nodesRef$curren = _tree$nodesRef$curren.context) == null ? undefined : _tree$nodesRef$curren.elements.floating;
        if (parentFloating) {
          parentFloating.style.pointerEvents = "";
        }
        body.style.pointerEvents = "none";
        ref.style.pointerEvents = "auto";
        floatingEl.style.pointerEvents = "auto";
        return () => {
          body.style.pointerEvents = "";
          ref.style.pointerEvents = "";
          floatingEl.style.pointerEvents = "";
        };
      }
    }
  }, [enabled, open, parentId, elements, tree, handleCloseRef, isHoverOpen]);
  index3(() => {
    if (!open) {
      pointerTypeRef.current = undefined;
      restTimeoutPendingRef.current = false;
      cleanupMouseMoveHandler();
      clearPointerEvents();
    }
  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);
  React16.useEffect(() => {
    return () => {
      cleanupMouseMoveHandler();
      clearTimeout(timeoutRef.current);
      clearTimeout(restTimeoutRef.current);
      clearPointerEvents();
    };
  }, [enabled, elements.domReference, cleanupMouseMoveHandler, clearPointerEvents]);
  const reference = React16.useMemo(() => {
    function setPointerRef(event) {
      pointerTypeRef.current = event.pointerType;
    }
    return {
      onPointerDown: setPointerRef,
      onPointerEnter: setPointerRef,
      onMouseMove(event) {
        const {
          nativeEvent
        } = event;
        function handleMouseMove() {
          if (!blockMouseMoveRef.current && !openRef.current) {
            onOpenChange(true, nativeEvent, "hover");
          }
        }
        if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current)) {
          return;
        }
        if (open || restMs === 0) {
          return;
        }
        if (restTimeoutPendingRef.current && event.movementX ** 2 + event.movementY ** 2 < 2) {
          return;
        }
        clearTimeout(restTimeoutRef.current);
        if (pointerTypeRef.current === "touch") {
          handleMouseMove();
        } else {
          restTimeoutPendingRef.current = true;
          restTimeoutRef.current = window.setTimeout(handleMouseMove, restMs);
        }
      }
    };
  }, [mouseOnly, onOpenChange, open, openRef, restMs]);
  const floating = React16.useMemo(() => ({
    onMouseEnter() {
      clearTimeout(timeoutRef.current);
    },
    onMouseLeave(event) {
      if (!isClickLikeOpenEvent()) {
        closeWithDelay(event.nativeEvent, false);
      }
    }
  }), [closeWithDelay, isClickLikeOpenEvent]);
  return React16.useMemo(() => enabled ? {
    reference,
    floating
  } : {}, [enabled, reference, floating]);
}
var NOOP = () => {
};
var FloatingDelayGroupContext = /* @__PURE__ */ React16.createContext({
  delay: 0,
  initialDelay: 0,
  timeoutMs: 0,
  currentId: null,
  setCurrentId: NOOP,
  setState: NOOP,
  isInstantPhase: false
});
var useDelayGroupContext = () => React16.useContext(FloatingDelayGroupContext);
function FloatingDelayGroup(props) {
  const {
    children,
    delay,
    timeoutMs = 0
  } = props;
  const [state, setState] = React16.useReducer((prev2, next2) => ({
    ...prev2,
    ...next2
  }), {
    delay,
    timeoutMs,
    initialDelay: delay,
    currentId: null,
    isInstantPhase: false
  });
  const initialCurrentIdRef = React16.useRef(null);
  const setCurrentId = React16.useCallback((currentId) => {
    setState({
      currentId
    });
  }, []);
  index3(() => {
    if (state.currentId) {
      if (initialCurrentIdRef.current === null) {
        initialCurrentIdRef.current = state.currentId;
      } else if (!state.isInstantPhase) {
        setState({
          isInstantPhase: true
        });
      }
    } else {
      if (state.isInstantPhase) {
        setState({
          isInstantPhase: false
        });
      }
      initialCurrentIdRef.current = null;
    }
  }, [state.currentId, state.isInstantPhase]);
  return /* @__PURE__ */ React16.createElement(FloatingDelayGroupContext.Provider, {
    value: React16.useMemo(() => ({
      ...state,
      setState,
      setCurrentId
    }), [state, setCurrentId])
  }, children);
}
function useDelayGroup(context, options) {
  if (options === undefined) {
    options = {};
  }
  const {
    open,
    onOpenChange,
    floatingId
  } = context;
  const {
    id: optionId,
    enabled = true
  } = options;
  const id = optionId != null ? optionId : floatingId;
  const groupContext = useDelayGroupContext();
  const {
    currentId,
    setCurrentId,
    initialDelay,
    setState,
    timeoutMs
  } = groupContext;
  index3(() => {
    if (!enabled)
      return;
    if (!currentId)
      return;
    setState({
      delay: {
        open: 1,
        close: getDelay(initialDelay, "close")
      }
    });
    if (currentId !== id) {
      onOpenChange(false);
    }
  }, [enabled, id, onOpenChange, setState, currentId, initialDelay]);
  index3(() => {
    function unset() {
      onOpenChange(false);
      setState({
        delay: initialDelay,
        currentId: null
      });
    }
    if (!enabled)
      return;
    if (!currentId)
      return;
    if (!open && currentId === id) {
      if (timeoutMs) {
        const timeout = window.setTimeout(unset, timeoutMs);
        return () => {
          clearTimeout(timeout);
        };
      }
      unset();
    }
  }, [enabled, open, setState, currentId, id, onOpenChange, initialDelay, timeoutMs]);
  index3(() => {
    if (!enabled)
      return;
    if (setCurrentId === NOOP || !open)
      return;
    setCurrentId(id);
  }, [enabled, open, setCurrentId, id]);
  return groupContext;
}
function getChildren(nodes, id) {
  let allChildren = nodes.filter((node2) => {
    var _node$context;
    return node2.parentId === id && ((_node$context = node2.context) == null ? undefined : _node$context.open);
  });
  let currentChildren = allChildren;
  while (currentChildren.length) {
    currentChildren = nodes.filter((node2) => {
      var _currentChildren;
      return (_currentChildren = currentChildren) == null ? undefined : _currentChildren.some((n) => {
        var _node$context2;
        return node2.parentId === n.id && ((_node$context2 = node2.context) == null ? undefined : _node$context2.open);
      });
    });
    allChildren = allChildren.concat(currentChildren);
  }
  return allChildren;
}
var FOCUSABLE_ATTRIBUTE = "data-floating-ui-focusable";
var bubbleHandlerKeys = {
  pointerdown: "onPointerDown",
  mousedown: "onMouseDown",
  click: "onClick"
};
var captureHandlerKeys = {
  pointerdown: "onPointerDownCapture",
  mousedown: "onMouseDownCapture",
  click: "onClickCapture"
};
var normalizeProp = (normalizable) => {
  var _normalizable$escapeK, _normalizable$outside;
  return {
    escapeKey: typeof normalizable === "boolean" ? normalizable : (_normalizable$escapeK = normalizable == null ? undefined : normalizable.escapeKey) != null ? _normalizable$escapeK : false,
    outsidePress: typeof normalizable === "boolean" ? normalizable : (_normalizable$outside = normalizable == null ? undefined : normalizable.outsidePress) != null ? _normalizable$outside : true
  };
};
function useDismiss(context, props) {
  if (props === undefined) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    elements,
    dataRef
  } = context;
  const {
    enabled = true,
    escapeKey = true,
    outsidePress: unstable_outsidePress = true,
    outsidePressEvent = "pointerdown",
    referencePress = false,
    referencePressEvent = "pointerdown",
    ancestorScroll = false,
    bubbles,
    capture
  } = props;
  const tree = useFloatingTree();
  const outsidePressFn = useEffectEvent(typeof unstable_outsidePress === "function" ? unstable_outsidePress : () => false);
  const outsidePress = typeof unstable_outsidePress === "function" ? outsidePressFn : unstable_outsidePress;
  const insideReactTreeRef = React16.useRef(false);
  const endedOrStartedInsideRef = React16.useRef(false);
  const {
    escapeKey: escapeKeyBubbles,
    outsidePress: outsidePressBubbles
  } = normalizeProp(bubbles);
  const {
    escapeKey: escapeKeyCapture,
    outsidePress: outsidePressCapture
  } = normalizeProp(capture);
  const isComposingRef = React16.useRef(false);
  const closeOnEscapeKeyDown = useEffectEvent((event) => {
    var _dataRef$current$floa;
    if (!open || !enabled || !escapeKey || event.key !== "Escape") {
      return;
    }
    if (isComposingRef.current) {
      return;
    }
    const nodeId = (_dataRef$current$floa = dataRef.current.floatingContext) == null ? undefined : _dataRef$current$floa.nodeId;
    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
    if (!escapeKeyBubbles) {
      event.stopPropagation();
      if (children.length > 0) {
        let shouldDismiss = true;
        children.forEach((child) => {
          var _child$context;
          if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {
            shouldDismiss = false;
            return;
          }
        });
        if (!shouldDismiss) {
          return;
        }
      }
    }
    onOpenChange(false, isReactEvent(event) ? event.nativeEvent : event, "escape-key");
  });
  const closeOnEscapeKeyDownCapture = useEffectEvent((event) => {
    var _getTarget2;
    const callback = () => {
      var _getTarget;
      closeOnEscapeKeyDown(event);
      (_getTarget = getTarget(event)) == null || _getTarget.removeEventListener("keydown", callback);
    };
    (_getTarget2 = getTarget(event)) == null || _getTarget2.addEventListener("keydown", callback);
  });
  const closeOnPressOutside = useEffectEvent((event) => {
    var _dataRef$current$floa2;
    const insideReactTree = insideReactTreeRef.current;
    insideReactTreeRef.current = false;
    const endedOrStartedInside = endedOrStartedInsideRef.current;
    endedOrStartedInsideRef.current = false;
    if (outsidePressEvent === "click" && endedOrStartedInside) {
      return;
    }
    if (insideReactTree) {
      return;
    }
    if (typeof outsidePress === "function" && !outsidePress(event)) {
      return;
    }
    const target = getTarget(event);
    const inertSelector = "[" + createAttribute("inert") + "]";
    const markers = getDocument(elements.floating).querySelectorAll(inertSelector);
    let targetRootAncestor = isElement2(target) ? target : null;
    while (targetRootAncestor && !isLastTraversableNode(targetRootAncestor)) {
      const nextParent = getParentNode(targetRootAncestor);
      if (isLastTraversableNode(nextParent) || !isElement2(nextParent)) {
        break;
      }
      targetRootAncestor = nextParent;
    }
    if (markers.length && isElement2(target) && !isRootElement(target) && !contains(target, elements.floating) && Array.from(markers).every((marker) => !contains(targetRootAncestor, marker))) {
      return;
    }
    if (isHTMLElement(target) && floating) {
      const canScrollX = target.clientWidth > 0 && target.scrollWidth > target.clientWidth;
      const canScrollY = target.clientHeight > 0 && target.scrollHeight > target.clientHeight;
      let xCond = canScrollY && event.offsetX > target.clientWidth;
      if (canScrollY) {
        const isRTL2 = getComputedStyle2(target).direction === "rtl";
        if (isRTL2) {
          xCond = event.offsetX <= target.offsetWidth - target.clientWidth;
        }
      }
      if (xCond || canScrollX && event.offsetY > target.clientHeight) {
        return;
      }
    }
    const nodeId = (_dataRef$current$floa2 = dataRef.current.floatingContext) == null ? undefined : _dataRef$current$floa2.nodeId;
    const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some((node2) => {
      var _node$context;
      return isEventTargetWithin(event, (_node$context = node2.context) == null ? undefined : _node$context.elements.floating);
    });
    if (isEventTargetWithin(event, elements.floating) || isEventTargetWithin(event, elements.domReference) || targetIsInsideChildren) {
      return;
    }
    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
    if (children.length > 0) {
      let shouldDismiss = true;
      children.forEach((child) => {
        var _child$context2;
        if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {
          shouldDismiss = false;
          return;
        }
      });
      if (!shouldDismiss) {
        return;
      }
    }
    onOpenChange(false, event, "outside-press");
  });
  const closeOnPressOutsideCapture = useEffectEvent((event) => {
    var _getTarget4;
    const callback = () => {
      var _getTarget3;
      closeOnPressOutside(event);
      (_getTarget3 = getTarget(event)) == null || _getTarget3.removeEventListener(outsidePressEvent, callback);
    };
    (_getTarget4 = getTarget(event)) == null || _getTarget4.addEventListener(outsidePressEvent, callback);
  });
  React16.useEffect(() => {
    if (!open || !enabled) {
      return;
    }
    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;
    dataRef.current.__outsidePressBubbles = outsidePressBubbles;
    let compositionTimeout = -1;
    function onScroll(event) {
      onOpenChange(false, event, "ancestor-scroll");
    }
    function handleCompositionStart() {
      window.clearTimeout(compositionTimeout);
      isComposingRef.current = true;
    }
    function handleCompositionEnd() {
      compositionTimeout = window.setTimeout(() => {
        isComposingRef.current = false;
      }, isWebKit() ? 5 : 0);
    }
    const doc = getDocument(elements.floating);
    if (escapeKey) {
      doc.addEventListener("keydown", escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);
      doc.addEventListener("compositionstart", handleCompositionStart);
      doc.addEventListener("compositionend", handleCompositionEnd);
    }
    outsidePress && doc.addEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);
    let ancestors = [];
    if (ancestorScroll) {
      if (isElement2(elements.domReference)) {
        ancestors = getOverflowAncestors(elements.domReference);
      }
      if (isElement2(elements.floating)) {
        ancestors = ancestors.concat(getOverflowAncestors(elements.floating));
      }
      if (!isElement2(elements.reference) && elements.reference && elements.reference.contextElement) {
        ancestors = ancestors.concat(getOverflowAncestors(elements.reference.contextElement));
      }
    }
    ancestors = ancestors.filter((ancestor) => {
      var _doc$defaultView;
      return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? undefined : _doc$defaultView.visualViewport);
    });
    ancestors.forEach((ancestor) => {
      ancestor.addEventListener("scroll", onScroll, {
        passive: true
      });
    });
    return () => {
      if (escapeKey) {
        doc.removeEventListener("keydown", escapeKeyCapture ? closeOnEscapeKeyDownCapture : closeOnEscapeKeyDown, escapeKeyCapture);
        doc.removeEventListener("compositionstart", handleCompositionStart);
        doc.removeEventListener("compositionend", handleCompositionEnd);
      }
      outsidePress && doc.removeEventListener(outsidePressEvent, outsidePressCapture ? closeOnPressOutsideCapture : closeOnPressOutside, outsidePressCapture);
      ancestors.forEach((ancestor) => {
        ancestor.removeEventListener("scroll", onScroll);
      });
      window.clearTimeout(compositionTimeout);
    };
  }, [dataRef, elements, escapeKey, outsidePress, outsidePressEvent, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, closeOnEscapeKeyDown, escapeKeyCapture, closeOnEscapeKeyDownCapture, closeOnPressOutside, outsidePressCapture, closeOnPressOutsideCapture]);
  React16.useEffect(() => {
    insideReactTreeRef.current = false;
  }, [outsidePress, outsidePressEvent]);
  const reference = React16.useMemo(() => ({
    onKeyDown: closeOnEscapeKeyDown,
    [bubbleHandlerKeys[referencePressEvent]]: (event) => {
      if (referencePress) {
        onOpenChange(false, event.nativeEvent, "reference-press");
      }
    }
  }), [closeOnEscapeKeyDown, onOpenChange, referencePress, referencePressEvent]);
  const floating = React16.useMemo(() => ({
    onKeyDown: closeOnEscapeKeyDown,
    onMouseDown() {
      endedOrStartedInsideRef.current = true;
    },
    onMouseUp() {
      endedOrStartedInsideRef.current = true;
    },
    [captureHandlerKeys[outsidePressEvent]]: () => {
      insideReactTreeRef.current = true;
    }
  }), [closeOnEscapeKeyDown, outsidePressEvent]);
  return React16.useMemo(() => enabled ? {
    reference,
    floating
  } : {}, [enabled, reference, floating]);
}
function useFloatingRootContext(options) {
  const {
    open = false,
    onOpenChange: onOpenChangeProp,
    elements: elementsProp
  } = options;
  const floatingId = useId3();
  const dataRef = React16.useRef({});
  const [events] = React16.useState(() => createPubSub());
  const nested = useFloatingParentNodeId() != null;
  if (false) {
  }
  const [positionReference, setPositionReference] = React16.useState(elementsProp.reference);
  const onOpenChange = useEffectEvent((open2, event, reason) => {
    dataRef.current.openEvent = open2 ? event : undefined;
    events.emit("openchange", {
      open: open2,
      event,
      reason,
      nested
    });
    onOpenChangeProp == null || onOpenChangeProp(open2, event, reason);
  });
  const refs = React16.useMemo(() => ({
    setPositionReference
  }), []);
  const elements = React16.useMemo(() => ({
    reference: positionReference || elementsProp.reference || null,
    floating: elementsProp.floating || null,
    domReference: elementsProp.reference
  }), [positionReference, elementsProp.reference, elementsProp.floating]);
  return React16.useMemo(() => ({
    dataRef,
    open,
    onOpenChange,
    elements,
    events,
    floatingId,
    refs
  }), [open, onOpenChange, elements, events, floatingId, refs]);
}
function useFloating2(options) {
  if (options === undefined) {
    options = {};
  }
  const {
    nodeId
  } = options;
  const internalRootContext = useFloatingRootContext({
    ...options,
    elements: {
      reference: null,
      floating: null,
      ...options.elements
    }
  });
  const rootContext = options.rootContext || internalRootContext;
  const computedElements = rootContext.elements;
  const [_domReference, setDomReference] = React16.useState(null);
  const [positionReference, _setPositionReference] = React16.useState(null);
  const optionDomReference = computedElements == null ? undefined : computedElements.domReference;
  const domReference = optionDomReference || _domReference;
  const domReferenceRef = React16.useRef(null);
  const tree = useFloatingTree();
  index3(() => {
    if (domReference) {
      domReferenceRef.current = domReference;
    }
  }, [domReference]);
  const position2 = useFloating({
    ...options,
    elements: {
      ...computedElements,
      ...positionReference && {
        reference: positionReference
      }
    }
  });
  const setPositionReference = React16.useCallback((node2) => {
    const computedPositionReference = isElement2(node2) ? {
      getBoundingClientRect: () => node2.getBoundingClientRect(),
      contextElement: node2
    } : node2;
    _setPositionReference(computedPositionReference);
    position2.refs.setReference(computedPositionReference);
  }, [position2.refs]);
  const setReference = React16.useCallback((node2) => {
    if (isElement2(node2) || node2 === null) {
      domReferenceRef.current = node2;
      setDomReference(node2);
    }
    if (isElement2(position2.refs.reference.current) || position2.refs.reference.current === null || node2 !== null && !isElement2(node2)) {
      position2.refs.setReference(node2);
    }
  }, [position2.refs]);
  const refs = React16.useMemo(() => ({
    ...position2.refs,
    setReference,
    setPositionReference,
    domReference: domReferenceRef
  }), [position2.refs, setReference, setPositionReference]);
  const elements = React16.useMemo(() => ({
    ...position2.elements,
    domReference
  }), [position2.elements, domReference]);
  const context = React16.useMemo(() => ({
    ...position2,
    ...rootContext,
    refs,
    elements,
    nodeId
  }), [position2, refs, elements, nodeId, rootContext]);
  index3(() => {
    rootContext.dataRef.current.floatingContext = context;
    const node2 = tree == null ? undefined : tree.nodesRef.current.find((node3) => node3.id === nodeId);
    if (node2) {
      node2.context = context;
    }
  });
  return React16.useMemo(() => ({
    ...position2,
    context,
    refs,
    elements
  }), [position2, refs, elements, context]);
}
function useFocus(context, props) {
  if (props === undefined) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    events,
    dataRef,
    elements
  } = context;
  const {
    enabled = true,
    visibleOnly = true
  } = props;
  const blockFocusRef = React16.useRef(false);
  const timeoutRef = React16.useRef();
  const keyboardModalityRef = React16.useRef(true);
  React16.useEffect(() => {
    if (!enabled)
      return;
    const win = getWindow(elements.domReference);
    function onBlur() {
      if (!open && isHTMLElement(elements.domReference) && elements.domReference === activeElement2(getDocument(elements.domReference))) {
        blockFocusRef.current = true;
      }
    }
    function onKeyDown() {
      keyboardModalityRef.current = true;
    }
    win.addEventListener("blur", onBlur);
    win.addEventListener("keydown", onKeyDown, true);
    return () => {
      win.removeEventListener("blur", onBlur);
      win.removeEventListener("keydown", onKeyDown, true);
    };
  }, [elements.domReference, open, enabled]);
  React16.useEffect(() => {
    if (!enabled)
      return;
    function onOpenChange2(_ref) {
      let {
        reason
      } = _ref;
      if (reason === "reference-press" || reason === "escape-key") {
        blockFocusRef.current = true;
      }
    }
    events.on("openchange", onOpenChange2);
    return () => {
      events.off("openchange", onOpenChange2);
    };
  }, [events, enabled]);
  React16.useEffect(() => {
    return () => {
      clearTimeout(timeoutRef.current);
    };
  }, []);
  const reference = React16.useMemo(() => ({
    onPointerDown(event) {
      if (isVirtualPointerEvent(event.nativeEvent))
        return;
      keyboardModalityRef.current = false;
    },
    onMouseLeave() {
      blockFocusRef.current = false;
    },
    onFocus(event) {
      if (blockFocusRef.current)
        return;
      const target = getTarget(event.nativeEvent);
      if (visibleOnly && isElement2(target)) {
        try {
          if (isSafari() && isMac())
            throw Error();
          if (!target.matches(":focus-visible"))
            return;
        } catch (e) {
          if (!keyboardModalityRef.current && !isTypeableElement(target)) {
            return;
          }
        }
      }
      onOpenChange(true, event.nativeEvent, "focus");
    },
    onBlur(event) {
      blockFocusRef.current = false;
      const relatedTarget = event.relatedTarget;
      const nativeEvent = event.nativeEvent;
      const movedToFocusGuard = isElement2(relatedTarget) && relatedTarget.hasAttribute(createAttribute("focus-guard")) && relatedTarget.getAttribute("data-type") === "outside";
      timeoutRef.current = window.setTimeout(() => {
        var _dataRef$current$floa;
        const activeEl = activeElement2(elements.domReference ? elements.domReference.ownerDocument : document);
        if (!relatedTarget && activeEl === elements.domReference)
          return;
        if (contains((_dataRef$current$floa = dataRef.current.floatingContext) == null ? undefined : _dataRef$current$floa.refs.floating.current, activeEl) || contains(elements.domReference, activeEl) || movedToFocusGuard) {
          return;
        }
        onOpenChange(false, nativeEvent, "focus");
      });
    }
  }), [dataRef, elements.domReference, onOpenChange, visibleOnly]);
  return React16.useMemo(() => enabled ? {
    reference
  } : {}, [enabled, reference]);
}
var ACTIVE_KEY = "active";
var SELECTED_KEY = "selected";
function mergeProps(userProps, propsList, elementKey) {
  const map = new Map;
  const isItem = elementKey === "item";
  let domUserProps = userProps;
  if (isItem && userProps) {
    const {
      [ACTIVE_KEY]: _2,
      [SELECTED_KEY]: __,
      ...validProps
    } = userProps;
    domUserProps = validProps;
  }
  return {
    ...elementKey === "floating" && {
      tabIndex: -1,
      [FOCUSABLE_ATTRIBUTE]: ""
    },
    ...domUserProps,
    ...propsList.map((value) => {
      const propsOrGetProps = value ? value[elementKey] : null;
      if (typeof propsOrGetProps === "function") {
        return userProps ? propsOrGetProps(userProps) : null;
      }
      return propsOrGetProps;
    }).concat(userProps).reduce((acc, props) => {
      if (!props) {
        return acc;
      }
      Object.entries(props).forEach((_ref) => {
        let [key, value] = _ref;
        if (isItem && [ACTIVE_KEY, SELECTED_KEY].includes(key)) {
          return;
        }
        if (key.indexOf("on") === 0) {
          if (!map.has(key)) {
            map.set(key, []);
          }
          if (typeof value === "function") {
            var _map$get;
            (_map$get = map.get(key)) == null || _map$get.push(value);
            acc[key] = function() {
              var _map$get2;
              for (var _len = arguments.length, args = new Array(_len), _key = 0;_key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              return (_map$get2 = map.get(key)) == null ? undefined : _map$get2.map((fn) => fn(...args)).find((val) => val !== undefined);
            };
          }
        } else {
          acc[key] = value;
        }
      });
      return acc;
    }, {})
  };
}
function useInteractions(propsList) {
  if (propsList === undefined) {
    propsList = [];
  }
  const referenceDeps = propsList.map((key) => key == null ? undefined : key.reference);
  const floatingDeps = propsList.map((key) => key == null ? undefined : key.floating);
  const itemDeps = propsList.map((key) => key == null ? undefined : key.item);
  const getReferenceProps = React16.useCallback((userProps) => mergeProps(userProps, propsList, "reference"), referenceDeps);
  const getFloatingProps = React16.useCallback((userProps) => mergeProps(userProps, propsList, "floating"), floatingDeps);
  const getItemProps = React16.useCallback((userProps) => mergeProps(userProps, propsList, "item"), itemDeps);
  return React16.useMemo(() => ({
    getReferenceProps,
    getFloatingProps,
    getItemProps
  }), [getReferenceProps, getFloatingProps, getItemProps]);
}
var componentRoleToAriaRoleMap = /* @__PURE__ */ new Map([["select", "listbox"], ["combobox", "listbox"], ["label", false]]);
function useRole(context, props) {
  var _componentRoleToAriaR;
  if (props === undefined) {
    props = {};
  }
  const {
    open,
    floatingId
  } = context;
  const {
    enabled = true,
    role = "dialog"
  } = props;
  const ariaRole = (_componentRoleToAriaR = componentRoleToAriaRoleMap.get(role)) != null ? _componentRoleToAriaR : role;
  const referenceId = useId3();
  const parentId = useFloatingParentNodeId();
  const isNested = parentId != null;
  const reference = React16.useMemo(() => {
    if (ariaRole === "tooltip" || role === "label") {
      return {
        ["aria-" + (role === "label" ? "labelledby" : "describedby")]: open ? floatingId : undefined
      };
    }
    return {
      "aria-expanded": open ? "true" : "false",
      "aria-haspopup": ariaRole === "alertdialog" ? "dialog" : ariaRole,
      "aria-controls": open ? floatingId : undefined,
      ...ariaRole === "listbox" && {
        role: "combobox"
      },
      ...ariaRole === "menu" && {
        id: referenceId
      },
      ...ariaRole === "menu" && isNested && {
        role: "menuitem"
      },
      ...role === "select" && {
        "aria-autocomplete": "none"
      },
      ...role === "combobox" && {
        "aria-autocomplete": "list"
      }
    };
  }, [ariaRole, floatingId, isNested, open, referenceId, role]);
  const floating = React16.useMemo(() => {
    const floatingProps = {
      id: floatingId,
      ...ariaRole && {
        role: ariaRole
      }
    };
    if (ariaRole === "tooltip" || role === "label") {
      return floatingProps;
    }
    return {
      ...floatingProps,
      ...ariaRole === "menu" && {
        "aria-labelledby": referenceId
      }
    };
  }, [ariaRole, floatingId, referenceId, role]);
  const item = React16.useCallback((_ref) => {
    let {
      active,
      selected
    } = _ref;
    const commonProps = {
      role: "option",
      ...active && {
        id: floatingId + "-option"
      }
    };
    switch (role) {
      case "select":
        return {
          ...commonProps,
          "aria-selected": active && selected
        };
      case "combobox": {
        return {
          ...commonProps,
          ...active && {
            "aria-selected": true
          }
        };
      }
    }
    return {};
  }, [floatingId, role]);
  return React16.useMemo(() => enabled ? {
    reference,
    floating,
    item
  } : {}, [enabled, reference, floating, item]);
}

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaCorner/ScrollAreaCorner.mjs
var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
var import_react60 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollArea.context.mjs
var import_react59 = __toESM(require_react(), 1);
var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
"use client";
var [ScrollAreaProvider, useScrollAreaContext] = createSafeContext("ScrollArea.Root component was not found in tree");

// node_modules/@mantine/core/esm/components/ScrollArea/use-resize-observer.mjs
"use client";
function useResizeObserver(element, onResize) {
  const handleResize = useCallbackRef2(onResize);
  useIsomorphicEffect(() => {
    let rAF = 0;
    if (element) {
      const resizeObserver = new ResizeObserver(() => {
        cancelAnimationFrame(rAF);
        rAF = window.requestAnimationFrame(handleResize);
      });
      resizeObserver.observe(element);
      return () => {
        window.cancelAnimationFrame(rAF);
        resizeObserver.unobserve(element);
      };
    }
    return;
  }, [element, handleResize]);
}

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaCorner/ScrollAreaCorner.mjs
"use client";
var Corner = import_react60.forwardRef((props, ref) => {
  const { style: style2, ...others } = props;
  const ctx = useScrollAreaContext();
  const [width, setWidth] = import_react60.useState(0);
  const [height, setHeight] = import_react60.useState(0);
  const hasSize = Boolean(width && height);
  useResizeObserver(ctx.scrollbarX, () => {
    const h = ctx.scrollbarX?.offsetHeight || 0;
    ctx.onCornerHeightChange(h);
    setHeight(h);
  });
  useResizeObserver(ctx.scrollbarY, () => {
    const w2 = ctx.scrollbarY?.offsetWidth || 0;
    ctx.onCornerWidthChange(w2);
    setWidth(w2);
  });
  return hasSize ? /* @__PURE__ */ import_jsx_runtime34.jsx("div", { ...others, ref, style: { ...style2, width, height } }) : null;
});
var ScrollAreaCorner = import_react60.forwardRef((props, ref) => {
  const ctx = useScrollAreaContext();
  const hasBothScrollbarsVisible = Boolean(ctx.scrollbarX && ctx.scrollbarY);
  const hasCorner = ctx.type !== "scroll" && hasBothScrollbarsVisible;
  return hasCorner ? /* @__PURE__ */ import_jsx_runtime34.jsx(Corner, { ...props, ref }) : null;
});

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaRoot/ScrollAreaRoot.mjs
var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
var import_react61 = __toESM(require_react(), 1);
"use client";
var defaultProps = {
  scrollHideDelay: 1000,
  type: "hover"
};
var ScrollAreaRoot = import_react61.forwardRef((_props, ref) => {
  const props = useProps("ScrollAreaRoot", defaultProps, _props);
  const { type, scrollHideDelay, scrollbars, ...others } = props;
  const [scrollArea, setScrollArea] = import_react61.useState(null);
  const [viewport, setViewport] = import_react61.useState(null);
  const [content, setContent] = import_react61.useState(null);
  const [scrollbarX, setScrollbarX] = import_react61.useState(null);
  const [scrollbarY, setScrollbarY] = import_react61.useState(null);
  const [cornerWidth, setCornerWidth] = import_react61.useState(0);
  const [cornerHeight, setCornerHeight] = import_react61.useState(0);
  const [scrollbarXEnabled, setScrollbarXEnabled] = import_react61.useState(false);
  const [scrollbarYEnabled, setScrollbarYEnabled] = import_react61.useState(false);
  const rootRef = useMergedRef(ref, (node2) => setScrollArea(node2));
  return /* @__PURE__ */ import_jsx_runtime35.jsx(ScrollAreaProvider, {
    value: {
      type,
      scrollHideDelay,
      scrollArea,
      viewport,
      onViewportChange: setViewport,
      content,
      onContentChange: setContent,
      scrollbarX,
      onScrollbarXChange: setScrollbarX,
      scrollbarXEnabled,
      onScrollbarXEnabledChange: setScrollbarXEnabled,
      scrollbarY,
      onScrollbarYChange: setScrollbarY,
      scrollbarYEnabled,
      onScrollbarYEnabledChange: setScrollbarYEnabled,
      onCornerWidthChange: setCornerWidth,
      onCornerHeightChange: setCornerHeight
    },
    children: /* @__PURE__ */ import_jsx_runtime35.jsx(Box, {
      ...others,
      ref: rootRef,
      __vars: {
        "--sa-corner-width": scrollbars !== "xy" ? "0px" : `${cornerWidth}px`,
        "--sa-corner-height": scrollbars !== "xy" ? "0px" : `${cornerHeight}px`
      }
    })
  });
});
ScrollAreaRoot.displayName = "@mantine/core/ScrollAreaRoot";

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbar.mjs
var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
var import_react70 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbarAuto.mjs
var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
var import_react67 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbarVisible.mjs
var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
var import_react66 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/ScrollArea/utils/get-thumb-ratio.mjs
"use client";
function getThumbRatio(viewportSize, contentSize) {
  const ratio = viewportSize / contentSize;
  return Number.isNaN(ratio) ? 0 : ratio;
}

// node_modules/@mantine/core/esm/components/ScrollArea/utils/get-thumb-size.mjs
"use client";
function getThumbSize(sizes) {
  const ratio = getThumbRatio(sizes.viewport, sizes.content);
  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;
  const thumbSize = (sizes.scrollbar.size - scrollbarPadding) * ratio;
  return Math.max(thumbSize, 18);
}

// node_modules/@mantine/core/esm/components/ScrollArea/utils/linear-scale.mjs
"use client";
function linearScale(input, output) {
  return (value) => {
    if (input[0] === input[1] || output[0] === output[1]) {
      return output[0];
    }
    const ratio = (output[1] - output[0]) / (input[1] - input[0]);
    return output[0] + ratio * (value - input[0]);
  };
}

// node_modules/@mantine/core/esm/components/ScrollArea/utils/get-thumb-offset-from-scroll.mjs
"use client";
function clamp3(value, [min2, max2]) {
  return Math.min(max2, Math.max(min2, value));
}
function getThumbOffsetFromScroll(scrollPos, sizes, dir = "ltr") {
  const thumbSizePx = getThumbSize(sizes);
  const scrollbarPadding = sizes.scrollbar.paddingStart + sizes.scrollbar.paddingEnd;
  const scrollbar = sizes.scrollbar.size - scrollbarPadding;
  const maxScrollPos = sizes.content - sizes.viewport;
  const maxThumbPos = scrollbar - thumbSizePx;
  const scrollClampRange = dir === "ltr" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];
  const scrollWithoutMomentum = clamp3(scrollPos, scrollClampRange);
  const interpolate = linearScale([0, maxScrollPos], [0, maxThumbPos]);
  return interpolate(scrollWithoutMomentum);
}

// node_modules/@mantine/core/esm/components/ScrollArea/utils/get-scroll-position-from-pointer.mjs
"use client";
function getScrollPositionFromPointer(pointerPos, pointerOffset, sizes, dir = "ltr") {
  const thumbSizePx = getThumbSize(sizes);
  const thumbCenter = thumbSizePx / 2;
  const offset4 = pointerOffset || thumbCenter;
  const thumbOffsetFromEnd = thumbSizePx - offset4;
  const minPointerPos = sizes.scrollbar.paddingStart + offset4;
  const maxPointerPos = sizes.scrollbar.size - sizes.scrollbar.paddingEnd - thumbOffsetFromEnd;
  const maxScrollPos = sizes.content - sizes.viewport;
  const scrollRange = dir === "ltr" ? [0, maxScrollPos] : [maxScrollPos * -1, 0];
  const interpolate = linearScale([minPointerPos, maxPointerPos], scrollRange);
  return interpolate(pointerPos);
}

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaScrollbar/ScrollbarX.mjs
var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
var import_react64 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/ScrollArea/utils/is-scrolling-within-scrollbar-bounds.mjs
"use client";
function isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos) {
  return scrollPos > 0 && scrollPos < maxScrollPos;
}

// node_modules/@mantine/core/esm/components/ScrollArea/utils/to-int.mjs
"use client";
function toInt(value) {
  return value ? parseInt(value, 10) : 0;
}

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaScrollbar/Scrollbar.mjs
var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
var import_react63 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/ScrollArea/utils/compose-event-handlers.mjs
"use client";
function composeEventHandlers(originalEventHandler, ourEventHandler, { checkForDefaultPrevented = true } = {}) {
  return (event) => {
    originalEventHandler?.(event);
    if (checkForDefaultPrevented === false || !event.defaultPrevented) {
      ourEventHandler?.(event);
    }
  };
}

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaScrollbar/Scrollbar.context.mjs
var import_react62 = __toESM(require_react(), 1);
var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
"use client";
var [ScrollbarProvider, useScrollbarContext] = createSafeContext("ScrollAreaScrollbar was not found in tree");

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaScrollbar/Scrollbar.mjs
"use client";
var Scrollbar = import_react63.forwardRef((props, forwardedRef) => {
  const {
    sizes,
    hasThumb,
    onThumbChange,
    onThumbPointerUp,
    onThumbPointerDown,
    onThumbPositionChange,
    onDragScroll,
    onWheelScroll,
    onResize,
    ...scrollbarProps
  } = props;
  const context = useScrollAreaContext();
  const [scrollbar, setScrollbar] = import_react63.useState(null);
  const composeRefs = useMergedRef(forwardedRef, (node2) => setScrollbar(node2));
  const rectRef = import_react63.useRef(null);
  const prevWebkitUserSelectRef = import_react63.useRef("");
  const { viewport } = context;
  const maxScrollPos = sizes.content - sizes.viewport;
  const handleWheelScroll = useCallbackRef2(onWheelScroll);
  const handleThumbPositionChange = useCallbackRef2(onThumbPositionChange);
  const handleResize = useDebouncedCallback(onResize, 10);
  const handleDragScroll = (event) => {
    if (rectRef.current) {
      const x2 = event.clientX - rectRef.current.left;
      const y2 = event.clientY - rectRef.current.top;
      onDragScroll({ x: x2, y: y2 });
    }
  };
  import_react63.useEffect(() => {
    const handleWheel = (event) => {
      const element = event.target;
      const isScrollbarWheel = scrollbar?.contains(element);
      if (isScrollbarWheel) {
        handleWheelScroll(event, maxScrollPos);
      }
    };
    document.addEventListener("wheel", handleWheel, { passive: false });
    return () => document.removeEventListener("wheel", handleWheel, { passive: false });
  }, [viewport, scrollbar, maxScrollPos, handleWheelScroll]);
  import_react63.useEffect(handleThumbPositionChange, [sizes, handleThumbPositionChange]);
  useResizeObserver(scrollbar, handleResize);
  useResizeObserver(context.content, handleResize);
  return /* @__PURE__ */ import_jsx_runtime37.jsx(ScrollbarProvider, {
    value: {
      scrollbar,
      hasThumb,
      onThumbChange: useCallbackRef2(onThumbChange),
      onThumbPointerUp: useCallbackRef2(onThumbPointerUp),
      onThumbPositionChange: handleThumbPositionChange,
      onThumbPointerDown: useCallbackRef2(onThumbPointerDown)
    },
    children: /* @__PURE__ */ import_jsx_runtime37.jsx("div", {
      ...scrollbarProps,
      ref: composeRefs,
      "data-mantine-scrollbar": true,
      style: { position: "absolute", ...scrollbarProps.style },
      onPointerDown: composeEventHandlers(props.onPointerDown, (event) => {
        event.preventDefault();
        const mainPointer = 0;
        if (event.button === mainPointer) {
          const element = event.target;
          element.setPointerCapture(event.pointerId);
          rectRef.current = scrollbar.getBoundingClientRect();
          prevWebkitUserSelectRef.current = document.body.style.webkitUserSelect;
          document.body.style.webkitUserSelect = "none";
          handleDragScroll(event);
        }
      }),
      onPointerMove: composeEventHandlers(props.onPointerMove, handleDragScroll),
      onPointerUp: composeEventHandlers(props.onPointerUp, (event) => {
        const element = event.target;
        if (element.hasPointerCapture(event.pointerId)) {
          event.preventDefault();
          element.releasePointerCapture(event.pointerId);
        }
      }),
      onLostPointerCapture: () => {
        document.body.style.webkitUserSelect = prevWebkitUserSelectRef.current;
        rectRef.current = null;
      }
    })
  });
});

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaScrollbar/ScrollbarX.mjs
"use client";
var ScrollAreaScrollbarX = import_react64.forwardRef((props, forwardedRef) => {
  const { sizes, onSizesChange, style: style2, ...others } = props;
  const ctx = useScrollAreaContext();
  const [computedStyle, setComputedStyle] = import_react64.useState();
  const ref = import_react64.useRef(null);
  const composeRefs = useMergedRef(forwardedRef, ref, ctx.onScrollbarXChange);
  import_react64.useEffect(() => {
    if (ref.current) {
      setComputedStyle(getComputedStyle(ref.current));
    }
  }, [ref]);
  return /* @__PURE__ */ import_jsx_runtime38.jsx(Scrollbar, {
    "data-orientation": "horizontal",
    ...others,
    ref: composeRefs,
    sizes,
    style: {
      ...style2,
      ["--sa-thumb-width"]: `${getThumbSize(sizes)}px`
    },
    onThumbPointerDown: (pointerPos) => props.onThumbPointerDown(pointerPos.x),
    onDragScroll: (pointerPos) => props.onDragScroll(pointerPos.x),
    onWheelScroll: (event, maxScrollPos) => {
      if (ctx.viewport) {
        const scrollPos = ctx.viewport.scrollLeft + event.deltaX;
        props.onWheelScroll(scrollPos);
        if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {
          event.preventDefault();
        }
      }
    },
    onResize: () => {
      if (ref.current && ctx.viewport && computedStyle) {
        onSizesChange({
          content: ctx.viewport.scrollWidth,
          viewport: ctx.viewport.offsetWidth,
          scrollbar: {
            size: ref.current.clientWidth,
            paddingStart: toInt(computedStyle.paddingLeft),
            paddingEnd: toInt(computedStyle.paddingRight)
          }
        });
      }
    }
  });
});
ScrollAreaScrollbarX.displayName = "@mantine/core/ScrollAreaScrollbarX";

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaScrollbar/ScrollbarY.mjs
var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
var import_react65 = __toESM(require_react(), 1);
"use client";
var ScrollAreaScrollbarY = import_react65.forwardRef((props, forwardedRef) => {
  const { sizes, onSizesChange, style: style2, ...others } = props;
  const context = useScrollAreaContext();
  const [computedStyle, setComputedStyle] = import_react65.useState();
  const ref = import_react65.useRef(null);
  const composeRefs = useMergedRef(forwardedRef, ref, context.onScrollbarYChange);
  import_react65.useEffect(() => {
    if (ref.current) {
      setComputedStyle(window.getComputedStyle(ref.current));
    }
  }, []);
  return /* @__PURE__ */ import_jsx_runtime39.jsx(Scrollbar, {
    ...others,
    "data-orientation": "vertical",
    ref: composeRefs,
    sizes,
    style: {
      ["--sa-thumb-height"]: `${getThumbSize(sizes)}px`,
      ...style2
    },
    onThumbPointerDown: (pointerPos) => props.onThumbPointerDown(pointerPos.y),
    onDragScroll: (pointerPos) => props.onDragScroll(pointerPos.y),
    onWheelScroll: (event, maxScrollPos) => {
      if (context.viewport) {
        const scrollPos = context.viewport.scrollTop + event.deltaY;
        props.onWheelScroll(scrollPos);
        if (isScrollingWithinScrollbarBounds(scrollPos, maxScrollPos)) {
          event.preventDefault();
        }
      }
    },
    onResize: () => {
      if (ref.current && context.viewport && computedStyle) {
        onSizesChange({
          content: context.viewport.scrollHeight,
          viewport: context.viewport.offsetHeight,
          scrollbar: {
            size: ref.current.clientHeight,
            paddingStart: toInt(computedStyle.paddingTop),
            paddingEnd: toInt(computedStyle.paddingBottom)
          }
        });
      }
    }
  });
});
ScrollAreaScrollbarY.displayName = "@mantine/core/ScrollAreaScrollbarY";

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbarVisible.mjs
"use client";
var ScrollAreaScrollbarVisible = import_react66.forwardRef((props, forwardedRef) => {
  const { orientation = "vertical", ...scrollbarProps } = props;
  const { dir } = useDirection();
  const context = useScrollAreaContext();
  const thumbRef = import_react66.useRef(null);
  const pointerOffsetRef = import_react66.useRef(0);
  const [sizes, setSizes] = import_react66.useState({
    content: 0,
    viewport: 0,
    scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 }
  });
  const thumbRatio = getThumbRatio(sizes.viewport, sizes.content);
  const commonProps = {
    ...scrollbarProps,
    sizes,
    onSizesChange: setSizes,
    hasThumb: Boolean(thumbRatio > 0 && thumbRatio < 1),
    onThumbChange: (thumb) => {
      thumbRef.current = thumb;
    },
    onThumbPointerUp: () => {
      pointerOffsetRef.current = 0;
    },
    onThumbPointerDown: (pointerPos) => {
      pointerOffsetRef.current = pointerPos;
    }
  };
  const getScrollPosition = (pointerPos, direction) => getScrollPositionFromPointer(pointerPos, pointerOffsetRef.current, sizes, direction);
  if (orientation === "horizontal") {
    return /* @__PURE__ */ import_jsx_runtime40.jsx(ScrollAreaScrollbarX, {
      ...commonProps,
      ref: forwardedRef,
      onThumbPositionChange: () => {
        if (context.viewport && thumbRef.current) {
          const scrollPos = context.viewport.scrollLeft;
          const offset4 = getThumbOffsetFromScroll(scrollPos, sizes, dir);
          thumbRef.current.style.transform = `translate3d(${offset4}px, 0, 0)`;
        }
      },
      onWheelScroll: (scrollPos) => {
        if (context.viewport) {
          context.viewport.scrollLeft = scrollPos;
        }
      },
      onDragScroll: (pointerPos) => {
        if (context.viewport) {
          context.viewport.scrollLeft = getScrollPosition(pointerPos, dir);
        }
      }
    });
  }
  if (orientation === "vertical") {
    return /* @__PURE__ */ import_jsx_runtime40.jsx(ScrollAreaScrollbarY, {
      ...commonProps,
      ref: forwardedRef,
      onThumbPositionChange: () => {
        if (context.viewport && thumbRef.current) {
          const scrollPos = context.viewport.scrollTop;
          const offset4 = getThumbOffsetFromScroll(scrollPos, sizes);
          if (sizes.scrollbar.size === 0) {
            thumbRef.current.style.setProperty("--thumb-opacity", "0");
          } else {
            thumbRef.current.style.setProperty("--thumb-opacity", "1");
          }
          thumbRef.current.style.transform = `translate3d(0, ${offset4}px, 0)`;
        }
      },
      onWheelScroll: (scrollPos) => {
        if (context.viewport) {
          context.viewport.scrollTop = scrollPos;
        }
      },
      onDragScroll: (pointerPos) => {
        if (context.viewport) {
          context.viewport.scrollTop = getScrollPosition(pointerPos);
        }
      }
    });
  }
  return null;
});
ScrollAreaScrollbarVisible.displayName = "@mantine/core/ScrollAreaScrollbarVisible";

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbarAuto.mjs
"use client";
var ScrollAreaScrollbarAuto = import_react67.forwardRef((props, ref) => {
  const context = useScrollAreaContext();
  const { forceMount, ...scrollbarProps } = props;
  const [visible2, setVisible] = import_react67.useState(false);
  const isHorizontal = props.orientation === "horizontal";
  const handleResize = useDebouncedCallback(() => {
    if (context.viewport) {
      const isOverflowX = context.viewport.offsetWidth < context.viewport.scrollWidth;
      const isOverflowY = context.viewport.offsetHeight < context.viewport.scrollHeight;
      setVisible(isHorizontal ? isOverflowX : isOverflowY);
    }
  }, 10);
  useResizeObserver(context.viewport, handleResize);
  useResizeObserver(context.content, handleResize);
  if (forceMount || visible2) {
    return /* @__PURE__ */ import_jsx_runtime41.jsx(ScrollAreaScrollbarVisible, {
      "data-state": visible2 ? "visible" : "hidden",
      ...scrollbarProps,
      ref
    });
  }
  return null;
});
ScrollAreaScrollbarAuto.displayName = "@mantine/core/ScrollAreaScrollbarAuto";

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbarHover.mjs
var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
var import_react68 = __toESM(require_react(), 1);
"use client";
var ScrollAreaScrollbarHover = import_react68.forwardRef((props, ref) => {
  const { forceMount, ...scrollbarProps } = props;
  const context = useScrollAreaContext();
  const [visible2, setVisible] = import_react68.useState(false);
  import_react68.useEffect(() => {
    const { scrollArea } = context;
    let hideTimer = 0;
    if (scrollArea) {
      const handlePointerEnter = () => {
        window.clearTimeout(hideTimer);
        setVisible(true);
      };
      const handlePointerLeave = () => {
        hideTimer = window.setTimeout(() => setVisible(false), context.scrollHideDelay);
      };
      scrollArea.addEventListener("pointerenter", handlePointerEnter);
      scrollArea.addEventListener("pointerleave", handlePointerLeave);
      return () => {
        window.clearTimeout(hideTimer);
        scrollArea.removeEventListener("pointerenter", handlePointerEnter);
        scrollArea.removeEventListener("pointerleave", handlePointerLeave);
      };
    }
    return;
  }, [context.scrollArea, context.scrollHideDelay]);
  if (forceMount || visible2) {
    return /* @__PURE__ */ import_jsx_runtime42.jsx(ScrollAreaScrollbarAuto, {
      "data-state": visible2 ? "visible" : "hidden",
      ...scrollbarProps,
      ref
    });
  }
  return null;
});
ScrollAreaScrollbarHover.displayName = "@mantine/core/ScrollAreaScrollbarHover";

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbarScroll.mjs
var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
var import_react69 = __toESM(require_react(), 1);
"use client";
var ScrollAreaScrollbarScroll = import_react69.forwardRef((props, red) => {
  const { forceMount, ...scrollbarProps } = props;
  const context = useScrollAreaContext();
  const isHorizontal = props.orientation === "horizontal";
  const [state, setState] = import_react69.useState("hidden");
  const debounceScrollEnd = useDebouncedCallback(() => setState("idle"), 100);
  import_react69.useEffect(() => {
    if (state === "idle") {
      const hideTimer = window.setTimeout(() => setState("hidden"), context.scrollHideDelay);
      return () => window.clearTimeout(hideTimer);
    }
    return;
  }, [state, context.scrollHideDelay]);
  import_react69.useEffect(() => {
    const { viewport } = context;
    const scrollDirection = isHorizontal ? "scrollLeft" : "scrollTop";
    if (viewport) {
      let prevScrollPos = viewport[scrollDirection];
      const handleScroll2 = () => {
        const scrollPos = viewport[scrollDirection];
        const hasScrollInDirectionChanged = prevScrollPos !== scrollPos;
        if (hasScrollInDirectionChanged) {
          setState("scrolling");
          debounceScrollEnd();
        }
        prevScrollPos = scrollPos;
      };
      viewport.addEventListener("scroll", handleScroll2);
      return () => viewport.removeEventListener("scroll", handleScroll2);
    }
    return;
  }, [context.viewport, isHorizontal, debounceScrollEnd]);
  if (forceMount || state !== "hidden") {
    return /* @__PURE__ */ import_jsx_runtime43.jsx(ScrollAreaScrollbarVisible, {
      "data-state": state === "hidden" ? "hidden" : "visible",
      ...scrollbarProps,
      ref: red,
      onPointerEnter: composeEventHandlers(props.onPointerEnter, () => setState("interacting")),
      onPointerLeave: composeEventHandlers(props.onPointerLeave, () => setState("idle"))
    });
  }
  return null;
});

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaScrollbar/ScrollAreaScrollbar.mjs
"use client";
var ScrollAreaScrollbar = import_react70.forwardRef((props, forwardedRef) => {
  const { forceMount, ...scrollbarProps } = props;
  const context = useScrollAreaContext();
  const { onScrollbarXEnabledChange, onScrollbarYEnabledChange } = context;
  const isHorizontal = props.orientation === "horizontal";
  import_react70.useEffect(() => {
    isHorizontal ? onScrollbarXEnabledChange(true) : onScrollbarYEnabledChange(true);
    return () => {
      isHorizontal ? onScrollbarXEnabledChange(false) : onScrollbarYEnabledChange(false);
    };
  }, [isHorizontal, onScrollbarXEnabledChange, onScrollbarYEnabledChange]);
  return context.type === "hover" ? /* @__PURE__ */ import_jsx_runtime44.jsx(ScrollAreaScrollbarHover, { ...scrollbarProps, ref: forwardedRef, forceMount }) : context.type === "scroll" ? /* @__PURE__ */ import_jsx_runtime44.jsx(ScrollAreaScrollbarScroll, { ...scrollbarProps, ref: forwardedRef, forceMount }) : context.type === "auto" ? /* @__PURE__ */ import_jsx_runtime44.jsx(ScrollAreaScrollbarAuto, { ...scrollbarProps, ref: forwardedRef, forceMount }) : context.type === "always" ? /* @__PURE__ */ import_jsx_runtime44.jsx(ScrollAreaScrollbarVisible, { ...scrollbarProps, ref: forwardedRef }) : null;
});
ScrollAreaScrollbar.displayName = "@mantine/core/ScrollAreaScrollbar";

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaThumb/ScrollAreaThumb.mjs
var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
var import_react71 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/ScrollArea/utils/add-unlinked-scroll-listener.mjs
"use client";
function addUnlinkedScrollListener(node2, handler = () => {
}) {
  let prevPosition = { left: node2.scrollLeft, top: node2.scrollTop };
  let rAF = 0;
  (function loop() {
    const position2 = { left: node2.scrollLeft, top: node2.scrollTop };
    const isHorizontalScroll = prevPosition.left !== position2.left;
    const isVerticalScroll = prevPosition.top !== position2.top;
    if (isHorizontalScroll || isVerticalScroll) {
      handler();
    }
    prevPosition = position2;
    rAF = window.requestAnimationFrame(loop);
  })();
  return () => window.cancelAnimationFrame(rAF);
}

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaThumb/ScrollAreaThumb.mjs
"use client";
var Thumb = import_react71.forwardRef((props, forwardedRef) => {
  const { style: style2, ...others } = props;
  const scrollAreaContext = useScrollAreaContext();
  const scrollbarContext = useScrollbarContext();
  const { onThumbPositionChange } = scrollbarContext;
  const composedRef = useMergedRef(forwardedRef, (node2) => scrollbarContext.onThumbChange(node2));
  const removeUnlinkedScrollListenerRef = import_react71.useRef(undefined);
  const debounceScrollEnd = useDebouncedCallback(() => {
    if (removeUnlinkedScrollListenerRef.current) {
      removeUnlinkedScrollListenerRef.current();
      removeUnlinkedScrollListenerRef.current = undefined;
    }
  }, 100);
  import_react71.useEffect(() => {
    const { viewport } = scrollAreaContext;
    if (viewport) {
      const handleScroll2 = () => {
        debounceScrollEnd();
        if (!removeUnlinkedScrollListenerRef.current) {
          const listener = addUnlinkedScrollListener(viewport, onThumbPositionChange);
          removeUnlinkedScrollListenerRef.current = listener;
          onThumbPositionChange();
        }
      };
      onThumbPositionChange();
      viewport.addEventListener("scroll", handleScroll2);
      return () => viewport.removeEventListener("scroll", handleScroll2);
    }
    return;
  }, [scrollAreaContext.viewport, debounceScrollEnd, onThumbPositionChange]);
  return /* @__PURE__ */ import_jsx_runtime45.jsx("div", {
    "data-state": scrollbarContext.hasThumb ? "visible" : "hidden",
    ...others,
    ref: composedRef,
    style: {
      width: "var(--sa-thumb-width)",
      height: "var(--sa-thumb-height)",
      ...style2
    },
    onPointerDownCapture: composeEventHandlers(props.onPointerDownCapture, (event) => {
      const thumb = event.target;
      const thumbRect = thumb.getBoundingClientRect();
      const x2 = event.clientX - thumbRect.left;
      const y2 = event.clientY - thumbRect.top;
      scrollbarContext.onThumbPointerDown({ x: x2, y: y2 });
    }),
    onPointerUp: composeEventHandlers(props.onPointerUp, scrollbarContext.onThumbPointerUp)
  });
});
Thumb.displayName = "@mantine/core/ScrollAreaThumb";
var ScrollAreaThumb = import_react71.forwardRef((props, forwardedRef) => {
  const { forceMount, ...thumbProps } = props;
  const scrollbarContext = useScrollbarContext();
  if (forceMount || scrollbarContext.hasThumb) {
    return /* @__PURE__ */ import_jsx_runtime45.jsx(Thumb, { ref: forwardedRef, ...thumbProps });
  }
  return null;
});
ScrollAreaThumb.displayName = "@mantine/core/ScrollAreaThumb";

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollAreaViewport/ScrollAreaViewport.mjs
var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
var import_react72 = __toESM(require_react(), 1);
"use client";
var ScrollAreaViewport = import_react72.forwardRef(({ children, style: style2, ...others }, ref) => {
  const ctx = useScrollAreaContext();
  const rootRef = useMergedRef(ref, ctx.onViewportChange);
  return /* @__PURE__ */ import_jsx_runtime46.jsx(Box, {
    ...others,
    ref: rootRef,
    style: {
      overflowX: ctx.scrollbarXEnabled ? "scroll" : "hidden",
      overflowY: ctx.scrollbarYEnabled ? "scroll" : "hidden",
      ...style2
    },
    children: /* @__PURE__ */ import_jsx_runtime46.jsx("div", { style: { minWidth: "100%", display: "table" }, ref: ctx.onContentChange, children })
  });
});
ScrollAreaViewport.displayName = "@mantine/core/ScrollAreaViewport";

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollArea.module.css.mjs
"use client";
var classes = { root: "m_d57069b5", viewport: "m_c0783ff9", viewportInner: "m_f8f631dd", scrollbar: "m_c44ba933", thumb: "m_d8b5e363", corner: "m_21657268" };

// node_modules/@mantine/core/esm/components/ScrollArea/ScrollArea.mjs
"use client";
var defaultProps2 = {
  scrollHideDelay: 1000,
  type: "hover",
  scrollbars: "xy"
};
var varsResolver = createVarsResolver((_2, { scrollbarSize, overscrollBehavior }) => ({
  root: {
    "--scrollarea-scrollbar-size": rem(scrollbarSize),
    "--scrollarea-over-scroll-behavior": overscrollBehavior
  }
}));
var ScrollArea = factory((_props, ref) => {
  const props = useProps("ScrollArea", defaultProps2, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    scrollbarSize,
    vars,
    type,
    scrollHideDelay,
    viewportProps,
    viewportRef,
    onScrollPositionChange,
    children,
    offsetScrollbars,
    scrollbars,
    onBottomReached,
    onTopReached,
    overscrollBehavior,
    ...others
  } = props;
  const [scrollbarHovered, setScrollbarHovered] = import_react73.useState(false);
  const [verticalThumbVisible, setVerticalThumbVisible] = import_react73.useState(false);
  const [horizontalThumbVisible, setHorizontalThumbVisible] = import_react73.useState(false);
  const getStyles2 = useStyles({
    name: "ScrollArea",
    props,
    classes,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver
  });
  const localViewportRef = import_react73.useRef(null);
  const combinedViewportRef = useMergeRefs2([viewportRef, localViewportRef]);
  import_react73.useEffect(() => {
    if (!localViewportRef.current) {
      return;
    }
    if (offsetScrollbars !== "present") {
      return;
    }
    const element = localViewportRef.current;
    const observer = new ResizeObserver(() => {
      const { scrollHeight, clientHeight, scrollWidth, clientWidth } = element;
      setVerticalThumbVisible(scrollHeight > clientHeight);
      setHorizontalThumbVisible(scrollWidth > clientWidth);
    });
    observer.observe(element);
    return () => observer.disconnect();
  }, [localViewportRef, offsetScrollbars]);
  return /* @__PURE__ */ import_jsx_runtime47.jsxs(ScrollAreaRoot, {
    type: type === "never" ? "always" : type,
    scrollHideDelay,
    ref,
    scrollbars,
    ...getStyles2("root"),
    ...others,
    children: [
      /* @__PURE__ */ import_jsx_runtime47.jsx(ScrollAreaViewport, {
        ...viewportProps,
        ...getStyles2("viewport", { style: viewportProps?.style }),
        ref: combinedViewportRef,
        "data-offset-scrollbars": offsetScrollbars === true ? "xy" : offsetScrollbars || undefined,
        "data-scrollbars": scrollbars || undefined,
        "data-horizontal-hidden": offsetScrollbars === "present" && !horizontalThumbVisible ? "true" : undefined,
        "data-vertical-hidden": offsetScrollbars === "present" && !verticalThumbVisible ? "true" : undefined,
        onScroll: (e) => {
          viewportProps?.onScroll?.(e);
          onScrollPositionChange?.({ x: e.currentTarget.scrollLeft, y: e.currentTarget.scrollTop });
          const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;
          if (scrollTop - (scrollHeight - clientHeight) >= 0) {
            onBottomReached?.();
          }
          if (scrollTop === 0) {
            onTopReached?.();
          }
        },
        children
      }),
      (scrollbars === "xy" || scrollbars === "x") && /* @__PURE__ */ import_jsx_runtime47.jsx(ScrollAreaScrollbar, {
        ...getStyles2("scrollbar"),
        orientation: "horizontal",
        "data-hidden": type === "never" || offsetScrollbars === "present" && !horizontalThumbVisible ? true : undefined,
        forceMount: true,
        onMouseEnter: () => setScrollbarHovered(true),
        onMouseLeave: () => setScrollbarHovered(false),
        children: /* @__PURE__ */ import_jsx_runtime47.jsx(ScrollAreaThumb, { ...getStyles2("thumb") })
      }),
      (scrollbars === "xy" || scrollbars === "y") && /* @__PURE__ */ import_jsx_runtime47.jsx(ScrollAreaScrollbar, {
        ...getStyles2("scrollbar"),
        orientation: "vertical",
        "data-hidden": type === "never" || offsetScrollbars === "present" && !verticalThumbVisible ? true : undefined,
        forceMount: true,
        onMouseEnter: () => setScrollbarHovered(true),
        onMouseLeave: () => setScrollbarHovered(false),
        children: /* @__PURE__ */ import_jsx_runtime47.jsx(ScrollAreaThumb, { ...getStyles2("thumb") })
      }),
      /* @__PURE__ */ import_jsx_runtime47.jsx(ScrollAreaCorner, {
        ...getStyles2("corner"),
        "data-hovered": scrollbarHovered || undefined,
        "data-hidden": type === "never" || undefined
      })
    ]
  });
});
ScrollArea.displayName = "@mantine/core/ScrollArea";
var ScrollAreaAutosize = factory((props, ref) => {
  const {
    children,
    classNames,
    styles,
    scrollbarSize,
    scrollHideDelay,
    type,
    dir,
    offsetScrollbars,
    viewportRef,
    onScrollPositionChange,
    unstyled,
    variant,
    viewportProps,
    scrollbars,
    style: style2,
    vars,
    onBottomReached,
    onTopReached,
    ...others
  } = useProps("ScrollAreaAutosize", defaultProps2, props);
  return /* @__PURE__ */ import_jsx_runtime47.jsx(Box, { ...others, ref, style: [{ display: "flex", overflow: "auto" }, style2], children: /* @__PURE__ */ import_jsx_runtime47.jsx(Box, { style: { display: "flex", flexDirection: "column", flex: 1 }, children: /* @__PURE__ */ import_jsx_runtime47.jsx(ScrollArea, {
    classNames,
    styles,
    scrollHideDelay,
    scrollbarSize,
    type,
    dir,
    offsetScrollbars,
    viewportRef,
    onScrollPositionChange,
    unstyled,
    variant,
    viewportProps,
    vars,
    scrollbars,
    onBottomReached,
    onTopReached,
    children
  }) }) });
});
ScrollArea.classes = classes;
ScrollAreaAutosize.displayName = "@mantine/core/ScrollAreaAutosize";
ScrollAreaAutosize.classes = classes;
ScrollArea.Autosize = ScrollAreaAutosize;
// node_modules/@mantine/core/esm/components/UnstyledButton/UnstyledButton.mjs
var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
var import_react75 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/UnstyledButton/UnstyledButton.module.css.mjs
"use client";
var classes2 = { root: "m_87cf2631" };

// node_modules/@mantine/core/esm/components/UnstyledButton/UnstyledButton.mjs
"use client";
var defaultProps3 = {
  __staticSelector: "UnstyledButton"
};
var UnstyledButton = polymorphicFactory((_props, ref) => {
  const props = useProps("UnstyledButton", defaultProps3, _props);
  const {
    className,
    component = "button",
    __staticSelector,
    unstyled,
    classNames,
    styles,
    style: style2,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: __staticSelector,
    props,
    classes: classes2,
    className,
    style: style2,
    classNames,
    styles,
    unstyled
  });
  return /* @__PURE__ */ import_jsx_runtime48.jsx(Box, {
    ...getStyles2("root", { focusable: true }),
    component,
    ref,
    type: component === "button" ? "button" : undefined,
    ...others
  });
});
UnstyledButton.classes = classes2;
UnstyledButton.displayName = "@mantine/core/UnstyledButton";

// node_modules/@mantine/core/esm/components/VisuallyHidden/VisuallyHidden.mjs
var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
var import_react76 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/VisuallyHidden/VisuallyHidden.module.css.mjs
"use client";
var classes3 = { root: "m_515a97f8" };

// node_modules/@mantine/core/esm/components/VisuallyHidden/VisuallyHidden.mjs
"use client";
var defaultProps4 = {};
var VisuallyHidden = factory((_props, ref) => {
  const props = useProps("VisuallyHidden", defaultProps4, _props);
  const { classNames, className, style: style2, styles, unstyled, vars, ...others } = props;
  const getStyles2 = useStyles({
    name: "VisuallyHidden",
    classes: classes3,
    props,
    className,
    style: style2,
    classNames,
    styles,
    unstyled
  });
  return /* @__PURE__ */ import_jsx_runtime49.jsx(Box, { component: "span", ref, ...getStyles2("root"), ...others });
});
VisuallyHidden.classes = classes3;
VisuallyHidden.displayName = "@mantine/core/VisuallyHidden";

// node_modules/@mantine/core/esm/components/Paper/Paper.mjs
var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
var import_react77 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Paper/Paper.module.css.mjs
"use client";
var classes4 = { root: "m_1b7284a3" };

// node_modules/@mantine/core/esm/components/Paper/Paper.mjs
"use client";
var defaultProps5 = {};
var varsResolver2 = createVarsResolver((_2, { radius, shadow }) => ({
  root: {
    "--paper-radius": radius === undefined ? undefined : getRadius(radius),
    "--paper-shadow": getShadow(shadow)
  }
}));
var Paper = polymorphicFactory((_props, ref) => {
  const props = useProps("Paper", defaultProps5, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    withBorder,
    vars,
    radius,
    shadow,
    variant,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Paper",
    props,
    classes: classes4,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver2
  });
  return /* @__PURE__ */ import_jsx_runtime50.jsx(Box, {
    ref,
    mod: [{ "data-with-border": withBorder }, mod],
    ...getStyles2("root"),
    variant,
    ...others
  });
});
Paper.classes = classes4;
Paper.displayName = "@mantine/core/Paper";
// node_modules/@mantine/core/esm/components/Popover/Popover.mjs
var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
var import_react92 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Floating/get-floating-position/get-floating-position.mjs
"use client";
function getFloatingPosition(dir, position2) {
  if (dir === "rtl" && (position2.includes("right") || position2.includes("left"))) {
    const [side, placement] = position2.split("-");
    const flippedPosition = side === "right" ? "left" : "right";
    return placement === undefined ? flippedPosition : `${flippedPosition}-${placement}`;
  }
  return position2;
}

// node_modules/@mantine/core/esm/components/Floating/FloatingArrow/FloatingArrow.mjs
var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
var import_react78 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Floating/FloatingArrow/get-arrow-position-styles.mjs
"use client";
function horizontalSide(placement, arrowY, arrowOffset, arrowPosition) {
  if (placement === "center" || arrowPosition === "center") {
    return { top: arrowY };
  }
  if (placement === "end") {
    return { bottom: arrowOffset };
  }
  if (placement === "start") {
    return { top: arrowOffset };
  }
  return {};
}
function verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir) {
  if (placement === "center" || arrowPosition === "center") {
    return { left: arrowX };
  }
  if (placement === "end") {
    return { [dir === "ltr" ? "right" : "left"]: arrowOffset };
  }
  if (placement === "start") {
    return { [dir === "ltr" ? "left" : "right"]: arrowOffset };
  }
  return {};
}
var radiusByFloatingSide = {
  bottom: "borderTopLeftRadius",
  left: "borderTopRightRadius",
  right: "borderBottomLeftRadius",
  top: "borderBottomRightRadius"
};
function getArrowPositionStyles({
  position: position2,
  arrowSize,
  arrowOffset,
  arrowRadius,
  arrowPosition,
  arrowX,
  arrowY,
  dir
}) {
  const [side, placement = "center"] = position2.split("-");
  const baseStyles = {
    width: arrowSize,
    height: arrowSize,
    transform: "rotate(45deg)",
    position: "absolute",
    [radiusByFloatingSide[side]]: arrowRadius
  };
  const arrowPlacement = -arrowSize / 2;
  if (side === "left") {
    return {
      ...baseStyles,
      ...horizontalSide(placement, arrowY, arrowOffset, arrowPosition),
      right: arrowPlacement,
      borderLeftColor: "transparent",
      borderBottomColor: "transparent",
      clipPath: "polygon(100% 0, 0 0, 100% 100%)"
    };
  }
  if (side === "right") {
    return {
      ...baseStyles,
      ...horizontalSide(placement, arrowY, arrowOffset, arrowPosition),
      left: arrowPlacement,
      borderRightColor: "transparent",
      borderTopColor: "transparent",
      clipPath: "polygon(0 100%, 0 0, 100% 100%)"
    };
  }
  if (side === "top") {
    return {
      ...baseStyles,
      ...verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir),
      bottom: arrowPlacement,
      borderTopColor: "transparent",
      borderLeftColor: "transparent",
      clipPath: "polygon(0 100%, 100% 100%, 100% 0)"
    };
  }
  if (side === "bottom") {
    return {
      ...baseStyles,
      ...verticalSide(placement, arrowX, arrowOffset, arrowPosition, dir),
      top: arrowPlacement,
      borderBottomColor: "transparent",
      borderRightColor: "transparent",
      clipPath: "polygon(0 100%, 0 0, 100% 0)"
    };
  }
  return {};
}

// node_modules/@mantine/core/esm/components/Floating/FloatingArrow/FloatingArrow.mjs
"use client";
var FloatingArrow = import_react78.forwardRef(({
  position: position2,
  arrowSize,
  arrowOffset,
  arrowRadius,
  arrowPosition,
  visible: visible2,
  arrowX,
  arrowY,
  style: style2,
  ...others
}, ref) => {
  const { dir } = useDirection();
  if (!visible2) {
    return null;
  }
  return /* @__PURE__ */ import_jsx_runtime51.jsx("div", {
    ...others,
    ref,
    style: {
      ...style2,
      ...getArrowPositionStyles({
        position: position2,
        arrowSize,
        arrowOffset,
        arrowRadius,
        arrowPosition,
        dir,
        arrowX,
        arrowY
      })
    }
  });
});
FloatingArrow.displayName = "@mantine/core/FloatingArrow";

// node_modules/@mantine/core/esm/components/Overlay/Overlay.mjs
var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
var import_react79 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Overlay/Overlay.module.css.mjs
"use client";
var classes5 = { root: "m_9814e45f" };

// node_modules/@mantine/core/esm/components/Overlay/Overlay.mjs
"use client";
var defaultProps6 = {
  zIndex: getDefaultZIndex("modal")
};
var varsResolver3 = createVarsResolver((_2, { gradient, color, backgroundOpacity, blur, radius, zIndex }) => ({
  root: {
    "--overlay-bg": gradient || (color !== undefined || backgroundOpacity !== undefined) && rgba(color || "#000", backgroundOpacity ?? 0.6) || undefined,
    "--overlay-filter": blur ? `blur(${rem(blur)})` : undefined,
    "--overlay-radius": radius === undefined ? undefined : getRadius(radius),
    "--overlay-z-index": zIndex?.toString()
  }
}));
var Overlay = polymorphicFactory((_props, ref) => {
  const props = useProps("Overlay", defaultProps6, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    fixed,
    center,
    children,
    radius,
    zIndex,
    gradient,
    blur,
    color,
    backgroundOpacity,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Overlay",
    props,
    classes: classes5,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver3
  });
  return /* @__PURE__ */ import_jsx_runtime52.jsx(Box, { ref, ...getStyles2("root"), mod: [{ center, fixed }, mod], ...others, children });
});
Overlay.classes = classes5;
Overlay.displayName = "@mantine/core/Overlay";

// node_modules/@mantine/core/esm/components/Portal/Portal.mjs
var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
var import_react80 = __toESM(require_react(), 1);
var import_react_dom3 = __toESM(require_react_dom(), 1);
"use client";
function createPortalNode(props) {
  const node2 = document.createElement("div");
  node2.setAttribute("data-portal", "true");
  typeof props.className === "string" && node2.classList.add(...props.className.split(" ").filter(Boolean));
  typeof props.style === "object" && Object.assign(node2.style, props.style);
  typeof props.id === "string" && node2.setAttribute("id", props.id);
  return node2;
}
function getTargetNode({
  target,
  reuseTargetNode,
  ...others
}) {
  if (target) {
    if (typeof target === "string") {
      return document.querySelector(target) || createPortalNode(others);
    }
    return target;
  }
  if (reuseTargetNode) {
    const existingNode = document.querySelector("[data-mantine-shared-portal-node]");
    if (existingNode) {
      return existingNode;
    }
    const node2 = createPortalNode(others);
    node2.setAttribute("data-mantine-shared-portal-node", "true");
    document.body.appendChild(node2);
    return node2;
  }
  return createPortalNode(others);
}
var defaultProps7 = {};
var Portal = factory((props, ref) => {
  const { children, target, reuseTargetNode, ...others } = useProps("Portal", defaultProps7, props);
  const [mounted, setMounted] = import_react80.useState(false);
  const nodeRef = import_react80.useRef(null);
  useIsomorphicEffect(() => {
    setMounted(true);
    nodeRef.current = getTargetNode({ target, reuseTargetNode, ...others });
    assignRef2(ref, nodeRef.current);
    if (!target && !reuseTargetNode && nodeRef.current) {
      document.body.appendChild(nodeRef.current);
    }
    return () => {
      if (!target && !reuseTargetNode && nodeRef.current) {
        document.body.removeChild(nodeRef.current);
      }
    };
  }, [target]);
  if (!mounted || !nodeRef.current) {
    return null;
  }
  return import_react_dom3.createPortal(/* @__PURE__ */ import_jsx_runtime53.jsx(import_jsx_runtime53.Fragment, { children }), nodeRef.current);
});
Portal.displayName = "@mantine/core/Portal";

// node_modules/@mantine/core/esm/components/Portal/OptionalPortal.mjs
var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
var import_react81 = __toESM(require_react(), 1);
"use client";
var OptionalPortal = factory(({ withinPortal = true, children, ...others }, ref) => {
  const env2 = useMantineEnv();
  if (env2 === "test" || !withinPortal) {
    return /* @__PURE__ */ import_jsx_runtime54.jsx(import_jsx_runtime54.Fragment, { children });
  }
  return /* @__PURE__ */ import_jsx_runtime54.jsx(Portal, { ref, ...others, children });
});
OptionalPortal.displayName = "@mantine/core/OptionalPortal";

// node_modules/@mantine/core/esm/components/Transition/Transition.mjs
var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
var import_react83 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Transition/transitions.mjs
"use client";
var popIn = (from2) => ({
  in: { opacity: 1, transform: "scale(1)" },
  out: { opacity: 0, transform: `scale(.9) translateY(${from2 === "bottom" ? 10 : -10}px)` },
  transitionProperty: "transform, opacity"
});
var transitions = {
  fade: {
    in: { opacity: 1 },
    out: { opacity: 0 },
    transitionProperty: "opacity"
  },
  "fade-up": {
    in: { opacity: 1, transform: "translateY(0)" },
    out: { opacity: 0, transform: "translateY(30px)" },
    transitionProperty: "opacity, transform"
  },
  "fade-down": {
    in: { opacity: 1, transform: "translateY(0)" },
    out: { opacity: 0, transform: "translateY(-30px)" },
    transitionProperty: "opacity, transform"
  },
  "fade-left": {
    in: { opacity: 1, transform: "translateX(0)" },
    out: { opacity: 0, transform: "translateX(30px)" },
    transitionProperty: "opacity, transform"
  },
  "fade-right": {
    in: { opacity: 1, transform: "translateX(0)" },
    out: { opacity: 0, transform: "translateX(-30px)" },
    transitionProperty: "opacity, transform"
  },
  scale: {
    in: { opacity: 1, transform: "scale(1)" },
    out: { opacity: 0, transform: "scale(0)" },
    common: { transformOrigin: "top" },
    transitionProperty: "transform, opacity"
  },
  "scale-y": {
    in: { opacity: 1, transform: "scaleY(1)" },
    out: { opacity: 0, transform: "scaleY(0)" },
    common: { transformOrigin: "top" },
    transitionProperty: "transform, opacity"
  },
  "scale-x": {
    in: { opacity: 1, transform: "scaleX(1)" },
    out: { opacity: 0, transform: "scaleX(0)" },
    common: { transformOrigin: "left" },
    transitionProperty: "transform, opacity"
  },
  "skew-up": {
    in: { opacity: 1, transform: "translateY(0) skew(0deg, 0deg)" },
    out: { opacity: 0, transform: "translateY(-20px) skew(-10deg, -5deg)" },
    common: { transformOrigin: "top" },
    transitionProperty: "transform, opacity"
  },
  "skew-down": {
    in: { opacity: 1, transform: "translateY(0) skew(0deg, 0deg)" },
    out: { opacity: 0, transform: "translateY(20px) skew(-10deg, -5deg)" },
    common: { transformOrigin: "bottom" },
    transitionProperty: "transform, opacity"
  },
  "rotate-left": {
    in: { opacity: 1, transform: "translateY(0) rotate(0deg)" },
    out: { opacity: 0, transform: "translateY(20px) rotate(-5deg)" },
    common: { transformOrigin: "bottom" },
    transitionProperty: "transform, opacity"
  },
  "rotate-right": {
    in: { opacity: 1, transform: "translateY(0) rotate(0deg)" },
    out: { opacity: 0, transform: "translateY(20px) rotate(5deg)" },
    common: { transformOrigin: "top" },
    transitionProperty: "transform, opacity"
  },
  "slide-down": {
    in: { opacity: 1, transform: "translateY(0)" },
    out: { opacity: 0, transform: "translateY(-100%)" },
    common: { transformOrigin: "top" },
    transitionProperty: "transform, opacity"
  },
  "slide-up": {
    in: { opacity: 1, transform: "translateY(0)" },
    out: { opacity: 0, transform: "translateY(100%)" },
    common: { transformOrigin: "bottom" },
    transitionProperty: "transform, opacity"
  },
  "slide-left": {
    in: { opacity: 1, transform: "translateX(0)" },
    out: { opacity: 0, transform: "translateX(100%)" },
    common: { transformOrigin: "left" },
    transitionProperty: "transform, opacity"
  },
  "slide-right": {
    in: { opacity: 1, transform: "translateX(0)" },
    out: { opacity: 0, transform: "translateX(-100%)" },
    common: { transformOrigin: "right" },
    transitionProperty: "transform, opacity"
  },
  pop: {
    ...popIn("bottom"),
    common: { transformOrigin: "center center" }
  },
  "pop-bottom-left": {
    ...popIn("bottom"),
    common: { transformOrigin: "bottom left" }
  },
  "pop-bottom-right": {
    ...popIn("bottom"),
    common: { transformOrigin: "bottom right" }
  },
  "pop-top-left": {
    ...popIn("top"),
    common: { transformOrigin: "top left" }
  },
  "pop-top-right": {
    ...popIn("top"),
    common: { transformOrigin: "top right" }
  }
};

// node_modules/@mantine/core/esm/components/Transition/get-transition-styles/get-transition-styles.mjs
"use client";
var transitionStatuses = {
  entering: "in",
  entered: "in",
  exiting: "out",
  exited: "out",
  "pre-exiting": "out",
  "pre-entering": "out"
};
function getTransitionStyles({
  transition,
  state,
  duration,
  timingFunction
}) {
  const shared = {
    WebkitBackfaceVisibility: "hidden",
    willChange: "transform, opacity",
    transitionDuration: `${duration}ms`,
    transitionTimingFunction: timingFunction
  };
  if (typeof transition === "string") {
    if (!(transition in transitions)) {
      return {};
    }
    return {
      transitionProperty: transitions[transition].transitionProperty,
      ...shared,
      ...transitions[transition].common,
      ...transitions[transition][transitionStatuses[state]]
    };
  }
  return {
    transitionProperty: transition.transitionProperty,
    ...shared,
    ...transition.common,
    ...transition[transitionStatuses[state]]
  };
}

// node_modules/@mantine/core/esm/components/Transition/use-transition.mjs
var import_react82 = __toESM(require_react(), 1);
var import_react_dom4 = __toESM(require_react_dom(), 1);
var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
"use client";
function useTransition({
  duration,
  exitDuration,
  timingFunction,
  mounted,
  onEnter,
  onExit,
  onEntered,
  onExited,
  enterDelay,
  exitDelay
}) {
  const theme = useMantineTheme();
  const shouldReduceMotion = useReducedMotion();
  const reduceMotion = theme.respectReducedMotion ? shouldReduceMotion : false;
  const [transitionDuration, setTransitionDuration] = import_react82.useState(reduceMotion ? 0 : duration);
  const [transitionStatus, setStatus] = import_react82.useState(mounted ? "entered" : "exited");
  const transitionTimeoutRef = import_react82.useRef(-1);
  const delayTimeoutRef = import_react82.useRef(-1);
  const rafRef = import_react82.useRef(-1);
  const handleStateChange = (shouldMount) => {
    const preHandler = shouldMount ? onEnter : onExit;
    const handler = shouldMount ? onEntered : onExited;
    window.clearTimeout(transitionTimeoutRef.current);
    const newTransitionDuration = reduceMotion ? 0 : shouldMount ? duration : exitDuration;
    setTransitionDuration(newTransitionDuration);
    if (newTransitionDuration === 0) {
      typeof preHandler === "function" && preHandler();
      typeof handler === "function" && handler();
      setStatus(shouldMount ? "entered" : "exited");
    } else {
      rafRef.current = requestAnimationFrame(() => {
        import_react_dom4.default.flushSync(() => {
          setStatus(shouldMount ? "pre-entering" : "pre-exiting");
        });
        rafRef.current = requestAnimationFrame(() => {
          typeof preHandler === "function" && preHandler();
          setStatus(shouldMount ? "entering" : "exiting");
          transitionTimeoutRef.current = window.setTimeout(() => {
            typeof handler === "function" && handler();
            setStatus(shouldMount ? "entered" : "exited");
          }, newTransitionDuration);
        });
      });
    }
  };
  const handleTransitionWithDelay = (shouldMount) => {
    window.clearTimeout(delayTimeoutRef.current);
    const delay = shouldMount ? enterDelay : exitDelay;
    if (typeof delay !== "number") {
      handleStateChange(shouldMount);
      return;
    }
    delayTimeoutRef.current = window.setTimeout(() => {
      handleStateChange(shouldMount);
    }, shouldMount ? enterDelay : exitDelay);
  };
  useDidUpdate(() => {
    handleTransitionWithDelay(mounted);
  }, [mounted]);
  import_react82.useEffect(() => () => {
    window.clearTimeout(transitionTimeoutRef.current);
    cancelAnimationFrame(rafRef.current);
  }, []);
  return {
    transitionDuration,
    transitionStatus,
    transitionTimingFunction: timingFunction || "ease"
  };
}

// node_modules/@mantine/core/esm/components/Transition/Transition.mjs
"use client";
function Transition({
  keepMounted,
  transition = "fade",
  duration = 250,
  exitDuration = duration,
  mounted,
  children,
  timingFunction = "ease",
  onExit,
  onEntered,
  onEnter,
  onExited,
  enterDelay,
  exitDelay
}) {
  const env2 = useMantineEnv();
  const { transitionDuration, transitionStatus, transitionTimingFunction } = useTransition({
    mounted,
    exitDuration,
    duration,
    timingFunction,
    onExit,
    onEntered,
    onEnter,
    onExited,
    enterDelay,
    exitDelay
  });
  if (transitionDuration === 0 || env2 === "test") {
    return mounted ? /* @__PURE__ */ import_jsx_runtime56.jsx(import_jsx_runtime56.Fragment, { children: children({}) }) : keepMounted ? children({ display: "none" }) : null;
  }
  return transitionStatus === "exited" ? keepMounted ? children({ display: "none" }) : null : /* @__PURE__ */ import_jsx_runtime56.jsx(import_jsx_runtime56.Fragment, { children: children(getTransitionStyles({
    transition,
    duration: transitionDuration,
    state: transitionStatus,
    timingFunction: transitionTimingFunction
  })) });
}
Transition.displayName = "@mantine/core/Transition";

// node_modules/@mantine/core/esm/components/Popover/Popover.context.mjs
var import_react84 = __toESM(require_react(), 1);
var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
"use client";
var [PopoverContextProvider, usePopoverContext] = createSafeContext("Popover component was not found in the tree");

// node_modules/@mantine/core/esm/components/Popover/PopoverDropdown/PopoverDropdown.mjs
var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
var import_react86 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/FocusTrap/FocusTrap.mjs
var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
var import_react85 = __toESM(require_react(), 1);
"use client";
function FocusTrap({
  children,
  active = true,
  refProp = "ref",
  innerRef
}) {
  const focusTrapRef = useFocusTrap(active);
  const ref = useMergedRef(focusTrapRef, innerRef);
  if (!isElement(children)) {
    return children;
  }
  return import_react85.cloneElement(children, { [refProp]: ref });
}
function FocusTrapInitialFocus(props) {
  return /* @__PURE__ */ import_jsx_runtime58.jsx(VisuallyHidden, { tabIndex: -1, "data-autofocus": true, ...props });
}
FocusTrap.displayName = "@mantine/core/FocusTrap";
FocusTrapInitialFocus.displayName = "@mantine/core/FocusTrapInitialFocus";
FocusTrap.InitialFocus = FocusTrapInitialFocus;

// node_modules/@mantine/core/esm/components/Popover/Popover.module.css.mjs
"use client";
var classes6 = { dropdown: "m_38a85659", arrow: "m_a31dc6c1", overlay: "m_3d7bc908" };

// node_modules/@mantine/core/esm/components/Popover/PopoverDropdown/PopoverDropdown.mjs
"use client";
var defaultProps8 = {};
var PopoverDropdown = factory((_props, ref) => {
  const props = useProps("PopoverDropdown", defaultProps8, _props);
  const {
    className,
    style: style2,
    vars,
    children,
    onKeyDownCapture,
    variant,
    classNames,
    styles,
    ...others
  } = props;
  const ctx = usePopoverContext();
  const returnFocus = useFocusReturn({
    opened: ctx.opened,
    shouldReturnFocus: ctx.returnFocus
  });
  const accessibleProps = ctx.withRoles ? {
    "aria-labelledby": ctx.getTargetId(),
    id: ctx.getDropdownId(),
    role: "dialog",
    tabIndex: -1
  } : {};
  const mergedRef = useMergedRef(ref, ctx.floating);
  if (ctx.disabled) {
    return null;
  }
  return /* @__PURE__ */ import_jsx_runtime59.jsx(OptionalPortal, { ...ctx.portalProps, withinPortal: ctx.withinPortal, children: /* @__PURE__ */ import_jsx_runtime59.jsx(Transition, {
    mounted: ctx.opened,
    ...ctx.transitionProps,
    transition: ctx.transitionProps?.transition || "fade",
    duration: ctx.transitionProps?.duration ?? 150,
    keepMounted: ctx.keepMounted,
    exitDuration: typeof ctx.transitionProps?.exitDuration === "number" ? ctx.transitionProps.exitDuration : ctx.transitionProps?.duration,
    children: (transitionStyles) => /* @__PURE__ */ import_jsx_runtime59.jsx(FocusTrap, { active: ctx.trapFocus && ctx.opened, innerRef: mergedRef, children: /* @__PURE__ */ import_jsx_runtime59.jsxs(Box, {
      ...accessibleProps,
      ...others,
      variant,
      onKeyDownCapture: closeOnEscape(() => {
        ctx.onClose?.();
        ctx.onDismiss?.();
      }, {
        active: ctx.closeOnEscape,
        onTrigger: returnFocus,
        onKeyDown: onKeyDownCapture
      }),
      "data-position": ctx.placement,
      "data-fixed": ctx.floatingStrategy === "fixed" || undefined,
      ...ctx.getStyles("dropdown", {
        className,
        props,
        classNames,
        styles,
        style: [
          {
            ...transitionStyles,
            zIndex: ctx.zIndex,
            top: ctx.y ?? 0,
            left: ctx.x ?? 0,
            width: ctx.width === "target" ? undefined : rem(ctx.width)
          },
          ctx.resolvedStyles.dropdown,
          styles?.dropdown,
          style2
        ]
      }),
      children: [
        children,
        /* @__PURE__ */ import_jsx_runtime59.jsx(FloatingArrow, {
          ref: ctx.arrowRef,
          arrowX: ctx.arrowX,
          arrowY: ctx.arrowY,
          visible: ctx.withArrow,
          position: ctx.placement,
          arrowSize: ctx.arrowSize,
          arrowRadius: ctx.arrowRadius,
          arrowOffset: ctx.arrowOffset,
          arrowPosition: ctx.arrowPosition,
          ...ctx.getStyles("arrow", {
            props,
            classNames,
            styles
          })
        })
      ]
    }) })
  }) });
});
PopoverDropdown.classes = classes6;
PopoverDropdown.displayName = "@mantine/core/PopoverDropdown";

// node_modules/@mantine/core/esm/components/Popover/PopoverTarget/PopoverTarget.mjs
var import_react87 = __toESM(require_react(), 1);
var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
"use client";
var defaultProps9 = {
  refProp: "ref",
  popupType: "dialog"
};
var PopoverTarget = factory((props, ref) => {
  const { children, refProp, popupType, ...others } = useProps("PopoverTarget", defaultProps9, props);
  if (!isElement(children)) {
    throw new Error("Popover.Target component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported");
  }
  const forwardedProps = others;
  const ctx = usePopoverContext();
  const targetRef = useMergedRef(ctx.reference, getRefProp(children), ref);
  const accessibleProps = ctx.withRoles ? {
    "aria-haspopup": popupType,
    "aria-expanded": ctx.opened,
    "aria-controls": ctx.getDropdownId(),
    id: ctx.getTargetId()
  } : {};
  return import_react87.cloneElement(children, {
    ...forwardedProps,
    ...accessibleProps,
    ...ctx.targetProps,
    className: clsx_default(ctx.targetProps.className, forwardedProps.className, children.props.className),
    [refProp]: targetRef,
    ...!ctx.controlled ? { onClick: ctx.onToggle } : null
  });
});
PopoverTarget.displayName = "@mantine/core/PopoverTarget";

// node_modules/@mantine/core/esm/components/Popover/use-popover.mjs
var import_react90 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Floating/use-floating-auto-update.mjs
var import_react88 = __toESM(require_react(), 1);
"use client";
function useFloatingAutoUpdate({
  opened,
  floating,
  position: position2,
  positionDependencies
}) {
  const [delayedUpdate, setDelayedUpdate] = import_react88.useState(0);
  import_react88.useEffect(() => {
    if (floating.refs.reference.current && floating.refs.floating.current && opened) {
      return autoUpdate(floating.refs.reference.current, floating.refs.floating.current, floating.update);
    }
    return;
  }, [
    floating.refs.reference.current,
    floating.refs.floating.current,
    opened,
    delayedUpdate,
    position2
  ]);
  useDidUpdate(() => {
    floating.update();
  }, positionDependencies);
  useDidUpdate(() => {
    setDelayedUpdate((c2) => c2 + 1);
  }, [opened]);
}

// node_modules/@mantine/core/esm/components/Popover/use-popover.mjs
"use client";
function getDefaultMiddlewares(middlewares) {
  if (middlewares === undefined) {
    return { shift: true, flip: true };
  }
  const result = { ...middlewares };
  if (middlewares.shift === undefined) {
    result.shift = true;
  }
  if (middlewares.flip === undefined) {
    result.flip = true;
  }
  return result;
}
function getPopoverMiddlewares(options, getFloating) {
  const middlewaresOptions = getDefaultMiddlewares(options.middlewares);
  const middlewares = [offset3(options.offset)];
  if (middlewaresOptions.shift) {
    middlewares.push(shift3(typeof middlewaresOptions.shift === "boolean" ? { limiter: limitShift3(), padding: 5 } : { limiter: limitShift3(), padding: 5, ...middlewaresOptions.shift }));
  }
  if (middlewaresOptions.flip) {
    middlewares.push(typeof middlewaresOptions.flip === "boolean" ? flip3() : flip3(middlewaresOptions.flip));
  }
  if (middlewaresOptions.inline) {
    middlewares.push(typeof middlewaresOptions.inline === "boolean" ? inline3() : inline3(middlewaresOptions.inline));
  }
  middlewares.push(arrow3({ element: options.arrowRef, padding: options.arrowOffset }));
  if (middlewaresOptions.size || options.width === "target") {
    middlewares.push(size3({
      ...typeof middlewaresOptions.size === "boolean" ? {} : middlewaresOptions.size,
      apply({ rects, availableWidth, availableHeight, ...rest }) {
        const floating = getFloating();
        const styles = floating.refs.floating.current?.style ?? {};
        if (middlewaresOptions.size) {
          if (typeof middlewaresOptions.size === "object" && !!middlewaresOptions.size.apply) {
            middlewaresOptions.size.apply({ rects, availableWidth, availableHeight, ...rest });
          } else {
            Object.assign(styles, {
              maxWidth: `${availableWidth}px`,
              maxHeight: `${availableHeight}px`
            });
          }
        }
        if (options.width === "target") {
          Object.assign(styles, {
            width: `${rects.reference.width}px`
          });
        }
      }
    }));
  }
  return middlewares;
}
function usePopover(options) {
  const [_opened, setOpened] = useUncontrolled({
    value: options.opened,
    defaultValue: options.defaultOpened,
    finalValue: false,
    onChange: options.onChange
  });
  const previouslyOpened = import_react90.useRef(_opened);
  const onClose = () => {
    if (_opened) {
      setOpened(false);
    }
  };
  const onToggle = () => setOpened(!_opened);
  const floating = useFloating2({
    strategy: options.strategy,
    placement: options.position,
    middleware: getPopoverMiddlewares(options, () => floating)
  });
  useFloatingAutoUpdate({
    opened: _opened,
    position: options.position,
    positionDependencies: options.positionDependencies || [],
    floating
  });
  useDidUpdate(() => {
    options.onPositionChange?.(floating.placement);
  }, [floating.placement]);
  useDidUpdate(() => {
    if (_opened !== previouslyOpened.current) {
      if (!_opened) {
        options.onClose?.();
      } else {
        options.onOpen?.();
      }
    }
    previouslyOpened.current = _opened;
  }, [_opened, options.onClose, options.onOpen]);
  return {
    floating,
    controlled: typeof options.opened === "boolean",
    opened: _opened,
    onClose,
    onToggle
  };
}

// node_modules/@mantine/core/esm/components/Popover/Popover.mjs
"use client";
var defaultProps10 = {
  position: "bottom",
  offset: 8,
  positionDependencies: [],
  transitionProps: { transition: "fade", duration: 150 },
  middlewares: { flip: true, shift: true, inline: false },
  arrowSize: 7,
  arrowOffset: 5,
  arrowRadius: 0,
  arrowPosition: "side",
  closeOnClickOutside: true,
  withinPortal: true,
  closeOnEscape: true,
  trapFocus: false,
  withRoles: true,
  returnFocus: false,
  withOverlay: false,
  clickOutsideEvents: ["mousedown", "touchstart"],
  zIndex: getDefaultZIndex("popover"),
  __staticSelector: "Popover",
  width: "max-content"
};
var varsResolver4 = createVarsResolver((_2, { radius, shadow }) => ({
  dropdown: {
    "--popover-radius": radius === undefined ? undefined : getRadius(radius),
    "--popover-shadow": getShadow(shadow)
  }
}));
function Popover(_props) {
  const props = useProps("Popover", defaultProps10, _props);
  const {
    children,
    position: position2,
    offset: offset4,
    onPositionChange,
    positionDependencies,
    opened,
    transitionProps,
    onExitTransitionEnd,
    onEnterTransitionEnd,
    width,
    middlewares,
    withArrow,
    arrowSize,
    arrowOffset,
    arrowRadius,
    arrowPosition,
    unstyled,
    classNames,
    styles,
    closeOnClickOutside,
    withinPortal,
    portalProps,
    closeOnEscape: closeOnEscape2,
    clickOutsideEvents,
    trapFocus,
    onClose,
    onDismiss,
    onOpen,
    onChange,
    zIndex,
    radius,
    shadow,
    id,
    defaultOpened,
    __staticSelector,
    withRoles,
    disabled,
    returnFocus,
    variant,
    keepMounted,
    vars,
    floatingStrategy,
    withOverlay,
    overlayProps,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: __staticSelector,
    props,
    classes: classes6,
    classNames,
    styles,
    unstyled,
    rootSelector: "dropdown",
    vars,
    varsResolver: varsResolver4
  });
  const { resolvedStyles } = useResolvedStylesApi({ classNames, styles, props });
  const arrowRef = import_react92.useRef(null);
  const [targetNode, setTargetNode] = import_react92.useState(null);
  const [dropdownNode, setDropdownNode] = import_react92.useState(null);
  const { dir } = useDirection();
  const uid = useId(id);
  const popover = usePopover({
    middlewares,
    width,
    position: getFloatingPosition(dir, position2),
    offset: typeof offset4 === "number" ? offset4 + (withArrow ? arrowSize / 2 : 0) : offset4,
    arrowRef,
    arrowOffset,
    onPositionChange,
    positionDependencies,
    opened,
    defaultOpened,
    onChange,
    onOpen,
    onClose,
    onDismiss,
    strategy: floatingStrategy
  });
  useClickOutside(() => {
    if (closeOnClickOutside) {
      popover.onClose();
      onDismiss?.();
    }
  }, clickOutsideEvents, [targetNode, dropdownNode]);
  const reference = import_react92.useCallback((node2) => {
    setTargetNode(node2);
    popover.floating.refs.setReference(node2);
  }, [popover.floating.refs.setReference]);
  const floating = import_react92.useCallback((node2) => {
    setDropdownNode(node2);
    popover.floating.refs.setFloating(node2);
  }, [popover.floating.refs.setFloating]);
  const onExited = import_react92.useCallback(() => {
    transitionProps?.onExited?.();
    onExitTransitionEnd?.();
  }, [transitionProps?.onExited, onExitTransitionEnd]);
  const onEntered = import_react92.useCallback(() => {
    transitionProps?.onEntered?.();
    onEnterTransitionEnd?.();
  }, [transitionProps?.onEntered, onEnterTransitionEnd]);
  return /* @__PURE__ */ import_jsx_runtime61.jsxs(PopoverContextProvider, {
    value: {
      returnFocus,
      disabled,
      controlled: popover.controlled,
      reference,
      floating,
      x: popover.floating.x,
      y: popover.floating.y,
      arrowX: popover.floating?.middlewareData?.arrow?.x,
      arrowY: popover.floating?.middlewareData?.arrow?.y,
      opened: popover.opened,
      arrowRef,
      transitionProps: { ...transitionProps, onExited, onEntered },
      width,
      withArrow,
      arrowSize,
      arrowOffset,
      arrowRadius,
      arrowPosition,
      placement: popover.floating.placement,
      trapFocus,
      withinPortal,
      portalProps,
      zIndex,
      radius,
      shadow,
      closeOnEscape: closeOnEscape2,
      onDismiss,
      onClose: popover.onClose,
      onToggle: popover.onToggle,
      getTargetId: () => `${uid}-target`,
      getDropdownId: () => `${uid}-dropdown`,
      withRoles,
      targetProps: others,
      __staticSelector,
      classNames,
      styles,
      unstyled,
      variant,
      keepMounted,
      getStyles: getStyles2,
      resolvedStyles,
      floatingStrategy
    },
    children: [
      children,
      withOverlay && /* @__PURE__ */ import_jsx_runtime61.jsx(Transition, {
        transition: "fade",
        mounted: popover.opened,
        duration: transitionProps?.duration || 250,
        exitDuration: transitionProps?.exitDuration || 250,
        children: (transitionStyles) => /* @__PURE__ */ import_jsx_runtime61.jsx(OptionalPortal, { withinPortal, children: /* @__PURE__ */ import_jsx_runtime61.jsx(Overlay, {
          ...overlayProps,
          ...getStyles2("overlay", {
            className: overlayProps?.className,
            style: [transitionStyles, overlayProps?.style]
          })
        }) })
      })
    ]
  });
}
Popover.Target = PopoverTarget;
Popover.Dropdown = PopoverDropdown;
Popover.displayName = "@mantine/core/Popover";
Popover.extend = (input) => input;

// node_modules/@mantine/core/esm/components/ActionIcon/ActionIcon.mjs
var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);
var import_react99 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Loader/Loader.mjs
var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
var import_react96 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Loader/loaders/Bars.mjs
var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
var import_react93 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Loader/Loader.module.css.mjs
"use client";
var classes7 = { root: "m_5ae2e3c", barsLoader: "m_7a2bd4cd", bar: "m_870bb79", "bars-loader-animation": "m_5d2b3b9d", dotsLoader: "m_4e3f22d7", dot: "m_870c4af", "loader-dots-animation": "m_aac34a1", ovalLoader: "m_b34414df", "oval-loader-animation": "m_f8e89c4b" };

// node_modules/@mantine/core/esm/components/Loader/loaders/Bars.mjs
"use client";
var Bars = import_react93.forwardRef(({ className, ...others }, ref) => /* @__PURE__ */ import_jsx_runtime62.jsxs(Box, { component: "span", className: clsx_default(classes7.barsLoader, className), ...others, ref, children: [
  /* @__PURE__ */ import_jsx_runtime62.jsx("span", { className: classes7.bar }),
  /* @__PURE__ */ import_jsx_runtime62.jsx("span", { className: classes7.bar }),
  /* @__PURE__ */ import_jsx_runtime62.jsx("span", { className: classes7.bar })
] }));
Bars.displayName = "@mantine/core/Bars";

// node_modules/@mantine/core/esm/components/Loader/loaders/Dots.mjs
var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
var import_react94 = __toESM(require_react(), 1);
"use client";
var Dots = import_react94.forwardRef(({ className, ...others }, ref) => /* @__PURE__ */ import_jsx_runtime63.jsxs(Box, { component: "span", className: clsx_default(classes7.dotsLoader, className), ...others, ref, children: [
  /* @__PURE__ */ import_jsx_runtime63.jsx("span", { className: classes7.dot }),
  /* @__PURE__ */ import_jsx_runtime63.jsx("span", { className: classes7.dot }),
  /* @__PURE__ */ import_jsx_runtime63.jsx("span", { className: classes7.dot })
] }));
Dots.displayName = "@mantine/core/Dots";

// node_modules/@mantine/core/esm/components/Loader/loaders/Oval.mjs
var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
var import_react95 = __toESM(require_react(), 1);
"use client";
var Oval = import_react95.forwardRef(({ className, ...others }, ref) => /* @__PURE__ */ import_jsx_runtime64.jsx(Box, { component: "span", className: clsx_default(classes7.ovalLoader, className), ...others, ref }));
Oval.displayName = "@mantine/core/Oval";

// node_modules/@mantine/core/esm/components/Loader/Loader.mjs
"use client";
var defaultLoaders = {
  bars: Bars,
  oval: Oval,
  dots: Dots
};
var defaultProps11 = {
  loaders: defaultLoaders,
  type: "oval"
};
var varsResolver5 = createVarsResolver((theme, { size: size4, color }) => ({
  root: {
    "--loader-size": getSize(size4, "loader-size"),
    "--loader-color": color ? getThemeColor(color, theme) : undefined
  }
}));
var Loader = factory((_props, ref) => {
  const props = useProps("Loader", defaultProps11, _props);
  const {
    size: size4,
    color,
    type,
    vars,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    loaders,
    variant,
    children,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Loader",
    props,
    classes: classes7,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver5
  });
  if (children) {
    return /* @__PURE__ */ import_jsx_runtime65.jsx(Box, { ...getStyles2("root"), ref, ...others, children });
  }
  return /* @__PURE__ */ import_jsx_runtime65.jsx(Box, {
    ...getStyles2("root"),
    ref,
    component: loaders[type],
    variant,
    size: size4,
    ...others
  });
});
Loader.defaultLoaders = defaultLoaders;
Loader.classes = classes7;
Loader.displayName = "@mantine/core/Loader";

// node_modules/@mantine/core/esm/components/ActionIcon/ActionIconGroup/ActionIconGroup.mjs
var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);
var import_react97 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/ActionIcon/ActionIcon.module.css.mjs
"use client";
var classes8 = { root: "m_8d3f4000", icon: "m_8d3afb97", loader: "m_302b9fb1", group: "m_1a0f1b21", groupSection: "m_437b6484" };

// node_modules/@mantine/core/esm/components/ActionIcon/ActionIconGroup/ActionIconGroup.mjs
"use client";
var defaultProps12 = {
  orientation: "horizontal"
};
var varsResolver6 = createVarsResolver((_2, { borderWidth }) => ({
  group: { "--ai-border-width": rem(borderWidth) }
}));
var ActionIconGroup = factory((_props, ref) => {
  const props = useProps("ActionIconGroup", defaultProps12, _props);
  const {
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    orientation,
    vars,
    borderWidth,
    variant,
    mod,
    ...others
  } = useProps("ActionIconGroup", defaultProps12, _props);
  const getStyles2 = useStyles({
    name: "ActionIconGroup",
    props,
    classes: classes8,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver6,
    rootSelector: "group"
  });
  return /* @__PURE__ */ import_jsx_runtime66.jsx(Box, {
    ...getStyles2("group"),
    ref,
    variant,
    mod: [{ "data-orientation": orientation }, mod],
    role: "group",
    ...others
  });
});
ActionIconGroup.classes = classes8;
ActionIconGroup.displayName = "@mantine/core/ActionIconGroup";

// node_modules/@mantine/core/esm/components/ActionIcon/ActionIconGroupSection/ActionIconGroupSection.mjs
var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
var import_react98 = __toESM(require_react(), 1);
"use client";
var defaultProps13 = {};
var varsResolver7 = createVarsResolver((theme, { radius, color, gradient, variant, autoContrast, size: size4 }) => {
  const colors = theme.variantColorResolver({
    color: color || theme.primaryColor,
    theme,
    gradient,
    variant: variant || "filled",
    autoContrast
  });
  return {
    groupSection: {
      "--section-height": getSize(size4, "section-height"),
      "--section-padding-x": getSize(size4, "section-padding-x"),
      "--section-fz": getFontSize(size4),
      "--section-radius": radius === undefined ? undefined : getRadius(radius),
      "--section-bg": color || variant ? colors.background : undefined,
      "--section-color": colors.color,
      "--section-bd": color || variant ? colors.border : undefined
    }
  };
});
var ActionIconGroupSection = factory((_props, ref) => {
  const props = useProps("ActionIconGroupSection", defaultProps13, _props);
  const {
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    variant,
    gradient,
    radius,
    autoContrast,
    ...others
  } = useProps("ActionIconGroupSection", defaultProps13, _props);
  const getStyles2 = useStyles({
    name: "ActionIconGroupSection",
    props,
    classes: classes8,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver7,
    rootSelector: "groupSection"
  });
  return /* @__PURE__ */ import_jsx_runtime67.jsx(Box, { ...getStyles2("groupSection"), ref, variant, ...others });
});
ActionIconGroupSection.classes = classes8;
ActionIconGroupSection.displayName = "@mantine/core/ActionIconGroupSection";

// node_modules/@mantine/core/esm/components/ActionIcon/ActionIcon.mjs
"use client";
var defaultProps14 = {};
var varsResolver8 = createVarsResolver((theme, { size: size4, radius, variant, gradient, color, autoContrast }) => {
  const colors = theme.variantColorResolver({
    color: color || theme.primaryColor,
    theme,
    gradient,
    variant: variant || "filled",
    autoContrast
  });
  return {
    root: {
      "--ai-size": getSize(size4, "ai-size"),
      "--ai-radius": radius === undefined ? undefined : getRadius(radius),
      "--ai-bg": color || variant ? colors.background : undefined,
      "--ai-hover": color || variant ? colors.hover : undefined,
      "--ai-hover-color": color || variant ? colors.hoverColor : undefined,
      "--ai-color": colors.color,
      "--ai-bd": color || variant ? colors.border : undefined
    }
  };
});
var ActionIcon = polymorphicFactory((_props, ref) => {
  const props = useProps("ActionIcon", defaultProps14, _props);
  const {
    className,
    unstyled,
    variant,
    classNames,
    styles,
    style: style2,
    loading,
    loaderProps,
    size: size4,
    color,
    radius,
    __staticSelector,
    gradient,
    vars,
    children,
    disabled,
    "data-disabled": dataDisabled,
    autoContrast,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: ["ActionIcon", __staticSelector],
    props,
    className,
    style: style2,
    classes: classes8,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver8
  });
  return /* @__PURE__ */ import_jsx_runtime68.jsxs(UnstyledButton, {
    ...getStyles2("root", { active: !disabled && !loading && !dataDisabled }),
    ...others,
    unstyled,
    variant,
    size: size4,
    disabled: disabled || loading,
    ref,
    mod: [{ loading, disabled: disabled || dataDisabled }, mod],
    children: [
      /* @__PURE__ */ import_jsx_runtime68.jsx(Transition, { mounted: !!loading, transition: "slide-down", duration: 150, children: (transitionStyles) => /* @__PURE__ */ import_jsx_runtime68.jsx(Box, { component: "span", ...getStyles2("loader", { style: transitionStyles }), "aria-hidden": true, children: /* @__PURE__ */ import_jsx_runtime68.jsx(Loader, { color: "var(--ai-color)", size: "calc(var(--ai-size) * 0.55)", ...loaderProps }) }) }),
      /* @__PURE__ */ import_jsx_runtime68.jsx(Box, { component: "span", mod: { loading }, ...getStyles2("icon"), children })
    ]
  });
});
ActionIcon.classes = classes8;
ActionIcon.displayName = "@mantine/core/ActionIcon";
ActionIcon.Group = ActionIconGroup;
ActionIcon.GroupSection = ActionIconGroupSection;
// node_modules/@mantine/core/esm/components/CloseButton/CloseIcon.mjs
var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);
var import_react100 = __toESM(require_react(), 1);
"use client";
var CloseIcon = import_react100.forwardRef(({ size: size4 = "var(--cb-icon-size, 70%)", style: style2, ...others }, ref) => /* @__PURE__ */ import_jsx_runtime69.jsx("svg", {
  viewBox: "0 0 15 15",
  fill: "none",
  xmlns: "http://www.w3.org/2000/svg",
  style: { ...style2, width: size4, height: size4 },
  ref,
  ...others,
  children: /* @__PURE__ */ import_jsx_runtime69.jsx("path", {
    d: "M11.7816 4.03157C12.0062 3.80702 12.0062 3.44295 11.7816 3.2184C11.5571 2.99385 11.193 2.99385 10.9685 3.2184L7.50005 6.68682L4.03164 3.2184C3.80708 2.99385 3.44301 2.99385 3.21846 3.2184C2.99391 3.44295 2.99391 3.80702 3.21846 4.03157L6.68688 7.49999L3.21846 10.9684C2.99391 11.193 2.99391 11.557 3.21846 11.7816C3.44301 12.0061 3.80708 12.0061 4.03164 11.7816L7.50005 8.31316L10.9685 11.7816C11.193 12.0061 11.5571 12.0061 11.7816 11.7816C12.0062 11.557 12.0062 11.193 11.7816 10.9684L8.31322 7.49999L11.7816 4.03157Z",
    fill: "currentColor",
    fillRule: "evenodd",
    clipRule: "evenodd"
  })
}));
CloseIcon.displayName = "@mantine/core/CloseIcon";

// node_modules/@mantine/core/esm/components/CloseButton/CloseButton.mjs
var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);
var import_react101 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/CloseButton/CloseButton.module.css.mjs
"use client";
var classes9 = { root: "m_86a44da5", "root--subtle": "m_220c80f2" };

// node_modules/@mantine/core/esm/components/CloseButton/CloseButton.mjs
"use client";
var defaultProps15 = {
  variant: "subtle"
};
var varsResolver9 = createVarsResolver((_2, { size: size4, radius, iconSize }) => ({
  root: {
    "--cb-size": getSize(size4, "cb-size"),
    "--cb-radius": radius === undefined ? undefined : getRadius(radius),
    "--cb-icon-size": rem(iconSize)
  }
}));
var CloseButton = polymorphicFactory((_props, ref) => {
  const props = useProps("CloseButton", defaultProps15, _props);
  const {
    iconSize,
    children,
    vars,
    radius,
    className,
    classNames,
    style: style2,
    styles,
    unstyled,
    "data-disabled": dataDisabled,
    disabled,
    variant,
    icon,
    mod,
    __staticSelector,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: __staticSelector || "CloseButton",
    props,
    className,
    style: style2,
    classes: classes9,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver9
  });
  return /* @__PURE__ */ import_jsx_runtime70.jsxs(UnstyledButton, {
    ref,
    ...others,
    unstyled,
    variant,
    disabled,
    mod: [{ disabled: disabled || dataDisabled }, mod],
    ...getStyles2("root", { variant, active: !disabled && !dataDisabled }),
    children: [
      icon || /* @__PURE__ */ import_jsx_runtime70.jsx(CloseIcon, {}),
      children
    ]
  });
});
CloseButton.classes = classes9;
CloseButton.displayName = "@mantine/core/CloseButton";

// node_modules/@mantine/core/esm/components/Group/Group.mjs
var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
var import_react103 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Group/filter-falsy-children/filter-falsy-children.mjs
var import_react102 = __toESM(require_react(), 1);
"use client";
function filterFalsyChildren(children) {
  return import_react102.Children.toArray(children).filter(Boolean);
}

// node_modules/@mantine/core/esm/components/Group/Group.module.css.mjs
"use client";
var classes10 = { root: "m_4081bf90" };

// node_modules/@mantine/core/esm/components/Group/Group.mjs
"use client";
var defaultProps16 = {
  preventGrowOverflow: true,
  gap: "md",
  align: "center",
  justify: "flex-start",
  wrap: "wrap"
};
var varsResolver10 = createVarsResolver((_2, { grow, preventGrowOverflow, gap, align, justify, wrap }, { childWidth }) => ({
  root: {
    "--group-child-width": grow && preventGrowOverflow ? childWidth : undefined,
    "--group-gap": getSpacing(gap),
    "--group-align": align,
    "--group-justify": justify,
    "--group-wrap": wrap
  }
}));
var Group = factory((_props, ref) => {
  const props = useProps("Group", defaultProps16, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    children,
    gap,
    align,
    justify,
    wrap,
    grow,
    preventGrowOverflow,
    vars,
    variant,
    __size,
    mod,
    ...others
  } = props;
  const filteredChildren = filterFalsyChildren(children);
  const childrenCount = filteredChildren.length;
  const resolvedGap = getSpacing(gap ?? "md");
  const childWidth = `calc(${100 / childrenCount}% - (${resolvedGap} - ${resolvedGap} / ${childrenCount}))`;
  const stylesCtx = { childWidth };
  const getStyles2 = useStyles({
    name: "Group",
    props,
    stylesCtx,
    className,
    style: style2,
    classes: classes10,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver10
  });
  return /* @__PURE__ */ import_jsx_runtime71.jsx(Box, {
    ...getStyles2("root"),
    ref,
    variant,
    mod: [{ grow }, mod],
    size: __size,
    ...others,
    children: filteredChildren
  });
});
Group.classes = classes10;
Group.displayName = "@mantine/core/Group";
// node_modules/@mantine/core/esm/components/ModalBase/ModalBase.mjs
var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
var import_react107 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/ModalBase/ModalBase.context.mjs
var import_react104 = __toESM(require_react(), 1);
var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);
"use client";
var [ModalBaseProvider, useModalBaseContext] = createSafeContext("ModalBase component was not found in tree");

// node_modules/@mantine/core/esm/components/ModalBase/use-modal.mjs
var import_react106 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/ModalBase/use-lock-scroll.mjs
var import_react105 = __toESM(require_react(), 1);
"use client";
function useLockScroll({ opened, transitionDuration }) {
  const [shouldLockScroll, setShouldLockScroll] = import_react105.useState(opened);
  const timeout = import_react105.useRef(-1);
  const reduceMotion = useReducedMotion();
  const _transitionDuration = reduceMotion ? 0 : transitionDuration;
  import_react105.useEffect(() => {
    if (opened) {
      setShouldLockScroll(true);
      window.clearTimeout(timeout.current);
    } else if (_transitionDuration === 0) {
      setShouldLockScroll(false);
    } else {
      timeout.current = window.setTimeout(() => setShouldLockScroll(false), _transitionDuration);
    }
    return () => window.clearTimeout(timeout.current);
  }, [opened, _transitionDuration]);
  return shouldLockScroll;
}

// node_modules/@mantine/core/esm/components/ModalBase/use-modal.mjs
"use client";
function useModal({
  id,
  transitionProps,
  opened,
  trapFocus,
  closeOnEscape: closeOnEscape2,
  onClose,
  returnFocus
}) {
  const _id = useId(id);
  const [titleMounted, setTitleMounted] = import_react106.useState(false);
  const [bodyMounted, setBodyMounted] = import_react106.useState(false);
  const transitionDuration = typeof transitionProps?.duration === "number" ? transitionProps?.duration : 200;
  const shouldLockScroll = useLockScroll({ opened, transitionDuration });
  useWindowEvent("keydown", (event) => {
    if (event.key === "Escape" && closeOnEscape2 && opened) {
      const shouldTrigger = event.target?.getAttribute("data-mantine-stop-propagation") !== "true";
      shouldTrigger && onClose();
    }
  }, { capture: true });
  useFocusReturn({ opened, shouldReturnFocus: trapFocus && returnFocus });
  return {
    _id,
    titleMounted,
    bodyMounted,
    shouldLockScroll,
    setTitleMounted,
    setBodyMounted
  };
}

// node_modules/@mantine/core/esm/components/ModalBase/ModalBase.mjs
"use client";
var ModalBase = import_react107.forwardRef(({
  keepMounted,
  opened,
  onClose,
  id,
  transitionProps,
  onExitTransitionEnd,
  onEnterTransitionEnd,
  trapFocus,
  closeOnEscape: closeOnEscape2,
  returnFocus,
  closeOnClickOutside,
  withinPortal,
  portalProps,
  lockScroll,
  children,
  zIndex,
  shadow,
  padding,
  __vars,
  unstyled,
  removeScrollProps,
  ...others
}, ref) => {
  const { _id, titleMounted, bodyMounted, shouldLockScroll, setTitleMounted, setBodyMounted } = useModal({ id, transitionProps, opened, trapFocus, closeOnEscape: closeOnEscape2, onClose, returnFocus });
  const { key: removeScrollKey, ...otherRemoveScrollProps } = removeScrollProps || {};
  return /* @__PURE__ */ import_jsx_runtime73.jsx(OptionalPortal, { ...portalProps, withinPortal, children: /* @__PURE__ */ import_jsx_runtime73.jsx(ModalBaseProvider, {
    value: {
      opened,
      onClose,
      closeOnClickOutside,
      onExitTransitionEnd,
      onEnterTransitionEnd,
      transitionProps: { ...transitionProps, keepMounted },
      getTitleId: () => `${_id}-title`,
      getBodyId: () => `${_id}-body`,
      titleMounted,
      bodyMounted,
      setTitleMounted,
      setBodyMounted,
      trapFocus,
      closeOnEscape: closeOnEscape2,
      zIndex,
      unstyled
    },
    children: /* @__PURE__ */ import_jsx_runtime73.jsx(Combination_default, {
      enabled: shouldLockScroll && lockScroll,
      ...otherRemoveScrollProps,
      children: /* @__PURE__ */ import_jsx_runtime73.jsx(Box, {
        ref,
        ...others,
        __vars: {
          ...__vars,
          "--mb-z-index": (zIndex || getDefaultZIndex("modal")).toString(),
          "--mb-shadow": getShadow(shadow),
          "--mb-padding": getSpacing(padding)
        },
        children
      })
    }, removeScrollKey)
  }) });
});
ModalBase.displayName = "@mantine/core/ModalBase";

// node_modules/@mantine/core/esm/components/ModalBase/ModalBaseBody.mjs
var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);
var import_react109 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/ModalBase/use-modal-body-id.mjs
var import_react108 = __toESM(require_react(), 1);
"use client";
function useModalBodyId() {
  const ctx = useModalBaseContext();
  import_react108.useEffect(() => {
    ctx.setBodyMounted(true);
    return () => ctx.setBodyMounted(false);
  }, []);
  return ctx.getBodyId();
}

// node_modules/@mantine/core/esm/components/ModalBase/ModalBase.module.css.mjs
"use client";
var classes11 = { title: "m_615af6c9", header: "m_b5489c3c", inner: "m_60c222c7", content: "m_fd1ab0aa", close: "m_606cb269", body: "m_5df29311" };

// node_modules/@mantine/core/esm/components/ModalBase/ModalBaseBody.mjs
"use client";
var ModalBaseBody = import_react109.forwardRef(({ className, ...others }, ref) => {
  const bodyId = useModalBodyId();
  const ctx = useModalBaseContext();
  return /* @__PURE__ */ import_jsx_runtime74.jsx(Box, {
    ref,
    ...others,
    id: bodyId,
    className: clsx_default({ [classes11.body]: !ctx.unstyled }, className)
  });
});
ModalBaseBody.displayName = "@mantine/core/ModalBaseBody";

// node_modules/@mantine/core/esm/components/ModalBase/ModalBaseCloseButton.mjs
var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
var import_react110 = __toESM(require_react(), 1);
"use client";
var ModalBaseCloseButton = import_react110.forwardRef(({ className, onClick, ...others }, ref) => {
  const ctx = useModalBaseContext();
  return /* @__PURE__ */ import_jsx_runtime75.jsx(CloseButton, {
    ref,
    ...others,
    onClick: (event) => {
      ctx.onClose();
      onClick?.(event);
    },
    className: clsx_default({ [classes11.close]: !ctx.unstyled }, className),
    unstyled: ctx.unstyled
  });
});
ModalBaseCloseButton.displayName = "@mantine/core/ModalBaseCloseButton";

// node_modules/@mantine/core/esm/components/ModalBase/ModalBaseContent.mjs
var import_jsx_runtime76 = __toESM(require_jsx_runtime(), 1);
var import_react111 = __toESM(require_react(), 1);
"use client";
var ModalBaseContent = import_react111.forwardRef(({ transitionProps, className, innerProps, onKeyDown, style: style2, ...others }, ref) => {
  const ctx = useModalBaseContext();
  return /* @__PURE__ */ import_jsx_runtime76.jsx(Transition, {
    mounted: ctx.opened,
    transition: "pop",
    ...ctx.transitionProps,
    onExited: () => {
      ctx.onExitTransitionEnd?.();
      ctx.transitionProps?.onExited?.();
    },
    onEntered: () => {
      ctx.onEnterTransitionEnd?.();
      ctx.transitionProps?.onEntered?.();
    },
    ...transitionProps,
    children: (transitionStyles) => /* @__PURE__ */ import_jsx_runtime76.jsx("div", {
      ...innerProps,
      className: clsx_default({ [classes11.inner]: !ctx.unstyled }, innerProps.className),
      children: /* @__PURE__ */ import_jsx_runtime76.jsx(FocusTrap, { active: ctx.opened && ctx.trapFocus, innerRef: ref, children: /* @__PURE__ */ import_jsx_runtime76.jsx(Paper, {
        ...others,
        component: "section",
        role: "dialog",
        tabIndex: -1,
        "aria-modal": true,
        "aria-describedby": ctx.bodyMounted ? ctx.getBodyId() : undefined,
        "aria-labelledby": ctx.titleMounted ? ctx.getTitleId() : undefined,
        style: [style2, transitionStyles],
        className: clsx_default({ [classes11.content]: !ctx.unstyled }, className),
        unstyled: ctx.unstyled,
        children: others.children
      }) })
    })
  });
});
ModalBaseContent.displayName = "@mantine/core/ModalBaseContent";

// node_modules/@mantine/core/esm/components/ModalBase/ModalBaseHeader.mjs
var import_jsx_runtime77 = __toESM(require_jsx_runtime(), 1);
var import_react112 = __toESM(require_react(), 1);
"use client";
var ModalBaseHeader = import_react112.forwardRef(({ className, ...others }, ref) => {
  const ctx = useModalBaseContext();
  return /* @__PURE__ */ import_jsx_runtime77.jsx(Box, {
    component: "header",
    ref,
    className: clsx_default({ [classes11.header]: !ctx.unstyled }, className),
    ...others
  });
});
ModalBaseHeader.displayName = "@mantine/core/ModalBaseHeader";

// node_modules/@mantine/core/esm/components/ModalBase/ModalBaseOverlay.mjs
var import_jsx_runtime78 = __toESM(require_jsx_runtime(), 1);
var import_react113 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/ModalBase/use-modal-transition.mjs
"use client";
var DEFAULT_TRANSITION = {
  duration: 200,
  timingFunction: "ease",
  transition: "fade"
};
function useModalTransition(transitionOverride) {
  const ctx = useModalBaseContext();
  return { ...DEFAULT_TRANSITION, ...ctx.transitionProps, ...transitionOverride };
}

// node_modules/@mantine/core/esm/components/ModalBase/ModalBaseOverlay.mjs
"use client";
var ModalBaseOverlay = import_react113.forwardRef(({ onClick, transitionProps, style: style2, visible: visible2, ...others }, ref) => {
  const ctx = useModalBaseContext();
  const transition = useModalTransition(transitionProps);
  return /* @__PURE__ */ import_jsx_runtime78.jsx(Transition, {
    mounted: visible2 !== undefined ? visible2 : ctx.opened,
    ...transition,
    transition: "fade",
    children: (transitionStyles) => /* @__PURE__ */ import_jsx_runtime78.jsx(Overlay, {
      ref,
      fixed: true,
      style: [style2, transitionStyles],
      zIndex: ctx.zIndex,
      unstyled: ctx.unstyled,
      onClick: (event) => {
        onClick?.(event);
        ctx.closeOnClickOutside && ctx.onClose();
      },
      ...others
    })
  });
});
ModalBaseOverlay.displayName = "@mantine/core/ModalBaseOverlay";

// node_modules/@mantine/core/esm/components/ModalBase/ModalBaseTitle.mjs
var import_jsx_runtime79 = __toESM(require_jsx_runtime(), 1);
var import_react115 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/ModalBase/use-modal-title-id.mjs
var import_react114 = __toESM(require_react(), 1);
"use client";
function useModalTitle() {
  const ctx = useModalBaseContext();
  import_react114.useEffect(() => {
    ctx.setTitleMounted(true);
    return () => ctx.setTitleMounted(false);
  }, []);
  return ctx.getTitleId();
}

// node_modules/@mantine/core/esm/components/ModalBase/ModalBaseTitle.mjs
"use client";
var ModalBaseTitle = import_react115.forwardRef(({ className, ...others }, ref) => {
  const id = useModalTitle();
  const ctx = useModalBaseContext();
  return /* @__PURE__ */ import_jsx_runtime79.jsx(Box, {
    component: "h2",
    ref,
    className: clsx_default({ [classes11.title]: !ctx.unstyled }, className),
    ...others,
    id
  });
});
ModalBaseTitle.displayName = "@mantine/core/ModalBaseTitle";

// node_modules/@mantine/core/esm/components/ModalBase/NativeScrollArea.mjs
var import_jsx_runtime80 = __toESM(require_jsx_runtime(), 1);
"use client";
function NativeScrollArea({ children }) {
  return /* @__PURE__ */ import_jsx_runtime80.jsx(import_jsx_runtime80.Fragment, { children });
}

// node_modules/@mantine/core/esm/components/Input/Input.mjs
var import_jsx_runtime89 = __toESM(require_jsx_runtime(), 1);
var import_react124 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Input/Input.context.mjs
var import_react116 = __toESM(require_react(), 1);
var import_jsx_runtime81 = __toESM(require_jsx_runtime(), 1);
"use client";
var [InputContext, useInputContext] = createOptionalContext({
  size: "sm"
});

// node_modules/@mantine/core/esm/components/Input/InputClearButton/InputClearButton.mjs
var import_jsx_runtime82 = __toESM(require_jsx_runtime(), 1);
var import_react117 = __toESM(require_react(), 1);
"use client";
var defaultProps17 = {};
var InputClearButton = factory((_props, ref) => {
  const props = useProps("InputClearButton", defaultProps17, _props);
  const { size: size4, variant, vars, classNames, styles, ...others } = props;
  const ctx = useInputContext();
  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
    classNames,
    styles,
    props
  });
  return /* @__PURE__ */ import_jsx_runtime82.jsx(CloseButton, {
    variant: variant || "transparent",
    ref,
    size: size4 || ctx?.size || "sm",
    classNames: resolvedClassNames,
    styles: resolvedStyles,
    __staticSelector: "InputClearButton",
    ...others
  });
});
InputClearButton.displayName = "@mantine/core/InputClearButton";

// node_modules/@mantine/core/esm/components/Input/InputDescription/InputDescription.mjs
var import_jsx_runtime84 = __toESM(require_jsx_runtime(), 1);
var import_react119 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Input/InputWrapper.context.mjs
var import_react118 = __toESM(require_react(), 1);
var import_jsx_runtime83 = __toESM(require_jsx_runtime(), 1);
"use client";
var [InputWrapperProvider, useInputWrapperContext] = createOptionalContext({
  offsetBottom: false,
  offsetTop: false,
  describedBy: undefined,
  getStyles: null,
  inputId: undefined,
  labelId: undefined
});

// node_modules/@mantine/core/esm/components/Input/Input.module.css.mjs
"use client";
var classes12 = { wrapper: "m_6c018570", input: "m_8fb7ebe7", section: "m_82577fc2", placeholder: "m_88bacfd0", root: "m_46b77525", label: "m_8fdc1311", required: "m_78a94662", error: "m_8f816625", description: "m_fe47ce59" };

// node_modules/@mantine/core/esm/components/Input/InputDescription/InputDescription.mjs
"use client";
var defaultProps18 = {};
var varsResolver11 = createVarsResolver((_2, { size: size4 }) => ({
  description: {
    "--input-description-size": size4 === undefined ? undefined : `calc(${getFontSize(size4)} - ${rem(2)})`
  }
}));
var InputDescription = factory((_props, ref) => {
  const props = useProps("InputDescription", defaultProps18, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    size: size4,
    __staticSelector,
    __inheritStyles = true,
    variant,
    ...others
  } = useProps("InputDescription", defaultProps18, props);
  const ctx = useInputWrapperContext();
  const _getStyles = useStyles({
    name: ["InputWrapper", __staticSelector],
    props,
    classes: classes12,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    rootSelector: "description",
    vars,
    varsResolver: varsResolver11
  });
  const getStyles2 = __inheritStyles && ctx?.getStyles || _getStyles;
  return /* @__PURE__ */ import_jsx_runtime84.jsx(Box, {
    component: "p",
    ref,
    variant,
    size: size4,
    ...getStyles2("description", ctx?.getStyles ? { className, style: style2 } : undefined),
    ...others
  });
});
InputDescription.classes = classes12;
InputDescription.displayName = "@mantine/core/InputDescription";

// node_modules/@mantine/core/esm/components/Input/InputError/InputError.mjs
var import_jsx_runtime85 = __toESM(require_jsx_runtime(), 1);
var import_react120 = __toESM(require_react(), 1);
"use client";
var defaultProps19 = {};
var varsResolver12 = createVarsResolver((_2, { size: size4 }) => ({
  error: {
    "--input-error-size": size4 === undefined ? undefined : `calc(${getFontSize(size4)} - ${rem(2)})`
  }
}));
var InputError = factory((_props, ref) => {
  const props = useProps("InputError", defaultProps19, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    size: size4,
    __staticSelector,
    __inheritStyles = true,
    variant,
    ...others
  } = props;
  const _getStyles = useStyles({
    name: ["InputWrapper", __staticSelector],
    props,
    classes: classes12,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    rootSelector: "error",
    vars,
    varsResolver: varsResolver12
  });
  const ctx = useInputWrapperContext();
  const getStyles2 = __inheritStyles && ctx?.getStyles || _getStyles;
  return /* @__PURE__ */ import_jsx_runtime85.jsx(Box, {
    component: "p",
    ref,
    variant,
    size: size4,
    ...getStyles2("error", ctx?.getStyles ? { className, style: style2 } : undefined),
    ...others
  });
});
InputError.classes = classes12;
InputError.displayName = "@mantine/core/InputError";

// node_modules/@mantine/core/esm/components/Input/InputLabel/InputLabel.mjs
var import_jsx_runtime86 = __toESM(require_jsx_runtime(), 1);
var import_react121 = __toESM(require_react(), 1);
"use client";
var defaultProps20 = {
  labelElement: "label"
};
var varsResolver13 = createVarsResolver((_2, { size: size4 }) => ({
  label: {
    "--input-label-size": getFontSize(size4),
    "--input-asterisk-color": undefined
  }
}));
var InputLabel = factory((_props, ref) => {
  const props = useProps("InputLabel", defaultProps20, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    labelElement,
    size: size4,
    required,
    htmlFor,
    onMouseDown,
    children,
    __staticSelector,
    variant,
    mod,
    ...others
  } = useProps("InputLabel", defaultProps20, props);
  const _getStyles = useStyles({
    name: ["InputWrapper", __staticSelector],
    props,
    classes: classes12,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    rootSelector: "label",
    vars,
    varsResolver: varsResolver13
  });
  const ctx = useInputWrapperContext();
  const getStyles2 = ctx?.getStyles || _getStyles;
  return /* @__PURE__ */ import_jsx_runtime86.jsxs(Box, {
    ...getStyles2("label", ctx?.getStyles ? { className, style: style2 } : undefined),
    component: labelElement,
    variant,
    size: size4,
    ref,
    htmlFor: labelElement === "label" ? htmlFor : undefined,
    mod: [{ required }, mod],
    onMouseDown: (event) => {
      onMouseDown?.(event);
      if (!event.defaultPrevented && event.detail > 1) {
        event.preventDefault();
      }
    },
    ...others,
    children: [
      children,
      required && /* @__PURE__ */ import_jsx_runtime86.jsx("span", { ...getStyles2("required"), "aria-hidden": true, children: " *" })
    ]
  });
});
InputLabel.classes = classes12;
InputLabel.displayName = "@mantine/core/InputLabel";

// node_modules/@mantine/core/esm/components/Input/InputPlaceholder/InputPlaceholder.mjs
var import_jsx_runtime87 = __toESM(require_jsx_runtime(), 1);
var import_react122 = __toESM(require_react(), 1);
"use client";
var defaultProps21 = {};
var InputPlaceholder = factory((_props, ref) => {
  const props = useProps("InputPlaceholder", defaultProps21, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    __staticSelector,
    variant,
    error,
    mod,
    ...others
  } = useProps("InputPlaceholder", defaultProps21, props);
  const getStyles2 = useStyles({
    name: ["InputPlaceholder", __staticSelector],
    props,
    classes: classes12,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    rootSelector: "placeholder"
  });
  return /* @__PURE__ */ import_jsx_runtime87.jsx(Box, {
    ...getStyles2("placeholder"),
    mod: [{ error: !!error }, mod],
    component: "span",
    variant,
    ref,
    ...others
  });
});
InputPlaceholder.classes = classes12;
InputPlaceholder.displayName = "@mantine/core/InputPlaceholder";

// node_modules/@mantine/core/esm/components/Input/InputWrapper/InputWrapper.mjs
var import_jsx_runtime88 = __toESM(require_jsx_runtime(), 1);
var import_react123 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Input/InputWrapper/get-input-offsets/get-input-offsets.mjs
"use client";
function getInputOffsets(inputWrapperOrder, { hasDescription, hasError }) {
  const inputIndex = inputWrapperOrder.findIndex((part) => part === "input");
  const aboveInput = inputWrapperOrder.slice(0, inputIndex);
  const belowInput = inputWrapperOrder.slice(inputIndex + 1);
  const offsetTop = hasDescription && aboveInput.includes("description") || hasError && aboveInput.includes("error");
  const offsetBottom = hasDescription && belowInput.includes("description") || hasError && belowInput.includes("error");
  return { offsetBottom, offsetTop };
}

// node_modules/@mantine/core/esm/components/Input/InputWrapper/InputWrapper.mjs
"use client";
var defaultProps22 = {
  labelElement: "label",
  inputContainer: (children) => children,
  inputWrapperOrder: ["label", "description", "input", "error"]
};
var varsResolver14 = createVarsResolver((_2, { size: size4 }) => ({
  label: {
    "--input-label-size": getFontSize(size4),
    "--input-asterisk-color": undefined
  },
  error: {
    "--input-error-size": size4 === undefined ? undefined : `calc(${getFontSize(size4)} - ${rem(2)})`
  },
  description: {
    "--input-description-size": size4 === undefined ? undefined : `calc(${getFontSize(size4)} - ${rem(2)})`
  }
}));
var InputWrapper = factory((_props, ref) => {
  const props = useProps("InputWrapper", defaultProps22, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    size: size4,
    variant,
    __staticSelector,
    inputContainer,
    inputWrapperOrder,
    label,
    error,
    description,
    labelProps,
    descriptionProps,
    errorProps,
    labelElement,
    children,
    withAsterisk,
    id,
    required,
    __stylesApiProps,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: ["InputWrapper", __staticSelector],
    props: __stylesApiProps || props,
    classes: classes12,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver14
  });
  const sharedProps = {
    size: size4,
    variant,
    __staticSelector
  };
  const idBase = useId(id);
  const isRequired = typeof withAsterisk === "boolean" ? withAsterisk : required;
  const errorId = errorProps?.id || `${idBase}-error`;
  const descriptionId = descriptionProps?.id || `${idBase}-description`;
  const inputId = idBase;
  const hasError = !!error && typeof error !== "boolean";
  const hasDescription = !!description;
  const _describedBy = `${hasError ? errorId : ""} ${hasDescription ? descriptionId : ""}`;
  const describedBy = _describedBy.trim().length > 0 ? _describedBy.trim() : undefined;
  const labelId = labelProps?.id || `${idBase}-label`;
  const _label = label && /* @__PURE__ */ import_jsx_runtime88.jsx(InputLabel, {
    labelElement,
    id: labelId,
    htmlFor: inputId,
    required: isRequired,
    ...sharedProps,
    ...labelProps,
    children: label
  }, "label");
  const _description = hasDescription && /* @__PURE__ */ import_jsx_runtime88.jsx(InputDescription, {
    ...descriptionProps,
    ...sharedProps,
    size: descriptionProps?.size || sharedProps.size,
    id: descriptionProps?.id || descriptionId,
    children: description
  }, "description");
  const _input = /* @__PURE__ */ import_jsx_runtime88.jsx(import_react123.Fragment, { children: inputContainer(children) }, "input");
  const _error = hasError && /* @__PURE__ */ import_react123.createElement(InputError, {
    ...errorProps,
    ...sharedProps,
    size: errorProps?.size || sharedProps.size,
    key: "error",
    id: errorProps?.id || errorId
  }, error);
  const content = inputWrapperOrder.map((part) => {
    switch (part) {
      case "label":
        return _label;
      case "input":
        return _input;
      case "description":
        return _description;
      case "error":
        return _error;
      default:
        return null;
    }
  });
  return /* @__PURE__ */ import_jsx_runtime88.jsx(InputWrapperProvider, {
    value: {
      getStyles: getStyles2,
      describedBy,
      inputId,
      labelId,
      ...getInputOffsets(inputWrapperOrder, { hasDescription, hasError })
    },
    children: /* @__PURE__ */ import_jsx_runtime88.jsx(Box, {
      ref,
      variant,
      size: size4,
      mod: [{ error: !!error }, mod],
      ...getStyles2("root"),
      ...others,
      children: content
    })
  });
});
InputWrapper.classes = classes12;
InputWrapper.displayName = "@mantine/core/InputWrapper";

// node_modules/@mantine/core/esm/components/Input/Input.mjs
"use client";
var defaultProps23 = {
  variant: "default",
  leftSectionPointerEvents: "none",
  rightSectionPointerEvents: "none",
  withAria: true,
  withErrorStyles: true
};
var varsResolver15 = createVarsResolver((_2, props, ctx) => ({
  wrapper: {
    "--input-margin-top": ctx.offsetTop ? "calc(var(--mantine-spacing-xs) / 2)" : undefined,
    "--input-margin-bottom": ctx.offsetBottom ? "calc(var(--mantine-spacing-xs) / 2)" : undefined,
    "--input-height": getSize(props.size, "input-height"),
    "--input-fz": getFontSize(props.size),
    "--input-radius": props.radius === undefined ? undefined : getRadius(props.radius),
    "--input-left-section-width": props.leftSectionWidth !== undefined ? rem(props.leftSectionWidth) : undefined,
    "--input-right-section-width": props.rightSectionWidth !== undefined ? rem(props.rightSectionWidth) : undefined,
    "--input-padding-y": props.multiline ? getSize(props.size, "input-padding-y") : undefined,
    "--input-left-section-pointer-events": props.leftSectionPointerEvents,
    "--input-right-section-pointer-events": props.rightSectionPointerEvents
  }
}));
var Input = polymorphicFactory((_props, ref) => {
  const props = useProps("Input", defaultProps23, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    required,
    __staticSelector,
    __stylesApiProps,
    size: size4,
    wrapperProps,
    error,
    disabled,
    leftSection,
    leftSectionProps,
    leftSectionWidth,
    rightSection,
    rightSectionProps,
    rightSectionWidth,
    rightSectionPointerEvents,
    leftSectionPointerEvents,
    variant,
    vars,
    pointer,
    multiline,
    radius,
    id,
    withAria,
    withErrorStyles,
    mod,
    inputSize,
    __clearSection,
    __clearable,
    __defaultRightSection,
    ...others
  } = props;
  const { styleProps, rest } = extractStyleProps(others);
  const ctx = useInputWrapperContext();
  const stylesCtx = { offsetBottom: ctx?.offsetBottom, offsetTop: ctx?.offsetTop };
  const getStyles2 = useStyles({
    name: ["Input", __staticSelector],
    props: __stylesApiProps || props,
    classes: classes12,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    stylesCtx,
    rootSelector: "wrapper",
    vars,
    varsResolver: varsResolver15
  });
  const ariaAttributes = withAria ? {
    required,
    disabled,
    "aria-invalid": !!error,
    "aria-describedby": ctx?.describedBy,
    id: ctx?.inputId || id
  } : {};
  const _rightSection = rightSection || __clearable && __clearSection || __defaultRightSection;
  return /* @__PURE__ */ import_jsx_runtime89.jsx(InputContext, { value: { size: size4 || "sm" }, children: /* @__PURE__ */ import_jsx_runtime89.jsxs(Box, {
    ...getStyles2("wrapper"),
    ...styleProps,
    ...wrapperProps,
    mod: [
      {
        error: !!error && withErrorStyles,
        pointer,
        disabled,
        multiline,
        "data-with-right-section": !!_rightSection,
        "data-with-left-section": !!leftSection
      },
      mod
    ],
    variant,
    size: size4,
    children: [
      leftSection && /* @__PURE__ */ import_jsx_runtime89.jsx("div", {
        ...leftSectionProps,
        "data-position": "left",
        ...getStyles2("section", {
          className: leftSectionProps?.className,
          style: leftSectionProps?.style
        }),
        children: leftSection
      }),
      /* @__PURE__ */ import_jsx_runtime89.jsx(Box, {
        component: "input",
        ...rest,
        ...ariaAttributes,
        ref,
        required,
        mod: { disabled, error: !!error && withErrorStyles },
        variant,
        __size: inputSize,
        ...getStyles2("input")
      }),
      _rightSection && /* @__PURE__ */ import_jsx_runtime89.jsx("div", {
        ...rightSectionProps,
        "data-position": "right",
        ...getStyles2("section", {
          className: rightSectionProps?.className,
          style: rightSectionProps?.style
        }),
        children: _rightSection
      })
    ]
  }) });
});
Input.classes = classes12;
Input.Wrapper = InputWrapper;
Input.Label = InputLabel;
Input.Error = InputError;
Input.Description = InputDescription;
Input.Placeholder = InputPlaceholder;
Input.ClearButton = InputClearButton;
Input.displayName = "@mantine/core/Input";
// node_modules/@mantine/core/esm/components/Input/use-input-props.mjs
var import_react125 = __toESM(require_react(), 1);
var import_jsx_runtime90 = __toESM(require_jsx_runtime(), 1);
"use client";
function useInputProps(component, defaultProps24, _props) {
  const props = useProps(component, defaultProps24, _props);
  const {
    label,
    description,
    error,
    required,
    classNames,
    styles,
    className,
    unstyled,
    __staticSelector,
    __stylesApiProps,
    errorProps,
    labelProps,
    descriptionProps,
    wrapperProps: _wrapperProps,
    id,
    size: size4,
    style: style2,
    inputContainer,
    inputWrapperOrder,
    withAsterisk,
    variant,
    vars,
    mod,
    ...others
  } = props;
  const { styleProps, rest } = extractStyleProps(others);
  const wrapperProps = {
    label,
    description,
    error,
    required,
    classNames,
    className,
    __staticSelector,
    __stylesApiProps: __stylesApiProps || props,
    errorProps,
    labelProps,
    descriptionProps,
    unstyled,
    styles,
    size: size4,
    style: style2,
    inputContainer,
    inputWrapperOrder,
    withAsterisk,
    variant,
    id,
    mod,
    ..._wrapperProps
  };
  return {
    ...rest,
    classNames,
    styles,
    unstyled,
    wrapperProps: { ...wrapperProps, ...styleProps },
    inputProps: {
      required,
      classNames,
      styles,
      unstyled,
      size: size4,
      __staticSelector,
      __stylesApiProps: __stylesApiProps || props,
      error,
      variant,
      id
    }
  };
}

// node_modules/@mantine/core/esm/components/InputBase/InputBase.mjs
var import_jsx_runtime91 = __toESM(require_jsx_runtime(), 1);
var import_react126 = __toESM(require_react(), 1);
"use client";
var defaultProps24 = {
  __staticSelector: "InputBase",
  withAria: true
};
var InputBase = polymorphicFactory((props, ref) => {
  const { inputProps, wrapperProps, ...others } = useInputProps("InputBase", defaultProps24, props);
  return /* @__PURE__ */ import_jsx_runtime91.jsx(Input.Wrapper, { ...wrapperProps, children: /* @__PURE__ */ import_jsx_runtime91.jsx(Input, { ...inputProps, ...others, ref }) });
});
InputBase.classes = { ...Input.classes, ...Input.Wrapper.classes };
InputBase.displayName = "@mantine/core/InputBase";

// node_modules/@mantine/core/esm/components/Alert/Alert.mjs
var import_jsx_runtime92 = __toESM(require_jsx_runtime(), 1);
var import_react127 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Alert/Alert.module.css.mjs
"use client";
var classes13 = { root: "m_66836ed3", wrapper: "m_a5d60502", body: "m_667c2793", title: "m_6a03f287", label: "m_698f4f23", icon: "m_667f2a6a", message: "m_7fa78076", closeButton: "m_87f54839" };

// node_modules/@mantine/core/esm/components/Alert/Alert.mjs
"use client";
var defaultProps25 = {};
var varsResolver16 = createVarsResolver((theme, { radius, color, variant, autoContrast }) => {
  const colors = theme.variantColorResolver({
    color: color || theme.primaryColor,
    theme,
    variant: variant || "light",
    autoContrast
  });
  return {
    root: {
      "--alert-radius": radius === undefined ? undefined : getRadius(radius),
      "--alert-bg": color || variant ? colors.background : undefined,
      "--alert-color": colors.color,
      "--alert-bd": color || variant ? colors.border : undefined
    }
  };
});
var Alert = factory((_props, ref) => {
  const props = useProps("Alert", defaultProps25, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    radius,
    color,
    title,
    children,
    id,
    icon,
    withCloseButton,
    onClose,
    closeButtonLabel,
    variant,
    autoContrast,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Alert",
    classes: classes13,
    props,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver16
  });
  const rootId = useId(id);
  const titleId = title && `${rootId}-title` || undefined;
  const bodyId = `${rootId}-body`;
  return /* @__PURE__ */ import_jsx_runtime92.jsx(Box, {
    id: rootId,
    ...getStyles2("root", { variant }),
    variant,
    ref,
    ...others,
    role: "alert",
    "aria-describedby": bodyId,
    "aria-labelledby": titleId,
    children: /* @__PURE__ */ import_jsx_runtime92.jsxs("div", { ...getStyles2("wrapper"), children: [
      icon && /* @__PURE__ */ import_jsx_runtime92.jsx("div", { ...getStyles2("icon"), children: icon }),
      /* @__PURE__ */ import_jsx_runtime92.jsxs("div", { ...getStyles2("body"), children: [
        title && /* @__PURE__ */ import_jsx_runtime92.jsx("div", { ...getStyles2("title"), "data-with-close-button": withCloseButton || undefined, children: /* @__PURE__ */ import_jsx_runtime92.jsx("span", { id: titleId, ...getStyles2("label"), children: title }) }),
        children && /* @__PURE__ */ import_jsx_runtime92.jsx("div", { id: bodyId, ...getStyles2("message"), "data-variant": variant, children })
      ] }),
      withCloseButton && /* @__PURE__ */ import_jsx_runtime92.jsx(CloseButton, {
        ...getStyles2("closeButton"),
        onClick: onClose,
        variant: "transparent",
        size: 16,
        iconSize: 16,
        "aria-label": closeButtonLabel,
        unstyled
      })
    ] })
  });
});
Alert.classes = classes13;
Alert.displayName = "@mantine/core/Alert";
// node_modules/@mantine/core/esm/components/Text/Text.mjs
var import_jsx_runtime93 = __toESM(require_jsx_runtime(), 1);
var import_react128 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Text/Text.module.css.mjs
"use client";
var classes14 = { root: "m_b6d8b162" };

// node_modules/@mantine/core/esm/components/Text/Text.mjs
"use client";
function getTextTruncate(truncate) {
  if (truncate === "start") {
    return "start";
  }
  if (truncate === "end" || truncate) {
    return "end";
  }
  return;
}
var defaultProps26 = {
  inherit: false
};
var varsResolver17 = createVarsResolver((theme, { variant, lineClamp, gradient, size: size4, color }) => ({
  root: {
    "--text-fz": getFontSize(size4),
    "--text-lh": getLineHeight(size4),
    "--text-gradient": variant === "gradient" ? getGradient(gradient, theme) : undefined,
    "--text-line-clamp": typeof lineClamp === "number" ? lineClamp.toString() : undefined,
    "--text-color": color ? getThemeColor(color, theme) : undefined
  }
}));
var Text = polymorphicFactory((_props, ref) => {
  const props = useProps("Text", defaultProps26, _props);
  const {
    lineClamp,
    truncate,
    inline: inline4,
    inherit,
    gradient,
    span,
    __staticSelector,
    vars,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    variant,
    mod,
    size: size4,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: ["Text", __staticSelector],
    props,
    classes: classes14,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver17
  });
  return /* @__PURE__ */ import_jsx_runtime93.jsx(Box, {
    ...getStyles2("root", { focusable: true }),
    ref,
    component: span ? "span" : "p",
    variant,
    mod: [
      {
        "data-truncate": getTextTruncate(truncate),
        "data-line-clamp": typeof lineClamp === "number",
        "data-inline": inline4,
        "data-inherit": inherit
      },
      mod
    ],
    size: size4,
    ...others
  });
});
Text.classes = classes14;
Text.displayName = "@mantine/core/Text";

// node_modules/@mantine/core/esm/components/Combobox/get-parsed-combobox-data/get-parsed-combobox-data.mjs
"use client";
function parseItem(item) {
  if (typeof item === "string") {
    return { value: item, label: item };
  }
  if ("value" in item && !("label" in item)) {
    return { value: item.value, label: item.value, disabled: item.disabled };
  }
  if (typeof item === "number") {
    return { value: item.toString(), label: item.toString() };
  }
  if ("group" in item) {
    return {
      group: item.group,
      items: item.items.map((i2) => parseItem(i2))
    };
  }
  return item;
}
function getParsedComboboxData(data) {
  if (!data) {
    return [];
  }
  return data.map((item) => parseItem(item));
}

// node_modules/@mantine/core/esm/components/Combobox/get-options-lockup/get-options-lockup.mjs
"use client";
function getOptionsLockup(options) {
  return options.reduce((acc, item) => {
    if ("group" in item) {
      return { ...acc, ...getOptionsLockup(item.items) };
    }
    acc[item.value] = item;
    return acc;
  }, {});
}

// node_modules/@mantine/core/esm/components/Combobox/ComboboxChevron/ComboboxChevron.mjs
var import_jsx_runtime94 = __toESM(require_jsx_runtime(), 1);
var import_react129 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Combobox/Combobox.module.css.mjs
"use client";
var classes15 = { dropdown: "m_88b62a41", search: "m_985517d8", options: "m_b2821a6e", option: "m_92253aa5", empty: "m_2530cd1d", header: "m_858f94bd", footer: "m_82b967cb", group: "m_254f3e4f", groupLabel: "m_2bb2e9e5", chevron: "m_2943220b", optionsDropdownOption: "m_390b5f4", optionsDropdownCheckIcon: "m_8ee53fc2" };

// node_modules/@mantine/core/esm/components/Combobox/ComboboxChevron/ComboboxChevron.mjs
"use client";
var defaultProps27 = {
  error: null
};
var varsResolver18 = createVarsResolver((theme, { size: size4, color }) => ({
  chevron: {
    "--combobox-chevron-size": getSize(size4, "combobox-chevron-size"),
    "--combobox-chevron-color": color ? getThemeColor(color, theme) : undefined
  }
}));
var ComboboxChevron = factory((_props, ref) => {
  const props = useProps("ComboboxChevron", defaultProps27, _props);
  const { size: size4, error, style: style2, className, classNames, styles, unstyled, vars, mod, ...others } = props;
  const getStyles2 = useStyles({
    name: "ComboboxChevron",
    classes: classes15,
    props,
    style: style2,
    className,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver18,
    rootSelector: "chevron"
  });
  return /* @__PURE__ */ import_jsx_runtime94.jsx(Box, {
    component: "svg",
    ...others,
    ...getStyles2("chevron"),
    size: size4,
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    mod: ["combobox-chevron", { error }, mod],
    ref,
    children: /* @__PURE__ */ import_jsx_runtime94.jsx("path", {
      d: "M4.93179 5.43179C4.75605 5.60753 4.75605 5.89245 4.93179 6.06819C5.10753 6.24392 5.39245 6.24392 5.56819 6.06819L7.49999 4.13638L9.43179 6.06819C9.60753 6.24392 9.89245 6.24392 10.0682 6.06819C10.2439 5.89245 10.2439 5.60753 10.0682 5.43179L7.81819 3.18179C7.73379 3.0974 7.61933 3.04999 7.49999 3.04999C7.38064 3.04999 7.26618 3.0974 7.18179 3.18179L4.93179 5.43179ZM10.0682 9.56819C10.2439 9.39245 10.2439 9.10753 10.0682 8.93179C9.89245 8.75606 9.60753 8.75606 9.43179 8.93179L7.49999 10.8636L5.56819 8.93179C5.39245 8.75606 5.10753 8.75606 4.93179 8.93179C4.75605 9.10753 4.75605 9.39245 4.93179 9.56819L7.18179 11.8182C7.35753 11.9939 7.64245 11.9939 7.81819 11.8182L10.0682 9.56819Z",
      fill: "currentColor",
      fillRule: "evenodd",
      clipRule: "evenodd"
    })
  });
});
ComboboxChevron.classes = classes15;
ComboboxChevron.displayName = "@mantine/core/ComboboxChevron";

// node_modules/@mantine/core/esm/components/Combobox/Combobox.mjs
var import_jsx_runtime109 = __toESM(require_jsx_runtime(), 1);
var import_react145 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Combobox/Combobox.context.mjs
var import_react130 = __toESM(require_react(), 1);
var import_jsx_runtime95 = __toESM(require_jsx_runtime(), 1);
"use client";
var [ComboboxProvider, useComboboxContext] = createSafeContext("Combobox component was not found in tree");

// node_modules/@mantine/core/esm/components/Combobox/ComboboxClearButton/ComboboxClearButton.mjs
var import_jsx_runtime96 = __toESM(require_jsx_runtime(), 1);
var import_react131 = __toESM(require_react(), 1);
"use client";
var ComboboxClearButton = import_react131.forwardRef(({ size: size4, onMouseDown, onClick, onClear, ...others }, ref) => /* @__PURE__ */ import_jsx_runtime96.jsx(Input.ClearButton, {
  ref,
  tabIndex: -1,
  "aria-hidden": true,
  ...others,
  onMouseDown: (event) => {
    event.preventDefault();
    onMouseDown?.(event);
  },
  onClick: (event) => {
    onClear();
    onClick?.(event);
  }
}));
ComboboxClearButton.displayName = "@mantine/core/ComboboxClearButton";

// node_modules/@mantine/core/esm/components/Combobox/ComboboxDropdown/ComboboxDropdown.mjs
var import_jsx_runtime97 = __toESM(require_jsx_runtime(), 1);
var import_react132 = __toESM(require_react(), 1);
"use client";
var defaultProps28 = {};
var ComboboxDropdown = factory((props, ref) => {
  const { classNames, styles, className, style: style2, hidden: hidden2, ...others } = useProps("ComboboxDropdown", defaultProps28, props);
  const ctx = useComboboxContext();
  return /* @__PURE__ */ import_jsx_runtime97.jsx(Popover.Dropdown, {
    ...others,
    ref,
    role: "presentation",
    "data-hidden": hidden2 || undefined,
    ...ctx.getStyles("dropdown", { className, style: style2, classNames, styles })
  });
});
ComboboxDropdown.classes = classes15;
ComboboxDropdown.displayName = "@mantine/core/ComboboxDropdown";

// node_modules/@mantine/core/esm/components/Combobox/ComboboxDropdownTarget/ComboboxDropdownTarget.mjs
var import_jsx_runtime98 = __toESM(require_jsx_runtime(), 1);
var import_react133 = __toESM(require_react(), 1);
"use client";
var defaultProps29 = {
  refProp: "ref"
};
var ComboboxDropdownTarget = factory((props, ref) => {
  const { children, refProp } = useProps("ComboboxDropdownTarget", defaultProps29, props);
  useComboboxContext();
  if (!isElement(children)) {
    throw new Error("Combobox.DropdownTarget component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported");
  }
  return /* @__PURE__ */ import_jsx_runtime98.jsx(Popover.Target, { ref, refProp, children });
});
ComboboxDropdownTarget.displayName = "@mantine/core/ComboboxDropdownTarget";

// node_modules/@mantine/core/esm/components/Combobox/ComboboxEmpty/ComboboxEmpty.mjs
var import_jsx_runtime99 = __toESM(require_jsx_runtime(), 1);
var import_react134 = __toESM(require_react(), 1);
"use client";
var defaultProps30 = {};
var ComboboxEmpty = factory((props, ref) => {
  const { classNames, className, style: style2, styles, vars, ...others } = useProps("ComboboxEmpty", defaultProps30, props);
  const ctx = useComboboxContext();
  return /* @__PURE__ */ import_jsx_runtime99.jsx(Box, {
    ref,
    ...ctx.getStyles("empty", { className, classNames, styles, style: style2 }),
    ...others
  });
});
ComboboxEmpty.classes = classes15;
ComboboxEmpty.displayName = "@mantine/core/ComboboxEmpty";

// node_modules/@mantine/core/esm/components/Combobox/ComboboxEventsTarget/ComboboxEventsTarget.mjs
var import_react136 = __toESM(require_react(), 1);
var import_jsx_runtime100 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mantine/core/esm/components/Combobox/use-combobox-target-props/use-combobox-target-props.mjs
var import_react135 = __toESM(require_react(), 1);
"use client";
function useComboboxTargetProps({
  onKeyDown,
  withKeyboardNavigation,
  withAriaAttributes,
  withExpandedAttribute,
  targetType,
  autoComplete
}) {
  const ctx = useComboboxContext();
  const [selectedOptionId, setSelectedOptionId] = import_react135.useState(null);
  const handleKeyDown = (event) => {
    onKeyDown?.(event);
    if (ctx.readOnly) {
      return;
    }
    if (withKeyboardNavigation) {
      if (event.nativeEvent.isComposing) {
        return;
      }
      if (event.nativeEvent.code === "ArrowDown") {
        event.preventDefault();
        if (!ctx.store.dropdownOpened) {
          ctx.store.openDropdown("keyboard");
          setSelectedOptionId(ctx.store.selectActiveOption());
          ctx.store.updateSelectedOptionIndex("selected", { scrollIntoView: true });
        } else {
          setSelectedOptionId(ctx.store.selectNextOption());
        }
      }
      if (event.nativeEvent.code === "ArrowUp") {
        event.preventDefault();
        if (!ctx.store.dropdownOpened) {
          ctx.store.openDropdown("keyboard");
          setSelectedOptionId(ctx.store.selectActiveOption());
          ctx.store.updateSelectedOptionIndex("selected", { scrollIntoView: true });
        } else {
          setSelectedOptionId(ctx.store.selectPreviousOption());
        }
      }
      if (event.nativeEvent.code === "Enter" || event.nativeEvent.code === "NumpadEnter") {
        if (event.nativeEvent.keyCode === 229) {
          return;
        }
        const selectedOptionIndex = ctx.store.getSelectedOptionIndex();
        if (ctx.store.dropdownOpened && selectedOptionIndex !== -1) {
          event.preventDefault();
          ctx.store.clickSelectedOption();
        } else if (targetType === "button") {
          event.preventDefault();
          ctx.store.openDropdown("keyboard");
        }
      }
      if (event.key === "Escape") {
        ctx.store.closeDropdown("keyboard");
      }
      if (event.nativeEvent.code === "Space") {
        if (targetType === "button") {
          event.preventDefault();
          ctx.store.toggleDropdown("keyboard");
        }
      }
    }
  };
  const ariaAttributes = withAriaAttributes ? {
    "aria-haspopup": "listbox",
    "aria-expanded": withExpandedAttribute && !!(ctx.store.listId && ctx.store.dropdownOpened) || undefined,
    "aria-controls": ctx.store.dropdownOpened ? ctx.store.listId : undefined,
    "aria-activedescendant": ctx.store.dropdownOpened ? selectedOptionId || undefined : undefined,
    autoComplete,
    "data-expanded": ctx.store.dropdownOpened || undefined,
    "data-mantine-stop-propagation": ctx.store.dropdownOpened || undefined
  } : {};
  return {
    ...ariaAttributes,
    onKeyDown: handleKeyDown
  };
}

// node_modules/@mantine/core/esm/components/Combobox/ComboboxEventsTarget/ComboboxEventsTarget.mjs
"use client";
var defaultProps31 = {
  refProp: "ref",
  targetType: "input",
  withKeyboardNavigation: true,
  withAriaAttributes: true,
  withExpandedAttribute: false,
  autoComplete: "off"
};
var ComboboxEventsTarget = factory((props, ref) => {
  const {
    children,
    refProp,
    withKeyboardNavigation,
    withAriaAttributes,
    withExpandedAttribute,
    targetType,
    autoComplete,
    ...others
  } = useProps("ComboboxEventsTarget", defaultProps31, props);
  if (!isElement(children)) {
    throw new Error("Combobox.EventsTarget component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported");
  }
  const ctx = useComboboxContext();
  const targetProps = useComboboxTargetProps({
    targetType,
    withAriaAttributes,
    withKeyboardNavigation,
    withExpandedAttribute,
    onKeyDown: children.props.onKeyDown,
    autoComplete
  });
  return import_react136.cloneElement(children, {
    ...targetProps,
    ...others,
    [refProp]: useMergedRef(ref, ctx.store.targetRef, getRefProp(children))
  });
});
ComboboxEventsTarget.displayName = "@mantine/core/ComboboxEventsTarget";

// node_modules/@mantine/core/esm/components/Combobox/ComboboxFooter/ComboboxFooter.mjs
var import_jsx_runtime101 = __toESM(require_jsx_runtime(), 1);
var import_react137 = __toESM(require_react(), 1);
"use client";
var defaultProps32 = {};
var ComboboxFooter = factory((props, ref) => {
  const { classNames, className, style: style2, styles, vars, ...others } = useProps("ComboboxFooter", defaultProps32, props);
  const ctx = useComboboxContext();
  return /* @__PURE__ */ import_jsx_runtime101.jsx(Box, {
    ref,
    ...ctx.getStyles("footer", { className, classNames, style: style2, styles }),
    ...others,
    onMouseDown: (event) => {
      event.preventDefault();
    }
  });
});
ComboboxFooter.classes = classes15;
ComboboxFooter.displayName = "@mantine/core/ComboboxFooter";

// node_modules/@mantine/core/esm/components/Combobox/ComboboxGroup/ComboboxGroup.mjs
var import_jsx_runtime102 = __toESM(require_jsx_runtime(), 1);
var import_react138 = __toESM(require_react(), 1);
"use client";
var defaultProps33 = {};
var ComboboxGroup = factory((props, ref) => {
  const { classNames, className, style: style2, styles, vars, children, label, ...others } = useProps("ComboboxGroup", defaultProps33, props);
  const ctx = useComboboxContext();
  return /* @__PURE__ */ import_jsx_runtime102.jsxs(Box, {
    ref,
    ...ctx.getStyles("group", { className, classNames, style: style2, styles }),
    ...others,
    children: [
      label && /* @__PURE__ */ import_jsx_runtime102.jsx("div", { ...ctx.getStyles("groupLabel", { classNames, styles }), children: label }),
      children
    ]
  });
});
ComboboxGroup.classes = classes15;
ComboboxGroup.displayName = "@mantine/core/ComboboxGroup";

// node_modules/@mantine/core/esm/components/Combobox/ComboboxHeader/ComboboxHeader.mjs
var import_jsx_runtime103 = __toESM(require_jsx_runtime(), 1);
var import_react139 = __toESM(require_react(), 1);
"use client";
var defaultProps34 = {};
var ComboboxHeader = factory((props, ref) => {
  const { classNames, className, style: style2, styles, vars, ...others } = useProps("ComboboxHeader", defaultProps34, props);
  const ctx = useComboboxContext();
  return /* @__PURE__ */ import_jsx_runtime103.jsx(Box, {
    ref,
    ...ctx.getStyles("header", { className, classNames, style: style2, styles }),
    ...others,
    onMouseDown: (event) => {
      event.preventDefault();
    }
  });
});
ComboboxHeader.classes = classes15;
ComboboxHeader.displayName = "@mantine/core/ComboboxHeader";

// node_modules/@mantine/core/esm/components/Combobox/ComboboxHiddenInput/ComboboxHiddenInput.mjs
var import_jsx_runtime104 = __toESM(require_jsx_runtime(), 1);
"use client";
function ComboboxHiddenInput({
  value,
  valuesDivider = ",",
  ...others
}) {
  return /* @__PURE__ */ import_jsx_runtime104.jsx("input", {
    type: "hidden",
    value: Array.isArray(value) ? value.join(valuesDivider) : value || "",
    ...others
  });
}
ComboboxHiddenInput.displayName = "@mantine/core/ComboboxHiddenInput";

// node_modules/@mantine/core/esm/components/Combobox/ComboboxOption/ComboboxOption.mjs
var import_jsx_runtime105 = __toESM(require_jsx_runtime(), 1);
var import_react140 = __toESM(require_react(), 1);
"use client";
var defaultProps35 = {};
var ComboboxOption = factory((_props, ref) => {
  const props = useProps("ComboboxOption", defaultProps35, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    vars,
    onClick,
    id,
    active,
    onMouseDown,
    onMouseOver,
    disabled,
    selected,
    mod,
    ...others
  } = props;
  const ctx = useComboboxContext();
  const uuid = import_react140.useId();
  const _id = id || uuid;
  return /* @__PURE__ */ import_jsx_runtime105.jsx(Box, {
    ...ctx.getStyles("option", { className, classNames, styles, style: style2 }),
    ...others,
    ref,
    id: _id,
    mod: [
      "combobox-option",
      { "combobox-active": active, "combobox-disabled": disabled, "combobox-selected": selected },
      mod
    ],
    role: "option",
    onClick: (event) => {
      if (!disabled) {
        ctx.onOptionSubmit?.(props.value, props);
        onClick?.(event);
      } else {
        event.preventDefault();
      }
    },
    onMouseDown: (event) => {
      event.preventDefault();
      onMouseDown?.(event);
    },
    onMouseOver: (event) => {
      if (ctx.resetSelectionOnOptionHover) {
        ctx.store.resetSelectedOption();
      }
      onMouseOver?.(event);
    }
  });
});
ComboboxOption.classes = classes15;
ComboboxOption.displayName = "@mantine/core/ComboboxOption";

// node_modules/@mantine/core/esm/components/Combobox/ComboboxOptions/ComboboxOptions.mjs
var import_jsx_runtime106 = __toESM(require_jsx_runtime(), 1);
var import_react141 = __toESM(require_react(), 1);
"use client";
var defaultProps36 = {};
var ComboboxOptions = factory((_props, ref) => {
  const props = useProps("ComboboxOptions", defaultProps36, _props);
  const { classNames, className, style: style2, styles, id, onMouseDown, labelledBy, ...others } = props;
  const ctx = useComboboxContext();
  const _id = useId(id);
  import_react141.useEffect(() => {
    ctx.store.setListId(_id);
  }, [_id]);
  return /* @__PURE__ */ import_jsx_runtime106.jsx(Box, {
    ref,
    ...ctx.getStyles("options", { className, style: style2, classNames, styles }),
    ...others,
    id: _id,
    role: "listbox",
    "aria-labelledby": labelledBy,
    onMouseDown: (event) => {
      event.preventDefault();
      onMouseDown?.(event);
    }
  });
});
ComboboxOptions.classes = classes15;
ComboboxOptions.displayName = "@mantine/core/ComboboxOptions";

// node_modules/@mantine/core/esm/components/Combobox/ComboboxSearch/ComboboxSearch.mjs
var import_jsx_runtime107 = __toESM(require_jsx_runtime(), 1);
var import_react142 = __toESM(require_react(), 1);
"use client";
var defaultProps37 = {
  withAriaAttributes: true,
  withKeyboardNavigation: true
};
var ComboboxSearch = factory((_props, ref) => {
  const props = useProps("ComboboxSearch", defaultProps37, _props);
  const {
    classNames,
    styles,
    unstyled,
    vars,
    withAriaAttributes,
    onKeyDown,
    withKeyboardNavigation,
    size: size4,
    ...others
  } = props;
  const ctx = useComboboxContext();
  const _styles = ctx.getStyles("search");
  const targetProps = useComboboxTargetProps({
    targetType: "input",
    withAriaAttributes,
    withKeyboardNavigation,
    withExpandedAttribute: false,
    onKeyDown,
    autoComplete: "off"
  });
  return /* @__PURE__ */ import_jsx_runtime107.jsx(Input, {
    ref: useMergedRef(ref, ctx.store.searchRef),
    classNames: [{ input: _styles.className }, classNames],
    styles: [{ input: _styles.style }, styles],
    size: size4 || ctx.size,
    ...targetProps,
    ...others,
    __staticSelector: "Combobox"
  });
});
ComboboxSearch.classes = classes15;
ComboboxSearch.displayName = "@mantine/core/ComboboxSearch";

// node_modules/@mantine/core/esm/components/Combobox/ComboboxTarget/ComboboxTarget.mjs
var import_jsx_runtime108 = __toESM(require_jsx_runtime(), 1);
var import_react143 = __toESM(require_react(), 1);
"use client";
var defaultProps38 = {
  refProp: "ref",
  targetType: "input",
  withKeyboardNavigation: true,
  withAriaAttributes: true,
  withExpandedAttribute: false,
  autoComplete: "off"
};
var ComboboxTarget = factory((props, ref) => {
  const {
    children,
    refProp,
    withKeyboardNavigation,
    withAriaAttributes,
    withExpandedAttribute,
    targetType,
    autoComplete,
    ...others
  } = useProps("ComboboxTarget", defaultProps38, props);
  if (!isElement(children)) {
    throw new Error("Combobox.Target component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported");
  }
  const ctx = useComboboxContext();
  const targetProps = useComboboxTargetProps({
    targetType,
    withAriaAttributes,
    withKeyboardNavigation,
    withExpandedAttribute,
    onKeyDown: children.props.onKeyDown,
    autoComplete
  });
  const clonedElement = import_react143.cloneElement(children, {
    ...targetProps,
    ...others
  });
  return /* @__PURE__ */ import_jsx_runtime108.jsx(Popover.Target, { ref: useMergedRef(ref, ctx.store.targetRef), children: clonedElement });
});
ComboboxTarget.displayName = "@mantine/core/ComboboxTarget";

// node_modules/@mantine/core/esm/components/Combobox/use-combobox/use-combobox.mjs
var import_react144 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Combobox/use-combobox/get-index/get-index.mjs
"use client";
function getPreviousIndex2(currentIndex, elements, loop) {
  for (let i2 = currentIndex - 1;i2 >= 0; i2 -= 1) {
    if (!elements[i2].hasAttribute("data-combobox-disabled")) {
      return i2;
    }
  }
  if (loop) {
    for (let i2 = elements.length - 1;i2 > -1; i2 -= 1) {
      if (!elements[i2].hasAttribute("data-combobox-disabled")) {
        return i2;
      }
    }
  }
  return currentIndex;
}
function getNextIndex2(currentIndex, elements, loop) {
  for (let i2 = currentIndex + 1;i2 < elements.length; i2 += 1) {
    if (!elements[i2].hasAttribute("data-combobox-disabled")) {
      return i2;
    }
  }
  if (loop) {
    for (let i2 = 0;i2 < elements.length; i2 += 1) {
      if (!elements[i2].hasAttribute("data-combobox-disabled")) {
        return i2;
      }
    }
  }
  return currentIndex;
}
function getFirstIndex(elements) {
  for (let i2 = 0;i2 < elements.length; i2 += 1) {
    if (!elements[i2].hasAttribute("data-combobox-disabled")) {
      return i2;
    }
  }
  return -1;
}

// node_modules/@mantine/core/esm/components/Combobox/use-combobox/use-combobox.mjs
"use client";
function useCombobox({
  defaultOpened,
  opened,
  onOpenedChange,
  onDropdownClose,
  onDropdownOpen,
  loop = true,
  scrollBehavior = "instant"
} = {}) {
  const [dropdownOpened, setDropdownOpened] = useUncontrolled({
    value: opened,
    defaultValue: defaultOpened,
    finalValue: false,
    onChange: onOpenedChange
  });
  const listId = import_react144.useRef(null);
  const selectedOptionIndex = import_react144.useRef(-1);
  const searchRef = import_react144.useRef(null);
  const targetRef = import_react144.useRef(null);
  const focusSearchTimeout = import_react144.useRef(-1);
  const focusTargetTimeout = import_react144.useRef(-1);
  const selectedIndexUpdateTimeout = import_react144.useRef(-1);
  const openDropdown = import_react144.useCallback((eventSource = "unknown") => {
    if (!dropdownOpened) {
      setDropdownOpened(true);
      onDropdownOpen?.(eventSource);
    }
  }, [setDropdownOpened, onDropdownOpen, dropdownOpened]);
  const closeDropdown = import_react144.useCallback((eventSource = "unknown") => {
    if (dropdownOpened) {
      setDropdownOpened(false);
      onDropdownClose?.(eventSource);
    }
  }, [setDropdownOpened, onDropdownClose, dropdownOpened]);
  const toggleDropdown = import_react144.useCallback((eventSource = "unknown") => {
    if (dropdownOpened) {
      closeDropdown(eventSource);
    } else {
      openDropdown(eventSource);
    }
  }, [closeDropdown, openDropdown, dropdownOpened]);
  const clearSelectedItem = import_react144.useCallback(() => {
    const selected = document.querySelector(`#${listId.current} [data-combobox-selected]`);
    selected?.removeAttribute("data-combobox-selected");
    selected?.removeAttribute("aria-selected");
  }, []);
  const selectOption = import_react144.useCallback((index4) => {
    const list = document.getElementById(listId.current);
    const items = list?.querySelectorAll("[data-combobox-option]");
    if (!items) {
      return null;
    }
    const nextIndex = index4 >= items.length ? 0 : index4 < 0 ? items.length - 1 : index4;
    selectedOptionIndex.current = nextIndex;
    if (items?.[nextIndex] && !items[nextIndex].hasAttribute("data-combobox-disabled")) {
      clearSelectedItem();
      items[nextIndex].setAttribute("data-combobox-selected", "true");
      items[nextIndex].setAttribute("aria-selected", "true");
      items[nextIndex].scrollIntoView({ block: "nearest", behavior: scrollBehavior });
      return items[nextIndex].id;
    }
    return null;
  }, [scrollBehavior, clearSelectedItem]);
  const selectActiveOption = import_react144.useCallback(() => {
    const activeOption = document.querySelector(`#${listId.current} [data-combobox-active]`);
    if (activeOption) {
      const items = document.querySelectorAll(`#${listId.current} [data-combobox-option]`);
      const index4 = Array.from(items).findIndex((option) => option === activeOption);
      return selectOption(index4);
    }
    return selectOption(0);
  }, [selectOption]);
  const selectNextOption = import_react144.useCallback(() => selectOption(getNextIndex2(selectedOptionIndex.current, document.querySelectorAll(`#${listId.current} [data-combobox-option]`), loop)), [selectOption, loop]);
  const selectPreviousOption = import_react144.useCallback(() => selectOption(getPreviousIndex2(selectedOptionIndex.current, document.querySelectorAll(`#${listId.current} [data-combobox-option]`), loop)), [selectOption, loop]);
  const selectFirstOption = import_react144.useCallback(() => selectOption(getFirstIndex(document.querySelectorAll(`#${listId.current} [data-combobox-option]`))), [selectOption]);
  const updateSelectedOptionIndex = import_react144.useCallback((target = "selected", options) => {
    selectedIndexUpdateTimeout.current = window.setTimeout(() => {
      const items = document.querySelectorAll(`#${listId.current} [data-combobox-option]`);
      const index4 = Array.from(items).findIndex((option) => option.hasAttribute(`data-combobox-${target}`));
      selectedOptionIndex.current = index4;
      if (options?.scrollIntoView) {
        items[index4]?.scrollIntoView({ block: "nearest", behavior: scrollBehavior });
      }
    }, 0);
  }, []);
  const resetSelectedOption = import_react144.useCallback(() => {
    selectedOptionIndex.current = -1;
    clearSelectedItem();
  }, [clearSelectedItem]);
  const clickSelectedOption = import_react144.useCallback(() => {
    const items = document.querySelectorAll(`#${listId.current} [data-combobox-option]`);
    const item = items?.[selectedOptionIndex.current];
    item?.click();
  }, []);
  const setListId = import_react144.useCallback((id) => {
    listId.current = id;
  }, []);
  const focusSearchInput = import_react144.useCallback(() => {
    focusSearchTimeout.current = window.setTimeout(() => searchRef.current.focus(), 0);
  }, []);
  const focusTarget = import_react144.useCallback(() => {
    focusTargetTimeout.current = window.setTimeout(() => targetRef.current.focus(), 0);
  }, []);
  const getSelectedOptionIndex = import_react144.useCallback(() => selectedOptionIndex.current, []);
  import_react144.useEffect(() => () => {
    window.clearTimeout(focusSearchTimeout.current);
    window.clearTimeout(focusTargetTimeout.current);
    window.clearTimeout(selectedIndexUpdateTimeout.current);
  }, []);
  return {
    dropdownOpened,
    openDropdown,
    closeDropdown,
    toggleDropdown,
    selectedOptionIndex: selectedOptionIndex.current,
    getSelectedOptionIndex,
    selectOption,
    selectFirstOption,
    selectActiveOption,
    selectNextOption,
    selectPreviousOption,
    resetSelectedOption,
    updateSelectedOptionIndex,
    listId: listId.current,
    setListId,
    clickSelectedOption,
    searchRef,
    focusSearchInput,
    targetRef,
    focusTarget
  };
}

// node_modules/@mantine/core/esm/components/Combobox/Combobox.mjs
"use client";
var defaultProps39 = {
  keepMounted: true,
  withinPortal: true,
  resetSelectionOnOptionHover: false,
  width: "target",
  transitionProps: { transition: "fade", duration: 0 }
};
var varsResolver19 = createVarsResolver((_2, { size: size4, dropdownPadding }) => ({
  options: {
    "--combobox-option-fz": getFontSize(size4),
    "--combobox-option-padding": getSize(size4, "combobox-option-padding")
  },
  dropdown: {
    "--combobox-padding": dropdownPadding === undefined ? undefined : rem(dropdownPadding),
    "--combobox-option-fz": getFontSize(size4),
    "--combobox-option-padding": getSize(size4, "combobox-option-padding")
  }
}));
function Combobox(_props) {
  const props = useProps("Combobox", defaultProps39, _props);
  const {
    classNames,
    styles,
    unstyled,
    children,
    store: controlledStore,
    vars,
    onOptionSubmit,
    onClose,
    size: size4,
    dropdownPadding,
    resetSelectionOnOptionHover,
    __staticSelector,
    readOnly,
    ...others
  } = props;
  const uncontrolledStore = useCombobox();
  const store = controlledStore || uncontrolledStore;
  const getStyles2 = useStyles({
    name: __staticSelector || "Combobox",
    classes: classes15,
    props,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver19
  });
  const onDropdownClose = () => {
    onClose?.();
    store.closeDropdown();
  };
  return /* @__PURE__ */ import_jsx_runtime109.jsx(ComboboxProvider, {
    value: {
      getStyles: getStyles2,
      store,
      onOptionSubmit,
      size: size4,
      resetSelectionOnOptionHover,
      readOnly
    },
    children: /* @__PURE__ */ import_jsx_runtime109.jsx(Popover, {
      opened: store.dropdownOpened,
      ...others,
      onChange: (_opened) => !_opened && onDropdownClose(),
      withRoles: false,
      unstyled,
      children
    })
  });
}
var extendCombobox = (c2) => c2;
Combobox.extend = extendCombobox;
Combobox.classes = classes15;
Combobox.displayName = "@mantine/core/Combobox";
Combobox.Target = ComboboxTarget;
Combobox.Dropdown = ComboboxDropdown;
Combobox.Options = ComboboxOptions;
Combobox.Option = ComboboxOption;
Combobox.Search = ComboboxSearch;
Combobox.Empty = ComboboxEmpty;
Combobox.Chevron = ComboboxChevron;
Combobox.Footer = ComboboxFooter;
Combobox.Header = ComboboxHeader;
Combobox.EventsTarget = ComboboxEventsTarget;
Combobox.DropdownTarget = ComboboxDropdownTarget;
Combobox.Group = ComboboxGroup;
Combobox.ClearButton = ComboboxClearButton;
Combobox.HiddenInput = ComboboxHiddenInput;

// node_modules/@mantine/core/esm/components/Combobox/OptionsDropdown/OptionsDropdown.mjs
var import_jsx_runtime118 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mantine/core/esm/components/Checkbox/Checkbox.mjs
var import_jsx_runtime117 = __toESM(require_jsx_runtime(), 1);
var import_react154 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/InlineInput/InlineInput.mjs
var import_jsx_runtime110 = __toESM(require_jsx_runtime(), 1);
var import_react146 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/InlineInput/InlineInput.module.css.mjs
"use client";
var classes16 = { root: "m_5f75b09e", body: "m_5f6e695e", labelWrapper: "m_d3ea56bb", label: "m_8ee546b8", description: "m_328f68c0", error: "m_8e8a99cc" };

// node_modules/@mantine/core/esm/components/InlineInput/InlineInput.mjs
"use client";
var InlineInputClasses = classes16;
var InlineInput = import_react146.forwardRef(({
  __staticSelector,
  __stylesApiProps,
  className,
  classNames,
  styles,
  unstyled,
  children,
  label,
  description,
  id,
  disabled,
  error,
  size: size4,
  labelPosition = "left",
  bodyElement = "div",
  labelElement = "label",
  variant,
  style: style2,
  vars,
  mod,
  ...others
}, ref) => {
  const getStyles2 = useStyles({
    name: __staticSelector,
    props: __stylesApiProps,
    className,
    style: style2,
    classes: classes16,
    classNames,
    styles,
    unstyled
  });
  return /* @__PURE__ */ import_jsx_runtime110.jsx(Box, {
    ...getStyles2("root"),
    ref,
    __vars: {
      "--label-fz": getFontSize(size4),
      "--label-lh": getSize(size4, "label-lh")
    },
    mod: [{ "label-position": labelPosition }, mod],
    variant,
    size: size4,
    ...others,
    children: /* @__PURE__ */ import_jsx_runtime110.jsxs(Box, {
      component: bodyElement,
      htmlFor: bodyElement === "label" ? id : undefined,
      ...getStyles2("body"),
      children: [
        children,
        /* @__PURE__ */ import_jsx_runtime110.jsxs("div", { ...getStyles2("labelWrapper"), "data-disabled": disabled || undefined, children: [
          label && /* @__PURE__ */ import_jsx_runtime110.jsx(Box, {
            component: labelElement,
            htmlFor: labelElement === "label" ? id : undefined,
            ...getStyles2("label"),
            "data-disabled": disabled || undefined,
            children: label
          }),
          description && /* @__PURE__ */ import_jsx_runtime110.jsx(Input.Description, { size: size4, __inheritStyles: false, ...getStyles2("description"), children: description }),
          error && typeof error !== "boolean" && /* @__PURE__ */ import_jsx_runtime110.jsx(Input.Error, { size: size4, __inheritStyles: false, ...getStyles2("error"), children: error })
        ] })
      ]
    })
  });
});
InlineInput.displayName = "@mantine/core/InlineInput";

// node_modules/@mantine/core/esm/components/Checkbox/CheckboxCard/CheckboxCard.mjs
var import_jsx_runtime112 = __toESM(require_jsx_runtime(), 1);
var import_react149 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Checkbox/CheckboxGroup.context.mjs
var import_react147 = __toESM(require_react(), 1);
"use client";
var CheckboxGroupContext = import_react147.createContext(null);
var CheckboxGroupProvider = CheckboxGroupContext.Provider;
var useCheckboxGroupContext = () => import_react147.useContext(CheckboxGroupContext);

// node_modules/@mantine/core/esm/components/Checkbox/CheckboxCard/CheckboxCard.context.mjs
var import_react148 = __toESM(require_react(), 1);
var import_jsx_runtime111 = __toESM(require_jsx_runtime(), 1);
"use client";
var [CheckboxCardProvider, useCheckboxCardContext] = createOptionalContext();

// node_modules/@mantine/core/esm/components/Checkbox/CheckboxCard/CheckboxCard.module.css.mjs
"use client";
var classes17 = { card: "m_26775b0a" };

// node_modules/@mantine/core/esm/components/Checkbox/CheckboxCard/CheckboxCard.mjs
"use client";
var defaultProps40 = {
  withBorder: true
};
var varsResolver20 = createVarsResolver((_2, { radius }) => ({
  card: {
    "--card-radius": getRadius(radius)
  }
}));
var CheckboxCard = factory((_props, ref) => {
  const props = useProps("CheckboxCard", defaultProps40, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    checked,
    mod,
    withBorder,
    value,
    onClick,
    defaultChecked,
    onChange,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "CheckboxCard",
    classes: classes17,
    props,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver20,
    rootSelector: "card"
  });
  const ctx = useCheckboxGroupContext();
  const _checked = typeof checked === "boolean" ? checked : ctx ? ctx.value.includes(value || "") : undefined;
  const [_value, setValue] = useUncontrolled({
    value: _checked,
    defaultValue: defaultChecked,
    finalValue: false,
    onChange
  });
  return /* @__PURE__ */ import_jsx_runtime112.jsx(CheckboxCardProvider, { value: { checked: _value }, children: /* @__PURE__ */ import_jsx_runtime112.jsx(UnstyledButton, {
    ref,
    mod: [{ "with-border": withBorder, checked: _value }, mod],
    ...getStyles2("card"),
    ...others,
    role: "checkbox",
    "aria-checked": _value,
    onClick: (event) => {
      onClick?.(event);
      ctx?.onChange(value || "");
      setValue(!_value);
    }
  }) });
});
CheckboxCard.displayName = "@mantine/core/CheckboxCard";
CheckboxCard.classes = classes17;

// node_modules/@mantine/core/esm/components/Checkbox/CheckboxGroup/CheckboxGroup.mjs
var import_jsx_runtime114 = __toESM(require_jsx_runtime(), 1);
var import_react151 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/InputsGroupFieldset/InputsGroupFieldset.mjs
var import_jsx_runtime113 = __toESM(require_jsx_runtime(), 1);
var import_react150 = __toESM(require_react(), 1);
"use client";
function InputsGroupFieldset({ children, role }) {
  const ctx = useInputWrapperContext();
  if (!ctx) {
    return /* @__PURE__ */ import_jsx_runtime113.jsx(import_jsx_runtime113.Fragment, { children });
  }
  return /* @__PURE__ */ import_jsx_runtime113.jsx("div", { role, "aria-labelledby": ctx.labelId, "aria-describedby": ctx.describedBy, children });
}

// node_modules/@mantine/core/esm/components/Checkbox/CheckboxGroup/CheckboxGroup.mjs
"use client";
var defaultProps41 = {};
var CheckboxGroup = factory((props, ref) => {
  const { value, defaultValue, onChange, size: size4, wrapperProps, children, readOnly, ...others } = useProps("CheckboxGroup", defaultProps41, props);
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: [],
    onChange
  });
  const handleChange = (event) => {
    const itemValue = typeof event === "string" ? event : event.currentTarget.value;
    !readOnly && setValue(_value.includes(itemValue) ? _value.filter((item) => item !== itemValue) : [..._value, itemValue]);
  };
  return /* @__PURE__ */ import_jsx_runtime114.jsx(CheckboxGroupProvider, { value: { value: _value, onChange: handleChange, size: size4 }, children: /* @__PURE__ */ import_jsx_runtime114.jsx(Input.Wrapper, {
    size: size4,
    ref,
    ...wrapperProps,
    ...others,
    labelElement: "div",
    __staticSelector: "CheckboxGroup",
    children: /* @__PURE__ */ import_jsx_runtime114.jsx(InputsGroupFieldset, { role: "group", children })
  }) });
});
CheckboxGroup.classes = Input.Wrapper.classes;
CheckboxGroup.displayName = "@mantine/core/CheckboxGroup";

// node_modules/@mantine/core/esm/components/Checkbox/CheckboxIndicator/CheckboxIndicator.mjs
var import_jsx_runtime116 = __toESM(require_jsx_runtime(), 1);
var import_react153 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Checkbox/CheckIcon.mjs
var import_jsx_runtime115 = __toESM(require_jsx_runtime(), 1);
var import_react152 = __toESM(require_react(), 1);
"use client";
function CheckIcon({ size: size4, style: style2, ...others }) {
  const _style = size4 !== undefined ? { width: rem(size4), height: rem(size4), ...style2 } : style2;
  return /* @__PURE__ */ import_jsx_runtime115.jsx("svg", {
    viewBox: "0 0 10 7",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    style: _style,
    "aria-hidden": true,
    ...others,
    children: /* @__PURE__ */ import_jsx_runtime115.jsx("path", {
      d: "M4 4.586L1.707 2.293A1 1 0 1 0 .293 3.707l3 3a.997.997 0 0 0 1.414 0l5-5A1 1 0 1 0 8.293.293L4 4.586z",
      fill: "currentColor",
      fillRule: "evenodd",
      clipRule: "evenodd"
    })
  });
}
function CheckboxIcon({ indeterminate, ...others }) {
  if (indeterminate) {
    return /* @__PURE__ */ import_jsx_runtime115.jsx("svg", {
      xmlns: "http://www.w3.org/2000/svg",
      fill: "none",
      viewBox: "0 0 32 6",
      "aria-hidden": true,
      ...others,
      children: /* @__PURE__ */ import_jsx_runtime115.jsx("rect", { width: "32", height: "6", fill: "currentColor", rx: "3" })
    });
  }
  return /* @__PURE__ */ import_jsx_runtime115.jsx(CheckIcon, { ...others });
}

// node_modules/@mantine/core/esm/components/Checkbox/CheckboxIndicator/CheckboxIndicator.module.css.mjs
"use client";
var classes18 = { indicator: "m_5e5256ee", icon: "m_1b1c543a", "indicator--outline": "m_76e20374" };

// node_modules/@mantine/core/esm/components/Checkbox/CheckboxIndicator/CheckboxIndicator.mjs
"use client";
var defaultProps42 = {
  icon: CheckboxIcon
};
var varsResolver21 = createVarsResolver((theme, { radius, color, size: size4, iconColor, variant, autoContrast }) => {
  const parsedColor = parseThemeColor({ color: color || theme.primaryColor, theme });
  const outlineColor = parsedColor.isThemeColor && parsedColor.shade === undefined ? `var(--mantine-color-${parsedColor.color}-outline)` : parsedColor.color;
  return {
    indicator: {
      "--checkbox-size": getSize(size4, "checkbox-size"),
      "--checkbox-radius": radius === undefined ? undefined : getRadius(radius),
      "--checkbox-color": variant === "outline" ? outlineColor : getThemeColor(color, theme),
      "--checkbox-icon-color": iconColor ? getThemeColor(iconColor, theme) : getAutoContrastValue(autoContrast, theme) ? getContrastColor({ color, theme, autoContrast }) : undefined
    }
  };
});
var CheckboxIndicator = factory((_props, ref) => {
  const props = useProps("CheckboxIndicator", defaultProps42, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    icon,
    indeterminate,
    radius,
    color,
    iconColor,
    autoContrast,
    checked,
    mod,
    variant,
    disabled,
    ...others
  } = props;
  const Icon = icon;
  const getStyles2 = useStyles({
    name: "CheckboxIndicator",
    classes: classes18,
    props,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver21,
    rootSelector: "indicator"
  });
  const ctx = useCheckboxCardContext();
  const _checked = typeof checked === "boolean" || typeof indeterminate === "boolean" ? checked || indeterminate : ctx?.checked || false;
  return /* @__PURE__ */ import_jsx_runtime116.jsx(Box, {
    ref,
    ...getStyles2("indicator", { variant }),
    variant,
    mod: [{ checked: _checked, disabled }, mod],
    ...others,
    children: /* @__PURE__ */ import_jsx_runtime116.jsx(Icon, { indeterminate, ...getStyles2("icon") })
  });
});
CheckboxIndicator.displayName = "@mantine/core/CheckboxIndicator";
CheckboxIndicator.classes = classes18;

// node_modules/@mantine/core/esm/components/Checkbox/Checkbox.module.css.mjs
"use client";
var classes19 = { root: "m_bf2d988c", inner: "m_26062bec", input: "m_26063560", icon: "m_bf295423", "input--outline": "m_215c4542" };

// node_modules/@mantine/core/esm/components/Checkbox/Checkbox.mjs
"use client";
var defaultProps43 = {
  labelPosition: "right",
  icon: CheckboxIcon
};
var varsResolver22 = createVarsResolver((theme, { radius, color, size: size4, iconColor, variant, autoContrast }) => {
  const parsedColor = parseThemeColor({ color: color || theme.primaryColor, theme });
  const outlineColor = parsedColor.isThemeColor && parsedColor.shade === undefined ? `var(--mantine-color-${parsedColor.color}-outline)` : parsedColor.color;
  return {
    root: {
      "--checkbox-size": getSize(size4, "checkbox-size"),
      "--checkbox-radius": radius === undefined ? undefined : getRadius(radius),
      "--checkbox-color": variant === "outline" ? outlineColor : getThemeColor(color, theme),
      "--checkbox-icon-color": iconColor ? getThemeColor(iconColor, theme) : getAutoContrastValue(autoContrast, theme) ? getContrastColor({ color, theme, autoContrast }) : undefined
    }
  };
});
var Checkbox = factory((_props, forwardedRef) => {
  const props = useProps("Checkbox", defaultProps43, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    color,
    label,
    id,
    size: size4,
    radius,
    wrapperProps,
    checked,
    labelPosition,
    description,
    error,
    disabled,
    variant,
    indeterminate,
    icon,
    rootRef,
    iconColor,
    onChange,
    autoContrast,
    mod,
    ...others
  } = props;
  const ctx = useCheckboxGroupContext();
  const _size = size4 || ctx?.size;
  const Icon = icon;
  const getStyles2 = useStyles({
    name: "Checkbox",
    props,
    classes: classes19,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver22
  });
  const { styleProps, rest } = extractStyleProps(others);
  const uuid = useId(id);
  const contextProps = ctx ? {
    checked: ctx.value.includes(rest.value),
    onChange: (event) => {
      ctx.onChange(event);
      onChange?.(event);
    }
  } : {};
  const fallbackRef = import_react154.useRef(null);
  const ref = forwardedRef || fallbackRef;
  import_react154.useEffect(() => {
    if (ref && "current" in ref && ref.current) {
      ref.current.indeterminate = indeterminate || false;
    }
  }, [indeterminate, ref]);
  return /* @__PURE__ */ import_jsx_runtime117.jsx(InlineInput, {
    ...getStyles2("root"),
    __staticSelector: "Checkbox",
    __stylesApiProps: props,
    id: uuid,
    size: _size,
    labelPosition,
    label,
    description,
    error,
    disabled,
    classNames,
    styles,
    unstyled,
    "data-checked": contextProps.checked || checked || undefined,
    variant,
    ref: rootRef,
    mod,
    ...styleProps,
    ...wrapperProps,
    children: /* @__PURE__ */ import_jsx_runtime117.jsxs(Box, { ...getStyles2("inner"), mod: { "data-label-position": labelPosition }, children: [
      /* @__PURE__ */ import_jsx_runtime117.jsx(Box, {
        component: "input",
        id: uuid,
        ref,
        checked,
        disabled,
        mod: { error: !!error, indeterminate },
        ...getStyles2("input", { focusable: true, variant }),
        onChange,
        ...rest,
        ...contextProps,
        type: "checkbox"
      }),
      /* @__PURE__ */ import_jsx_runtime117.jsx(Icon, { indeterminate, ...getStyles2("icon") })
    ] })
  });
});
Checkbox.classes = { ...classes19, ...InlineInputClasses };
Checkbox.displayName = "@mantine/core/Checkbox";
Checkbox.Group = CheckboxGroup;
Checkbox.Indicator = CheckboxIndicator;
Checkbox.Card = CheckboxCard;

// node_modules/@mantine/core/esm/components/Combobox/OptionsDropdown/is-options-group.mjs
"use client";
function isOptionsGroup(item) {
  return "group" in item;
}

// node_modules/@mantine/core/esm/components/Combobox/OptionsDropdown/default-options-filter.mjs
"use client";
function defaultOptionsFilter({
  options,
  search,
  limit
}) {
  const parsedSearch = search.trim().toLowerCase();
  const result = [];
  for (let i2 = 0;i2 < options.length; i2 += 1) {
    const item = options[i2];
    if (result.length === limit) {
      return result;
    }
    if (isOptionsGroup(item)) {
      result.push({
        group: item.group,
        items: defaultOptionsFilter({
          options: item.items,
          search,
          limit: limit - result.length
        })
      });
    }
    if (!isOptionsGroup(item)) {
      if (item.label.toLowerCase().includes(parsedSearch)) {
        result.push(item);
      }
    }
  }
  return result;
}

// node_modules/@mantine/core/esm/components/Combobox/OptionsDropdown/is-empty-combobox-data.mjs
"use client";
function isEmptyComboboxData(data) {
  if (data.length === 0) {
    return true;
  }
  for (const item of data) {
    if (!("group" in item)) {
      return false;
    }
    if (item.items.length > 0) {
      return false;
    }
  }
  return true;
}

// node_modules/@mantine/core/esm/components/Combobox/OptionsDropdown/validate-options.mjs
"use client";
function validateOptions(options, valuesSet = /* @__PURE__ */ new Set) {
  if (!Array.isArray(options)) {
    return;
  }
  for (const option of options) {
    if (isOptionsGroup(option)) {
      validateOptions(option.items, valuesSet);
    } else {
      if (typeof option.value === "undefined") {
        throw new Error("[@mantine/core] Each option must have value property");
      }
      if (typeof option.value !== "string") {
        throw new Error(`[@mantine/core] Option value must be a string, other data formats are not supported, got ${typeof option.value}`);
      }
      if (valuesSet.has(option.value)) {
        throw new Error(`[@mantine/core] Duplicate options are not supported. Option with value "${option.value}" was provided more than once`);
      }
      valuesSet.add(option.value);
    }
  }
}

// node_modules/@mantine/core/esm/components/Combobox/OptionsDropdown/OptionsDropdown.mjs
"use client";
function isValueChecked(value, optionValue) {
  return Array.isArray(value) ? value.includes(optionValue) : value === optionValue;
}
function Option({
  data,
  withCheckIcon,
  value,
  checkIconPosition,
  unstyled,
  renderOption
}) {
  if (!isOptionsGroup(data)) {
    const checked = isValueChecked(value, data.value);
    const check = withCheckIcon && checked && /* @__PURE__ */ import_jsx_runtime118.jsx(CheckIcon, { className: classes15.optionsDropdownCheckIcon });
    const defaultContent = /* @__PURE__ */ import_jsx_runtime118.jsxs(import_jsx_runtime118.Fragment, { children: [
      checkIconPosition === "left" && check,
      /* @__PURE__ */ import_jsx_runtime118.jsx("span", { children: data.label }),
      checkIconPosition === "right" && check
    ] });
    return /* @__PURE__ */ import_jsx_runtime118.jsx(Combobox.Option, {
      value: data.value,
      disabled: data.disabled,
      className: clsx_default({ [classes15.optionsDropdownOption]: !unstyled }),
      "data-reverse": checkIconPosition === "right" || undefined,
      "data-checked": checked || undefined,
      "aria-selected": checked,
      active: checked,
      children: typeof renderOption === "function" ? renderOption({ option: data, checked }) : defaultContent
    });
  }
  const options = data.items.map((item) => /* @__PURE__ */ import_jsx_runtime118.jsx(Option, {
    data: item,
    value,
    unstyled,
    withCheckIcon,
    checkIconPosition,
    renderOption
  }, item.value));
  return /* @__PURE__ */ import_jsx_runtime118.jsx(Combobox.Group, { label: data.group, children: options });
}
function OptionsDropdown({
  data,
  hidden: hidden2,
  hiddenWhenEmpty,
  filter: filter2,
  search,
  limit,
  maxDropdownHeight,
  withScrollArea = true,
  filterOptions = true,
  withCheckIcon = false,
  value,
  checkIconPosition,
  nothingFoundMessage,
  unstyled,
  labelId,
  renderOption,
  scrollAreaProps,
  "aria-label": ariaLabel
}) {
  validateOptions(data);
  const shouldFilter = typeof search === "string";
  const filteredData = shouldFilter ? (filter2 || defaultOptionsFilter)({
    options: data,
    search: filterOptions ? search : "",
    limit: limit ?? Infinity
  }) : data;
  const isEmpty = isEmptyComboboxData(filteredData);
  const options = filteredData.map((item) => /* @__PURE__ */ import_jsx_runtime118.jsx(Option, {
    data: item,
    withCheckIcon,
    value,
    checkIconPosition,
    unstyled,
    renderOption
  }, isOptionsGroup(item) ? item.group : item.value));
  return /* @__PURE__ */ import_jsx_runtime118.jsx(Combobox.Dropdown, { hidden: hidden2 || hiddenWhenEmpty && isEmpty, "data-composed": true, children: /* @__PURE__ */ import_jsx_runtime118.jsxs(Combobox.Options, { labelledBy: labelId, "aria-label": ariaLabel, children: [
    withScrollArea ? /* @__PURE__ */ import_jsx_runtime118.jsx(ScrollArea.Autosize, {
      mah: maxDropdownHeight ?? 220,
      type: "scroll",
      scrollbarSize: "var(--combobox-padding)",
      offsetScrollbars: "y",
      ...scrollAreaProps,
      children: options
    }) : options,
    isEmpty && nothingFoundMessage && /* @__PURE__ */ import_jsx_runtime118.jsx(Combobox.Empty, { children: nothingFoundMessage })
  ] }) });
}

// node_modules/@mantine/core/esm/components/Button/Button.mjs
var import_jsx_runtime121 = __toESM(require_jsx_runtime(), 1);
var import_react157 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Button/ButtonGroup/ButtonGroup.mjs
var import_jsx_runtime119 = __toESM(require_jsx_runtime(), 1);
var import_react155 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Button/Button.module.css.mjs
"use client";
var classes20 = { root: "m_77c9d27d", inner: "m_80f1301b", label: "m_811560b9", section: "m_a74036a", loader: "m_a25b86ee", group: "m_80d6d844", groupSection: "m_70be2a01" };

// node_modules/@mantine/core/esm/components/Button/ButtonGroup/ButtonGroup.mjs
"use client";
var defaultProps44 = {
  orientation: "horizontal"
};
var varsResolver23 = createVarsResolver((_2, { borderWidth }) => ({
  group: { "--button-border-width": rem(borderWidth) }
}));
var ButtonGroup = factory((_props, ref) => {
  const props = useProps("ButtonGroup", defaultProps44, _props);
  const {
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    orientation,
    vars,
    borderWidth,
    variant,
    mod,
    ...others
  } = useProps("ButtonGroup", defaultProps44, _props);
  const getStyles2 = useStyles({
    name: "ButtonGroup",
    props,
    classes: classes20,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver23,
    rootSelector: "group"
  });
  return /* @__PURE__ */ import_jsx_runtime119.jsx(Box, {
    ...getStyles2("group"),
    ref,
    variant,
    mod: [{ "data-orientation": orientation }, mod],
    role: "group",
    ...others
  });
});
ButtonGroup.classes = classes20;
ButtonGroup.displayName = "@mantine/core/ButtonGroup";

// node_modules/@mantine/core/esm/components/Button/ButtonGroupSection/ButtonGroupSection.mjs
var import_jsx_runtime120 = __toESM(require_jsx_runtime(), 1);
var import_react156 = __toESM(require_react(), 1);
"use client";
var defaultProps45 = {};
var varsResolver24 = createVarsResolver((theme, { radius, color, gradient, variant, autoContrast, size: size4 }) => {
  const colors = theme.variantColorResolver({
    color: color || theme.primaryColor,
    theme,
    gradient,
    variant: variant || "filled",
    autoContrast
  });
  return {
    groupSection: {
      "--section-height": getSize(size4, "section-height"),
      "--section-padding-x": getSize(size4, "section-padding-x"),
      "--section-fz": size4?.includes("compact") ? getFontSize(size4.replace("compact-", "")) : getFontSize(size4),
      "--section-radius": radius === undefined ? undefined : getRadius(radius),
      "--section-bg": color || variant ? colors.background : undefined,
      "--section-color": colors.color,
      "--section-bd": color || variant ? colors.border : undefined
    }
  };
});
var ButtonGroupSection = factory((_props, ref) => {
  const props = useProps("ButtonGroupSection", defaultProps45, _props);
  const {
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    variant,
    gradient,
    radius,
    autoContrast,
    ...others
  } = useProps("ButtonGroupSection", defaultProps45, _props);
  const getStyles2 = useStyles({
    name: "ButtonGroupSection",
    props,
    classes: classes20,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver24,
    rootSelector: "groupSection"
  });
  return /* @__PURE__ */ import_jsx_runtime120.jsx(Box, { ...getStyles2("groupSection"), ref, variant, ...others });
});
ButtonGroupSection.classes = classes20;
ButtonGroupSection.displayName = "@mantine/core/ButtonGroupSection";

// node_modules/@mantine/core/esm/components/Button/Button.mjs
"use client";
var loaderTransition = {
  in: { opacity: 1, transform: `translate(-50%, calc(-50% + ${rem(1)}))` },
  out: { opacity: 0, transform: "translate(-50%, -200%)" },
  common: { transformOrigin: "center" },
  transitionProperty: "transform, opacity"
};
var defaultProps46 = {};
var varsResolver25 = createVarsResolver((theme, { radius, color, gradient, variant, size: size4, justify, autoContrast }) => {
  const colors = theme.variantColorResolver({
    color: color || theme.primaryColor,
    theme,
    gradient,
    variant: variant || "filled",
    autoContrast
  });
  return {
    root: {
      "--button-justify": justify,
      "--button-height": getSize(size4, "button-height"),
      "--button-padding-x": getSize(size4, "button-padding-x"),
      "--button-fz": size4?.includes("compact") ? getFontSize(size4.replace("compact-", "")) : getFontSize(size4),
      "--button-radius": radius === undefined ? undefined : getRadius(radius),
      "--button-bg": color || variant ? colors.background : undefined,
      "--button-hover": color || variant ? colors.hover : undefined,
      "--button-color": colors.color,
      "--button-bd": color || variant ? colors.border : undefined,
      "--button-hover-color": color || variant ? colors.hoverColor : undefined
    }
  };
});
var Button = polymorphicFactory((_props, ref) => {
  const props = useProps("Button", defaultProps46, _props);
  const {
    style: style2,
    vars,
    className,
    color,
    disabled,
    children,
    leftSection,
    rightSection,
    fullWidth,
    variant,
    radius,
    loading,
    loaderProps,
    gradient,
    classNames,
    styles,
    unstyled,
    "data-disabled": dataDisabled,
    autoContrast,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Button",
    props,
    classes: classes20,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver25
  });
  const hasLeftSection = !!leftSection;
  const hasRightSection = !!rightSection;
  return /* @__PURE__ */ import_jsx_runtime121.jsxs(UnstyledButton, {
    ref,
    ...getStyles2("root", { active: !disabled && !loading && !dataDisabled }),
    unstyled,
    variant,
    disabled: disabled || loading,
    mod: [
      {
        disabled: disabled || dataDisabled,
        loading,
        block: fullWidth,
        "with-left-section": hasLeftSection,
        "with-right-section": hasRightSection
      },
      mod
    ],
    ...others,
    children: [
      /* @__PURE__ */ import_jsx_runtime121.jsx(Transition, { mounted: !!loading, transition: loaderTransition, duration: 150, children: (transitionStyles) => /* @__PURE__ */ import_jsx_runtime121.jsx(Box, { component: "span", ...getStyles2("loader", { style: transitionStyles }), "aria-hidden": true, children: /* @__PURE__ */ import_jsx_runtime121.jsx(Loader, {
        color: "var(--button-color)",
        size: "calc(var(--button-height) / 1.8)",
        ...loaderProps
      }) }) }),
      /* @__PURE__ */ import_jsx_runtime121.jsxs("span", { ...getStyles2("inner"), children: [
        leftSection && /* @__PURE__ */ import_jsx_runtime121.jsx(Box, { component: "span", ...getStyles2("section"), mod: { position: "left" }, children: leftSection }),
        /* @__PURE__ */ import_jsx_runtime121.jsx(Box, { component: "span", mod: { loading }, ...getStyles2("label"), children }),
        rightSection && /* @__PURE__ */ import_jsx_runtime121.jsx(Box, { component: "span", ...getStyles2("section"), mod: { position: "right" }, children: rightSection })
      ] })
    ]
  });
});
Button.classes = classes20;
Button.displayName = "@mantine/core/Button";
Button.Group = ButtonGroup;
Button.GroupSection = ButtonGroupSection;
// node_modules/@mantine/core/esm/components/Card/Card.mjs
var import_jsx_runtime124 = __toESM(require_jsx_runtime(), 1);
var import_react160 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Card/Card.context.mjs
var import_react158 = __toESM(require_react(), 1);
var import_jsx_runtime122 = __toESM(require_jsx_runtime(), 1);
"use client";
var [CardProvider, useCardContext] = createSafeContext("Card component was not found in tree");

// node_modules/@mantine/core/esm/components/Card/CardSection/CardSection.mjs
var import_jsx_runtime123 = __toESM(require_jsx_runtime(), 1);
var import_react159 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Card/Card.module.css.mjs
"use client";
var classes21 = { root: "m_e615b15f", section: "m_599a2148" };

// node_modules/@mantine/core/esm/components/Card/CardSection/CardSection.mjs
"use client";
var defaultProps47 = {};
var CardSection = polymorphicFactory((_props, ref) => {
  const props = useProps("CardSection", defaultProps47, _props);
  const { classNames, className, style: style2, styles, vars, withBorder, inheritPadding, mod, ...others } = props;
  const ctx = useCardContext();
  return /* @__PURE__ */ import_jsx_runtime123.jsx(Box, {
    ref,
    mod: [{ "with-border": withBorder, "inherit-padding": inheritPadding }, mod],
    ...ctx.getStyles("section", { className, style: style2, styles, classNames }),
    ...others
  });
});
CardSection.classes = classes21;
CardSection.displayName = "@mantine/core/CardSection";

// node_modules/@mantine/core/esm/components/Card/Card.mjs
"use client";
var defaultProps48 = {};
var varsResolver26 = createVarsResolver((_2, { padding }) => ({
  root: {
    "--card-padding": getSpacing(padding)
  }
}));
var Card = polymorphicFactory((_props, ref) => {
  const props = useProps("Card", defaultProps48, _props);
  const { classNames, className, style: style2, styles, unstyled, vars, children, padding, ...others } = props;
  const getStyles2 = useStyles({
    name: "Card",
    props,
    classes: classes21,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver26
  });
  const _children = import_react160.Children.toArray(children);
  const content = _children.map((child, index4) => {
    if (typeof child === "object" && child && "type" in child && child.type === CardSection) {
      return import_react160.cloneElement(child, {
        "data-first-section": index4 === 0 || undefined,
        "data-last-section": index4 === _children.length - 1 || undefined
      });
    }
    return child;
  });
  return /* @__PURE__ */ import_jsx_runtime124.jsx(CardProvider, { value: { getStyles: getStyles2 }, children: /* @__PURE__ */ import_jsx_runtime124.jsx(Paper, { ref, unstyled, ...getStyles2("root"), ...others, children: content }) });
});
Card.classes = classes21;
Card.displayName = "@mantine/core/Card";
Card.Section = CardSection;
// node_modules/@mantine/core/esm/components/Center/Center.mjs
var import_jsx_runtime125 = __toESM(require_jsx_runtime(), 1);
var import_react161 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Center/Center.module.css.mjs
"use client";
var classes22 = { root: "m_4451eb3a" };

// node_modules/@mantine/core/esm/components/Center/Center.mjs
"use client";
var defaultProps49 = {};
var Center = polymorphicFactory((_props, ref) => {
  const props = useProps("Center", defaultProps49, _props);
  const { classNames, className, style: style2, styles, unstyled, vars, inline: inline4, mod, ...others } = props;
  const getStyles2 = useStyles({
    name: "Center",
    props,
    classes: classes22,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars
  });
  return /* @__PURE__ */ import_jsx_runtime125.jsx(Box, { ref, mod: [{ inline: inline4 }, mod], ...getStyles2("root"), ...others });
});
Center.classes = classes22;
Center.displayName = "@mantine/core/Center";
// node_modules/@mantine/core/esm/components/Divider/Divider.mjs
var import_jsx_runtime126 = __toESM(require_jsx_runtime(), 1);
var import_react162 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Divider/Divider.module.css.mjs
"use client";
var classes23 = { root: "m_3eebeb36", label: "m_9e365f20" };

// node_modules/@mantine/core/esm/components/Divider/Divider.mjs
"use client";
var defaultProps50 = {
  orientation: "horizontal"
};
var varsResolver27 = createVarsResolver((theme, { color, variant, size: size4 }) => ({
  root: {
    "--divider-color": color ? getThemeColor(color, theme) : undefined,
    "--divider-border-style": variant,
    "--divider-size": getSize(size4, "divider-size")
  }
}));
var Divider = factory((_props, ref) => {
  const props = useProps("Divider", defaultProps50, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    color,
    orientation,
    label,
    labelPosition,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Divider",
    classes: classes23,
    props,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver27
  });
  return /* @__PURE__ */ import_jsx_runtime126.jsx(Box, {
    ref,
    mod: [{ orientation, "with-label": !!label }, mod],
    ...getStyles2("root"),
    ...others,
    role: "separator",
    children: label && /* @__PURE__ */ import_jsx_runtime126.jsx(Box, { component: "span", mod: { position: labelPosition }, ...getStyles2("label"), children: label })
  });
});
Divider.classes = classes23;
Divider.displayName = "@mantine/core/Divider";
// node_modules/@mantine/core/esm/components/Drawer/Drawer.mjs
var import_jsx_runtime136 = __toESM(require_jsx_runtime(), 1);
var import_react172 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Drawer/DrawerBody.mjs
var import_jsx_runtime128 = __toESM(require_jsx_runtime(), 1);
var import_react164 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Drawer/Drawer.context.mjs
var import_react163 = __toESM(require_react(), 1);
var import_jsx_runtime127 = __toESM(require_jsx_runtime(), 1);
"use client";
var [DrawerProvider, useDrawerContext] = createSafeContext("Drawer component was not found in tree");

// node_modules/@mantine/core/esm/components/Drawer/Drawer.module.css.mjs
"use client";
var classes24 = { root: "m_f11b401e", header: "m_5a7c2c9", content: "m_b8a05bbd", inner: "m_31cd769a" };

// node_modules/@mantine/core/esm/components/Drawer/DrawerBody.mjs
"use client";
var defaultProps51 = {};
var DrawerBody = factory((_props, ref) => {
  const props = useProps("DrawerBody", defaultProps51, _props);
  const { classNames, className, style: style2, styles, vars, ...others } = props;
  const ctx = useDrawerContext();
  return /* @__PURE__ */ import_jsx_runtime128.jsx(ModalBaseBody, {
    ref,
    ...ctx.getStyles("body", { classNames, style: style2, styles, className }),
    ...others
  });
});
DrawerBody.classes = classes24;
DrawerBody.displayName = "@mantine/core/DrawerBody";

// node_modules/@mantine/core/esm/components/Drawer/DrawerCloseButton.mjs
var import_jsx_runtime129 = __toESM(require_jsx_runtime(), 1);
var import_react165 = __toESM(require_react(), 1);
"use client";
var defaultProps52 = {};
var DrawerCloseButton = factory((_props, ref) => {
  const props = useProps("DrawerCloseButton", defaultProps52, _props);
  const { classNames, className, style: style2, styles, vars, ...others } = props;
  const ctx = useDrawerContext();
  return /* @__PURE__ */ import_jsx_runtime129.jsx(ModalBaseCloseButton, {
    ref,
    ...ctx.getStyles("close", { classNames, style: style2, styles, className }),
    ...others
  });
});
DrawerCloseButton.classes = classes24;
DrawerCloseButton.displayName = "@mantine/core/DrawerCloseButton";

// node_modules/@mantine/core/esm/components/Drawer/DrawerContent.mjs
var import_jsx_runtime130 = __toESM(require_jsx_runtime(), 1);
var import_react166 = __toESM(require_react(), 1);
"use client";
var defaultProps53 = {};
var DrawerContent = factory((_props, ref) => {
  const props = useProps("DrawerContent", defaultProps53, _props);
  const { classNames, className, style: style2, styles, vars, children, radius, __hidden, ...others } = props;
  const ctx = useDrawerContext();
  const Scroll = ctx.scrollAreaComponent || NativeScrollArea;
  return /* @__PURE__ */ import_jsx_runtime130.jsx(ModalBaseContent, {
    ...ctx.getStyles("content", { className, style: style2, styles, classNames }),
    innerProps: ctx.getStyles("inner", { className, style: style2, styles, classNames }),
    ref,
    ...others,
    radius: radius || ctx.radius || 0,
    "data-hidden": __hidden || undefined,
    children: /* @__PURE__ */ import_jsx_runtime130.jsx(Scroll, { style: { height: "calc(100vh - var(--drawer-offset) * 2)" }, children })
  });
});
DrawerContent.classes = classes24;
DrawerContent.displayName = "@mantine/core/DrawerContent";

// node_modules/@mantine/core/esm/components/Drawer/DrawerHeader.mjs
var import_jsx_runtime131 = __toESM(require_jsx_runtime(), 1);
var import_react167 = __toESM(require_react(), 1);
"use client";
var defaultProps54 = {};
var DrawerHeader = factory((_props, ref) => {
  const props = useProps("DrawerHeader", defaultProps54, _props);
  const { classNames, className, style: style2, styles, vars, ...others } = props;
  const ctx = useDrawerContext();
  return /* @__PURE__ */ import_jsx_runtime131.jsx(ModalBaseHeader, {
    ref,
    ...ctx.getStyles("header", { classNames, style: style2, styles, className }),
    ...others
  });
});
DrawerHeader.classes = classes24;
DrawerHeader.displayName = "@mantine/core/DrawerHeader";

// node_modules/@mantine/core/esm/components/Drawer/DrawerOverlay.mjs
var import_jsx_runtime132 = __toESM(require_jsx_runtime(), 1);
var import_react168 = __toESM(require_react(), 1);
"use client";
var defaultProps55 = {};
var DrawerOverlay = factory((_props, ref) => {
  const props = useProps("DrawerOverlay", defaultProps55, _props);
  const { classNames, className, style: style2, styles, vars, ...others } = props;
  const ctx = useDrawerContext();
  return /* @__PURE__ */ import_jsx_runtime132.jsx(ModalBaseOverlay, {
    ref,
    ...ctx.getStyles("overlay", { classNames, style: style2, styles, className }),
    ...others
  });
});
DrawerOverlay.classes = classes24;
DrawerOverlay.displayName = "@mantine/core/DrawerOverlay";

// node_modules/@mantine/core/esm/components/Drawer/DrawerRoot.mjs
var import_jsx_runtime133 = __toESM(require_jsx_runtime(), 1);
var import_react169 = __toESM(require_react(), 1);
"use client";
function getDrawerAlign(position2) {
  switch (position2) {
    case "top":
      return "flex-start";
    case "bottom":
      return "flex-end";
    default:
      return;
  }
}
function getDrawerFlex(position2) {
  if (position2 === "top" || position2 === "bottom") {
    return "0 0 calc(100% - var(--drawer-offset, 0rem) * 2)";
  }
  return;
}
var transitions2 = {
  top: "slide-down",
  bottom: "slide-up",
  left: "slide-right",
  right: "slide-left"
};
var rtlTransitions = {
  top: "slide-down",
  bottom: "slide-up",
  right: "slide-right",
  left: "slide-left"
};
var defaultProps56 = {
  closeOnClickOutside: true,
  withinPortal: true,
  lockScroll: true,
  trapFocus: true,
  returnFocus: true,
  closeOnEscape: true,
  keepMounted: false,
  zIndex: getDefaultZIndex("modal"),
  position: "left"
};
var varsResolver28 = createVarsResolver((_2, { position: position2, size: size4, offset: offset4 }) => ({
  root: {
    "--drawer-size": getSize(size4, "drawer-size"),
    "--drawer-flex": getDrawerFlex(position2),
    "--drawer-height": position2 === "left" || position2 === "right" ? undefined : "var(--drawer-size)",
    "--drawer-align": getDrawerAlign(position2),
    "--drawer-justify": position2 === "right" ? "flex-end" : undefined,
    "--drawer-offset": rem(offset4)
  }
}));
var DrawerRoot = factory((_props, ref) => {
  const props = useProps("DrawerRoot", defaultProps56, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    scrollAreaComponent,
    position: position2,
    transitionProps,
    radius,
    ...others
  } = props;
  const { dir } = useDirection();
  const getStyles2 = useStyles({
    name: "Drawer",
    classes: classes24,
    props,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver28
  });
  const drawerTransition = (dir === "rtl" ? rtlTransitions : transitions2)[position2];
  return /* @__PURE__ */ import_jsx_runtime133.jsx(DrawerProvider, { value: { scrollAreaComponent, getStyles: getStyles2, radius }, children: /* @__PURE__ */ import_jsx_runtime133.jsx(ModalBase, {
    ref,
    ...getStyles2("root"),
    transitionProps: { transition: drawerTransition, ...transitionProps },
    unstyled,
    ...others
  }) });
});
DrawerRoot.classes = classes24;
DrawerRoot.displayName = "@mantine/core/DrawerRoot";

// node_modules/@mantine/core/esm/components/Drawer/DrawerStack.mjs
var import_jsx_runtime134 = __toESM(require_jsx_runtime(), 1);
var import_react170 = __toESM(require_react(), 1);
"use client";
var [DrawerStackProvider, useDrawerStackContext] = createOptionalContext();
function DrawerStack({ children }) {
  const [stack, setStack] = import_react170.useState([]);
  const [maxZIndex, setMaxZIndex] = import_react170.useState(getDefaultZIndex("modal"));
  return /* @__PURE__ */ import_jsx_runtime134.jsx(DrawerStackProvider, {
    value: {
      stack,
      addModal: (id, zIndex) => {
        setStack((current2) => [.../* @__PURE__ */ new Set([...current2, id])]);
        setMaxZIndex((current2) => typeof zIndex === "number" && typeof current2 === "number" ? Math.max(current2, zIndex) : current2);
      },
      removeModal: (id) => setStack((current2) => current2.filter((currentId) => currentId !== id)),
      getZIndex: (id) => `calc(${maxZIndex} + ${stack.indexOf(id)} + 1)`,
      currentId: stack[stack.length - 1],
      maxZIndex
    },
    children
  });
}
DrawerStack.displayName = "@mantine/core/DrawerStack";

// node_modules/@mantine/core/esm/components/Drawer/DrawerTitle.mjs
var import_jsx_runtime135 = __toESM(require_jsx_runtime(), 1);
var import_react171 = __toESM(require_react(), 1);
"use client";
var defaultProps57 = {};
var DrawerTitle = factory((_props, ref) => {
  const props = useProps("DrawerTitle", defaultProps57, _props);
  const { classNames, className, style: style2, styles, vars, ...others } = props;
  const ctx = useDrawerContext();
  return /* @__PURE__ */ import_jsx_runtime135.jsx(ModalBaseTitle, {
    ref,
    ...ctx.getStyles("title", { classNames, style: style2, styles, className }),
    ...others
  });
});
DrawerTitle.classes = classes24;
DrawerTitle.displayName = "@mantine/core/DrawerTitle";

// node_modules/@mantine/core/esm/components/Drawer/Drawer.mjs
"use client";
var defaultProps58 = {
  closeOnClickOutside: true,
  withinPortal: true,
  lockScroll: true,
  trapFocus: true,
  returnFocus: true,
  closeOnEscape: true,
  keepMounted: false,
  zIndex: getDefaultZIndex("modal"),
  withOverlay: true,
  withCloseButton: true
};
var Drawer = factory((_props, ref) => {
  const {
    title,
    withOverlay,
    overlayProps,
    withCloseButton,
    closeButtonProps,
    children,
    opened,
    stackId,
    zIndex,
    ...others
  } = useProps("Drawer", defaultProps58, _props);
  const ctx = useDrawerStackContext();
  const hasHeader = !!title || withCloseButton;
  const stackProps = ctx && stackId ? {
    closeOnEscape: ctx.currentId === stackId,
    trapFocus: ctx.currentId === stackId,
    zIndex: ctx.getZIndex(stackId)
  } : {};
  const overlayVisible = withOverlay === false ? false : stackId && ctx ? ctx.currentId === stackId : opened;
  import_react172.useEffect(() => {
    if (ctx && stackId) {
      opened ? ctx.addModal(stackId, zIndex || getDefaultZIndex("modal")) : ctx.removeModal(stackId);
    }
  }, [opened, stackId, zIndex]);
  return /* @__PURE__ */ import_jsx_runtime136.jsxs(DrawerRoot, {
    ref,
    opened,
    zIndex: ctx && stackId ? ctx.getZIndex(stackId) : zIndex,
    ...others,
    ...stackProps,
    children: [
      withOverlay && /* @__PURE__ */ import_jsx_runtime136.jsx(DrawerOverlay, {
        visible: overlayVisible,
        transitionProps: ctx && stackId ? { duration: 0 } : undefined,
        ...overlayProps
      }),
      /* @__PURE__ */ import_jsx_runtime136.jsxs(DrawerContent, { __hidden: ctx && stackId && opened ? stackId !== ctx.currentId : false, children: [
        hasHeader && /* @__PURE__ */ import_jsx_runtime136.jsxs(DrawerHeader, { children: [
          title && /* @__PURE__ */ import_jsx_runtime136.jsx(DrawerTitle, { children: title }),
          withCloseButton && /* @__PURE__ */ import_jsx_runtime136.jsx(DrawerCloseButton, { ...closeButtonProps })
        ] }),
        /* @__PURE__ */ import_jsx_runtime136.jsx(DrawerBody, { children })
      ] })
    ]
  });
});
Drawer.classes = classes24;
Drawer.displayName = "@mantine/core/Drawer";
Drawer.Root = DrawerRoot;
Drawer.Overlay = DrawerOverlay;
Drawer.Content = DrawerContent;
Drawer.Body = DrawerBody;
Drawer.Header = DrawerHeader;
Drawer.Title = DrawerTitle;
Drawer.CloseButton = DrawerCloseButton;
Drawer.Stack = DrawerStack;
// node_modules/@mantine/core/esm/components/Floating/use-delayed-hover.mjs
var import_react173 = __toESM(require_react(), 1);
"use client";
function useDelayedHover({ open, close, openDelay, closeDelay }) {
  const openTimeout = import_react173.useRef(-1);
  const closeTimeout = import_react173.useRef(-1);
  const clearTimeouts = () => {
    window.clearTimeout(openTimeout.current);
    window.clearTimeout(closeTimeout.current);
  };
  const openDropdown = () => {
    clearTimeouts();
    if (openDelay === 0 || openDelay === undefined) {
      open();
    } else {
      openTimeout.current = window.setTimeout(open, openDelay);
    }
  };
  const closeDropdown = () => {
    clearTimeouts();
    if (closeDelay === 0 || closeDelay === undefined) {
      close();
    } else {
      closeTimeout.current = window.setTimeout(close, closeDelay);
    }
  };
  import_react173.useEffect(() => clearTimeouts, []);
  return { openDropdown, closeDropdown };
}

// node_modules/@mantine/core/esm/components/Grid/Grid.mjs
var import_jsx_runtime141 = __toESM(require_jsx_runtime(), 1);
var import_react178 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Grid/Grid.context.mjs
var import_react174 = __toESM(require_react(), 1);
var import_jsx_runtime137 = __toESM(require_jsx_runtime(), 1);
"use client";
var [GridProvider, useGridContext] = createSafeContext("Grid component was not found in tree");

// node_modules/@mantine/core/esm/components/Grid/GridCol/GridCol.mjs
var import_jsx_runtime139 = __toESM(require_jsx_runtime(), 1);
var import_react176 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Grid/GridCol/GridColVariables.mjs
var import_jsx_runtime138 = __toESM(require_jsx_runtime(), 1);
var import_react175 = __toESM(require_react(), 1);
"use client";
var getColumnFlexBasis = (colSpan, columns) => {
  if (colSpan === "content") {
    return "auto";
  }
  if (colSpan === "auto") {
    return "0rem";
  }
  return colSpan ? `${100 / (columns / colSpan)}%` : undefined;
};
var getColumnMaxWidth = (colSpan, columns, grow) => {
  if (grow || colSpan === "auto") {
    return "100%";
  }
  if (colSpan === "content") {
    return "unset";
  }
  return getColumnFlexBasis(colSpan, columns);
};
var getColumnFlexGrow = (colSpan, grow) => {
  if (!colSpan) {
    return;
  }
  return colSpan === "auto" || grow ? "1" : "auto";
};
var getColumnOffset = (offset4, columns) => offset4 === 0 ? "0" : offset4 ? `${100 / (columns / offset4)}%` : undefined;
function GridColVariables({ span, order, offset: offset4, selector }) {
  const theme = useMantineTheme();
  const ctx = useGridContext();
  const _breakpoints = ctx.breakpoints || theme.breakpoints;
  const baseValue = getBaseValue(span);
  const baseSpan = baseValue === undefined ? 12 : getBaseValue(span);
  const baseStyles = filterProps({
    "--col-order": getBaseValue(order)?.toString(),
    "--col-flex-grow": getColumnFlexGrow(baseSpan, ctx.grow),
    "--col-flex-basis": getColumnFlexBasis(baseSpan, ctx.columns),
    "--col-width": baseSpan === "content" ? "auto" : undefined,
    "--col-max-width": getColumnMaxWidth(baseSpan, ctx.columns, ctx.grow),
    "--col-offset": getColumnOffset(getBaseValue(offset4), ctx.columns)
  });
  const queries = keys(_breakpoints).reduce((acc, breakpoint) => {
    if (!acc[breakpoint]) {
      acc[breakpoint] = {};
    }
    if (typeof order === "object" && order[breakpoint] !== undefined) {
      acc[breakpoint]["--col-order"] = order[breakpoint]?.toString();
    }
    if (typeof span === "object" && span[breakpoint] !== undefined) {
      acc[breakpoint]["--col-flex-grow"] = getColumnFlexGrow(span[breakpoint], ctx.grow);
      acc[breakpoint]["--col-flex-basis"] = getColumnFlexBasis(span[breakpoint], ctx.columns);
      acc[breakpoint]["--col-width"] = span[breakpoint] === "content" ? "auto" : undefined;
      acc[breakpoint]["--col-max-width"] = getColumnMaxWidth(span[breakpoint], ctx.columns, ctx.grow);
    }
    if (typeof offset4 === "object" && offset4[breakpoint] !== undefined) {
      acc[breakpoint]["--col-offset"] = getColumnOffset(offset4[breakpoint], ctx.columns);
    }
    return acc;
  }, {});
  const sortedBreakpoints = getSortedBreakpoints(keys(queries), _breakpoints).filter((breakpoint) => keys(queries[breakpoint.value]).length > 0);
  const values2 = sortedBreakpoints.map((breakpoint) => ({
    query: ctx.type === "container" ? `mantine-grid (min-width: ${_breakpoints[breakpoint.value]})` : `(min-width: ${_breakpoints[breakpoint.value]})`,
    styles: queries[breakpoint.value]
  }));
  return /* @__PURE__ */ import_jsx_runtime138.jsx(InlineStyles, {
    styles: baseStyles,
    media: ctx.type === "container" ? undefined : values2,
    container: ctx.type === "container" ? values2 : undefined,
    selector
  });
}

// node_modules/@mantine/core/esm/components/Grid/Grid.module.css.mjs
"use client";
var classes25 = { container: "m_8478a6da", root: "m_410352e9", inner: "m_dee7bd2f", col: "m_96bdd299" };

// node_modules/@mantine/core/esm/components/Grid/GridCol/GridCol.mjs
"use client";
var defaultProps59 = {
  span: 12
};
var GridCol = factory((_props, ref) => {
  const props = useProps("GridCol", defaultProps59, _props);
  const { classNames, className, style: style2, styles, vars, span, order, offset: offset4, ...others } = props;
  const ctx = useGridContext();
  const responsiveClassName = useRandomClassName();
  return /* @__PURE__ */ import_jsx_runtime139.jsxs(import_jsx_runtime139.Fragment, { children: [
    /* @__PURE__ */ import_jsx_runtime139.jsx(GridColVariables, {
      selector: `.${responsiveClassName}`,
      span,
      order,
      offset: offset4
    }),
    /* @__PURE__ */ import_jsx_runtime139.jsx(Box, {
      ref,
      ...ctx.getStyles("col", {
        className: clsx_default(className, responsiveClassName),
        style: style2,
        classNames,
        styles
      }),
      ...others
    })
  ] });
});
GridCol.classes = classes25;
GridCol.displayName = "@mantine/core/GridCol";

// node_modules/@mantine/core/esm/components/Grid/GridVariables.mjs
var import_jsx_runtime140 = __toESM(require_jsx_runtime(), 1);
var import_react177 = __toESM(require_react(), 1);
"use client";
function GridVariables({ gutter, selector, breakpoints, type }) {
  const theme = useMantineTheme();
  const _breakpoints = breakpoints || theme.breakpoints;
  const baseStyles = filterProps({
    "--grid-gutter": getSpacing(getBaseValue(gutter))
  });
  const queries = keys(_breakpoints).reduce((acc, breakpoint) => {
    if (!acc[breakpoint]) {
      acc[breakpoint] = {};
    }
    if (typeof gutter === "object" && gutter[breakpoint] !== undefined) {
      acc[breakpoint]["--grid-gutter"] = getSpacing(gutter[breakpoint]);
    }
    return acc;
  }, {});
  const sortedBreakpoints = getSortedBreakpoints(keys(queries), _breakpoints).filter((breakpoint) => keys(queries[breakpoint.value]).length > 0);
  const values2 = sortedBreakpoints.map((breakpoint) => ({
    query: type === "container" ? `mantine-grid (min-width: ${_breakpoints[breakpoint.value]})` : `(min-width: ${_breakpoints[breakpoint.value]})`,
    styles: queries[breakpoint.value]
  }));
  return /* @__PURE__ */ import_jsx_runtime140.jsx(InlineStyles, {
    styles: baseStyles,
    media: type === "container" ? undefined : values2,
    container: type === "container" ? values2 : undefined,
    selector
  });
}

// node_modules/@mantine/core/esm/components/Grid/Grid.mjs
"use client";
var defaultProps60 = {
  gutter: "md",
  grow: false,
  columns: 12
};
var varsResolver29 = createVarsResolver((_2, { justify, align, overflow }) => ({
  root: {
    "--grid-justify": justify,
    "--grid-align": align,
    "--grid-overflow": overflow
  }
}));
var Grid = factory((_props, ref) => {
  const props = useProps("Grid", defaultProps60, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    grow,
    gutter,
    columns,
    align,
    justify,
    children,
    breakpoints,
    type,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Grid",
    classes: classes25,
    props,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver29
  });
  const responsiveClassName = useRandomClassName();
  if (type === "container" && breakpoints) {
    return /* @__PURE__ */ import_jsx_runtime141.jsxs(GridProvider, { value: { getStyles: getStyles2, grow, columns: columns || 12, breakpoints, type }, children: [
      /* @__PURE__ */ import_jsx_runtime141.jsx(GridVariables, { selector: `.${responsiveClassName}`, ...props }),
      /* @__PURE__ */ import_jsx_runtime141.jsx("div", { ...getStyles2("container"), children: /* @__PURE__ */ import_jsx_runtime141.jsx(Box, { ref, ...getStyles2("root", { className: responsiveClassName }), ...others, children: /* @__PURE__ */ import_jsx_runtime141.jsx("div", { ...getStyles2("inner"), children }) }) })
    ] });
  }
  return /* @__PURE__ */ import_jsx_runtime141.jsxs(GridProvider, { value: { getStyles: getStyles2, grow, columns: columns || 12, breakpoints, type }, children: [
    /* @__PURE__ */ import_jsx_runtime141.jsx(GridVariables, { selector: `.${responsiveClassName}`, ...props }),
    /* @__PURE__ */ import_jsx_runtime141.jsx(Box, { ref, ...getStyles2("root", { className: responsiveClassName }), ...others, children: /* @__PURE__ */ import_jsx_runtime141.jsx("div", { ...getStyles2("inner"), children }) })
  ] });
});
Grid.classes = classes25;
Grid.displayName = "@mantine/core/Grid";
Grid.Col = GridCol;
// node_modules/@mantine/core/esm/components/List/List.mjs
var import_jsx_runtime144 = __toESM(require_jsx_runtime(), 1);
var import_react181 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/List/List.context.mjs
var import_react179 = __toESM(require_react(), 1);
var import_jsx_runtime142 = __toESM(require_jsx_runtime(), 1);
"use client";
var [ListProvider, useListContext] = createSafeContext("List component was not found in tree");

// node_modules/@mantine/core/esm/components/List/ListItem/ListItem.mjs
var import_jsx_runtime143 = __toESM(require_jsx_runtime(), 1);
var import_react180 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/List/List.module.css.mjs
"use client";
var classes26 = { root: "m_abbac491", item: "m_abb6bec2", itemWrapper: "m_75cd9f71", itemIcon: "m_60f83e5b" };

// node_modules/@mantine/core/esm/components/List/ListItem/ListItem.mjs
"use client";
var defaultProps61 = {};
var ListItem = factory((_props, ref) => {
  const props = useProps("ListItem", defaultProps61, _props);
  const { classNames, className, style: style2, styles, vars, icon, children, mod, ...others } = props;
  const ctx = useListContext();
  const _icon = icon || ctx.icon;
  const stylesApiProps = { classNames, styles };
  return /* @__PURE__ */ import_jsx_runtime143.jsx(Box, {
    ...ctx.getStyles("item", { ...stylesApiProps, className, style: style2 }),
    component: "li",
    mod: [{ "with-icon": !!_icon, centered: ctx.center }, mod],
    ref,
    ...others,
    children: /* @__PURE__ */ import_jsx_runtime143.jsxs("div", { ...ctx.getStyles("itemWrapper", stylesApiProps), children: [
      _icon && /* @__PURE__ */ import_jsx_runtime143.jsx("span", { ...ctx.getStyles("itemIcon", stylesApiProps), children: _icon }),
      /* @__PURE__ */ import_jsx_runtime143.jsx("span", { ...ctx.getStyles("itemLabel", stylesApiProps), children })
    ] })
  });
});
ListItem.classes = classes26;
ListItem.displayName = "@mantine/core/ListItem";

// node_modules/@mantine/core/esm/components/List/List.mjs
"use client";
var defaultProps62 = {
  type: "unordered"
};
var varsResolver30 = createVarsResolver((_2, { size: size4, spacing }) => ({
  root: {
    "--list-fz": getFontSize(size4),
    "--list-lh": getLineHeight(size4),
    "--list-spacing": getSpacing(spacing)
  }
}));
var List = factory((_props, ref) => {
  const props = useProps("List", defaultProps62, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    children,
    type,
    withPadding,
    icon,
    spacing,
    center,
    listStyleType,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "List",
    classes: classes26,
    props,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver30
  });
  return /* @__PURE__ */ import_jsx_runtime144.jsx(ListProvider, { value: { center, icon, getStyles: getStyles2 }, children: /* @__PURE__ */ import_jsx_runtime144.jsx(Box, {
    ...getStyles2("root", { style: { listStyleType } }),
    component: type === "unordered" ? "ul" : "ol",
    mod: [{ "with-padding": withPadding }, mod],
    ref,
    ...others,
    children
  }) });
});
List.classes = classes26;
List.displayName = "@mantine/core/List";
List.Item = ListItem;
// node_modules/@mantine/core/esm/components/Menu/Menu.mjs
var import_jsx_runtime151 = __toESM(require_jsx_runtime(), 1);
var import_react188 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Menu/Menu.context.mjs
var import_react182 = __toESM(require_react(), 1);
var import_jsx_runtime145 = __toESM(require_jsx_runtime(), 1);
"use client";
var [MenuContextProvider, useMenuContext] = createSafeContext("Menu component was not found in the tree");

// node_modules/@mantine/core/esm/components/Menu/MenuDivider/MenuDivider.mjs
var import_jsx_runtime146 = __toESM(require_jsx_runtime(), 1);
var import_react183 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Menu/Menu.module.css.mjs
"use client";
var classes27 = { dropdown: "m_dc9b7c9f", label: "m_9bfac126", divider: "m_efdf90cb", item: "m_99ac2aa1", itemLabel: "m_5476e0d3", itemSection: "m_8b75e504" };

// node_modules/@mantine/core/esm/components/Menu/MenuDivider/MenuDivider.mjs
"use client";
var defaultProps63 = {};
var MenuDivider = factory((props, ref) => {
  const { classNames, className, style: style2, styles, vars, ...others } = useProps("MenuDivider", defaultProps63, props);
  const ctx = useMenuContext();
  return /* @__PURE__ */ import_jsx_runtime146.jsx(Box, {
    ref,
    ...ctx.getStyles("divider", { className, style: style2, styles, classNames }),
    ...others
  });
});
MenuDivider.classes = classes27;
MenuDivider.displayName = "@mantine/core/MenuDivider";

// node_modules/@mantine/core/esm/components/Menu/MenuDropdown/MenuDropdown.mjs
var import_jsx_runtime147 = __toESM(require_jsx_runtime(), 1);
var import_react184 = __toESM(require_react(), 1);
"use client";
var defaultProps64 = {};
var MenuDropdown = factory((props, ref) => {
  const {
    classNames,
    className,
    style: style2,
    styles,
    vars,
    onMouseEnter,
    onMouseLeave,
    onKeyDown,
    children,
    ...others
  } = useProps("MenuDropdown", defaultProps64, props);
  const wrapperRef = import_react184.useRef(null);
  const ctx = useMenuContext();
  const handleKeyDown = createEventHandler(onKeyDown, (event) => {
    if (event.key === "ArrowUp" || event.key === "ArrowDown") {
      event.preventDefault();
      wrapperRef.current?.querySelectorAll("[data-menu-item]:not(:disabled)")[0]?.focus();
    }
  });
  const handleMouseEnter = createEventHandler(onMouseEnter, () => (ctx.trigger === "hover" || ctx.trigger === "click-hover") && ctx.openDropdown());
  const handleMouseLeave = createEventHandler(onMouseLeave, () => (ctx.trigger === "hover" || ctx.trigger === "click-hover") && ctx.closeDropdown());
  return /* @__PURE__ */ import_jsx_runtime147.jsxs(Popover.Dropdown, {
    ...others,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    role: "menu",
    "aria-orientation": "vertical",
    ref: useMergedRef(ref, wrapperRef),
    ...ctx.getStyles("dropdown", {
      className,
      style: style2,
      styles,
      classNames,
      withStaticClass: false
    }),
    tabIndex: -1,
    "data-menu-dropdown": true,
    onKeyDown: handleKeyDown,
    children: [
      ctx.withInitialFocusPlaceholder && /* @__PURE__ */ import_jsx_runtime147.jsx("div", { tabIndex: -1, "data-autofocus": true, "data-mantine-stop-propagation": true, style: { outline: 0 } }),
      children
    ]
  });
});
MenuDropdown.classes = classes27;
MenuDropdown.displayName = "@mantine/core/MenuDropdown";

// node_modules/@mantine/core/esm/components/Menu/MenuItem/MenuItem.mjs
var import_jsx_runtime148 = __toESM(require_jsx_runtime(), 1);
var import_react185 = __toESM(require_react(), 1);
"use client";
var defaultProps65 = {};
var MenuItem = polymorphicFactory((props, ref) => {
  const {
    classNames,
    className,
    style: style2,
    styles,
    vars,
    color,
    closeMenuOnClick,
    leftSection,
    rightSection,
    children,
    disabled,
    "data-disabled": dataDisabled,
    ...others
  } = useProps("MenuItem", defaultProps65, props);
  const ctx = useMenuContext();
  const theme = useMantineTheme();
  const { dir } = useDirection();
  const itemRef = import_react185.useRef(null);
  const itemIndex = ctx.getItemIndex(itemRef.current);
  const _others = others;
  const handleMouseLeave = createEventHandler(_others.onMouseLeave, () => ctx.setHovered(-1));
  const handleMouseEnter = createEventHandler(_others.onMouseEnter, () => ctx.setHovered(ctx.getItemIndex(itemRef.current)));
  const handleClick = createEventHandler(_others.onClick, () => {
    if (dataDisabled) {
      return;
    }
    if (typeof closeMenuOnClick === "boolean") {
      closeMenuOnClick && ctx.closeDropdownImmediately();
    } else {
      ctx.closeOnItemClick && ctx.closeDropdownImmediately();
    }
  });
  const handleFocus = createEventHandler(_others.onFocus, () => ctx.setHovered(ctx.getItemIndex(itemRef.current)));
  const colors = color ? theme.variantColorResolver({ color, theme, variant: "light" }) : undefined;
  const parsedThemeColor = color ? parseThemeColor({ color, theme }) : null;
  return /* @__PURE__ */ import_jsx_runtime148.jsxs(UnstyledButton, {
    ...others,
    unstyled: ctx.unstyled,
    tabIndex: ctx.menuItemTabIndex,
    onFocus: handleFocus,
    ...ctx.getStyles("item", { className, style: style2, styles, classNames }),
    ref: useMergedRef(itemRef, ref),
    role: "menuitem",
    disabled,
    "data-menu-item": true,
    "data-disabled": disabled || dataDisabled || undefined,
    "data-hovered": ctx.hovered === itemIndex ? true : undefined,
    "data-mantine-stop-propagation": true,
    onMouseEnter: handleMouseEnter,
    onMouseLeave: handleMouseLeave,
    onClick: handleClick,
    onKeyDown: createScopedKeydownHandler({
      siblingSelector: "[data-menu-item]:not([data-disabled])",
      parentSelector: "[data-menu-dropdown]",
      activateOnFocus: false,
      loop: ctx.loop,
      dir,
      orientation: "vertical",
      onKeyDown: _others.onKeyDown
    }),
    __vars: {
      "--menu-item-color": parsedThemeColor?.isThemeColor && parsedThemeColor?.shade === undefined ? `var(--mantine-color-${parsedThemeColor.color}-6)` : colors?.color,
      "--menu-item-hover": colors?.hover
    },
    children: [
      leftSection && /* @__PURE__ */ import_jsx_runtime148.jsx("div", { ...ctx.getStyles("itemSection", { styles, classNames }), "data-position": "left", children: leftSection }),
      children && /* @__PURE__ */ import_jsx_runtime148.jsx("div", { ...ctx.getStyles("itemLabel", { styles, classNames }), children }),
      rightSection && /* @__PURE__ */ import_jsx_runtime148.jsx("div", { ...ctx.getStyles("itemSection", { styles, classNames }), "data-position": "right", children: rightSection })
    ]
  });
});
MenuItem.classes = classes27;
MenuItem.displayName = "@mantine/core/MenuItem";

// node_modules/@mantine/core/esm/components/Menu/MenuLabel/MenuLabel.mjs
var import_jsx_runtime149 = __toESM(require_jsx_runtime(), 1);
var import_react186 = __toESM(require_react(), 1);
"use client";
var defaultProps66 = {};
var MenuLabel = factory((props, ref) => {
  const { classNames, className, style: style2, styles, vars, ...others } = useProps("MenuLabel", defaultProps66, props);
  const ctx = useMenuContext();
  return /* @__PURE__ */ import_jsx_runtime149.jsx(Box, {
    ref,
    ...ctx.getStyles("label", { className, style: style2, styles, classNames }),
    ...others
  });
});
MenuLabel.classes = classes27;
MenuLabel.displayName = "@mantine/core/MenuLabel";

// node_modules/@mantine/core/esm/components/Menu/MenuTarget/MenuTarget.mjs
var import_jsx_runtime150 = __toESM(require_jsx_runtime(), 1);
var import_react187 = __toESM(require_react(), 1);
"use client";
var defaultProps67 = {
  refProp: "ref"
};
var MenuTarget = import_react187.forwardRef((props, ref) => {
  const { children, refProp, ...others } = useProps("MenuTarget", defaultProps67, props);
  if (!isElement(children)) {
    throw new Error("Menu.Target component children should be an element or a component that accepts ref. Fragments, strings, numbers and other primitive values are not supported");
  }
  const ctx = useMenuContext();
  const _childrenProps = children.props;
  const onClick = createEventHandler(_childrenProps.onClick, () => {
    if (ctx.trigger === "click") {
      ctx.toggleDropdown();
    } else if (ctx.trigger === "click-hover") {
      ctx.setOpenedViaClick(true);
      if (!ctx.opened) {
        ctx.openDropdown();
      }
    }
  });
  const onMouseEnter = createEventHandler(_childrenProps.onMouseEnter, () => (ctx.trigger === "hover" || ctx.trigger === "click-hover") && ctx.openDropdown());
  const onMouseLeave = createEventHandler(_childrenProps.onMouseLeave, () => {
    if (ctx.trigger === "hover") {
      ctx.closeDropdown();
    } else if (ctx.trigger === "click-hover" && !ctx.openedViaClick) {
      ctx.closeDropdown();
    }
  });
  return /* @__PURE__ */ import_jsx_runtime150.jsx(Popover.Target, { refProp, popupType: "menu", ref, ...others, children: import_react187.cloneElement(children, {
    onClick,
    onMouseEnter,
    onMouseLeave,
    "data-expanded": ctx.opened ? true : undefined
  }) });
});
MenuTarget.displayName = "@mantine/core/MenuTarget";

// node_modules/@mantine/core/esm/components/Menu/Menu.mjs
"use client";
var defaultProps68 = {
  trapFocus: true,
  closeOnItemClick: true,
  withInitialFocusPlaceholder: true,
  clickOutsideEvents: ["mousedown", "touchstart", "keydown"],
  loop: true,
  trigger: "click",
  openDelay: 0,
  closeDelay: 100,
  menuItemTabIndex: -1
};
function Menu(_props) {
  const props = useProps("Menu", defaultProps68, _props);
  const {
    children,
    onOpen,
    onClose,
    opened,
    defaultOpened,
    trapFocus,
    onChange,
    closeOnItemClick,
    loop,
    closeOnEscape: closeOnEscape2,
    trigger,
    openDelay,
    closeDelay,
    classNames,
    styles,
    unstyled,
    variant,
    vars,
    menuItemTabIndex,
    keepMounted,
    withInitialFocusPlaceholder,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Menu",
    classes: classes27,
    props,
    classNames,
    styles,
    unstyled
  });
  const [hovered, { setHovered, resetHovered }] = useHovered();
  const [_opened, setOpened] = useUncontrolled({
    value: opened,
    defaultValue: defaultOpened,
    finalValue: false,
    onChange
  });
  const [openedViaClick, setOpenedViaClick] = import_react188.useState(false);
  const close = () => {
    setOpened(false);
    setOpenedViaClick(false);
    _opened && onClose?.();
  };
  const open = () => {
    setOpened(true);
    !_opened && onOpen?.();
  };
  const toggleDropdown = () => {
    _opened ? close() : open();
  };
  const { openDropdown, closeDropdown } = useDelayedHover({ open, close, closeDelay, openDelay });
  const getItemIndex = (node2) => getContextItemIndex("[data-menu-item]", "[data-menu-dropdown]", node2);
  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
    classNames,
    styles,
    props
  });
  useDidUpdate(() => {
    resetHovered();
  }, [_opened]);
  return /* @__PURE__ */ import_jsx_runtime151.jsx(MenuContextProvider, {
    value: {
      getStyles: getStyles2,
      opened: _opened,
      toggleDropdown,
      getItemIndex,
      hovered,
      setHovered,
      openedViaClick,
      setOpenedViaClick,
      closeOnItemClick,
      closeDropdown: trigger === "click" ? close : closeDropdown,
      openDropdown: trigger === "click" ? open : openDropdown,
      closeDropdownImmediately: close,
      loop,
      trigger,
      unstyled,
      menuItemTabIndex,
      withInitialFocusPlaceholder
    },
    children: /* @__PURE__ */ import_jsx_runtime151.jsx(Popover, {
      ...others,
      opened: _opened,
      onChange: toggleDropdown,
      defaultOpened,
      trapFocus: keepMounted ? false : trapFocus,
      closeOnEscape: closeOnEscape2,
      __staticSelector: "Menu",
      classNames: resolvedClassNames,
      styles: resolvedStyles,
      unstyled,
      variant,
      keepMounted,
      children
    })
  });
}
Menu.extend = (input) => input;
Menu.withProps = getWithProps(Menu);
Menu.classes = classes27;
Menu.displayName = "@mantine/core/Menu";
Menu.Item = MenuItem;
Menu.Label = MenuLabel;
Menu.Dropdown = MenuDropdown;
Menu.Target = MenuTarget;
Menu.Divider = MenuDivider;
// node_modules/@mantine/core/esm/components/Modal/Modal.mjs
var import_jsx_runtime161 = __toESM(require_jsx_runtime(), 1);
var import_react198 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Modal/ModalBody.mjs
var import_jsx_runtime153 = __toESM(require_jsx_runtime(), 1);
var import_react190 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Modal/Modal.context.mjs
var import_react189 = __toESM(require_react(), 1);
var import_jsx_runtime152 = __toESM(require_jsx_runtime(), 1);
"use client";
var [ModalProvider, useModalContext] = createSafeContext("Modal component was not found in tree");

// node_modules/@mantine/core/esm/components/Modal/Modal.module.css.mjs
"use client";
var classes28 = { root: "m_9df02822", content: "m_54c44539", inner: "m_1f958f16", header: "m_d0e2b9cd" };

// node_modules/@mantine/core/esm/components/Modal/ModalBody.mjs
"use client";
var defaultProps69 = {};
var ModalBody = factory((_props, ref) => {
  const props = useProps("ModalBody", defaultProps69, _props);
  const { classNames, className, style: style2, styles, vars, ...others } = props;
  const ctx = useModalContext();
  return /* @__PURE__ */ import_jsx_runtime153.jsx(ModalBaseBody, {
    ref,
    ...ctx.getStyles("body", { classNames, style: style2, styles, className }),
    ...others
  });
});
ModalBody.classes = classes28;
ModalBody.displayName = "@mantine/core/ModalBody";

// node_modules/@mantine/core/esm/components/Modal/ModalCloseButton.mjs
var import_jsx_runtime154 = __toESM(require_jsx_runtime(), 1);
var import_react191 = __toESM(require_react(), 1);
"use client";
var defaultProps70 = {};
var ModalCloseButton = factory((_props, ref) => {
  const props = useProps("ModalCloseButton", defaultProps70, _props);
  const { classNames, className, style: style2, styles, vars, ...others } = props;
  const ctx = useModalContext();
  return /* @__PURE__ */ import_jsx_runtime154.jsx(ModalBaseCloseButton, {
    ref,
    ...ctx.getStyles("close", { classNames, style: style2, styles, className }),
    ...others
  });
});
ModalCloseButton.classes = classes28;
ModalCloseButton.displayName = "@mantine/core/ModalCloseButton";

// node_modules/@mantine/core/esm/components/Modal/ModalContent.mjs
var import_jsx_runtime155 = __toESM(require_jsx_runtime(), 1);
var import_react192 = __toESM(require_react(), 1);
"use client";
var defaultProps71 = {};
var ModalContent = factory((_props, ref) => {
  const props = useProps("ModalContent", defaultProps71, _props);
  const { classNames, className, style: style2, styles, vars, children, __hidden, ...others } = props;
  const ctx = useModalContext();
  const Scroll = ctx.scrollAreaComponent || NativeScrollArea;
  return /* @__PURE__ */ import_jsx_runtime155.jsx(ModalBaseContent, {
    ...ctx.getStyles("content", { className, style: style2, styles, classNames }),
    innerProps: ctx.getStyles("inner", { className, style: style2, styles, classNames }),
    "data-full-screen": ctx.fullScreen || undefined,
    "data-modal-content": true,
    "data-hidden": __hidden || undefined,
    ref,
    ...others,
    children: /* @__PURE__ */ import_jsx_runtime155.jsx(Scroll, {
      style: {
        maxHeight: ctx.fullScreen ? "100dvh" : `calc(100dvh - (${rem(ctx.yOffset)} * 2))`
      },
      children
    })
  });
});
ModalContent.classes = classes28;
ModalContent.displayName = "@mantine/core/ModalContent";

// node_modules/@mantine/core/esm/components/Modal/ModalHeader.mjs
var import_jsx_runtime156 = __toESM(require_jsx_runtime(), 1);
var import_react193 = __toESM(require_react(), 1);
"use client";
var defaultProps72 = {};
var ModalHeader = factory((_props, ref) => {
  const props = useProps("ModalHeader", defaultProps72, _props);
  const { classNames, className, style: style2, styles, vars, ...others } = props;
  const ctx = useModalContext();
  return /* @__PURE__ */ import_jsx_runtime156.jsx(ModalBaseHeader, {
    ref,
    ...ctx.getStyles("header", { classNames, style: style2, styles, className }),
    ...others
  });
});
ModalHeader.classes = classes28;
ModalHeader.displayName = "@mantine/core/ModalHeader";

// node_modules/@mantine/core/esm/components/Modal/ModalOverlay.mjs
var import_jsx_runtime157 = __toESM(require_jsx_runtime(), 1);
var import_react194 = __toESM(require_react(), 1);
"use client";
var defaultProps73 = {};
var ModalOverlay = factory((_props, ref) => {
  const props = useProps("ModalOverlay", defaultProps73, _props);
  const { classNames, className, style: style2, styles, vars, ...others } = props;
  const ctx = useModalContext();
  return /* @__PURE__ */ import_jsx_runtime157.jsx(ModalBaseOverlay, {
    ref,
    ...ctx.getStyles("overlay", { classNames, style: style2, styles, className }),
    ...others
  });
});
ModalOverlay.classes = classes28;
ModalOverlay.displayName = "@mantine/core/ModalOverlay";

// node_modules/@mantine/core/esm/components/Modal/ModalRoot.mjs
var import_jsx_runtime158 = __toESM(require_jsx_runtime(), 1);
var import_react195 = __toESM(require_react(), 1);
"use client";
var defaultProps74 = {
  __staticSelector: "Modal",
  closeOnClickOutside: true,
  withinPortal: true,
  lockScroll: true,
  trapFocus: true,
  returnFocus: true,
  closeOnEscape: true,
  keepMounted: false,
  zIndex: getDefaultZIndex("modal"),
  transitionProps: { duration: 200, transition: "fade-down" },
  yOffset: "5dvh"
};
var varsResolver31 = createVarsResolver((_2, { radius, size: size4, yOffset, xOffset }) => ({
  root: {
    "--modal-radius": radius === undefined ? undefined : getRadius(radius),
    "--modal-size": getSize(size4, "modal-size"),
    "--modal-y-offset": rem(yOffset),
    "--modal-x-offset": rem(xOffset)
  }
}));
var ModalRoot = factory((_props, ref) => {
  const props = useProps("ModalRoot", defaultProps74, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    yOffset,
    scrollAreaComponent,
    radius,
    fullScreen,
    centered,
    xOffset,
    __staticSelector,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: __staticSelector,
    classes: classes28,
    props,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver31
  });
  return /* @__PURE__ */ import_jsx_runtime158.jsx(ModalProvider, { value: { yOffset, scrollAreaComponent, getStyles: getStyles2, fullScreen }, children: /* @__PURE__ */ import_jsx_runtime158.jsx(ModalBase, {
    ref,
    ...getStyles2("root"),
    "data-full-screen": fullScreen || undefined,
    "data-centered": centered || undefined,
    unstyled,
    ...others
  }) });
});
ModalRoot.classes = classes28;
ModalRoot.displayName = "@mantine/core/ModalRoot";

// node_modules/@mantine/core/esm/components/Modal/ModalStack.mjs
var import_jsx_runtime159 = __toESM(require_jsx_runtime(), 1);
var import_react196 = __toESM(require_react(), 1);
"use client";
var [ModalStackProvider, useModalStackContext] = createOptionalContext();
function ModalStack({ children }) {
  const [stack, setStack] = import_react196.useState([]);
  const [maxZIndex, setMaxZIndex] = import_react196.useState(getDefaultZIndex("modal"));
  return /* @__PURE__ */ import_jsx_runtime159.jsx(ModalStackProvider, {
    value: {
      stack,
      addModal: (id, zIndex) => {
        setStack((current2) => [.../* @__PURE__ */ new Set([...current2, id])]);
        setMaxZIndex((current2) => typeof zIndex === "number" && typeof current2 === "number" ? Math.max(current2, zIndex) : current2);
      },
      removeModal: (id) => setStack((current2) => current2.filter((currentId) => currentId !== id)),
      getZIndex: (id) => `calc(${maxZIndex} + ${stack.indexOf(id)} + 1)`,
      currentId: stack[stack.length - 1],
      maxZIndex
    },
    children
  });
}
ModalStack.displayName = "@mantine/core/ModalStack";

// node_modules/@mantine/core/esm/components/Modal/ModalTitle.mjs
var import_jsx_runtime160 = __toESM(require_jsx_runtime(), 1);
var import_react197 = __toESM(require_react(), 1);
"use client";
var defaultProps75 = {};
var ModalTitle = factory((_props, ref) => {
  const props = useProps("ModalTitle", defaultProps75, _props);
  const { classNames, className, style: style2, styles, vars, ...others } = props;
  const ctx = useModalContext();
  return /* @__PURE__ */ import_jsx_runtime160.jsx(ModalBaseTitle, {
    ref,
    ...ctx.getStyles("title", { classNames, style: style2, styles, className }),
    ...others
  });
});
ModalTitle.classes = classes28;
ModalTitle.displayName = "@mantine/core/ModalTitle";

// node_modules/@mantine/core/esm/components/Modal/Modal.mjs
"use client";
var defaultProps76 = {
  closeOnClickOutside: true,
  withinPortal: true,
  lockScroll: true,
  trapFocus: true,
  returnFocus: true,
  closeOnEscape: true,
  keepMounted: false,
  zIndex: getDefaultZIndex("modal"),
  transitionProps: { duration: 200, transition: "fade-down" },
  withOverlay: true,
  withCloseButton: true
};
var Modal = factory((_props, ref) => {
  const {
    title,
    withOverlay,
    overlayProps,
    withCloseButton,
    closeButtonProps,
    children,
    radius,
    opened,
    stackId,
    zIndex,
    ...others
  } = useProps("Modal", defaultProps76, _props);
  const ctx = useModalStackContext();
  const hasHeader = !!title || withCloseButton;
  const stackProps = ctx && stackId ? {
    closeOnEscape: ctx.currentId === stackId,
    trapFocus: ctx.currentId === stackId,
    zIndex: ctx.getZIndex(stackId)
  } : {};
  const overlayVisible = withOverlay === false ? false : stackId && ctx ? ctx.currentId === stackId : opened;
  import_react198.useEffect(() => {
    if (ctx && stackId) {
      opened ? ctx.addModal(stackId, zIndex || getDefaultZIndex("modal")) : ctx.removeModal(stackId);
    }
  }, [opened, stackId, zIndex]);
  return /* @__PURE__ */ import_jsx_runtime161.jsxs(ModalRoot, {
    ref,
    radius,
    opened,
    zIndex: ctx && stackId ? ctx.getZIndex(stackId) : zIndex,
    ...others,
    ...stackProps,
    children: [
      withOverlay && /* @__PURE__ */ import_jsx_runtime161.jsx(ModalOverlay, {
        visible: overlayVisible,
        transitionProps: ctx && stackId ? { duration: 0 } : undefined,
        ...overlayProps
      }),
      /* @__PURE__ */ import_jsx_runtime161.jsxs(ModalContent, {
        radius,
        __hidden: ctx && stackId && opened ? stackId !== ctx.currentId : false,
        children: [
          hasHeader && /* @__PURE__ */ import_jsx_runtime161.jsxs(ModalHeader, { children: [
            title && /* @__PURE__ */ import_jsx_runtime161.jsx(ModalTitle, { children: title }),
            withCloseButton && /* @__PURE__ */ import_jsx_runtime161.jsx(ModalCloseButton, { ...closeButtonProps })
          ] }),
          /* @__PURE__ */ import_jsx_runtime161.jsx(ModalBody, { children })
        ]
      })
    ]
  });
});
Modal.classes = classes28;
Modal.displayName = "@mantine/core/Modal";
Modal.Root = ModalRoot;
Modal.Overlay = ModalOverlay;
Modal.Content = ModalContent;
Modal.Body = ModalBody;
Modal.Header = ModalHeader;
Modal.Title = ModalTitle;
Modal.CloseButton = ModalCloseButton;
Modal.Stack = ModalStack;
// node_modules/@mantine/core/esm/components/MultiSelect/MultiSelect.mjs
var import_jsx_runtime169 = __toESM(require_jsx_runtime(), 1);
var import_react206 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Pill/Pill.mjs
var import_jsx_runtime165 = __toESM(require_jsx_runtime(), 1);
var import_react202 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/PillsInput/PillsInput.context.mjs
var import_react199 = __toESM(require_react(), 1);
var import_jsx_runtime162 = __toESM(require_jsx_runtime(), 1);
"use client";
var [PillsInputProvider, usePillsInputContext] = createOptionalContext();

// node_modules/@mantine/core/esm/components/Pill/PillGroup.context.mjs
var import_react200 = __toESM(require_react(), 1);
var import_jsx_runtime163 = __toESM(require_jsx_runtime(), 1);
"use client";
var [PillGroupProvider, usePillGroupContext] = createOptionalContext();

// node_modules/@mantine/core/esm/components/Pill/PillGroup/PillGroup.mjs
var import_jsx_runtime164 = __toESM(require_jsx_runtime(), 1);
var import_react201 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Pill/Pill.module.css.mjs
"use client";
var classes29 = { root: "m_7cda1cd6", "root--default": "m_44da308b", "root--contrast": "m_e3a01f8", label: "m_1e0e6180", remove: "m_ae386778", group: "m_1dcfd90b" };

// node_modules/@mantine/core/esm/components/Pill/PillGroup/PillGroup.mjs
"use client";
var defaultProps77 = {};
var varsResolver32 = createVarsResolver((_2, { gap }, { size: size4 }) => ({
  group: {
    "--pg-gap": gap !== undefined ? getSize(gap) : getSize(size4, "pg-gap")
  }
}));
var PillGroup = factory((_props, ref) => {
  const props = useProps("PillGroup", defaultProps77, _props);
  const { classNames, className, style: style2, styles, unstyled, vars, size: size4, disabled, ...others } = props;
  const pillsInputCtx = usePillsInputContext();
  const _size = pillsInputCtx?.size || size4 || undefined;
  const getStyles2 = useStyles({
    name: "PillGroup",
    classes: classes29,
    props,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver32,
    stylesCtx: { size: _size },
    rootSelector: "group"
  });
  return /* @__PURE__ */ import_jsx_runtime164.jsx(PillGroupProvider, { value: { size: _size, disabled }, children: /* @__PURE__ */ import_jsx_runtime164.jsx(Box, { ref, size: _size, ...getStyles2("group"), ...others }) });
});
PillGroup.classes = classes29;
PillGroup.displayName = "@mantine/core/PillGroup";

// node_modules/@mantine/core/esm/components/Pill/Pill.mjs
"use client";
var defaultProps78 = {
  variant: "default"
};
var varsResolver33 = createVarsResolver((_2, { radius }, { size: size4 }) => ({
  root: {
    "--pill-fz": getSize(size4, "pill-fz"),
    "--pill-height": getSize(size4, "pill-height"),
    "--pill-radius": radius === undefined ? undefined : getRadius(radius)
  }
}));
var Pill = factory((_props, ref) => {
  const props = useProps("Pill", defaultProps78, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    variant,
    children,
    withRemoveButton,
    onRemove,
    removeButtonProps,
    radius,
    size: size4,
    disabled,
    mod,
    ...others
  } = props;
  const ctx = usePillGroupContext();
  const pillsInputCtx = usePillsInputContext();
  const _size = size4 || ctx?.size || undefined;
  const _variant = pillsInputCtx?.variant === "filled" ? "contrast" : variant || "default";
  const getStyles2 = useStyles({
    name: "Pill",
    classes: classes29,
    props,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver33,
    stylesCtx: { size: _size }
  });
  return /* @__PURE__ */ import_jsx_runtime165.jsxs(Box, {
    component: "span",
    ref,
    variant: _variant,
    size: _size,
    ...getStyles2("root", { variant: _variant }),
    mod: [
      { "with-remove": withRemoveButton && !disabled, disabled: disabled || ctx?.disabled },
      mod
    ],
    ...others,
    children: [
      /* @__PURE__ */ import_jsx_runtime165.jsx("span", { ...getStyles2("label"), children }),
      withRemoveButton && /* @__PURE__ */ import_jsx_runtime165.jsx(CloseButton, {
        variant: "transparent",
        radius,
        tabIndex: -1,
        "aria-hidden": true,
        unstyled,
        ...removeButtonProps,
        ...getStyles2("remove", {
          className: removeButtonProps?.className,
          style: removeButtonProps?.style
        }),
        onMouseDown: (event) => {
          event.preventDefault();
          event.stopPropagation();
          removeButtonProps?.onMouseDown?.(event);
        },
        onClick: (event) => {
          event.stopPropagation();
          onRemove?.();
          removeButtonProps?.onClick?.(event);
        }
      })
    ]
  });
});
Pill.classes = classes29;
Pill.displayName = "@mantine/core/Pill";
Pill.Group = PillGroup;

// node_modules/@mantine/core/esm/components/PillsInput/PillsInput.mjs
var import_jsx_runtime167 = __toESM(require_jsx_runtime(), 1);
var import_react204 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/PillsInput/PillsInputField/PillsInputField.mjs
var import_jsx_runtime166 = __toESM(require_jsx_runtime(), 1);
var import_react203 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/PillsInput/PillsInput.module.css.mjs
"use client";
var classes30 = { field: "m_45c4369d" };

// node_modules/@mantine/core/esm/components/PillsInput/PillsInputField/PillsInputField.mjs
"use client";
var defaultProps79 = {
  type: "visible"
};
var PillsInputField = factory((_props, ref) => {
  const props = useProps("PillsInputField", defaultProps79, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    type,
    disabled,
    id,
    pointer,
    mod,
    ...others
  } = props;
  const ctx = usePillsInputContext();
  const inputWrapperCtx = useInputWrapperContext();
  const getStyles2 = useStyles({
    name: "PillsInputField",
    classes: classes30,
    props,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    rootSelector: "field"
  });
  const _disabled = disabled || ctx?.disabled;
  return /* @__PURE__ */ import_jsx_runtime166.jsx(Box, {
    component: "input",
    ref: useMergedRef(ref, ctx?.fieldRef),
    "data-type": type,
    disabled: _disabled,
    mod: [{ disabled: _disabled, pointer }, mod],
    ...getStyles2("field"),
    ...others,
    id: inputWrapperCtx?.inputId || id,
    "aria-invalid": ctx?.hasError,
    "aria-describedby": inputWrapperCtx?.describedBy,
    type: "text",
    onMouseDown: (event) => !pointer && event.stopPropagation()
  });
});
PillsInputField.classes = classes30;
PillsInputField.displayName = "@mantine/core/PillsInputField";

// node_modules/@mantine/core/esm/components/PillsInput/PillsInput.mjs
"use client";
var defaultProps80 = {};
var PillsInput = factory((_props, ref) => {
  const props = useProps("PillsInput", defaultProps80, _props);
  const {
    children,
    onMouseDown,
    onClick,
    size: size4,
    disabled,
    __staticSelector,
    error,
    variant,
    ...others
  } = props;
  const fieldRef = import_react204.useRef(null);
  return /* @__PURE__ */ import_jsx_runtime167.jsx(PillsInputProvider, { value: { fieldRef, size: size4, disabled, hasError: !!error, variant }, children: /* @__PURE__ */ import_jsx_runtime167.jsx(InputBase, {
    size: size4,
    error,
    variant,
    component: "div",
    ref,
    onMouseDown: (event) => {
      event.preventDefault();
      onMouseDown?.(event);
      fieldRef.current?.focus();
    },
    onClick: (event) => {
      event.preventDefault();
      const fieldset = event.currentTarget.closest("fieldset");
      if (!fieldset?.disabled) {
        fieldRef.current?.focus();
        onClick?.(event);
      }
    },
    ...others,
    multiline: true,
    disabled,
    __staticSelector: __staticSelector || "PillsInput",
    withAria: false,
    children
  }) });
});
PillsInput.displayName = "@mantine/core/PillsInput";
PillsInput.Field = PillsInputField;

// node_modules/@mantine/core/esm/components/MultiSelect/filter-picked-values.mjs
var import_jsx_runtime168 = __toESM(require_jsx_runtime(), 1);
var import_react205 = __toESM(require_react(), 1);
"use client";
function filterPickedValues({ data, value }) {
  const normalizedValue = value.map((item) => item.trim().toLowerCase());
  const filtered = data.reduce((acc, item) => {
    if (isOptionsGroup(item)) {
      acc.push({
        group: item.group,
        items: item.items.filter((option) => normalizedValue.indexOf(option.value.toLowerCase().trim()) === -1)
      });
    } else if (normalizedValue.indexOf(item.value.toLowerCase().trim()) === -1) {
      acc.push(item);
    }
    return acc;
  }, []);
  return filtered;
}

// node_modules/@mantine/core/esm/components/MultiSelect/MultiSelect.mjs
"use client";
var defaultProps81 = {
  maxValues: Infinity,
  withCheckIcon: true,
  checkIconPosition: "left",
  hiddenInputValuesDivider: ","
};
var MultiSelect = factory((_props, ref) => {
  const props = useProps("MultiSelect", defaultProps81, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    size: size4,
    value,
    defaultValue,
    onChange,
    onKeyDown,
    variant,
    data,
    dropdownOpened,
    defaultDropdownOpened,
    onDropdownOpen,
    onDropdownClose,
    selectFirstOptionOnChange,
    onOptionSubmit,
    comboboxProps,
    filter: filter2,
    limit,
    withScrollArea,
    maxDropdownHeight,
    searchValue,
    defaultSearchValue,
    onSearchChange,
    readOnly,
    disabled,
    onFocus,
    onBlur,
    onPaste,
    radius,
    rightSection,
    rightSectionWidth,
    rightSectionPointerEvents,
    rightSectionProps,
    leftSection,
    leftSectionWidth,
    leftSectionPointerEvents,
    leftSectionProps,
    inputContainer,
    inputWrapperOrder,
    withAsterisk,
    labelProps,
    descriptionProps,
    errorProps,
    wrapperProps,
    description,
    label,
    error,
    maxValues,
    searchable,
    nothingFoundMessage,
    withCheckIcon,
    checkIconPosition,
    hidePickedOptions,
    withErrorStyles,
    name,
    form,
    id,
    clearable,
    clearButtonProps,
    hiddenInputProps,
    placeholder,
    hiddenInputValuesDivider,
    required,
    mod,
    renderOption,
    onRemove,
    onClear,
    scrollAreaProps,
    chevronColor,
    ...others
  } = props;
  const _id = useId(id);
  const parsedData = getParsedComboboxData(data);
  const optionsLockup = getOptionsLockup(parsedData);
  const combobox = useCombobox({
    opened: dropdownOpened,
    defaultOpened: defaultDropdownOpened,
    onDropdownOpen,
    onDropdownClose: () => {
      onDropdownClose?.();
      combobox.resetSelectedOption();
    }
  });
  const {
    styleProps,
    rest: { type, autoComplete, ...rest }
  } = extractStyleProps(others);
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: [],
    onChange
  });
  const [_searchValue, setSearchValue] = useUncontrolled({
    value: searchValue,
    defaultValue: defaultSearchValue,
    finalValue: "",
    onChange: onSearchChange
  });
  const handleSearchChange = (value2) => {
    setSearchValue(value2);
    combobox.resetSelectedOption();
  };
  const getStyles2 = useStyles({
    name: "MultiSelect",
    classes: {},
    props,
    classNames,
    styles,
    unstyled
  });
  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
    props,
    styles,
    classNames
  });
  const handleInputKeydown = (event) => {
    onKeyDown?.(event);
    if (event.key === " " && !searchable) {
      event.preventDefault();
      combobox.toggleDropdown();
    }
    if (event.key === "Backspace" && _searchValue.length === 0 && _value.length > 0) {
      onRemove?.(_value[_value.length - 1]);
      setValue(_value.slice(0, _value.length - 1));
    }
  };
  const values2 = _value.map((item, index4) => /* @__PURE__ */ import_jsx_runtime169.jsx(Pill, {
    withRemoveButton: !readOnly && !optionsLockup[item]?.disabled,
    onRemove: () => {
      setValue(_value.filter((i2) => item !== i2));
      onRemove?.(item);
    },
    unstyled,
    disabled,
    ...getStyles2("pill"),
    children: optionsLockup[item]?.label || item
  }, `${item}-${index4}`));
  import_react206.useEffect(() => {
    if (selectFirstOptionOnChange) {
      combobox.selectFirstOption();
    }
  }, [selectFirstOptionOnChange, _searchValue]);
  const clearButton = /* @__PURE__ */ import_jsx_runtime169.jsx(Combobox.ClearButton, {
    ...clearButtonProps,
    onClear: () => {
      onClear?.();
      setValue([]);
      handleSearchChange("");
    }
  });
  const filteredData = filterPickedValues({ data: parsedData, value: _value });
  const _clearable = clearable && _value.length > 0 && !disabled && !readOnly;
  return /* @__PURE__ */ import_jsx_runtime169.jsxs(import_jsx_runtime169.Fragment, { children: [
    /* @__PURE__ */ import_jsx_runtime169.jsxs(Combobox, {
      store: combobox,
      classNames: resolvedClassNames,
      styles: resolvedStyles,
      unstyled,
      size: size4,
      readOnly,
      __staticSelector: "MultiSelect",
      onOptionSubmit: (val) => {
        onOptionSubmit?.(val);
        handleSearchChange("");
        combobox.updateSelectedOptionIndex("selected");
        if (_value.includes(optionsLockup[val].value)) {
          setValue(_value.filter((v2) => v2 !== optionsLockup[val].value));
          onRemove?.(optionsLockup[val].value);
        } else if (_value.length < maxValues) {
          setValue([..._value, optionsLockup[val].value]);
        }
      },
      ...comboboxProps,
      children: [
        /* @__PURE__ */ import_jsx_runtime169.jsx(Combobox.DropdownTarget, { children: /* @__PURE__ */ import_jsx_runtime169.jsx(PillsInput, {
          ...styleProps,
          __staticSelector: "MultiSelect",
          classNames: resolvedClassNames,
          styles: resolvedStyles,
          unstyled,
          size: size4,
          className,
          style: style2,
          variant,
          disabled,
          radius,
          __defaultRightSection: /* @__PURE__ */ import_jsx_runtime169.jsx(Combobox.Chevron, {
            size: size4,
            error,
            unstyled,
            color: chevronColor
          }),
          __clearSection: clearButton,
          __clearable: _clearable,
          rightSection,
          rightSectionPointerEvents: rightSectionPointerEvents || (clearButton ? "all" : "none"),
          rightSectionWidth,
          rightSectionProps,
          leftSection,
          leftSectionWidth,
          leftSectionPointerEvents,
          leftSectionProps,
          inputContainer,
          inputWrapperOrder,
          withAsterisk,
          labelProps,
          descriptionProps,
          errorProps,
          wrapperProps,
          description,
          label,
          error,
          multiline: true,
          withErrorStyles,
          __stylesApiProps: {
            ...props,
            rightSectionPointerEvents: rightSectionPointerEvents || (_clearable ? "all" : "none"),
            multiline: true
          },
          pointer: !searchable,
          onClick: () => searchable ? combobox.openDropdown() : combobox.toggleDropdown(),
          "data-expanded": combobox.dropdownOpened || undefined,
          id: _id,
          required,
          mod,
          children: /* @__PURE__ */ import_jsx_runtime169.jsxs(Pill.Group, { disabled, unstyled, ...getStyles2("pillsList"), children: [
            values2,
            /* @__PURE__ */ import_jsx_runtime169.jsx(Combobox.EventsTarget, { autoComplete, children: /* @__PURE__ */ import_jsx_runtime169.jsx(PillsInput.Field, {
              ...rest,
              ref,
              id: _id,
              placeholder,
              type: !searchable && !placeholder ? "hidden" : "visible",
              ...getStyles2("inputField"),
              unstyled,
              onFocus: (event) => {
                onFocus?.(event);
                searchable && combobox.openDropdown();
              },
              onBlur: (event) => {
                onBlur?.(event);
                combobox.closeDropdown();
                handleSearchChange("");
              },
              onKeyDown: handleInputKeydown,
              value: _searchValue,
              onChange: (event) => {
                handleSearchChange(event.currentTarget.value);
                searchable && combobox.openDropdown();
                selectFirstOptionOnChange && combobox.selectFirstOption();
              },
              disabled,
              readOnly: readOnly || !searchable,
              pointer: !searchable
            }) })
          ] })
        }) }),
        /* @__PURE__ */ import_jsx_runtime169.jsx(OptionsDropdown, {
          data: hidePickedOptions ? filteredData : parsedData,
          hidden: readOnly || disabled,
          filter: filter2,
          search: _searchValue,
          limit,
          hiddenWhenEmpty: !nothingFoundMessage,
          withScrollArea,
          maxDropdownHeight,
          filterOptions: searchable,
          value: _value,
          checkIconPosition,
          withCheckIcon,
          nothingFoundMessage,
          unstyled,
          labelId: label ? `${_id}-label` : undefined,
          "aria-label": label ? undefined : others["aria-label"],
          renderOption,
          scrollAreaProps
        })
      ]
    }),
    /* @__PURE__ */ import_jsx_runtime169.jsx(Combobox.HiddenInput, {
      name,
      valuesDivider: hiddenInputValuesDivider,
      value: _value,
      form,
      disabled,
      ...hiddenInputProps
    })
  ] });
});
MultiSelect.classes = { ...InputBase.classes, ...Combobox.classes };
MultiSelect.displayName = "@mantine/core/MultiSelect";
// node_modules/react-number-format/dist/react-number-format.es.js
var import_react207 = __toESM(require_react(), 1);
function __rest2(s2, e) {
  var t = {};
  for (var p2 in s2) {
    if (Object.prototype.hasOwnProperty.call(s2, p2) && e.indexOf(p2) < 0) {
      t[p2] = s2[p2];
    }
  }
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function") {
    for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2);i2 < p2.length; i2++) {
      if (e.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2])) {
        t[p2[i2]] = s2[p2[i2]];
      }
    }
  }
  return t;
}
var SourceType;
(function(SourceType2) {
  SourceType2["event"] = "event";
  SourceType2["props"] = "prop";
})(SourceType || (SourceType = {}));
function noop6() {
}
function memoizeOnce(cb) {
  var lastArgs;
  var lastValue = undefined;
  return function() {
    var args = [], len = arguments.length;
    while (len--)
      args[len] = arguments[len];
    if (lastArgs && args.length === lastArgs.length && args.every(function(value, index4) {
      return value === lastArgs[index4];
    })) {
      return lastValue;
    }
    lastArgs = args;
    lastValue = cb.apply(undefined, args);
    return lastValue;
  };
}
function charIsNumber(char2) {
  return !!(char2 || "").match(/\d/);
}
function isNil(val) {
  return val === null || val === undefined;
}
function isNanValue(val) {
  return typeof val === "number" && isNaN(val);
}
function isNotValidValue(val) {
  return isNil(val) || isNanValue(val) || typeof val === "number" && !isFinite(val);
}
function escapeRegExp(str) {
  return str.replace(/[-[\]/{}()*+?.\\^$|]/g, "\\$&");
}
function getThousandsGroupRegex(thousandsGroupStyle) {
  switch (thousandsGroupStyle) {
    case "lakh":
      return /(\d+?)(?=(\d\d)+(\d)(?!\d))(\.\d+)?/g;
    case "wan":
      return /(\d)(?=(\d{4})+(?!\d))/g;
    case "thousand":
    default:
      return /(\d)(?=(\d{3})+(?!\d))/g;
  }
}
function applyThousandSeparator(str, thousandSeparator, thousandsGroupStyle) {
  var thousandsGroupRegex = getThousandsGroupRegex(thousandsGroupStyle);
  var index4 = str.search(/[1-9]/);
  index4 = index4 === -1 ? str.length : index4;
  return str.substring(0, index4) + str.substring(index4, str.length).replace(thousandsGroupRegex, "$1" + thousandSeparator);
}
function usePersistentCallback(cb) {
  var callbackRef = import_react207.useRef(cb);
  callbackRef.current = cb;
  var persistentCbRef = import_react207.useRef(function() {
    var args = [], len = arguments.length;
    while (len--)
      args[len] = arguments[len];
    return callbackRef.current.apply(callbackRef, args);
  });
  return persistentCbRef.current;
}
function splitDecimal(numStr, allowNegative) {
  if (allowNegative === undefined)
    allowNegative = true;
  var hasNegation = numStr[0] === "-";
  var addNegation = hasNegation && allowNegative;
  numStr = numStr.replace("-", "");
  var parts = numStr.split(".");
  var beforeDecimal = parts[0];
  var afterDecimal = parts[1] || "";
  return {
    beforeDecimal,
    afterDecimal,
    hasNegation,
    addNegation
  };
}
function fixLeadingZero(numStr) {
  if (!numStr) {
    return numStr;
  }
  var isNegative = numStr[0] === "-";
  if (isNegative) {
    numStr = numStr.substring(1, numStr.length);
  }
  var parts = numStr.split(".");
  var beforeDecimal = parts[0].replace(/^0+/, "") || "0";
  var afterDecimal = parts[1] || "";
  return "" + (isNegative ? "-" : "") + beforeDecimal + (afterDecimal ? "." + afterDecimal : "");
}
function limitToScale(numStr, scale, fixedDecimalScale) {
  var str = "";
  var filler = fixedDecimalScale ? "0" : "";
  for (var i2 = 0;i2 <= scale - 1; i2++) {
    str += numStr[i2] || filler;
  }
  return str;
}
function repeat(str, count2) {
  return Array(count2 + 1).join(str);
}
function toNumericString(num) {
  var _num = num + "";
  var sign = _num[0] === "-" ? "-" : "";
  if (sign) {
    _num = _num.substring(1);
  }
  var ref = _num.split(/[eE]/g);
  var coefficient = ref[0];
  var exponent = ref[1];
  exponent = Number(exponent);
  if (!exponent) {
    return sign + coefficient;
  }
  coefficient = coefficient.replace(".", "");
  var decimalIndex = 1 + exponent;
  var coffiecientLn = coefficient.length;
  if (decimalIndex < 0) {
    coefficient = "0." + repeat("0", Math.abs(decimalIndex)) + coefficient;
  } else if (decimalIndex >= coffiecientLn) {
    coefficient = coefficient + repeat("0", decimalIndex - coffiecientLn);
  } else {
    coefficient = (coefficient.substring(0, decimalIndex) || "0") + "." + coefficient.substring(decimalIndex);
  }
  return sign + coefficient;
}
function roundToPrecision(numStr, scale, fixedDecimalScale) {
  if (["", "-"].indexOf(numStr) !== -1) {
    return numStr;
  }
  var shouldHaveDecimalSeparator = (numStr.indexOf(".") !== -1 || fixedDecimalScale) && scale;
  var ref = splitDecimal(numStr);
  var beforeDecimal = ref.beforeDecimal;
  var afterDecimal = ref.afterDecimal;
  var hasNegation = ref.hasNegation;
  var floatValue = parseFloat("0." + (afterDecimal || "0"));
  var floatValueStr = afterDecimal.length <= scale ? "0." + afterDecimal : floatValue.toFixed(scale);
  var roundedDecimalParts = floatValueStr.split(".");
  var intPart = beforeDecimal;
  if (beforeDecimal && Number(roundedDecimalParts[0])) {
    intPart = beforeDecimal.split("").reverse().reduce(function(roundedStr, current2, idx) {
      if (roundedStr.length > idx) {
        return (Number(roundedStr[0]) + Number(current2)).toString() + roundedStr.substring(1, roundedStr.length);
      }
      return current2 + roundedStr;
    }, roundedDecimalParts[0]);
  }
  var decimalPart = limitToScale(roundedDecimalParts[1] || "", scale, fixedDecimalScale);
  var negation = hasNegation ? "-" : "";
  var decimalSeparator = shouldHaveDecimalSeparator ? "." : "";
  return "" + negation + intPart + decimalSeparator + decimalPart;
}
function setCaretPosition(el, caretPos) {
  el.value = el.value;
  if (el !== null) {
    if (el.createTextRange) {
      var range = el.createTextRange();
      range.move("character", caretPos);
      range.select();
      return true;
    }
    if (el.selectionStart || el.selectionStart === 0) {
      el.focus();
      el.setSelectionRange(caretPos, caretPos);
      return true;
    }
    el.focus();
    return false;
  }
}
var findChangeRange = memoizeOnce(function(prevValue, newValue) {
  var i2 = 0, j2 = 0;
  var prevLength = prevValue.length;
  var newLength = newValue.length;
  while (prevValue[i2] === newValue[i2] && i2 < prevLength) {
    i2++;
  }
  while (prevValue[prevLength - 1 - j2] === newValue[newLength - 1 - j2] && newLength - j2 > i2 && prevLength - j2 > i2) {
    j2++;
  }
  return {
    from: { start: i2, end: prevLength - j2 },
    to: { start: i2, end: newLength - j2 }
  };
});
var findChangedRangeFromCaretPositions = function(lastCaretPositions, currentCaretPosition) {
  var startPosition = Math.min(lastCaretPositions.selectionStart, currentCaretPosition);
  return {
    from: { start: startPosition, end: lastCaretPositions.selectionEnd },
    to: { start: startPosition, end: currentCaretPosition }
  };
};
function clamp4(num, min2, max2) {
  return Math.min(Math.max(num, min2), max2);
}
function geInputCaretPosition(el) {
  return Math.max(el.selectionStart, el.selectionEnd);
}
function addInputMode() {
  return typeof navigator !== "undefined" && !(navigator.platform && /iPhone|iPod/.test(navigator.platform));
}
function getDefaultChangeMeta(value) {
  return {
    from: {
      start: 0,
      end: 0
    },
    to: {
      start: 0,
      end: value.length
    },
    lastValue: ""
  };
}
function defaultIsCharacterSame(ref) {
  var currentValue = ref.currentValue;
  var formattedValue = ref.formattedValue;
  var currentValueIndex = ref.currentValueIndex;
  var formattedValueIndex = ref.formattedValueIndex;
  return currentValue[currentValueIndex] === formattedValue[formattedValueIndex];
}
function getCaretPosition(newFormattedValue, lastFormattedValue, curValue, curCaretPos, boundary, isValidInputCharacter, isCharacterSame) {
  if (isCharacterSame === undefined)
    isCharacterSame = defaultIsCharacterSame;
  var firstAllowedPosition = boundary.findIndex(function(b) {
    return b;
  });
  var prefixFormat = newFormattedValue.slice(0, firstAllowedPosition);
  if (!lastFormattedValue && !curValue.startsWith(prefixFormat)) {
    lastFormattedValue = prefixFormat;
    curValue = prefixFormat + curValue;
    curCaretPos = curCaretPos + prefixFormat.length;
  }
  var curValLn = curValue.length;
  var formattedValueLn = newFormattedValue.length;
  var addedIndexMap = {};
  var indexMap = new Array(curValLn);
  for (var i2 = 0;i2 < curValLn; i2++) {
    indexMap[i2] = -1;
    for (var j2 = 0, jLn = formattedValueLn;j2 < jLn; j2++) {
      var isCharSame = isCharacterSame({
        currentValue: curValue,
        lastValue: lastFormattedValue,
        formattedValue: newFormattedValue,
        currentValueIndex: i2,
        formattedValueIndex: j2
      });
      if (isCharSame && addedIndexMap[j2] !== true) {
        indexMap[i2] = j2;
        addedIndexMap[j2] = true;
        break;
      }
    }
  }
  var pos = curCaretPos;
  while (pos < curValLn && (indexMap[pos] === -1 || !isValidInputCharacter(curValue[pos]))) {
    pos++;
  }
  var endIndex = pos === curValLn || indexMap[pos] === -1 ? formattedValueLn : indexMap[pos];
  pos = curCaretPos - 1;
  while (pos > 0 && indexMap[pos] === -1) {
    pos--;
  }
  var startIndex = pos === -1 || indexMap[pos] === -1 ? 0 : indexMap[pos] + 1;
  if (startIndex > endIndex) {
    return endIndex;
  }
  return curCaretPos - startIndex < endIndex - curCaretPos ? startIndex : endIndex;
}
function getCaretPosInBoundary(value, caretPos, boundary, direction) {
  var valLn = value.length;
  caretPos = clamp4(caretPos, 0, valLn);
  if (direction === "left") {
    while (caretPos >= 0 && !boundary[caretPos]) {
      caretPos--;
    }
    if (caretPos === -1) {
      caretPos = boundary.indexOf(true);
    }
  } else {
    while (caretPos <= valLn && !boundary[caretPos]) {
      caretPos++;
    }
    if (caretPos > valLn) {
      caretPos = boundary.lastIndexOf(true);
    }
  }
  if (caretPos === -1) {
    caretPos = valLn;
  }
  return caretPos;
}
function caretUnknownFormatBoundary(formattedValue) {
  var boundaryAry = Array.from({ length: formattedValue.length + 1 }).map(function() {
    return true;
  });
  for (var i2 = 0, ln = boundaryAry.length;i2 < ln; i2++) {
    boundaryAry[i2] = Boolean(charIsNumber(formattedValue[i2]) || charIsNumber(formattedValue[i2 - 1]));
  }
  return boundaryAry;
}
function useInternalValues(value, defaultValue, valueIsNumericString, format, removeFormatting, onValueChange) {
  if (onValueChange === undefined)
    onValueChange = noop6;
  var getValues = usePersistentCallback(function(value2, valueIsNumericString2) {
    var formattedValue, numAsString;
    if (isNotValidValue(value2)) {
      numAsString = "";
      formattedValue = "";
    } else if (typeof value2 === "number" || valueIsNumericString2) {
      numAsString = typeof value2 === "number" ? toNumericString(value2) : value2;
      formattedValue = format(numAsString);
    } else {
      numAsString = removeFormatting(value2, undefined);
      formattedValue = format(numAsString);
    }
    return { formattedValue, numAsString };
  });
  var ref = import_react207.useState(function() {
    return getValues(isNil(value) ? defaultValue : value, valueIsNumericString);
  });
  var values2 = ref[0];
  var setValues = ref[1];
  var _onValueChange = function(newValues2, sourceInfo) {
    if (newValues2.formattedValue !== values2.formattedValue) {
      setValues({
        formattedValue: newValues2.formattedValue,
        numAsString: newValues2.value
      });
    }
    onValueChange(newValues2, sourceInfo);
  };
  var _value = value;
  var _valueIsNumericString = valueIsNumericString;
  if (isNil(value)) {
    _value = values2.numAsString;
    _valueIsNumericString = true;
  }
  var newValues = getValues(_value, _valueIsNumericString);
  import_react207.useMemo(function() {
    setValues(newValues);
  }, [newValues.formattedValue]);
  return [values2, _onValueChange];
}
function defaultRemoveFormatting(value) {
  return value.replace(/[^0-9]/g, "");
}
function defaultFormat(value) {
  return value;
}
function NumberFormatBase(props) {
  var type = props.type;
  if (type === undefined)
    type = "text";
  var displayType = props.displayType;
  if (displayType === undefined)
    displayType = "input";
  var customInput = props.customInput;
  var renderText = props.renderText;
  var getInputRef = props.getInputRef;
  var format = props.format;
  if (format === undefined)
    format = defaultFormat;
  var removeFormatting = props.removeFormatting;
  if (removeFormatting === undefined)
    removeFormatting = defaultRemoveFormatting;
  var defaultValue = props.defaultValue;
  var valueIsNumericString = props.valueIsNumericString;
  var onValueChange = props.onValueChange;
  var isAllowed = props.isAllowed;
  var onChange = props.onChange;
  if (onChange === undefined)
    onChange = noop6;
  var onKeyDown = props.onKeyDown;
  if (onKeyDown === undefined)
    onKeyDown = noop6;
  var onMouseUp = props.onMouseUp;
  if (onMouseUp === undefined)
    onMouseUp = noop6;
  var onFocus = props.onFocus;
  if (onFocus === undefined)
    onFocus = noop6;
  var onBlur = props.onBlur;
  if (onBlur === undefined)
    onBlur = noop6;
  var propValue = props.value;
  var getCaretBoundary = props.getCaretBoundary;
  if (getCaretBoundary === undefined)
    getCaretBoundary = caretUnknownFormatBoundary;
  var isValidInputCharacter = props.isValidInputCharacter;
  if (isValidInputCharacter === undefined)
    isValidInputCharacter = charIsNumber;
  var isCharacterSame = props.isCharacterSame;
  var otherProps = __rest2(props, ["type", "displayType", "customInput", "renderText", "getInputRef", "format", "removeFormatting", "defaultValue", "valueIsNumericString", "onValueChange", "isAllowed", "onChange", "onKeyDown", "onMouseUp", "onFocus", "onBlur", "value", "getCaretBoundary", "isValidInputCharacter", "isCharacterSame"]);
  var ref = useInternalValues(propValue, defaultValue, Boolean(valueIsNumericString), format, removeFormatting, onValueChange);
  var ref_0 = ref[0];
  var formattedValue = ref_0.formattedValue;
  var numAsString = ref_0.numAsString;
  var onFormattedValueChange = ref[1];
  var caretPositionBeforeChange = import_react207.useRef();
  var lastUpdatedValue = import_react207.useRef({ formattedValue, numAsString });
  var _onValueChange = function(values2, source) {
    lastUpdatedValue.current = { formattedValue: values2.formattedValue, numAsString: values2.value };
    onFormattedValueChange(values2, source);
  };
  var ref$1 = import_react207.useState(false);
  var mounted = ref$1[0];
  var setMounted = ref$1[1];
  var focusedElm = import_react207.useRef(null);
  var timeout = import_react207.useRef({
    setCaretTimeout: null,
    focusTimeout: null
  });
  import_react207.useEffect(function() {
    setMounted(true);
    return function() {
      clearTimeout(timeout.current.setCaretTimeout);
      clearTimeout(timeout.current.focusTimeout);
    };
  }, []);
  var _format = format;
  var getValueObject = function(formattedValue2, numAsString2) {
    var floatValue = parseFloat(numAsString2);
    return {
      formattedValue: formattedValue2,
      value: numAsString2,
      floatValue: isNaN(floatValue) ? undefined : floatValue
    };
  };
  var setPatchedCaretPosition = function(el, caretPos, currentValue) {
    if (el.selectionStart === 0 && el.selectionEnd === el.value.length) {
      return;
    }
    setCaretPosition(el, caretPos);
    timeout.current.setCaretTimeout = setTimeout(function() {
      if (el.value === currentValue && el.selectionStart !== caretPos) {
        setCaretPosition(el, caretPos);
      }
    }, 0);
  };
  var correctCaretPosition = function(value, caretPos, direction) {
    return getCaretPosInBoundary(value, caretPos, getCaretBoundary(value), direction);
  };
  var getNewCaretPosition = function(inputValue, newFormattedValue, caretPos) {
    var caretBoundary = getCaretBoundary(newFormattedValue);
    var updatedCaretPos = getCaretPosition(newFormattedValue, formattedValue, inputValue, caretPos, caretBoundary, isValidInputCharacter, isCharacterSame);
    updatedCaretPos = getCaretPosInBoundary(newFormattedValue, updatedCaretPos, caretBoundary);
    return updatedCaretPos;
  };
  var updateValueAndCaretPosition = function(params) {
    var newFormattedValue = params.formattedValue;
    if (newFormattedValue === undefined)
      newFormattedValue = "";
    var input = params.input;
    var source = params.source;
    var event = params.event;
    var numAsString2 = params.numAsString;
    var caretPos;
    if (input) {
      var inputValue = params.inputValue || input.value;
      var currentCaretPosition2 = geInputCaretPosition(input);
      input.value = newFormattedValue;
      caretPos = getNewCaretPosition(inputValue, newFormattedValue, currentCaretPosition2);
      if (caretPos !== undefined) {
        setPatchedCaretPosition(input, caretPos, newFormattedValue);
      }
    }
    if (newFormattedValue !== formattedValue) {
      _onValueChange(getValueObject(newFormattedValue, numAsString2), { event, source });
    }
  };
  import_react207.useEffect(function() {
    var ref2 = lastUpdatedValue.current;
    var lastFormattedValue = ref2.formattedValue;
    var lastNumAsString = ref2.numAsString;
    if (formattedValue !== lastFormattedValue || numAsString !== lastNumAsString) {
      _onValueChange(getValueObject(formattedValue, numAsString), {
        event: undefined,
        source: SourceType.props
      });
    }
  }, [formattedValue, numAsString]);
  var currentCaretPosition = focusedElm.current ? geInputCaretPosition(focusedElm.current) : undefined;
  var useIsomorphicLayoutEffect2 = typeof window !== "undefined" ? import_react207.useLayoutEffect : import_react207.useEffect;
  useIsomorphicLayoutEffect2(function() {
    var input = focusedElm.current;
    if (formattedValue !== lastUpdatedValue.current.formattedValue && input) {
      var caretPos = getNewCaretPosition(lastUpdatedValue.current.formattedValue, formattedValue, currentCaretPosition);
      input.value = formattedValue;
      setPatchedCaretPosition(input, caretPos, formattedValue);
    }
  }, [formattedValue]);
  var formatInputValue = function(inputValue, event, source) {
    var input = event.target;
    var changeRange = caretPositionBeforeChange.current ? findChangedRangeFromCaretPositions(caretPositionBeforeChange.current, input.selectionEnd) : findChangeRange(formattedValue, inputValue);
    var changeMeta = Object.assign(Object.assign({}, changeRange), { lastValue: formattedValue });
    var _numAsString = removeFormatting(inputValue, changeMeta);
    var _formattedValue = _format(_numAsString);
    _numAsString = removeFormatting(_formattedValue, undefined);
    if (isAllowed && !isAllowed(getValueObject(_formattedValue, _numAsString))) {
      var input$1 = event.target;
      var currentCaretPosition2 = geInputCaretPosition(input$1);
      var caretPos = getNewCaretPosition(inputValue, formattedValue, currentCaretPosition2);
      input$1.value = formattedValue;
      setPatchedCaretPosition(input$1, caretPos, formattedValue);
      return false;
    }
    updateValueAndCaretPosition({
      formattedValue: _formattedValue,
      numAsString: _numAsString,
      inputValue,
      event,
      source,
      input: event.target
    });
    return true;
  };
  var setCaretPositionInfoBeforeChange = function(el, endOffset) {
    if (endOffset === undefined)
      endOffset = 0;
    var selectionStart = el.selectionStart;
    var selectionEnd = el.selectionEnd;
    caretPositionBeforeChange.current = { selectionStart, selectionEnd: selectionEnd + endOffset };
  };
  var _onChange = function(e) {
    var el = e.target;
    var inputValue = el.value;
    var changed = formatInputValue(inputValue, e, SourceType.event);
    if (changed) {
      onChange(e);
    }
    caretPositionBeforeChange.current = undefined;
  };
  var _onKeyDown = function(e) {
    var el = e.target;
    var key = e.key;
    var selectionStart = el.selectionStart;
    var selectionEnd = el.selectionEnd;
    var value = el.value;
    if (value === undefined)
      value = "";
    var expectedCaretPosition;
    if (key === "ArrowLeft" || key === "Backspace") {
      expectedCaretPosition = Math.max(selectionStart - 1, 0);
    } else if (key === "ArrowRight") {
      expectedCaretPosition = Math.min(selectionStart + 1, value.length);
    } else if (key === "Delete") {
      expectedCaretPosition = selectionStart;
    }
    var endOffset = 0;
    if (key === "Delete" && selectionStart === selectionEnd) {
      endOffset = 1;
    }
    var isArrowKey = key === "ArrowLeft" || key === "ArrowRight";
    if (expectedCaretPosition === undefined || selectionStart !== selectionEnd && !isArrowKey) {
      onKeyDown(e);
      setCaretPositionInfoBeforeChange(el, endOffset);
      return;
    }
    var newCaretPosition = expectedCaretPosition;
    if (isArrowKey) {
      var direction = key === "ArrowLeft" ? "left" : "right";
      newCaretPosition = correctCaretPosition(value, expectedCaretPosition, direction);
      if (newCaretPosition !== expectedCaretPosition) {
        e.preventDefault();
      }
    } else if (key === "Delete" && !isValidInputCharacter(value[expectedCaretPosition])) {
      newCaretPosition = correctCaretPosition(value, expectedCaretPosition, "right");
    } else if (key === "Backspace" && !isValidInputCharacter(value[expectedCaretPosition])) {
      newCaretPosition = correctCaretPosition(value, expectedCaretPosition, "left");
    }
    if (newCaretPosition !== expectedCaretPosition) {
      setPatchedCaretPosition(el, newCaretPosition, value);
    }
    onKeyDown(e);
    setCaretPositionInfoBeforeChange(el, endOffset);
  };
  var _onMouseUp = function(e) {
    var el = e.target;
    var correctCaretPositionIfRequired = function() {
      var selectionStart = el.selectionStart;
      var selectionEnd = el.selectionEnd;
      var value = el.value;
      if (value === undefined)
        value = "";
      if (selectionStart === selectionEnd) {
        var caretPosition = correctCaretPosition(value, selectionStart);
        if (caretPosition !== selectionStart) {
          setPatchedCaretPosition(el, caretPosition, value);
        }
      }
    };
    correctCaretPositionIfRequired();
    requestAnimationFrame(function() {
      correctCaretPositionIfRequired();
    });
    onMouseUp(e);
    setCaretPositionInfoBeforeChange(el);
  };
  var _onFocus = function(e) {
    if (e.persist) {
      e.persist();
    }
    var el = e.target;
    var currentTarget = e.currentTarget;
    focusedElm.current = el;
    timeout.current.focusTimeout = setTimeout(function() {
      var selectionStart = el.selectionStart;
      var selectionEnd = el.selectionEnd;
      var value = el.value;
      if (value === undefined)
        value = "";
      var caretPosition = correctCaretPosition(value, selectionStart);
      if (caretPosition !== selectionStart && !(selectionStart === 0 && selectionEnd === value.length)) {
        setPatchedCaretPosition(el, caretPosition, value);
      }
      onFocus(Object.assign(Object.assign({}, e), { currentTarget }));
    }, 0);
  };
  var _onBlur = function(e) {
    focusedElm.current = null;
    clearTimeout(timeout.current.focusTimeout);
    clearTimeout(timeout.current.setCaretTimeout);
    onBlur(e);
  };
  var inputMode = mounted && addInputMode() ? "numeric" : undefined;
  var inputProps = Object.assign({ inputMode }, otherProps, {
    type,
    value: formattedValue,
    onChange: _onChange,
    onKeyDown: _onKeyDown,
    onMouseUp: _onMouseUp,
    onFocus: _onFocus,
    onBlur: _onBlur
  });
  if (displayType === "text") {
    return renderText ? import_react207.default.createElement(import_react207.default.Fragment, null, renderText(formattedValue, otherProps) || null) : import_react207.default.createElement("span", Object.assign({}, otherProps, { ref: getInputRef }), formattedValue);
  } else if (customInput) {
    var CustomInput = customInput;
    return import_react207.default.createElement(CustomInput, Object.assign({}, inputProps, { ref: getInputRef }));
  }
  return import_react207.default.createElement("input", Object.assign({}, inputProps, { ref: getInputRef }));
}
function format(numStr, props) {
  var decimalScale = props.decimalScale;
  var fixedDecimalScale = props.fixedDecimalScale;
  var prefix3 = props.prefix;
  if (prefix3 === undefined)
    prefix3 = "";
  var suffix2 = props.suffix;
  if (suffix2 === undefined)
    suffix2 = "";
  var allowNegative = props.allowNegative;
  var thousandsGroupStyle = props.thousandsGroupStyle;
  if (thousandsGroupStyle === undefined)
    thousandsGroupStyle = "thousand";
  if (numStr === "" || numStr === "-") {
    return numStr;
  }
  var ref = getSeparators(props);
  var thousandSeparator = ref.thousandSeparator;
  var decimalSeparator = ref.decimalSeparator;
  var hasDecimalSeparator = decimalScale !== 0 && numStr.indexOf(".") !== -1 || decimalScale && fixedDecimalScale;
  var ref$1 = splitDecimal(numStr, allowNegative);
  var beforeDecimal = ref$1.beforeDecimal;
  var afterDecimal = ref$1.afterDecimal;
  var addNegation = ref$1.addNegation;
  if (decimalScale !== undefined) {
    afterDecimal = limitToScale(afterDecimal, decimalScale, !!fixedDecimalScale);
  }
  if (thousandSeparator) {
    beforeDecimal = applyThousandSeparator(beforeDecimal, thousandSeparator, thousandsGroupStyle);
  }
  if (prefix3) {
    beforeDecimal = prefix3 + beforeDecimal;
  }
  if (suffix2) {
    afterDecimal = afterDecimal + suffix2;
  }
  if (addNegation) {
    beforeDecimal = "-" + beforeDecimal;
  }
  numStr = beforeDecimal + (hasDecimalSeparator && decimalSeparator || "") + afterDecimal;
  return numStr;
}
function getSeparators(props) {
  var decimalSeparator = props.decimalSeparator;
  if (decimalSeparator === undefined)
    decimalSeparator = ".";
  var thousandSeparator = props.thousandSeparator;
  var allowedDecimalSeparators = props.allowedDecimalSeparators;
  if (thousandSeparator === true) {
    thousandSeparator = ",";
  }
  if (!allowedDecimalSeparators) {
    allowedDecimalSeparators = [decimalSeparator, "."];
  }
  return {
    decimalSeparator,
    thousandSeparator,
    allowedDecimalSeparators
  };
}
function handleNegation(value, allowNegative) {
  if (value === undefined)
    value = "";
  var negationRegex = new RegExp("(-)");
  var doubleNegationRegex = new RegExp("(-)(.)*(-)");
  var hasNegation = negationRegex.test(value);
  var removeNegation = doubleNegationRegex.test(value);
  value = value.replace(/-/g, "");
  if (hasNegation && !removeNegation && allowNegative) {
    value = "-" + value;
  }
  return value;
}
function getNumberRegex(decimalSeparator, global) {
  return new RegExp("(^-)|[0-9]|" + escapeRegExp(decimalSeparator), global ? "g" : undefined);
}
function isNumericString(val, prefix3, suffix2) {
  if (val === "") {
    return true;
  }
  return !(prefix3 === null || prefix3 === undefined ? undefined : prefix3.match(/\d/)) && !(suffix2 === null || suffix2 === undefined ? undefined : suffix2.match(/\d/)) && typeof val === "string" && !isNaN(Number(val));
}
function removeFormatting(value, changeMeta, props) {
  var assign4;
  if (changeMeta === undefined)
    changeMeta = getDefaultChangeMeta(value);
  var allowNegative = props.allowNegative;
  var prefix3 = props.prefix;
  if (prefix3 === undefined)
    prefix3 = "";
  var suffix2 = props.suffix;
  if (suffix2 === undefined)
    suffix2 = "";
  var decimalScale = props.decimalScale;
  var from2 = changeMeta.from;
  var to = changeMeta.to;
  var start = to.start;
  var end = to.end;
  var ref = getSeparators(props);
  var allowedDecimalSeparators = ref.allowedDecimalSeparators;
  var decimalSeparator = ref.decimalSeparator;
  var isBeforeDecimalSeparator = value[end] === decimalSeparator;
  if (charIsNumber(value) && (value === prefix3 || value === suffix2) && changeMeta.lastValue === "") {
    return value;
  }
  if (end - start === 1 && allowedDecimalSeparators.indexOf(value[start]) !== -1) {
    var separator = decimalScale === 0 ? "" : decimalSeparator;
    value = value.substring(0, start) + separator + value.substring(start + 1, value.length);
  }
  var stripNegation = function(value2, start2, end2) {
    var hasNegation2 = false;
    var hasDoubleNegation = false;
    if (prefix3.startsWith("-")) {
      hasNegation2 = false;
    } else if (value2.startsWith("--")) {
      hasNegation2 = false;
      hasDoubleNegation = true;
    } else if (suffix2.startsWith("-") && value2.length === suffix2.length) {
      hasNegation2 = false;
    } else if (value2[0] === "-") {
      hasNegation2 = true;
    }
    var charsToRemove = hasNegation2 ? 1 : 0;
    if (hasDoubleNegation) {
      charsToRemove = 2;
    }
    if (charsToRemove) {
      value2 = value2.substring(charsToRemove);
      start2 -= charsToRemove;
      end2 -= charsToRemove;
    }
    return { value: value2, start: start2, end: end2, hasNegation: hasNegation2 };
  };
  var toMetadata = stripNegation(value, start, end);
  var hasNegation = toMetadata.hasNegation;
  assign4 = toMetadata, value = assign4.value, start = assign4.start, end = assign4.end;
  var ref$1 = stripNegation(changeMeta.lastValue, from2.start, from2.end);
  var fromStart = ref$1.start;
  var fromEnd = ref$1.end;
  var lastValue = ref$1.value;
  var updatedSuffixPart = value.substring(start, end);
  if (value.length && lastValue.length && (fromStart > lastValue.length - suffix2.length || fromEnd < prefix3.length) && !(updatedSuffixPart && suffix2.startsWith(updatedSuffixPart))) {
    value = lastValue;
  }
  var startIndex = 0;
  if (value.startsWith(prefix3)) {
    startIndex += prefix3.length;
  } else if (start < prefix3.length) {
    startIndex = start;
  }
  value = value.substring(startIndex);
  end -= startIndex;
  var endIndex = value.length;
  var suffixStartIndex = value.length - suffix2.length;
  if (value.endsWith(suffix2)) {
    endIndex = suffixStartIndex;
  } else if (end > suffixStartIndex) {
    endIndex = end;
  } else if (end > value.length - suffix2.length) {
    endIndex = end;
  }
  value = value.substring(0, endIndex);
  value = handleNegation(hasNegation ? "-" + value : value, allowNegative);
  value = (value.match(getNumberRegex(decimalSeparator, true)) || []).join("");
  var firstIndex = value.indexOf(decimalSeparator);
  value = value.replace(new RegExp(escapeRegExp(decimalSeparator), "g"), function(match2, index4) {
    return index4 === firstIndex ? "." : "";
  });
  var ref$2 = splitDecimal(value, allowNegative);
  var beforeDecimal = ref$2.beforeDecimal;
  var afterDecimal = ref$2.afterDecimal;
  var addNegation = ref$2.addNegation;
  if (to.end - to.start < from2.end - from2.start && beforeDecimal === "" && isBeforeDecimalSeparator && !parseFloat(afterDecimal)) {
    value = addNegation ? "-" : "";
  }
  return value;
}
function getCaretBoundary(formattedValue, props) {
  var prefix3 = props.prefix;
  if (prefix3 === undefined)
    prefix3 = "";
  var suffix2 = props.suffix;
  if (suffix2 === undefined)
    suffix2 = "";
  var boundaryAry = Array.from({ length: formattedValue.length + 1 }).map(function() {
    return true;
  });
  var hasNegation = formattedValue[0] === "-";
  boundaryAry.fill(false, 0, prefix3.length + (hasNegation ? 1 : 0));
  var valLn = formattedValue.length;
  boundaryAry.fill(false, valLn - suffix2.length + 1, valLn + 1);
  return boundaryAry;
}
function validateAndUpdateProps(props) {
  var ref = getSeparators(props);
  var thousandSeparator = ref.thousandSeparator;
  var decimalSeparator = ref.decimalSeparator;
  var prefix3 = props.prefix;
  if (prefix3 === undefined)
    prefix3 = "";
  var allowNegative = props.allowNegative;
  if (allowNegative === undefined)
    allowNegative = true;
  if (thousandSeparator === decimalSeparator) {
    throw new Error(`
        Decimal separator can't be same as thousand separator.
        thousandSeparator: ` + thousandSeparator + ` (thousandSeparator = {true} is same as thousandSeparator = ",")
        decimalSeparator: ` + decimalSeparator + ` (default value for decimalSeparator is .)
     `);
  }
  if (prefix3.startsWith("-") && allowNegative) {
    console.error(`
      Prefix can't start with '-' when allowNegative is true.
      prefix: ` + prefix3 + `
      allowNegative: ` + allowNegative + `
    `);
    allowNegative = false;
  }
  return Object.assign(Object.assign({}, props), { allowNegative });
}
function useNumericFormat(props) {
  props = validateAndUpdateProps(props);
  var _decimalSeparator = props.decimalSeparator;
  var _allowedDecimalSeparators = props.allowedDecimalSeparators;
  var thousandsGroupStyle = props.thousandsGroupStyle;
  var suffix2 = props.suffix;
  var allowNegative = props.allowNegative;
  var allowLeadingZeros = props.allowLeadingZeros;
  var onKeyDown = props.onKeyDown;
  if (onKeyDown === undefined)
    onKeyDown = noop6;
  var onBlur = props.onBlur;
  if (onBlur === undefined)
    onBlur = noop6;
  var thousandSeparator = props.thousandSeparator;
  var decimalScale = props.decimalScale;
  var fixedDecimalScale = props.fixedDecimalScale;
  var prefix3 = props.prefix;
  if (prefix3 === undefined)
    prefix3 = "";
  var defaultValue = props.defaultValue;
  var value = props.value;
  var valueIsNumericString = props.valueIsNumericString;
  var onValueChange = props.onValueChange;
  var restProps = __rest2(props, ["decimalSeparator", "allowedDecimalSeparators", "thousandsGroupStyle", "suffix", "allowNegative", "allowLeadingZeros", "onKeyDown", "onBlur", "thousandSeparator", "decimalScale", "fixedDecimalScale", "prefix", "defaultValue", "value", "valueIsNumericString", "onValueChange"]);
  var ref = getSeparators(props);
  var decimalSeparator = ref.decimalSeparator;
  var allowedDecimalSeparators = ref.allowedDecimalSeparators;
  var _format = function(numStr) {
    return format(numStr, props);
  };
  var _removeFormatting = function(inputValue, changeMeta) {
    return removeFormatting(inputValue, changeMeta, props);
  };
  var _value = isNil(value) ? defaultValue : value;
  var _valueIsNumericString = valueIsNumericString !== null && valueIsNumericString !== undefined ? valueIsNumericString : isNumericString(_value, prefix3, suffix2);
  if (!isNil(value)) {
    _valueIsNumericString = _valueIsNumericString || typeof value === "number";
  } else if (!isNil(defaultValue)) {
    _valueIsNumericString = _valueIsNumericString || typeof defaultValue === "number";
  }
  var roundIncomingValueToPrecision = function(value2) {
    if (isNotValidValue(value2)) {
      return value2;
    }
    if (typeof value2 === "number") {
      value2 = toNumericString(value2);
    }
    if (_valueIsNumericString && typeof decimalScale === "number") {
      return roundToPrecision(value2, decimalScale, Boolean(fixedDecimalScale));
    }
    return value2;
  };
  var ref$1 = useInternalValues(roundIncomingValueToPrecision(value), roundIncomingValueToPrecision(defaultValue), Boolean(_valueIsNumericString), _format, _removeFormatting, onValueChange);
  var ref$1_0 = ref$1[0];
  var numAsString = ref$1_0.numAsString;
  var formattedValue = ref$1_0.formattedValue;
  var _onValueChange = ref$1[1];
  var _onKeyDown = function(e) {
    var el = e.target;
    var key = e.key;
    var selectionStart = el.selectionStart;
    var selectionEnd = el.selectionEnd;
    var value2 = el.value;
    if (value2 === undefined)
      value2 = "";
    if ((key === "Backspace" || key === "Delete") && selectionEnd < prefix3.length) {
      e.preventDefault();
      return;
    }
    if (selectionStart !== selectionEnd) {
      onKeyDown(e);
      return;
    }
    if (key === "Backspace" && value2[0] === "-" && selectionStart === prefix3.length + 1 && allowNegative) {
      setCaretPosition(el, 1);
    }
    if (decimalScale && fixedDecimalScale) {
      if (key === "Backspace" && value2[selectionStart - 1] === decimalSeparator) {
        setCaretPosition(el, selectionStart - 1);
        e.preventDefault();
      } else if (key === "Delete" && value2[selectionStart] === decimalSeparator) {
        e.preventDefault();
      }
    }
    if ((allowedDecimalSeparators === null || allowedDecimalSeparators === undefined ? undefined : allowedDecimalSeparators.includes(key)) && value2[selectionStart] === decimalSeparator) {
      setCaretPosition(el, selectionStart + 1);
    }
    var _thousandSeparator = thousandSeparator === true ? "," : thousandSeparator;
    if (key === "Backspace" && value2[selectionStart - 1] === _thousandSeparator) {
      setCaretPosition(el, selectionStart - 1);
    }
    if (key === "Delete" && value2[selectionStart] === _thousandSeparator) {
      setCaretPosition(el, selectionStart + 1);
    }
    onKeyDown(e);
  };
  var _onBlur = function(e) {
    var _value2 = numAsString;
    if (!_value2.match(/\d/g)) {
      _value2 = "";
    }
    if (!allowLeadingZeros) {
      _value2 = fixLeadingZero(_value2);
    }
    if (fixedDecimalScale && decimalScale) {
      _value2 = roundToPrecision(_value2, decimalScale, fixedDecimalScale);
    }
    if (_value2 !== numAsString) {
      var formattedValue2 = format(_value2, props);
      _onValueChange({
        formattedValue: formattedValue2,
        value: _value2,
        floatValue: parseFloat(_value2)
      }, {
        event: e,
        source: SourceType.event
      });
    }
    onBlur(e);
  };
  var isValidInputCharacter = function(inputChar) {
    if (inputChar === decimalSeparator) {
      return true;
    }
    return charIsNumber(inputChar);
  };
  var isCharacterSame = function(ref2) {
    var currentValue = ref2.currentValue;
    var lastValue = ref2.lastValue;
    var formattedValue2 = ref2.formattedValue;
    var currentValueIndex = ref2.currentValueIndex;
    var formattedValueIndex = ref2.formattedValueIndex;
    var curChar = currentValue[currentValueIndex];
    var newChar = formattedValue2[formattedValueIndex];
    var typedRange = findChangeRange(lastValue, currentValue);
    var to = typedRange.to;
    var getDecimalSeparatorIndex = function(value2) {
      return _removeFormatting(value2).indexOf(".") + prefix3.length;
    };
    if (value === 0 && fixedDecimalScale && decimalScale && currentValue[to.start] === decimalSeparator && getDecimalSeparatorIndex(currentValue) < currentValueIndex && getDecimalSeparatorIndex(formattedValue2) > formattedValueIndex) {
      return false;
    }
    if (currentValueIndex >= to.start && currentValueIndex < to.end && allowedDecimalSeparators && allowedDecimalSeparators.includes(curChar) && newChar === decimalSeparator) {
      return true;
    }
    return curChar === newChar;
  };
  return Object.assign(Object.assign({}, restProps), {
    value: formattedValue,
    valueIsNumericString: false,
    isValidInputCharacter,
    isCharacterSame,
    onValueChange: _onValueChange,
    format: _format,
    removeFormatting: _removeFormatting,
    getCaretBoundary: function(formattedValue2) {
      return getCaretBoundary(formattedValue2, props);
    },
    onKeyDown: _onKeyDown,
    onBlur: _onBlur
  });
}
function NumericFormat(props) {
  var numericFormatProps = useNumericFormat(props);
  return import_react207.default.createElement(NumberFormatBase, Object.assign({}, numericFormatProps));
}

// node_modules/@mantine/core/esm/components/NumberInput/NumberInput.mjs
var import_jsx_runtime171 = __toESM(require_jsx_runtime(), 1);
var import_react208 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/NumberInput/NumberInputChevron.mjs
var import_jsx_runtime170 = __toESM(require_jsx_runtime(), 1);
"use client";
function NumberInputChevron({ direction, style: style2, ...others }) {
  return /* @__PURE__ */ import_jsx_runtime170.jsx("svg", {
    style: {
      width: "var(--ni-chevron-size)",
      height: "var(--ni-chevron-size)",
      transform: direction === "up" ? "rotate(180deg)" : undefined,
      ...style2
    },
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ...others,
    children: /* @__PURE__ */ import_jsx_runtime170.jsx("path", {
      d: "M3.13523 6.15803C3.3241 5.95657 3.64052 5.94637 3.84197 6.13523L7.5 9.56464L11.158 6.13523C11.3595 5.94637 11.6759 5.95657 11.8648 6.15803C12.0536 6.35949 12.0434 6.67591 11.842 6.86477L7.84197 10.6148C7.64964 10.7951 7.35036 10.7951 7.15803 10.6148L3.15803 6.86477C2.95657 6.67591 2.94637 6.35949 3.13523 6.15803Z",
      fill: "currentColor",
      fillRule: "evenodd",
      clipRule: "evenodd"
    })
  });
}

// node_modules/@mantine/core/esm/components/NumberInput/NumberInput.module.css.mjs
"use client";
var classes31 = { root: "m_e2f5cd4e", controls: "m_95e17d22", control: "m_80b4b171" };

// node_modules/@mantine/core/esm/components/NumberInput/NumberInput.mjs
"use client";
var leadingDecimalZeroPattern = /^(0\.0*|-0(\.0*)?)$/;
var leadingZerosPattern = /^-?0\d+(\.\d+)?\.?$/;
function isNumberString(value) {
  return typeof value === "string" && value !== "" && !Number.isNaN(Number(value));
}
function canIncrement(value) {
  if (typeof value === "number") {
    return value < Number.MAX_SAFE_INTEGER;
  }
  return value === "" || isNumberString(value) && Number(value) < Number.MAX_SAFE_INTEGER;
}
function getDecimalPlaces(inputValue) {
  return inputValue.toString().replace(".", "").length;
}
function isValidNumber(floatValue, value) {
  return (typeof floatValue === "number" ? floatValue < Number.MAX_SAFE_INTEGER : !Number.isNaN(Number(floatValue))) && !Number.isNaN(floatValue) && getDecimalPlaces(value) < 14 && value !== "";
}
function isInRange(value, min2, max2) {
  if (value === undefined) {
    return true;
  }
  const minValid = min2 === undefined || value >= min2;
  const maxValid = max2 === undefined || value <= max2;
  return minValid && maxValid;
}
var defaultProps82 = {
  step: 1,
  clampBehavior: "blur",
  allowDecimal: true,
  allowNegative: true,
  withKeyboardEvents: true,
  allowLeadingZeros: true,
  trimLeadingZeroesOnBlur: true,
  startValue: 0
};
var varsResolver34 = createVarsResolver((_2, { size: size4 }) => ({
  controls: {
    "--ni-chevron-size": getSize(size4, "ni-chevron-size")
  }
}));
var NumberInput = factory((_props, ref) => {
  const props = useProps("NumberInput", defaultProps82, _props);
  const {
    className,
    classNames,
    styles,
    unstyled,
    vars,
    onChange,
    onValueChange,
    value,
    defaultValue,
    max: max2,
    min: min2,
    step,
    hideControls,
    rightSection,
    isAllowed,
    clampBehavior,
    onBlur,
    allowDecimal,
    decimalScale,
    onKeyDown,
    onKeyDownCapture,
    handlersRef,
    startValue,
    disabled,
    rightSectionPointerEvents,
    allowNegative,
    readOnly,
    size: size4,
    rightSectionWidth,
    stepHoldInterval,
    stepHoldDelay,
    allowLeadingZeros,
    withKeyboardEvents,
    trimLeadingZeroesOnBlur,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "NumberInput",
    classes: classes31,
    props,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver34
  });
  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
    classNames,
    styles,
    props
  });
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: "",
    onChange
  });
  const shouldUseStepInterval = stepHoldDelay !== undefined && stepHoldInterval !== undefined;
  const inputRef = import_react208.useRef(null);
  const onStepTimeoutRef = import_react208.useRef(null);
  const stepCountRef = import_react208.useRef(0);
  const handleValueChange = (payload, event) => {
    if (event.source === "event") {
      setValue(isValidNumber(payload.floatValue, payload.value) && !leadingDecimalZeroPattern.test(payload.value) && !(allowLeadingZeros ? leadingZerosPattern.test(payload.value) : false) ? payload.floatValue : payload.value);
    }
    onValueChange?.(payload, event);
  };
  const getDecimalPlaces2 = (inputValue) => {
    const match2 = String(inputValue).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
    if (!match2) {
      return 0;
    }
    return Math.max(0, (match2[1] ? match2[1].length : 0) - (match2[2] ? +match2[2] : 0));
  };
  const adjustCursor = (position2) => {
    if (inputRef.current && typeof position2 !== "undefined") {
      inputRef.current.setSelectionRange(position2, position2);
    }
  };
  const incrementRef = import_react208.useRef(noop4);
  incrementRef.current = () => {
    if (!canIncrement(_value)) {
      return;
    }
    let val;
    const currentValuePrecision = getDecimalPlaces2(_value);
    const stepPrecision = getDecimalPlaces2(step);
    const maxPrecision = Math.max(currentValuePrecision, stepPrecision);
    const factor = 10 ** maxPrecision;
    if (!isNumberString(_value) && (typeof _value !== "number" || Number.isNaN(_value))) {
      val = clamp(startValue, min2, max2);
    } else if (max2 !== undefined) {
      const incrementedValue = (Math.round(Number(_value) * factor) + Math.round(step * factor)) / factor;
      val = incrementedValue <= max2 ? incrementedValue : max2;
    } else {
      val = (Math.round(Number(_value) * factor) + Math.round(step * factor)) / factor;
    }
    const formattedValue = val.toFixed(maxPrecision);
    setValue(parseFloat(formattedValue));
    onValueChange?.({ floatValue: parseFloat(formattedValue), formattedValue, value: formattedValue }, { source: "increment" });
    setTimeout(() => adjustCursor(inputRef.current?.value.length), 0);
  };
  const decrementRef = import_react208.useRef(noop4);
  decrementRef.current = () => {
    if (!canIncrement(_value)) {
      return;
    }
    let val;
    const minValue = min2 !== undefined ? min2 : !allowNegative ? 0 : Number.MIN_SAFE_INTEGER;
    const currentValuePrecision = getDecimalPlaces2(_value);
    const stepPrecision = getDecimalPlaces2(step);
    const maxPrecision = Math.max(currentValuePrecision, stepPrecision);
    const factor = 10 ** maxPrecision;
    if (!isNumberString(_value) && typeof _value !== "number" || Number.isNaN(_value)) {
      val = clamp(startValue, minValue, max2);
    } else {
      const decrementedValue = (Math.round(Number(_value) * factor) - Math.round(step * factor)) / factor;
      val = minValue !== undefined && decrementedValue < minValue ? minValue : decrementedValue;
    }
    const formattedValue = val.toFixed(maxPrecision);
    setValue(parseFloat(formattedValue));
    onValueChange?.({ floatValue: parseFloat(formattedValue), formattedValue, value: formattedValue }, { source: "decrement" });
    setTimeout(() => adjustCursor(inputRef.current?.value.length), 0);
  };
  const handleKeyDown = (event) => {
    onKeyDown?.(event);
    if (readOnly || !withKeyboardEvents) {
      return;
    }
    if (event.key === "ArrowUp") {
      event.preventDefault();
      incrementRef.current();
    }
    if (event.key === "ArrowDown") {
      event.preventDefault();
      decrementRef.current();
    }
  };
  const handleKeyDownCapture = (event) => {
    onKeyDownCapture?.(event);
    if (event.key === "Backspace") {
      const input = inputRef.current;
      if (input.selectionStart === 0 && input.selectionStart === input.selectionEnd) {
        event.preventDefault();
        window.setTimeout(() => adjustCursor(0), 0);
      }
    }
  };
  const handleBlur = (event) => {
    let sanitizedValue = _value;
    if (clampBehavior === "blur" && typeof sanitizedValue === "number") {
      const clampedValue = clamp(sanitizedValue, min2, max2);
      sanitizedValue = clampedValue;
    }
    if (trimLeadingZeroesOnBlur && typeof sanitizedValue === "string" && getDecimalPlaces2(sanitizedValue) < 15) {
      const replaced = sanitizedValue.toString().replace(/^0+/, "");
      const parsedValue = parseFloat(replaced);
      sanitizedValue = Number.isNaN(parsedValue) || parsedValue > Number.MAX_SAFE_INTEGER ? replaced : clamp(parsedValue, min2, max2);
    }
    if (_value !== sanitizedValue) {
      setValue(sanitizedValue);
    }
    onBlur?.(event);
  };
  assignRef2(handlersRef, { increment: incrementRef.current, decrement: decrementRef.current });
  const onStepHandleChange = (isIncrement) => {
    if (isIncrement) {
      incrementRef.current();
    } else {
      decrementRef.current();
    }
    stepCountRef.current += 1;
  };
  const onStepLoop = (isIncrement) => {
    onStepHandleChange(isIncrement);
    if (shouldUseStepInterval) {
      const interval = typeof stepHoldInterval === "number" ? stepHoldInterval : stepHoldInterval(stepCountRef.current);
      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), interval);
    }
  };
  const onStep = (event, isIncrement) => {
    event.preventDefault();
    inputRef.current?.focus();
    onStepHandleChange(isIncrement);
    if (shouldUseStepInterval) {
      onStepTimeoutRef.current = window.setTimeout(() => onStepLoop(isIncrement), stepHoldDelay);
    }
  };
  const onStepDone = () => {
    if (onStepTimeoutRef.current) {
      window.clearTimeout(onStepTimeoutRef.current);
    }
    onStepTimeoutRef.current = null;
    stepCountRef.current = 0;
  };
  const controls = /* @__PURE__ */ import_jsx_runtime171.jsxs("div", { ...getStyles2("controls"), children: [
    /* @__PURE__ */ import_jsx_runtime171.jsx(UnstyledButton, {
      ...getStyles2("control"),
      tabIndex: -1,
      "aria-hidden": true,
      disabled: disabled || typeof _value === "number" && max2 !== undefined && _value >= max2,
      mod: { direction: "up" },
      onMouseDown: (event) => event.preventDefault(),
      onPointerDown: (event) => {
        onStep(event, true);
      },
      onPointerUp: onStepDone,
      onPointerLeave: onStepDone,
      children: /* @__PURE__ */ import_jsx_runtime171.jsx(NumberInputChevron, { direction: "up" })
    }),
    /* @__PURE__ */ import_jsx_runtime171.jsx(UnstyledButton, {
      ...getStyles2("control"),
      tabIndex: -1,
      "aria-hidden": true,
      disabled: disabled || typeof _value === "number" && min2 !== undefined && _value <= min2,
      mod: { direction: "down" },
      onMouseDown: (event) => event.preventDefault(),
      onPointerDown: (event) => {
        onStep(event, false);
      },
      onPointerUp: onStepDone,
      onPointerLeave: onStepDone,
      children: /* @__PURE__ */ import_jsx_runtime171.jsx(NumberInputChevron, { direction: "down" })
    })
  ] });
  return /* @__PURE__ */ import_jsx_runtime171.jsx(InputBase, {
    component: NumericFormat,
    allowNegative,
    className: clsx_default(classes31.root, className),
    size: size4,
    ...others,
    readOnly,
    disabled,
    value: _value,
    getInputRef: useMergedRef(ref, inputRef),
    onValueChange: handleValueChange,
    rightSection: hideControls || readOnly || !canIncrement(_value) ? rightSection : rightSection || controls,
    classNames: resolvedClassNames,
    styles: resolvedStyles,
    unstyled,
    __staticSelector: "NumberInput",
    decimalScale: allowDecimal ? decimalScale : 0,
    onKeyDown: handleKeyDown,
    onKeyDownCapture: handleKeyDownCapture,
    rightSectionPointerEvents: rightSectionPointerEvents ?? (disabled ? "none" : undefined),
    rightSectionWidth: rightSectionWidth ?? `var(--ni-right-section-width-${size4 || "sm"})`,
    allowLeadingZeros,
    onBlur: handleBlur,
    isAllowed: (val) => {
      if (clampBehavior === "strict") {
        if (isAllowed) {
          return isAllowed(val) && isInRange(val.floatValue, min2, max2);
        }
        return isInRange(val.floatValue, min2, max2);
      }
      return isAllowed ? isAllowed(val) : true;
    }
  });
});
NumberInput.classes = { ...InputBase.classes, ...classes31 };
NumberInput.displayName = "@mantine/core/NumberInput";
// node_modules/@mantine/core/esm/components/Tooltip/Tooltip.mjs
var import_jsx_runtime174 = __toESM(require_jsx_runtime(), 1);
var import_react217 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Transition/get-transition-props/get-transition-props.mjs
"use client";
var defaultTransition = {
  duration: 100,
  transition: "fade"
};
function getTransitionProps(transitionProps, componentTransition) {
  return { ...defaultTransition, ...componentTransition, ...transitionProps };
}

// node_modules/@mantine/core/esm/components/Tooltip/TooltipFloating/TooltipFloating.mjs
var import_jsx_runtime172 = __toESM(require_jsx_runtime(), 1);
var import_react211 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Tooltip/TooltipFloating/use-floating-tooltip.mjs
var import_react209 = __toESM(require_react(), 1);
"use client";
function useFloatingTooltip({
  offset: offset4,
  position: position2,
  defaultOpened
}) {
  const [opened, setOpened] = import_react209.useState(defaultOpened);
  const boundaryRef = import_react209.useRef(null);
  const { x: x2, y: y2, elements, refs, update, placement } = useFloating2({
    placement: position2,
    middleware: [
      shift3({
        crossAxis: true,
        padding: 5,
        rootBoundary: "document"
      })
    ]
  });
  const horizontalOffset = placement.includes("right") ? offset4 : position2.includes("left") ? offset4 * -1 : 0;
  const verticalOffset = placement.includes("bottom") ? offset4 : position2.includes("top") ? offset4 * -1 : 0;
  const handleMouseMove = import_react209.useCallback(({ clientX, clientY }) => {
    refs.setPositionReference({
      getBoundingClientRect() {
        return {
          width: 0,
          height: 0,
          x: clientX,
          y: clientY,
          left: clientX + horizontalOffset,
          top: clientY + verticalOffset,
          right: clientX,
          bottom: clientY
        };
      }
    });
  }, [elements.reference]);
  import_react209.useEffect(() => {
    if (refs.floating.current) {
      const boundary = boundaryRef.current;
      boundary.addEventListener("mousemove", handleMouseMove);
      const parents = getOverflowAncestors(refs.floating.current);
      parents.forEach((parent) => {
        parent.addEventListener("scroll", update);
      });
      return () => {
        boundary.removeEventListener("mousemove", handleMouseMove);
        parents.forEach((parent) => {
          parent.removeEventListener("scroll", update);
        });
      };
    }
    return;
  }, [elements.reference, refs.floating.current, update, handleMouseMove, opened]);
  return { handleMouseMove, x: x2, y: y2, opened, setOpened, boundaryRef, floating: refs.setFloating };
}

// node_modules/@mantine/core/esm/components/Tooltip/Tooltip.module.css.mjs
"use client";
var classes32 = { tooltip: "m_1b3c8819", arrow: "m_f898399f" };

// node_modules/@mantine/core/esm/components/Tooltip/TooltipFloating/TooltipFloating.mjs
"use client";
var defaultProps83 = {
  refProp: "ref",
  withinPortal: true,
  offset: 10,
  defaultOpened: false,
  position: "right",
  zIndex: getDefaultZIndex("popover")
};
var varsResolver35 = createVarsResolver((theme, { radius, color }) => ({
  tooltip: {
    "--tooltip-radius": radius === undefined ? undefined : getRadius(radius),
    "--tooltip-bg": color ? getThemeColor(color, theme) : undefined,
    "--tooltip-color": color ? "var(--mantine-color-white)" : undefined
  }
}));
var TooltipFloating = factory((_props, ref) => {
  const props = useProps("TooltipFloating", defaultProps83, _props);
  const {
    children,
    refProp,
    withinPortal,
    style: style2,
    className,
    classNames,
    styles,
    unstyled,
    radius,
    color,
    label,
    offset: offset4,
    position: position2,
    multiline,
    zIndex,
    disabled,
    defaultOpened,
    variant,
    vars,
    portalProps,
    ...others
  } = props;
  const theme = useMantineTheme();
  const getStyles2 = useStyles({
    name: "TooltipFloating",
    props,
    classes: classes32,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    rootSelector: "tooltip",
    vars,
    varsResolver: varsResolver35
  });
  const { handleMouseMove, x: x2, y: y2, opened, boundaryRef, floating, setOpened } = useFloatingTooltip({
    offset: offset4,
    position: position2,
    defaultOpened
  });
  if (!isElement(children)) {
    throw new Error("[@mantine/core] Tooltip.Floating component children should be an element or a component that accepts ref, fragments, strings, numbers and other primitive values are not supported");
  }
  const targetRef = useMergedRef(boundaryRef, getRefProp(children), ref);
  const _childrenProps = children.props;
  const onMouseEnter = (event) => {
    _childrenProps.onMouseEnter?.(event);
    handleMouseMove(event);
    setOpened(true);
  };
  const onMouseLeave = (event) => {
    _childrenProps.onMouseLeave?.(event);
    setOpened(false);
  };
  return /* @__PURE__ */ import_jsx_runtime172.jsxs(import_jsx_runtime172.Fragment, { children: [
    /* @__PURE__ */ import_jsx_runtime172.jsx(OptionalPortal, { ...portalProps, withinPortal, children: /* @__PURE__ */ import_jsx_runtime172.jsx(Box, {
      ...others,
      ...getStyles2("tooltip", {
        style: {
          ...getStyleObject(style2, theme),
          zIndex,
          display: !disabled && opened ? "block" : "none",
          top: (y2 && Math.round(y2)) ?? "",
          left: (x2 && Math.round(x2)) ?? ""
        }
      }),
      variant,
      ref: floating,
      mod: { multiline },
      children: label
    }) }),
    import_react211.cloneElement(children, {
      ..._childrenProps,
      [refProp]: targetRef,
      onMouseEnter,
      onMouseLeave
    })
  ] });
});
TooltipFloating.classes = classes32;
TooltipFloating.displayName = "@mantine/core/TooltipFloating";

// node_modules/@mantine/core/esm/components/Tooltip/TooltipGroup/TooltipGroup.mjs
var import_jsx_runtime173 = __toESM(require_jsx_runtime(), 1);
var import_react214 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Tooltip/TooltipGroup/TooltipGroup.context.mjs
var import_react212 = __toESM(require_react(), 1);
"use client";
var TooltipGroupContext = import_react212.createContext(false);
var TooltipGroupProvider = TooltipGroupContext.Provider;
var useTooltipGroupContext = () => import_react212.useContext(TooltipGroupContext);

// node_modules/@mantine/core/esm/components/Tooltip/TooltipGroup/TooltipGroup.mjs
"use client";
var defaultProps84 = {
  openDelay: 0,
  closeDelay: 0
};
function TooltipGroup(props) {
  const { openDelay, closeDelay, children } = useProps("TooltipGroup", defaultProps84, props);
  return /* @__PURE__ */ import_jsx_runtime173.jsx(TooltipGroupProvider, { value: true, children: /* @__PURE__ */ import_jsx_runtime173.jsx(FloatingDelayGroup, { delay: { open: openDelay, close: closeDelay }, children }) });
}
TooltipGroup.displayName = "@mantine/core/TooltipGroup";
TooltipGroup.extend = (c2) => c2;

// node_modules/@mantine/core/esm/components/Tooltip/use-tooltip.mjs
var import_react215 = __toESM(require_react(), 1);
"use client";
function getDefaultMiddlewares2(middlewares) {
  if (middlewares === undefined) {
    return { shift: true, flip: true };
  }
  const result = { ...middlewares };
  if (middlewares.shift === undefined) {
    result.shift = true;
  }
  if (middlewares.flip === undefined) {
    result.flip = true;
  }
  return result;
}
function getTooltipMiddlewares(settings) {
  const middlewaresOptions = getDefaultMiddlewares2(settings.middlewares);
  const middlewares = [offset3(settings.offset)];
  if (middlewaresOptions.shift) {
    middlewares.push(shift3(typeof middlewaresOptions.shift === "boolean" ? { padding: 8 } : { padding: 8, ...middlewaresOptions.shift }));
  }
  if (middlewaresOptions.flip) {
    middlewares.push(typeof middlewaresOptions.flip === "boolean" ? flip3() : flip3(middlewaresOptions.flip));
  }
  middlewares.push(arrow3({ element: settings.arrowRef, padding: settings.arrowOffset }));
  if (middlewaresOptions.inline) {
    middlewares.push(typeof middlewaresOptions.inline === "boolean" ? inline3() : inline3(middlewaresOptions.inline));
  } else if (settings.inline) {
    middlewares.push(inline3());
  }
  return middlewares;
}
function useTooltip(settings) {
  const [uncontrolledOpened, setUncontrolledOpened] = import_react215.useState(settings.defaultOpened);
  const controlled = typeof settings.opened === "boolean";
  const opened = controlled ? settings.opened : uncontrolledOpened;
  const withinGroup = useTooltipGroupContext();
  const uid = useId();
  const onChange = import_react215.useCallback((_opened) => {
    setUncontrolledOpened(_opened);
    if (_opened) {
      setCurrentId(uid);
    }
  }, [uid]);
  const {
    x: x2,
    y: y2,
    context,
    refs,
    update,
    placement,
    middlewareData: { arrow: { x: arrowX, y: arrowY } = {} }
  } = useFloating2({
    strategy: settings.strategy,
    placement: settings.position,
    open: opened,
    onOpenChange: onChange,
    middleware: getTooltipMiddlewares(settings)
  });
  const { delay: groupDelay, currentId, setCurrentId } = useDelayGroup(context, { id: uid });
  const { getReferenceProps, getFloatingProps } = useInteractions([
    useHover(context, {
      enabled: settings.events?.hover,
      delay: withinGroup ? groupDelay : { open: settings.openDelay, close: settings.closeDelay },
      mouseOnly: !settings.events?.touch
    }),
    useFocus(context, { enabled: settings.events?.focus, visibleOnly: true }),
    useRole(context, { role: "tooltip" }),
    useDismiss(context, { enabled: typeof settings.opened === "undefined" })
  ]);
  useFloatingAutoUpdate({
    opened,
    position: settings.position,
    positionDependencies: settings.positionDependencies,
    floating: { refs, update }
  });
  useDidUpdate(() => {
    settings.onPositionChange?.(placement);
  }, [placement]);
  const isGroupPhase = opened && currentId && currentId !== uid;
  return {
    x: x2,
    y: y2,
    arrowX,
    arrowY,
    reference: refs.setReference,
    floating: refs.setFloating,
    getFloatingProps,
    getReferenceProps,
    isGroupPhase,
    opened,
    placement
  };
}

// node_modules/@mantine/core/esm/components/Tooltip/Tooltip.mjs
"use client";
var defaultProps85 = {
  position: "top",
  refProp: "ref",
  withinPortal: true,
  inline: false,
  defaultOpened: false,
  arrowSize: 4,
  arrowOffset: 5,
  arrowRadius: 0,
  arrowPosition: "side",
  offset: 5,
  transitionProps: { duration: 100, transition: "fade" },
  events: { hover: true, focus: false, touch: false },
  zIndex: getDefaultZIndex("popover"),
  positionDependencies: [],
  middlewares: { flip: true, shift: true, inline: false }
};
var varsResolver36 = createVarsResolver((theme, { radius, color }) => ({
  tooltip: {
    "--tooltip-radius": radius === undefined ? undefined : getRadius(radius),
    "--tooltip-bg": color ? getThemeColor(color, theme) : undefined,
    "--tooltip-color": color ? "var(--mantine-color-white)" : undefined
  }
}));
var Tooltip = factory((_props, ref) => {
  const props = useProps("Tooltip", defaultProps85, _props);
  const {
    children,
    position: position2,
    refProp,
    label,
    openDelay,
    closeDelay,
    onPositionChange,
    opened,
    defaultOpened,
    withinPortal,
    radius,
    color,
    classNames,
    styles,
    unstyled,
    style: style2,
    className,
    withArrow,
    arrowSize,
    arrowOffset,
    arrowRadius,
    arrowPosition,
    offset: offset4,
    transitionProps,
    multiline,
    events,
    zIndex,
    disabled,
    positionDependencies,
    onClick,
    onMouseEnter,
    onMouseLeave,
    inline: inline4,
    variant,
    keepMounted,
    vars,
    portalProps,
    mod,
    floatingStrategy,
    middlewares,
    ...others
  } = useProps("Tooltip", defaultProps85, props);
  const { dir } = useDirection();
  const arrowRef = import_react217.useRef(null);
  const tooltip = useTooltip({
    position: getFloatingPosition(dir, position2),
    closeDelay,
    openDelay,
    onPositionChange,
    opened,
    defaultOpened,
    events,
    arrowRef,
    arrowOffset,
    offset: typeof offset4 === "number" ? offset4 + (withArrow ? arrowSize / 2 : 0) : offset4,
    positionDependencies: [...positionDependencies, children],
    inline: inline4,
    strategy: floatingStrategy,
    middlewares
  });
  const getStyles2 = useStyles({
    name: "Tooltip",
    props,
    classes: classes32,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    rootSelector: "tooltip",
    vars,
    varsResolver: varsResolver36
  });
  if (!isElement(children)) {
    throw new Error("[@mantine/core] Tooltip component children should be an element or a component that accepts ref, fragments, strings, numbers and other primitive values are not supported");
  }
  const targetRef = useMergedRef(tooltip.reference, getRefProp(children), ref);
  const transition = getTransitionProps(transitionProps, { duration: 100, transition: "fade" });
  const _childrenProps = children.props;
  return /* @__PURE__ */ import_jsx_runtime174.jsxs(import_jsx_runtime174.Fragment, { children: [
    /* @__PURE__ */ import_jsx_runtime174.jsx(OptionalPortal, { ...portalProps, withinPortal, children: /* @__PURE__ */ import_jsx_runtime174.jsx(Transition, {
      ...transition,
      keepMounted,
      mounted: !disabled && !!tooltip.opened,
      duration: tooltip.isGroupPhase ? 10 : transition.duration,
      children: (transitionStyles) => /* @__PURE__ */ import_jsx_runtime174.jsxs(Box, {
        ...others,
        "data-fixed": floatingStrategy === "fixed" || undefined,
        variant,
        mod: [{ multiline }, mod],
        ...tooltip.getFloatingProps({
          ref: tooltip.floating,
          className: getStyles2("tooltip").className,
          style: {
            ...getStyles2("tooltip").style,
            ...transitionStyles,
            zIndex,
            top: tooltip.y ?? 0,
            left: tooltip.x ?? 0
          }
        }),
        children: [
          label,
          /* @__PURE__ */ import_jsx_runtime174.jsx(FloatingArrow, {
            ref: arrowRef,
            arrowX: tooltip.arrowX,
            arrowY: tooltip.arrowY,
            visible: withArrow,
            position: tooltip.placement,
            arrowSize,
            arrowOffset,
            arrowRadius,
            arrowPosition,
            ...getStyles2("arrow")
          })
        ]
      })
    }) }),
    import_react217.cloneElement(children, tooltip.getReferenceProps({
      onClick,
      onMouseEnter,
      onMouseLeave,
      onMouseMove: props.onMouseMove,
      onPointerDown: props.onPointerDown,
      onPointerEnter: props.onPointerEnter,
      className: clsx_default(className, _childrenProps.className),
      ..._childrenProps,
      [refProp]: targetRef
    }))
  ] });
});
Tooltip.classes = classes32;
Tooltip.displayName = "@mantine/core/Tooltip";
Tooltip.Floating = TooltipFloating;
Tooltip.Group = TooltipGroup;

// node_modules/@mantine/core/esm/components/Select/Select.mjs
var import_jsx_runtime175 = __toESM(require_jsx_runtime(), 1);
var import_react218 = __toESM(require_react(), 1);
"use client";
var defaultProps86 = {
  searchable: false,
  withCheckIcon: true,
  allowDeselect: true,
  checkIconPosition: "left"
};
var Select = factory((_props, ref) => {
  const props = useProps("Select", defaultProps86, _props);
  const {
    classNames,
    styles,
    unstyled,
    vars,
    dropdownOpened,
    defaultDropdownOpened,
    onDropdownClose,
    onDropdownOpen,
    onFocus,
    onBlur,
    onClick,
    onChange,
    data,
    value,
    defaultValue,
    selectFirstOptionOnChange,
    onOptionSubmit,
    comboboxProps,
    readOnly,
    disabled,
    filter: filter2,
    limit,
    withScrollArea,
    maxDropdownHeight,
    size: size4,
    searchable,
    rightSection,
    checkIconPosition,
    withCheckIcon,
    nothingFoundMessage,
    name,
    form,
    searchValue,
    defaultSearchValue,
    onSearchChange,
    allowDeselect,
    error,
    rightSectionPointerEvents,
    id,
    clearable,
    clearButtonProps,
    hiddenInputProps,
    renderOption,
    onClear,
    autoComplete,
    scrollAreaProps,
    __defaultRightSection,
    __clearSection,
    __clearable,
    chevronColor,
    ...others
  } = props;
  const parsedData = import_react218.useMemo(() => getParsedComboboxData(data), [data]);
  const optionsLockup = import_react218.useMemo(() => getOptionsLockup(parsedData), [parsedData]);
  const _id = useId(id);
  const [_value, setValue, controlled] = useUncontrolled({
    value,
    defaultValue,
    finalValue: null,
    onChange
  });
  const selectedOption = typeof _value === "string" ? optionsLockup[_value] : undefined;
  const previousSelectedOption = usePrevious(selectedOption);
  const [search, setSearch] = useUncontrolled({
    value: searchValue,
    defaultValue: defaultSearchValue,
    finalValue: selectedOption ? selectedOption.label : "",
    onChange: onSearchChange
  });
  const combobox = useCombobox({
    opened: dropdownOpened,
    defaultOpened: defaultDropdownOpened,
    onDropdownOpen: () => {
      onDropdownOpen?.();
      combobox.updateSelectedOptionIndex("active", { scrollIntoView: true });
    },
    onDropdownClose: () => {
      onDropdownClose?.();
      combobox.resetSelectedOption();
    }
  });
  const handleSearchChange = (value2) => {
    setSearch(value2);
    combobox.resetSelectedOption();
  };
  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi({
    props,
    styles,
    classNames
  });
  import_react218.useEffect(() => {
    if (selectFirstOptionOnChange) {
      combobox.selectFirstOption();
    }
  }, [selectFirstOptionOnChange, search]);
  import_react218.useEffect(() => {
    if (value === null) {
      handleSearchChange("");
    }
    if (typeof value === "string" && selectedOption && (previousSelectedOption?.value !== selectedOption.value || previousSelectedOption?.label !== selectedOption.label)) {
      handleSearchChange(selectedOption.label);
    }
  }, [value, selectedOption]);
  const clearButton = /* @__PURE__ */ import_jsx_runtime175.jsx(Combobox.ClearButton, {
    ...clearButtonProps,
    onClear: () => {
      setValue(null, null);
      handleSearchChange("");
      onClear?.();
    }
  });
  const _clearable = clearable && !!_value && !disabled && !readOnly;
  return /* @__PURE__ */ import_jsx_runtime175.jsxs(import_jsx_runtime175.Fragment, { children: [
    /* @__PURE__ */ import_jsx_runtime175.jsxs(Combobox, {
      store: combobox,
      __staticSelector: "Select",
      classNames: resolvedClassNames,
      styles: resolvedStyles,
      unstyled,
      readOnly,
      onOptionSubmit: (val) => {
        onOptionSubmit?.(val);
        const optionLockup = allowDeselect ? optionsLockup[val].value === _value ? null : optionsLockup[val] : optionsLockup[val];
        const nextValue = optionLockup ? optionLockup.value : null;
        nextValue !== _value && setValue(nextValue, optionLockup);
        !controlled && handleSearchChange(typeof nextValue === "string" ? optionLockup?.label || "" : "");
        combobox.closeDropdown();
      },
      size: size4,
      ...comboboxProps,
      children: [
        /* @__PURE__ */ import_jsx_runtime175.jsx(Combobox.Target, { targetType: searchable ? "input" : "button", autoComplete, children: /* @__PURE__ */ import_jsx_runtime175.jsx(InputBase, {
          id: _id,
          ref,
          __defaultRightSection: /* @__PURE__ */ import_jsx_runtime175.jsx(Combobox.Chevron, {
            size: size4,
            error,
            unstyled,
            color: chevronColor
          }),
          __clearSection: clearButton,
          __clearable: _clearable,
          rightSection,
          rightSectionPointerEvents: rightSectionPointerEvents || (_clearable ? "all" : "none"),
          ...others,
          size: size4,
          __staticSelector: "Select",
          disabled,
          readOnly: readOnly || !searchable,
          value: search,
          onChange: (event) => {
            handleSearchChange(event.currentTarget.value);
            combobox.openDropdown();
            selectFirstOptionOnChange && combobox.selectFirstOption();
          },
          onFocus: (event) => {
            searchable && combobox.openDropdown();
            onFocus?.(event);
          },
          onBlur: (event) => {
            searchable && combobox.closeDropdown();
            handleSearchChange(_value != null ? optionsLockup[_value]?.label || "" : "");
            onBlur?.(event);
          },
          onClick: (event) => {
            searchable ? combobox.openDropdown() : combobox.toggleDropdown();
            onClick?.(event);
          },
          classNames: resolvedClassNames,
          styles: resolvedStyles,
          unstyled,
          pointer: !searchable,
          error
        }) }),
        /* @__PURE__ */ import_jsx_runtime175.jsx(OptionsDropdown, {
          data: parsedData,
          hidden: readOnly || disabled,
          filter: filter2,
          search,
          limit,
          hiddenWhenEmpty: !nothingFoundMessage,
          withScrollArea,
          maxDropdownHeight,
          filterOptions: searchable && selectedOption?.label !== search,
          value: _value,
          checkIconPosition,
          withCheckIcon,
          nothingFoundMessage,
          unstyled,
          labelId: others.label ? `${_id}-label` : undefined,
          "aria-label": others.label ? undefined : others["aria-label"],
          renderOption,
          scrollAreaProps
        })
      ]
    }),
    /* @__PURE__ */ import_jsx_runtime175.jsx(Combobox.HiddenInput, {
      value: _value,
      name,
      form,
      disabled,
      ...hiddenInputProps
    })
  ] });
});
Select.classes = { ...InputBase.classes, ...Combobox.classes };
Select.displayName = "@mantine/core/Select";
// node_modules/@mantine/core/esm/components/Stack/Stack.mjs
var import_jsx_runtime176 = __toESM(require_jsx_runtime(), 1);
var import_react219 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Stack/Stack.module.css.mjs
"use client";
var classes33 = { root: "m_6d731127" };

// node_modules/@mantine/core/esm/components/Stack/Stack.mjs
"use client";
var defaultProps87 = {
  gap: "md",
  align: "stretch",
  justify: "flex-start"
};
var varsResolver37 = createVarsResolver((_2, { gap, align, justify }) => ({
  root: {
    "--stack-gap": getSpacing(gap),
    "--stack-align": align,
    "--stack-justify": justify
  }
}));
var Stack = factory((_props, ref) => {
  const props = useProps("Stack", defaultProps87, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    align,
    justify,
    gap,
    variant,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Stack",
    props,
    classes: classes33,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver37
  });
  return /* @__PURE__ */ import_jsx_runtime176.jsx(Box, { ref, ...getStyles2("root"), variant, ...others });
});
Stack.classes = classes33;
Stack.displayName = "@mantine/core/Stack";
// node_modules/@mantine/core/esm/components/Switch/Switch.mjs
var import_jsx_runtime178 = __toESM(require_jsx_runtime(), 1);
var import_react222 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Switch/SwitchGroup.context.mjs
var import_react220 = __toESM(require_react(), 1);
"use client";
var SwitchGroupContext = import_react220.createContext(null);
var SwitchGroupProvider = SwitchGroupContext.Provider;
var useSwitchGroupContext = () => import_react220.useContext(SwitchGroupContext);

// node_modules/@mantine/core/esm/components/Switch/SwitchGroup/SwitchGroup.mjs
var import_jsx_runtime177 = __toESM(require_jsx_runtime(), 1);
var import_react221 = __toESM(require_react(), 1);
"use client";
var defaultProps88 = {};
var SwitchGroup = factory((props, ref) => {
  const { value, defaultValue, onChange, size: size4, wrapperProps, children, readOnly, ...others } = useProps("SwitchGroup", defaultProps88, props);
  const [_value, setValue] = useUncontrolled({
    value,
    defaultValue,
    finalValue: [],
    onChange
  });
  const handleChange = (event) => {
    const itemValue = event.currentTarget.value;
    !readOnly && setValue(_value.includes(itemValue) ? _value.filter((item) => item !== itemValue) : [..._value, itemValue]);
  };
  return /* @__PURE__ */ import_jsx_runtime177.jsx(SwitchGroupProvider, { value: { value: _value, onChange: handleChange, size: size4 }, children: /* @__PURE__ */ import_jsx_runtime177.jsx(Input.Wrapper, {
    size: size4,
    ref,
    ...wrapperProps,
    ...others,
    labelElement: "div",
    __staticSelector: "SwitchGroup",
    children: /* @__PURE__ */ import_jsx_runtime177.jsx(InputsGroupFieldset, { role: "group", children })
  }) });
});
SwitchGroup.classes = Input.Wrapper.classes;
SwitchGroup.displayName = "@mantine/core/SwitchGroup";

// node_modules/@mantine/core/esm/components/Switch/Switch.module.css.mjs
"use client";
var classes34 = { root: "m_5f93f3bb", input: "m_926b4011", track: "m_9307d992", thumb: "m_93039a1d", trackLabel: "m_8277e082" };

// node_modules/@mantine/core/esm/components/Switch/Switch.mjs
"use client";
var defaultProps89 = {
  labelPosition: "right"
};
var varsResolver38 = createVarsResolver((theme, { radius, color, size: size4 }) => ({
  root: {
    "--switch-radius": radius === undefined ? undefined : getRadius(radius),
    "--switch-height": getSize(size4, "switch-height"),
    "--switch-width": getSize(size4, "switch-width"),
    "--switch-thumb-size": getSize(size4, "switch-thumb-size"),
    "--switch-label-font-size": getSize(size4, "switch-label-font-size"),
    "--switch-track-label-padding": getSize(size4, "switch-track-label-padding"),
    "--switch-color": color ? getThemeColor(color, theme) : undefined
  }
}));
var Switch = factory((_props, ref) => {
  const props = useProps("Switch", defaultProps89, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    color,
    label,
    offLabel,
    onLabel,
    id,
    size: size4,
    radius,
    wrapperProps,
    thumbIcon,
    checked,
    defaultChecked,
    onChange,
    labelPosition,
    description,
    error,
    disabled,
    variant,
    rootRef,
    mod,
    ...others
  } = props;
  const ctx = useSwitchGroupContext();
  const _size = size4 || ctx?.size;
  const getStyles2 = useStyles({
    name: "Switch",
    props,
    classes: classes34,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver38
  });
  const { styleProps, rest } = extractStyleProps(others);
  const uuid = useId(id);
  const contextProps = ctx ? {
    checked: ctx.value.includes(rest.value),
    onChange: ctx.onChange
  } : {};
  const [_checked, handleChange] = useUncontrolled({
    value: contextProps.checked ?? checked,
    defaultValue: defaultChecked,
    finalValue: false
  });
  return /* @__PURE__ */ import_jsx_runtime178.jsxs(InlineInput, {
    ...getStyles2("root"),
    __staticSelector: "Switch",
    __stylesApiProps: props,
    id: uuid,
    size: _size,
    labelPosition,
    label,
    description,
    error,
    disabled,
    bodyElement: "label",
    labelElement: "span",
    classNames,
    styles,
    unstyled,
    "data-checked": contextProps.checked || checked || undefined,
    variant,
    ref: rootRef,
    mod,
    ...styleProps,
    ...wrapperProps,
    children: [
      /* @__PURE__ */ import_jsx_runtime178.jsx("input", {
        ...rest,
        disabled,
        checked: _checked,
        "data-checked": contextProps.checked || checked || undefined,
        onChange: (event) => {
          ctx ? contextProps.onChange?.(event) : onChange?.(event);
          handleChange(event.currentTarget.checked);
        },
        id: uuid,
        ref,
        type: "checkbox",
        role: "switch",
        ...getStyles2("input")
      }),
      /* @__PURE__ */ import_jsx_runtime178.jsxs(Box, {
        "aria-hidden": "true",
        mod: { error, "label-position": labelPosition, "without-labels": !onLabel && !offLabel },
        ...getStyles2("track"),
        children: [
          /* @__PURE__ */ import_jsx_runtime178.jsx(Box, { component: "span", mod: "reduce-motion", ...getStyles2("thumb"), children: thumbIcon }),
          /* @__PURE__ */ import_jsx_runtime178.jsx("span", { ...getStyles2("trackLabel"), children: _checked ? onLabel : offLabel })
        ]
      })
    ]
  });
});
Switch.classes = { ...classes34, ...InlineInputClasses };
Switch.displayName = "@mantine/core/Switch";
Switch.Group = SwitchGroup;
// node_modules/@mantine/core/esm/components/Table/Table.mjs
var import_jsx_runtime183 = __toESM(require_jsx_runtime(), 1);
var import_react226 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Table/Table.components.mjs
var import_jsx_runtime180 = __toESM(require_jsx_runtime(), 1);
var import_react224 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Table/Table.context.mjs
var import_react223 = __toESM(require_react(), 1);
var import_jsx_runtime179 = __toESM(require_jsx_runtime(), 1);
"use client";
var [TableProvider, useTableContext] = createSafeContext("Table component was not found in the tree");

// node_modules/@mantine/core/esm/components/Table/Table.module.css.mjs
"use client";
var classes35 = { table: "m_b23fa0ef", th: "m_4e7aa4f3", tr: "m_4e7aa4fd", td: "m_4e7aa4ef", tbody: "m_b2404537", thead: "m_b242d975", caption: "m_9e5a3ac7", scrollContainer: "m_a100c15", scrollContainerInner: "m_62259741" };

// node_modules/@mantine/core/esm/components/Table/Table.components.mjs
"use client";
function getDataAttributes(ctx, options) {
  if (!options) {
    return;
  }
  const data = {};
  if (options.columnBorder && ctx.withColumnBorders) {
    data["data-with-column-border"] = true;
  }
  if (options.rowBorder && ctx.withRowBorders) {
    data["data-with-row-border"] = true;
  }
  if (options.striped && ctx.striped) {
    data["data-striped"] = ctx.striped;
  }
  if (options.highlightOnHover && ctx.highlightOnHover) {
    data["data-hover"] = true;
  }
  if (options.captionSide && ctx.captionSide) {
    data["data-side"] = ctx.captionSide;
  }
  if (options.stickyHeader && ctx.stickyHeader) {
    data["data-sticky"] = true;
  }
  return data;
}
function tableElement(element, options) {
  const name = `Table${element.charAt(0).toUpperCase()}${element.slice(1)}`;
  const Component2 = factory((_props, ref) => {
    const props = useProps(name, {}, _props);
    const { classNames, className, style: style2, styles, ...others } = props;
    const ctx = useTableContext();
    return /* @__PURE__ */ import_jsx_runtime180.jsx(Box, {
      component: element,
      ref,
      ...getDataAttributes(ctx, options),
      ...ctx.getStyles(element, { className, classNames, style: style2, styles, props }),
      ...others
    });
  });
  Component2.displayName = `@mantine/core/${name}`;
  Component2.classes = classes35;
  return Component2;
}
var TableTh = tableElement("th", { columnBorder: true });
var TableTd = tableElement("td", { columnBorder: true });
var TableTr = tableElement("tr", {
  rowBorder: true,
  striped: true,
  highlightOnHover: true
});
var TableThead = tableElement("thead", { stickyHeader: true });
var TableTbody = tableElement("tbody");
var TableTfoot = tableElement("tfoot");
var TableCaption = tableElement("caption", { captionSide: true });

// node_modules/@mantine/core/esm/components/Table/TableDataRenderer.mjs
var import_jsx_runtime181 = __toESM(require_jsx_runtime(), 1);
"use client";
function TableDataRenderer({ data }) {
  return /* @__PURE__ */ import_jsx_runtime181.jsxs(import_jsx_runtime181.Fragment, { children: [
    data.caption && /* @__PURE__ */ import_jsx_runtime181.jsx(TableCaption, { children: data.caption }),
    data.head && /* @__PURE__ */ import_jsx_runtime181.jsx(TableThead, { children: /* @__PURE__ */ import_jsx_runtime181.jsx(TableTr, { children: data.head.map((item, index4) => /* @__PURE__ */ import_jsx_runtime181.jsx(TableTh, { children: item }, index4)) }) }),
    data.body && /* @__PURE__ */ import_jsx_runtime181.jsx(TableTbody, { children: data.body.map((row, rowIndex) => /* @__PURE__ */ import_jsx_runtime181.jsx(TableTr, { children: row.map((item, index4) => /* @__PURE__ */ import_jsx_runtime181.jsx(TableTd, { children: item }, index4)) }, rowIndex)) }),
    data.foot && /* @__PURE__ */ import_jsx_runtime181.jsx(TableTfoot, { children: /* @__PURE__ */ import_jsx_runtime181.jsx(TableTr, { children: data.foot.map((item, index4) => /* @__PURE__ */ import_jsx_runtime181.jsx(TableTh, { children: item }, index4)) }) })
  ] });
}
TableDataRenderer.displayName = "@mantine/core/TableDataRenderer";

// node_modules/@mantine/core/esm/components/Table/TableScrollContainer.mjs
var import_jsx_runtime182 = __toESM(require_jsx_runtime(), 1);
var import_react225 = __toESM(require_react(), 1);
"use client";
var defaultProps90 = {
  type: "scrollarea"
};
var varsResolver39 = createVarsResolver((_2, { minWidth, type }) => ({
  scrollContainer: {
    "--table-min-width": rem(minWidth),
    "--table-overflow": type === "native" ? "auto" : undefined
  }
}));
var TableScrollContainer = factory((_props, ref) => {
  const props = useProps("TableScrollContainer", defaultProps90, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    children,
    minWidth,
    type,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "TableScrollContainer",
    classes: classes35,
    props,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver39,
    rootSelector: "scrollContainer"
  });
  return /* @__PURE__ */ import_jsx_runtime182.jsx(Box, {
    component: type === "scrollarea" ? ScrollArea : "div",
    ...type === "scrollarea" ? { offsetScrollbars: "x" } : {},
    ref,
    ...getStyles2("scrollContainer"),
    ...others,
    children: /* @__PURE__ */ import_jsx_runtime182.jsx("div", { ...getStyles2("scrollContainerInner"), children })
  });
});
TableScrollContainer.classes = classes35;
TableScrollContainer.displayName = "@mantine/core/TableScrollContainer";

// node_modules/@mantine/core/esm/components/Table/Table.mjs
"use client";
var defaultProps91 = {
  withRowBorders: true,
  verticalSpacing: 7
};
var varsResolver40 = createVarsResolver((theme, {
  layout,
  captionSide,
  horizontalSpacing,
  verticalSpacing,
  borderColor,
  stripedColor,
  highlightOnHoverColor,
  striped,
  highlightOnHover,
  stickyHeaderOffset,
  stickyHeader
}) => ({
  table: {
    "--table-layout": layout,
    "--table-caption-side": captionSide,
    "--table-horizontal-spacing": getSpacing(horizontalSpacing),
    "--table-vertical-spacing": getSpacing(verticalSpacing),
    "--table-border-color": borderColor ? getThemeColor(borderColor, theme) : undefined,
    "--table-striped-color": striped && stripedColor ? getThemeColor(stripedColor, theme) : undefined,
    "--table-highlight-on-hover-color": highlightOnHover && highlightOnHoverColor ? getThemeColor(highlightOnHoverColor, theme) : undefined,
    "--table-sticky-header-offset": stickyHeader ? rem(stickyHeaderOffset) : undefined
  }
}));
var Table = factory((_props, ref) => {
  const props = useProps("Table", defaultProps91, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    horizontalSpacing,
    verticalSpacing,
    captionSide,
    stripedColor,
    highlightOnHoverColor,
    striped,
    highlightOnHover,
    withColumnBorders,
    withRowBorders,
    withTableBorder,
    borderColor,
    layout,
    variant,
    data,
    children,
    stickyHeader,
    stickyHeaderOffset,
    mod,
    tabularNums,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Table",
    props,
    className,
    style: style2,
    classes: classes35,
    classNames,
    styles,
    unstyled,
    rootSelector: "table",
    vars,
    varsResolver: varsResolver40
  });
  return /* @__PURE__ */ import_jsx_runtime183.jsx(TableProvider, {
    value: {
      getStyles: getStyles2,
      stickyHeader,
      striped: striped === true ? "odd" : striped || undefined,
      highlightOnHover,
      withColumnBorders,
      withRowBorders,
      captionSide: captionSide || "bottom"
    },
    children: /* @__PURE__ */ import_jsx_runtime183.jsx(Box, {
      component: "table",
      variant,
      ref,
      mod: [{ "data-with-table-border": withTableBorder, "data-tabular-nums": tabularNums }, mod],
      ...getStyles2("table"),
      ...others,
      children: children || !!data && /* @__PURE__ */ import_jsx_runtime183.jsx(TableDataRenderer, { data })
    })
  });
});
Table.classes = classes35;
Table.displayName = "@mantine/core/Table";
Table.Td = TableTd;
Table.Th = TableTh;
Table.Tr = TableTr;
Table.Thead = TableThead;
Table.Tbody = TableTbody;
Table.Tfoot = TableTfoot;
Table.Caption = TableCaption;
Table.ScrollContainer = TableScrollContainer;
Table.DataRenderer = TableDataRenderer;
// node_modules/@mantine/core/esm/components/TextInput/TextInput.mjs
var import_jsx_runtime184 = __toESM(require_jsx_runtime(), 1);
var import_react227 = __toESM(require_react(), 1);
"use client";
var defaultProps92 = {};
var TextInput = factory((props, ref) => {
  const _props = useProps("TextInput", defaultProps92, props);
  return /* @__PURE__ */ import_jsx_runtime184.jsx(InputBase, { component: "input", ref, ..._props, __staticSelector: "TextInput" });
});
TextInput.classes = InputBase.classes;
TextInput.displayName = "@mantine/core/TextInput";
// node_modules/@mantine/core/esm/components/Title/Title.mjs
var import_jsx_runtime186 = __toESM(require_jsx_runtime(), 1);
var import_react229 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Title/get-title-size.mjs
var import_react228 = __toESM(require_react(), 1);
var import_jsx_runtime185 = __toESM(require_jsx_runtime(), 1);
"use client";
var headings3 = ["h1", "h2", "h3", "h4", "h5", "h6"];
var sizes = ["xs", "sm", "md", "lg", "xl"];
function getTitleSize(order, size4) {
  const titleSize = size4 !== undefined ? size4 : `h${order}`;
  if (headings3.includes(titleSize)) {
    return {
      fontSize: `var(--mantine-${titleSize}-font-size)`,
      fontWeight: `var(--mantine-${titleSize}-font-weight)`,
      lineHeight: `var(--mantine-${titleSize}-line-height)`
    };
  } else if (sizes.includes(titleSize)) {
    return {
      fontSize: `var(--mantine-font-size-${titleSize})`,
      fontWeight: `var(--mantine-h${order}-font-weight)`,
      lineHeight: `var(--mantine-h${order}-line-height)`
    };
  }
  return {
    fontSize: rem(titleSize),
    fontWeight: `var(--mantine-h${order}-font-weight)`,
    lineHeight: `var(--mantine-h${order}-line-height)`
  };
}

// node_modules/@mantine/core/esm/components/Title/Title.module.css.mjs
"use client";
var classes36 = { root: "m_8a5d1357" };

// node_modules/@mantine/core/esm/components/Title/Title.mjs
"use client";
var defaultProps93 = {
  order: 1
};
var varsResolver41 = createVarsResolver((_2, { order, size: size4, lineClamp, textWrap }) => {
  const sizeVariables = getTitleSize(order, size4);
  return {
    root: {
      "--title-fw": sizeVariables.fontWeight,
      "--title-lh": sizeVariables.lineHeight,
      "--title-fz": sizeVariables.fontSize,
      "--title-line-clamp": typeof lineClamp === "number" ? lineClamp.toString() : undefined,
      "--title-text-wrap": textWrap
    }
  };
});
var Title = factory((_props, ref) => {
  const props = useProps("Title", defaultProps93, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    order,
    vars,
    size: size4,
    variant,
    lineClamp,
    textWrap,
    mod,
    ...others
  } = props;
  const getStyles2 = useStyles({
    name: "Title",
    props,
    classes: classes36,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver41
  });
  if (![1, 2, 3, 4, 5, 6].includes(order)) {
    return null;
  }
  return /* @__PURE__ */ import_jsx_runtime186.jsx(Box, {
    ...getStyles2("root"),
    component: `h${order}`,
    variant,
    ref,
    mod: [{ order, "data-line-clamp": typeof lineClamp === "number" }, mod],
    size: size4,
    ...others
  });
});
Title.classes = classes36;
Title.displayName = "@mantine/core/Title";
// node_modules/@mantine/core/esm/components/Tree/Tree.mjs
var import_jsx_runtime190 = __toESM(require_jsx_runtime(), 1);
var import_react234 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Tree/TreeNode.mjs
var import_jsx_runtime187 = __toESM(require_jsx_runtime(), 1);
var import_react230 = __toESM(require_react(), 1);
"use client";
function getValuesRange(anchor, value, flatValues) {
  if (!anchor || !value) {
    return [];
  }
  const anchorIndex = flatValues.indexOf(anchor);
  const valueIndex = flatValues.indexOf(value);
  const start = Math.min(anchorIndex, valueIndex);
  const end = Math.max(anchorIndex, valueIndex);
  return flatValues.slice(start, end + 1);
}
function TreeNode({
  node: node2,
  getStyles: getStyles2,
  rootIndex,
  controller,
  expandOnClick,
  selectOnClick,
  isSubtree,
  level = 1,
  renderNode,
  flatValues,
  allowRangeSelection,
  expandOnSpace,
  checkOnSpace
}) {
  const ref = import_react230.useRef(null);
  const nested = (node2.children || []).map((child) => /* @__PURE__ */ import_jsx_runtime187.jsx(TreeNode, {
    node: child,
    flatValues,
    getStyles: getStyles2,
    rootIndex: undefined,
    level: level + 1,
    controller,
    expandOnClick,
    isSubtree: true,
    renderNode,
    selectOnClick,
    allowRangeSelection,
    expandOnSpace,
    checkOnSpace
  }, child.value));
  const handleKeyDown = (event) => {
    if (event.nativeEvent.code === "ArrowRight") {
      event.stopPropagation();
      event.preventDefault();
      if (controller.expandedState[node2.value]) {
        event.currentTarget.querySelector("[role=treeitem]")?.focus();
      } else {
        controller.expand(node2.value);
      }
    }
    if (event.nativeEvent.code === "ArrowLeft") {
      event.stopPropagation();
      event.preventDefault();
      if (controller.expandedState[node2.value] && (node2.children || []).length > 0) {
        controller.collapse(node2.value);
      } else if (isSubtree) {
        findElementAncestor(event.currentTarget, "[role=treeitem]")?.focus();
      }
    }
    if (event.nativeEvent.code === "ArrowDown" || event.nativeEvent.code === "ArrowUp") {
      const root2 = findElementAncestor(event.currentTarget, "[data-tree-root]");
      if (!root2) {
        return;
      }
      event.stopPropagation();
      event.preventDefault();
      const nodes = Array.from(root2.querySelectorAll("[role=treeitem]"));
      const index4 = nodes.indexOf(event.currentTarget);
      if (index4 === -1) {
        return;
      }
      const nextIndex = event.nativeEvent.code === "ArrowDown" ? index4 + 1 : index4 - 1;
      nodes[nextIndex]?.focus();
      if (event.shiftKey) {
        const selectNode = nodes[nextIndex];
        if (selectNode) {
          controller.setSelectedState(getValuesRange(controller.anchorNode, selectNode.dataset.value, flatValues));
        }
      }
    }
    if (event.nativeEvent.code === "Space") {
      if (expandOnSpace) {
        event.stopPropagation();
        event.preventDefault();
        controller.toggleExpanded(node2.value);
      }
      if (checkOnSpace) {
        event.stopPropagation();
        event.preventDefault();
        controller.isNodeChecked(node2.value) ? controller.uncheckNode(node2.value) : controller.checkNode(node2.value);
      }
    }
  };
  const handleNodeClick = (event) => {
    event.stopPropagation();
    if (allowRangeSelection && event.shiftKey && controller.anchorNode) {
      controller.setSelectedState(getValuesRange(controller.anchorNode, node2.value, flatValues));
      ref.current?.focus();
    } else {
      expandOnClick && controller.toggleExpanded(node2.value);
      selectOnClick && controller.select(node2.value);
      ref.current?.focus();
    }
  };
  const selected = controller.selectedState.includes(node2.value);
  const elementProps = {
    ...getStyles2("label"),
    onClick: handleNodeClick,
    "data-selected": selected || undefined,
    "data-value": node2.value,
    "data-hovered": controller.hoveredNode === node2.value || undefined
  };
  return /* @__PURE__ */ import_jsx_runtime187.jsxs("li", {
    ...getStyles2("node", {
      style: { "--label-offset": `calc(var(--level-offset) * ${level - 1})` }
    }),
    role: "treeitem",
    "aria-selected": selected,
    "data-value": node2.value,
    "data-selected": selected || undefined,
    "data-hovered": controller.hoveredNode === node2.value || undefined,
    "data-level": level,
    tabIndex: rootIndex === 0 ? 0 : -1,
    onKeyDown: handleKeyDown,
    ref,
    onMouseOver: (event) => {
      event.stopPropagation();
      controller.setHoveredNode(node2.value);
    },
    onMouseLeave: (event) => {
      event.stopPropagation();
      controller.setHoveredNode(null);
    },
    children: [
      typeof renderNode === "function" ? renderNode({
        node: node2,
        level,
        selected,
        tree: controller,
        expanded: controller.expandedState[node2.value] || false,
        hasChildren: Array.isArray(node2.children) && node2.children.length > 0,
        elementProps
      }) : /* @__PURE__ */ import_jsx_runtime187.jsx("div", { ...elementProps, children: node2.label }),
      controller.expandedState[node2.value] && nested.length > 0 && /* @__PURE__ */ import_jsx_runtime187.jsx("ul", { role: "group", ...getStyles2("subtree"), "data-level": level, children: nested })
    ]
  });
}
TreeNode.displayName = "@mantine/core/TreeNode";

// node_modules/@mantine/core/esm/components/Tree/use-tree.mjs
var import_react233 = __toESM(require_react(), 1);

// node_modules/@mantine/core/esm/components/Tree/get-all-checked-nodes/get-all-checked-nodes.mjs
"use client";
function getAllCheckedNodes(data, checkedState, acc = []) {
  const currentTreeChecked = [];
  for (const node2 of data) {
    if (Array.isArray(node2.children) && node2.children.length > 0) {
      const innerChecked = getAllCheckedNodes(node2.children, checkedState, acc);
      if (innerChecked.currentTreeChecked.length === node2.children.length) {
        const isChecked = innerChecked.currentTreeChecked.every((item2) => item2.checked);
        const item = {
          checked: isChecked,
          indeterminate: !isChecked,
          value: node2.value,
          hasChildren: true
        };
        currentTreeChecked.push(item);
        acc.push(item);
      } else if (innerChecked.currentTreeChecked.length > 0) {
        const item = { checked: false, indeterminate: true, value: node2.value, hasChildren: true };
        currentTreeChecked.push(item);
        acc.push(item);
      }
    } else if (checkedState.includes(node2.value)) {
      const item = {
        checked: true,
        indeterminate: false,
        value: node2.value,
        hasChildren: false
      };
      currentTreeChecked.push(item);
      acc.push(item);
    }
  }
  return { result: acc, currentTreeChecked };
}

// node_modules/@mantine/core/esm/components/Tree/get-children-nodes-values/get-children-nodes-values.mjs
"use client";
function findTreeNode(value, data) {
  for (const node2 of data) {
    if (node2.value === value) {
      return node2;
    }
    if (Array.isArray(node2.children)) {
      const childNode = findTreeNode(value, node2.children);
      if (childNode) {
        return childNode;
      }
    }
  }
  return null;
}
function getChildrenNodesValues(value, data, acc = []) {
  const node2 = findTreeNode(value, data);
  if (!node2) {
    return acc;
  }
  if (!Array.isArray(node2.children) || node2.children.length === 0) {
    return [node2.value];
  }
  node2.children.forEach((child) => {
    if (Array.isArray(child.children) && child.children.length > 0) {
      getChildrenNodesValues(child.value, data, acc);
    } else {
      acc.push(child.value);
    }
  });
  return acc;
}
function getAllChildrenNodes(data) {
  return data.reduce((acc, node2) => {
    if (Array.isArray(node2.children) && node2.children.length > 0) {
      acc.push(...getAllChildrenNodes(node2.children));
    } else {
      acc.push(node2.value);
    }
    return acc;
  }, []);
}

// node_modules/@mantine/core/esm/components/Tree/is-node-checked/is-node-checked.mjs
var import_react231 = __toESM(require_react(), 1);
var import_jsx_runtime188 = __toESM(require_jsx_runtime(), 1);
"use client";
function isNodeChecked(value, data, checkedState) {
  if (checkedState.length === 0) {
    return false;
  }
  if (checkedState.includes(value)) {
    return true;
  }
  const checkedNodes = getAllCheckedNodes(data, checkedState).result;
  return checkedNodes.some((node2) => node2.value === value && node2.checked);
}
var memoizedIsNodeChecked = memoize2(isNodeChecked);

// node_modules/@mantine/core/esm/components/Tree/is-node-indeterminate/is-node-indeterminate.mjs
var import_react232 = __toESM(require_react(), 1);
var import_jsx_runtime189 = __toESM(require_jsx_runtime(), 1);
"use client";
function isNodeIndeterminate(value, data, checkedState) {
  if (checkedState.length === 0) {
    return false;
  }
  const checkedNodes = getAllCheckedNodes(data, checkedState).result;
  return checkedNodes.some((node2) => node2.value === value && node2.indeterminate);
}
var memoizedIsNodeIndeterminate = memoize2(isNodeIndeterminate);

// node_modules/@mantine/core/esm/components/Tree/use-tree.mjs
"use client";
function getInitialTreeExpandedState(initialState, data, value, acc = {}) {
  data.forEach((node2) => {
    acc[node2.value] = node2.value in initialState ? initialState[node2.value] : node2.value === value;
    if (Array.isArray(node2.children)) {
      getInitialTreeExpandedState(initialState, node2.children, value, acc);
    }
  });
  return acc;
}
function getInitialCheckedState(initialState, data) {
  const acc = [];
  initialState.forEach((node2) => acc.push(...getChildrenNodesValues(node2, data)));
  return Array.from(new Set(acc));
}
function useTree({
  initialSelectedState = [],
  initialCheckedState = [],
  initialExpandedState = {},
  multiple = false,
  onNodeCollapse,
  onNodeExpand
} = {}) {
  const [data, setData] = import_react233.useState([]);
  const [expandedState, setExpandedState] = import_react233.useState(initialExpandedState);
  const [selectedState, setSelectedState] = import_react233.useState(initialSelectedState);
  const [checkedState, setCheckedState] = import_react233.useState(initialCheckedState);
  const [anchorNode, setAnchorNode] = import_react233.useState(null);
  const [hoveredNode, setHoveredNode] = import_react233.useState(null);
  const initialize = import_react233.useCallback((_data) => {
    setExpandedState((current2) => getInitialTreeExpandedState(current2, _data, selectedState));
    setCheckedState((current2) => getInitialCheckedState(current2, _data));
    setData(_data);
  }, [selectedState, checkedState]);
  const toggleExpanded = import_react233.useCallback((value) => {
    setExpandedState((current2) => {
      const nextState = { ...current2, [value]: !current2[value] };
      nextState[value] ? onNodeExpand?.(value) : onNodeCollapse?.(value);
      return nextState;
    });
  }, [onNodeCollapse, onNodeExpand]);
  const collapse = import_react233.useCallback((value) => {
    setExpandedState((current2) => {
      if (current2[value] !== false) {
        onNodeCollapse?.(value);
      }
      return { ...current2, [value]: false };
    });
  }, [onNodeCollapse]);
  const expand = import_react233.useCallback((value) => {
    setExpandedState((current2) => {
      if (current2[value] !== true) {
        onNodeExpand?.(value);
      }
      return { ...current2, [value]: true };
    });
  }, [onNodeExpand]);
  const expandAllNodes = import_react233.useCallback(() => {
    setExpandedState((current2) => {
      const next2 = { ...current2 };
      Object.keys(next2).forEach((key) => {
        next2[key] = true;
      });
      return next2;
    });
  }, []);
  const collapseAllNodes = import_react233.useCallback(() => {
    setExpandedState((current2) => {
      const next2 = { ...current2 };
      Object.keys(next2).forEach((key) => {
        next2[key] = false;
      });
      return next2;
    });
  }, []);
  const toggleSelected = import_react233.useCallback((value) => setSelectedState((current2) => {
    if (!multiple) {
      if (current2.includes(value)) {
        setAnchorNode(null);
        return [];
      }
      setAnchorNode(value);
      return [value];
    }
    if (current2.includes(value)) {
      setAnchorNode(null);
      return current2.filter((item) => item !== value);
    }
    setAnchorNode(value);
    return [...current2, value];
  }), []);
  const select = import_react233.useCallback((value) => {
    setAnchorNode(value);
    setSelectedState((current2) => multiple ? current2.includes(value) ? current2 : [...current2, value] : [value]);
  }, []);
  const deselect = import_react233.useCallback((value) => {
    anchorNode === value && setAnchorNode(null);
    setSelectedState((current2) => current2.filter((item) => item !== value));
  }, []);
  const clearSelected = import_react233.useCallback(() => {
    setSelectedState([]);
    setAnchorNode(null);
  }, []);
  const checkNode = import_react233.useCallback((value) => {
    const checkedNodes = getChildrenNodesValues(value, data);
    setCheckedState((current2) => Array.from(/* @__PURE__ */ new Set([...current2, ...checkedNodes])));
  }, [data]);
  const uncheckNode = import_react233.useCallback((value) => {
    const checkedNodes = getChildrenNodesValues(value, data);
    setCheckedState((current2) => current2.filter((item) => !checkedNodes.includes(item)));
  }, [data]);
  const checkAllNodes = import_react233.useCallback(() => {
    setCheckedState(() => getAllChildrenNodes(data));
  }, [data]);
  const uncheckAllNodes = import_react233.useCallback(() => {
    setCheckedState([]);
  }, []);
  const getCheckedNodes = () => getAllCheckedNodes(data, checkedState).result;
  const isNodeChecked2 = (value) => memoizedIsNodeChecked(value, data, checkedState);
  const isNodeIndeterminate2 = (value) => memoizedIsNodeIndeterminate(value, data, checkedState);
  return {
    multiple,
    expandedState,
    selectedState,
    checkedState,
    anchorNode,
    initialize,
    toggleExpanded,
    collapse,
    expand,
    expandAllNodes,
    collapseAllNodes,
    setExpandedState,
    checkNode,
    uncheckNode,
    checkAllNodes,
    uncheckAllNodes,
    setCheckedState,
    toggleSelected,
    select,
    deselect,
    clearSelected,
    setSelectedState,
    hoveredNode,
    setHoveredNode,
    getCheckedNodes,
    isNodeChecked: isNodeChecked2,
    isNodeIndeterminate: isNodeIndeterminate2
  };
}

// node_modules/@mantine/core/esm/components/Tree/Tree.module.css.mjs
"use client";
var classes37 = { root: "m_f698e191", subtree: "m_75f3ecf", node: "m_f6970eb1", label: "m_dc283425" };

// node_modules/@mantine/core/esm/components/Tree/Tree.mjs
"use client";
function getFlatValues(data) {
  return data.reduce((acc, item) => {
    acc.push(item.value);
    if (item.children) {
      acc.push(...getFlatValues(item.children));
    }
    return acc;
  }, []);
}
var defaultProps94 = {
  expandOnClick: true,
  allowRangeSelection: true,
  expandOnSpace: true
};
var varsResolver42 = createVarsResolver((_theme, { levelOffset }) => ({
  root: {
    "--level-offset": getSpacing(levelOffset)
  }
}));
var Tree = factory((_props, ref) => {
  const props = useProps("Tree", defaultProps94, _props);
  const {
    classNames,
    className,
    style: style2,
    styles,
    unstyled,
    vars,
    data,
    expandOnClick,
    tree,
    renderNode,
    selectOnClick,
    clearSelectionOnOutsideClick,
    allowRangeSelection,
    expandOnSpace,
    levelOffset,
    checkOnSpace,
    ...others
  } = props;
  const defaultController = useTree();
  const controller = tree || defaultController;
  const getStyles2 = useStyles({
    name: "Tree",
    classes: classes37,
    props,
    className,
    style: style2,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver: varsResolver42
  });
  const clickOutsideRef = useClickOutside(() => clearSelectionOnOutsideClick && controller.clearSelected());
  const mergedRef = useMergedRef(ref, clickOutsideRef);
  const flatValues = import_react234.useMemo(() => getFlatValues(data), [data]);
  import_react234.useEffect(() => {
    controller.initialize(data);
  }, [data]);
  const nodes = data.map((node2, index4) => /* @__PURE__ */ import_jsx_runtime190.jsx(TreeNode, {
    node: node2,
    getStyles: getStyles2,
    rootIndex: index4,
    expandOnClick,
    selectOnClick,
    controller,
    renderNode,
    flatValues,
    allowRangeSelection,
    expandOnSpace,
    checkOnSpace
  }, node2.value));
  return /* @__PURE__ */ import_jsx_runtime190.jsx(Box, {
    component: "ul",
    ref: mergedRef,
    ...getStyles2("root"),
    ...others,
    role: "tree",
    "aria-multiselectable": controller.multiple,
    "data-tree-root": true,
    children: nodes
  });
});
Tree.displayName = "@mantine/core/Tree";
Tree.classes = classes37;
// src/studio-adapter/layoutMapingValidation.ts
function layoutMappingValidation(layoutMap, doc) {
  const cleanLayoutMap = JSON.parse(JSON.stringify(layoutMap));
  const report = {
    removedLayoutIds: [],
    removedVariables: [],
    removedDependents: [],
    removedVariableValues: []
  };
  const existingLayoutIds = new Set(doc.layouts.map((layout) => layout.id));
  const existingVariableIds = new Set(doc.variables.map((variable) => variable.id));
  cleanLayoutMap.layoutIds = cleanLayoutMap.layoutIds.filter((layoutId) => {
    const exists = existingLayoutIds.has(layoutId);
    if (!exists) {
      report.removedLayoutIds.push(layoutId);
    }
    return exists;
  });
  cleanLayoutMap.variables = cleanLayoutMap.variables.filter((imageVariable) => {
    console.log("ADGA");
    const imageVariableExists = imageVariable.id ? existingVariableIds.has(imageVariable.id) : false;
    if (!imageVariableExists && imageVariable.id) {
      report.removedVariables.push(imageVariable.id);
      return false;
    }
    processImageVariableDependentGroups(imageVariable, existingVariableIds, report);
    return imageVariableExists || !imageVariable.id;
  });
  return {
    cleanLayoutMap,
    report
  };
}
function processImageVariableDependentGroups(imageVariable, existingVariableIds, report) {
  imageVariable.dependentGroup = imageVariable.dependentGroup.filter((group, groupIndex) => {
    group.dependents = group.dependents.filter((dependent) => {
      const dependentExists = existingVariableIds.has(dependent.variableId);
      if (!dependentExists) {
        report.removedDependents.push({
          variableId: dependent.variableId,
          imageVariableId: imageVariable.id || "unknown"
        });
      }
      return dependentExists;
    });
    group.variableValue = group.variableValue.filter((value) => {
      if (typeof value === "string") {
        return true;
      }
      const variableValue = value;
      const valueExists = variableValue.id ? existingVariableIds.has(variableValue.id) : true;
      if (!valueExists && variableValue.id) {
        report.removedVariableValues.push({
          value: variableValue.id,
          imageVariableId: imageVariable.id || "unknown",
          dependentGroupIndex: groupIndex
        });
      }
      return valueExists;
    });
    return group.dependents.length > 0 || group.variableValue.length > 0;
  });
}

// node_modules/@tabler/icons-react/dist/esm/tabler-icons-react.mjs
init_IconAbc();
init_IconAlertCircle();
init_IconArrowsTransferUpDown();
init_IconBug();
init_IconCameraPlus();
init_IconChevronDown();
init_IconCopyPlus();
init_IconCopy();
init_IconDeselect();
init_IconDownload();
init_IconExternalLink();
init_IconGripVertical();
init_IconInfoCircle();
init_IconList();
init_IconMapBolt();
init_IconPencil();
init_IconPhotoCog();
init_IconPlaystationSquare();
init_IconPlus();
init_IconReplace();
init_IconTrash();
init_IconUpload();
init_IconWand();
init_IconX();
init_IconCaretDownFilled();
init_IconTrashFilled();

// src/components/LayoutMappingModal/AddMappingImageVariableModal.tsx
var import_react236 = __toESM(require_react(), 1);
var jsx_runtime = __toESM(require_jsx_runtime(), 1);
var AddMappingImageVariableModal = ({ currentMapConfig }) => {
  const setIsImageVariableMappingModalOpen = appStore((state) => state.effects.modal.setIsImageVariableMappingModalOpen);
  const setCurrentAddImageMappingSelectedVariables = appStore((state) => state.effects.modal.setCurrentAddImageMappingSelectedVariables);
  const addImageVariable = appStore((state) => state.effects.studio.layoutImageMapping.addImageVariable);
  const variables = appStore((state) => state.state.studio.document.variables);
  const currentSelectedMapId = appStore((state) => state.state.modal.currentSelectedMapId);
  const currentAddImageMappingSelectedVariables = appStore((state) => state.state.modal.currentAddImageMappingSelectedVariables);
  const isAddImageVariableMappingModalOpen = appStore((state) => state.state.modal.isAddImageVariableMappingModalOpen);
  const possibleVariableValues = import_react236.useMemo(() => {
    const allImageVariables = variables.filter((variable) => variable.type === "image").map((variable) => ({
      value: variable.id,
      label: variable.name,
      disabled: currentMapConfig?.variables.some((v2) => v2.id === variable.id) || false
    }));
    return allImageVariables;
  }, [variables, currentMapConfig]);
  const onClose = () => {
    setIsImageVariableMappingModalOpen(false);
    setCurrentAddImageMappingSelectedVariables([]);
  };
  const addImageVariables = () => {
    const mapId = currentSelectedMapId;
    if (mapId == null)
      return;
    currentAddImageMappingSelectedVariables.forEach((variableId) => {
      addImageVariable({
        mapId,
        imageVariable: {
          id: variableId,
          dependentGroup: []
        }
      });
    });
    onClose();
  };
  return /* @__PURE__ */ jsx_runtime.jsx(Modal, {
    opened: isAddImageVariableMappingModalOpen,
    onClose,
    title: "Add Image Variables",
    centered: true,
    children: /* @__PURE__ */ jsx_runtime.jsxs(Stack, {
      children: [
        /* @__PURE__ */ jsx_runtime.jsx(MultiSelect, {
          label: "Select Image Variable",
          placeholder: "Choose an image variable",
          data: possibleVariableValues,
          value: currentAddImageMappingSelectedVariables,
          onChange: setCurrentAddImageMappingSelectedVariables,
          searchable: true
        }),
        /* @__PURE__ */ jsx_runtime.jsxs(Group, {
          justify: "flex-end",
          mt: "md",
          children: [
            /* @__PURE__ */ jsx_runtime.jsx(Button, {
              variant: "outline",
              onClick: onClose,
              children: "Close"
            }),
            /* @__PURE__ */ jsx_runtime.jsx(Button, {
              onClick: addImageVariables,
              disabled: currentAddImageMappingSelectedVariables.length == 0,
              children: "Add"
            })
          ]
        })
      ]
    })
  });
};

// src/components/LayoutMappingModal/AddDependentModal.tsx
var jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var AddDependentModal = () => {
  const raiseError2 = appStore((state) => state.raiseError);
  const setIsOpen = appStore((state) => state.effects.modal.dependentModal.setIsOpen);
  const setCurrentGroupIndex = appStore((state) => state.effects.modal.dependentModal.setCurrentGroupIndex);
  const setCurrentSelectedVariables = appStore((state) => state.effects.modal.dependentModal.setCurrentSelectedVariables);
  const addDependentGroup = appStore((state) => state.effects.studio.layoutImageMapping.addDependentGroup);
  const updateDependent = appStore((state) => state.effects.studio.layoutImageMapping.updateDependent);
  const variables = appStore((state) => state.state.studio.document.variables);
  const currentSelectedVariables = appStore((state) => state.state.modal.dependentModal.currentSelectedVariables);
  const currentImageVariableId = appStore((state) => state.state.modal.dependentModal.currentImageVariableId);
  const currentSelectedMapId = appStore((state) => state.state.modal.currentSelectedMapId);
  const currentGroupIndex = appStore((state) => state.state.modal.dependentModal.currentGroupIndex);
  const isOpen = appStore((state) => state.state.modal.dependentModal.isOpen);
  const onClose = () => {
    setIsOpen(false);
    setCurrentGroupIndex(null);
    setCurrentSelectedVariables([]);
  };
  const getVariableById = (id) => {
    return variables.find((v2) => v2.id === id);
  };
  const addDependents = () => {
    const selectedVariables = currentSelectedVariables;
    const imageVariableId = currentImageVariableId;
    const mapId = currentSelectedMapId;
    if (!mapId || !imageVariableId) {
      raiseError2(new Error(`One of these are null mapId:${mapId} or imageVariableId:${imageVariableId}`));
      return;
    }
    const groupIndex = currentGroupIndex;
    const dependents = selectedVariables.map((variableId) => {
      const variable = getVariableById(variableId);
      if (!variable) {
        const e = new Error(`Variable with id ${variableId} is not found`);
        raiseError2(e);
        throw e;
      }
      switch (variable.type) {
        case "list":
          return {
            variableId,
            values: variable.items.map((i2) => i2.value)
          };
        default:
          return {
            variableId,
            values: []
          };
      }
    });
    if (groupIndex === null) {
      addDependentGroup({
        mapId,
        imageVariableId,
        dependents
      });
    } else {
      dependents.forEach((dependent) => {
        updateDependent({
          mapId: currentSelectedMapId || "",
          imageVariableId,
          dependentGroupIndex: groupIndex,
          dependent
        });
      });
    }
    onClose();
  };
  return /* @__PURE__ */ jsx_runtime2.jsx(Modal, {
    opened: isOpen,
    onClose,
    title: "Add Dependent Variable",
    centered: true,
    children: /* @__PURE__ */ jsx_runtime2.jsxs(Stack, {
      children: [
        /* @__PURE__ */ jsx_runtime2.jsx(MultiSelect, {
          label: "Select Variable",
          placeholder: "Choose a variable",
          data: variables.filter((variable) => variable.type !== "image" && variable.type !== "shortText").map((variable) => ({
            value: variable.id,
            label: variable.name
          })),
          value: currentSelectedVariables,
          onChange: setCurrentSelectedVariables,
          searchable: true
        }),
        /* @__PURE__ */ jsx_runtime2.jsxs(Group, {
          justify: "flex-end",
          mt: "md",
          children: [
            /* @__PURE__ */ jsx_runtime2.jsx(Button, {
              variant: "outline",
              onClick: onClose,
              children: "Close"
            }),
            /* @__PURE__ */ jsx_runtime2.jsx(Button, {
              onClick: addDependents,
              disabled: currentSelectedVariables.length === 0,
              children: "Add"
            })
          ]
        })
      ]
    })
  });
};

// src/components/LayoutMappingModal/LayoutConfigSelection.tsx
var import_react244 = __toESM(require_react(), 1);

// src/components/LayoutMappingModal/LayoutMultiSelect.tsx
var import_react237 = __toESM(require_react(), 1);
var jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var buildTreeData = (documentLayouts, selectedLayoutIds, disabledLayoutIds) => {
  const layoutsByParent = {};
  documentLayouts.forEach((layout) => {
    const parentId = layout.parentId || "root";
    if (!layoutsByParent[parentId]) {
      layoutsByParent[parentId] = [];
    }
    layoutsByParent[parentId].push(layout);
  });
  const buildNodes = (parentId = "root") => {
    const children = layoutsByParent[parentId] || [];
    return children.map((layout) => ({
      value: layout.id,
      label: layout.name,
      disabled: disabledLayoutIds.includes(layout.id),
      children: buildNodes(layout.id)
    }));
  };
  return buildNodes();
};
var LayoutMultiSelect = ({
  layoutConfig,
  showButton
}) => {
  const documentLayouts = appStore((store) => store.state.studio.document.layouts);
  const layoutImageMapping = appStore((store) => store.state.studio.layoutImageMapping);
  const setLayoutIds = appStore((store) => store.effects.studio.layoutImageMapping.setLayoutIds);
  const [drawerOpened, setDrawerOpened] = import_react237.useState(false);
  const [selectedLayouts, setSelectedLayouts] = import_react237.useState(layoutImageMapping.find((lc) => lc.id === layoutConfig.id)?.layoutIds || []);
  const assignedToOtherMaps = layoutImageMapping.filter((map) => map.id !== layoutConfig.id).flatMap((map) => map.layoutIds);
  const handleMultiSelectChange = (updateLayoutIds) => {
    setLayoutIds({
      mapId: layoutConfig.id,
      layoutIds: updateLayoutIds
    });
  };
  const handleSave = () => {
    handleMultiSelectChange(selectedLayouts);
    setDrawerOpened(false);
  };
  const handleToggleLayout = (layoutId) => {
    setSelectedLayouts((prev2) => {
      if (prev2.includes(layoutId)) {
        return prev2.filter((id) => id !== layoutId);
      } else {
        return [...prev2, layoutId];
      }
    });
  };
  const treeData = buildTreeData(documentLayouts, selectedLayouts, assignedToOtherMaps);
  const renderTreeNode = ({
    node: node2,
    expanded,
    hasChildren,
    elementProps
  }) => {
    const isDisabled = node2.disabled;
    const isChecked = selectedLayouts.includes(node2.value);
    return /* @__PURE__ */ jsx_runtime3.jsxs(Group, {
      gap: "xs",
      ...elementProps,
      children: [
        /* @__PURE__ */ jsx_runtime3.jsx(Checkbox.Indicator, {
          checked: isChecked,
          disabled: isDisabled,
          onClick: (e) => {
            e.stopPropagation();
            if (!isDisabled) {
              handleToggleLayout(node2.value);
            }
          }
        }),
        /* @__PURE__ */ jsx_runtime3.jsxs(Group, {
          gap: 5,
          style: {
            color: isDisabled ? "var(--mantine-color-gray-6)" : undefined,
            cursor: isDisabled ? "not-allowed" : "pointer"
          },
          children: [
            /* @__PURE__ */ jsx_runtime3.jsx("span", {
              children: node2.label
            }),
            hasChildren && /* @__PURE__ */ jsx_runtime3.jsx(IconChevronDown, {
              size: 14,
              color: isDisabled ? "var(--mantine-color-gray-6)" : undefined,
              style: {
                transform: expanded ? "rotate(180deg)" : "rotate(0deg)"
              }
            })
          ]
        })
      ]
    });
  };
  return /* @__PURE__ */ jsx_runtime3.jsxs(jsx_runtime3.Fragment, {
    children: [
      /* @__PURE__ */ jsx_runtime3.jsxs(Group, {
        children: [
          /* @__PURE__ */ jsx_runtime3.jsx(MultiSelect, {
            data: documentLayouts.map((layout) => {
              return {
                value: layout.id,
                label: layout.name,
                disabled: assignedToOtherMaps.includes(layout.id)
              };
            }),
            value: layoutImageMapping.find((lc) => lc.id === layoutConfig.id)?.layoutIds,
            onChange: handleMultiSelectChange,
            placeholder: "Select layouts",
            searchable: true,
            clearable: true,
            styles: {
              root: {
                width: showButton ? "80%" : "100%"
              }
            }
          }),
          showButton && /* @__PURE__ */ jsx_runtime3.jsxs(Button, {
            onClick: () => setDrawerOpened(true),
            children: [
              /* @__PURE__ */ jsx_runtime3.jsxs("svg", {
                xmlns: "http://www.w3.org/2000/svg",
                viewBox: "0 0 24 24",
                fill: "none",
                stroke: "currentColor",
                strokeLinecap: "round",
                strokeLinejoin: "round",
                width: "24",
                height: "24",
                strokeWidth: "2",
                children: [
                  /* @__PURE__ */ jsx_runtime3.jsx("path", {
                    d: "M13 5h8"
                  }),
                  /* @__PURE__ */ jsx_runtime3.jsx("path", {
                    d: "M13 9h5"
                  }),
                  /* @__PURE__ */ jsx_runtime3.jsx("path", {
                    d: "M13 15h8"
                  }),
                  /* @__PURE__ */ jsx_runtime3.jsx("path", {
                    d: "M13 19h5"
                  }),
                  /* @__PURE__ */ jsx_runtime3.jsx("path", {
                    d: "M3 4m0 1a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v4a1 1 0 0 1 -1 1h-4a1 1 0 0 1 -1 -1z"
                  }),
                  /* @__PURE__ */ jsx_runtime3.jsx("path", {
                    d: "M3 14m0 1a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v4a1 1 0 0 1 -1 1h-4a1 1 0 0 1 -1 -1z"
                  })
                ]
              }),
              /* @__PURE__ */ jsx_runtime3.jsx("span", {
                style: { marginLeft: "10px" },
                children: "Open Selector"
              })
            ]
          })
        ]
      }),
      /* @__PURE__ */ jsx_runtime3.jsxs(Drawer, {
        opened: drawerOpened,
        onClose: () => setDrawerOpened(false),
        title: "Select Layouts",
        position: "right",
        size: "md",
        padding: "md",
        children: [
          /* @__PURE__ */ jsx_runtime3.jsx("div", {
            style: { marginBottom: "20px" },
            children: /* @__PURE__ */ jsx_runtime3.jsx(Tree, {
              data: treeData,
              renderNode: renderTreeNode,
              expandOnClick: true
            })
          }),
          /* @__PURE__ */ jsx_runtime3.jsx(Button, {
            fullWidth: true,
            onClick: handleSave,
            children: "Save"
          })
        ]
      })
    ]
  });
};

// src/components/LayoutMappingModal/VariableCard.tsx
var import_react243 = __toESM(require_react(), 1);

// node_modules/@dnd-kit/core/dist/core.esm.js
var import_react240 = __toESM(require_react(), 1);
var import_react_dom5 = __toESM(require_react_dom(), 1);

// node_modules/@dnd-kit/utilities/dist/utilities.esm.js
var import_react238 = __toESM(require_react(), 1);
function useCombinedRefs() {
  for (var _len = arguments.length, refs = new Array(_len), _key = 0;_key < _len; _key++) {
    refs[_key] = arguments[_key];
  }
  return import_react238.useMemo(() => (node2) => {
    refs.forEach((ref) => ref(node2));
  }, refs);
}
var canUseDOM2 = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
function isWindow(element) {
  const elementString = Object.prototype.toString.call(element);
  return elementString === "[object Window]" || elementString === "[object global]";
}
function isNode3(node2) {
  return "nodeType" in node2;
}
function getWindow2(target) {
  var _target$ownerDocument, _target$ownerDocument2;
  if (!target) {
    return window;
  }
  if (isWindow(target)) {
    return target;
  }
  if (!isNode3(target)) {
    return window;
  }
  return (_target$ownerDocument = (_target$ownerDocument2 = target.ownerDocument) == null ? undefined : _target$ownerDocument2.defaultView) != null ? _target$ownerDocument : window;
}
function isDocument(node2) {
  const {
    Document
  } = getWindow2(node2);
  return node2 instanceof Document;
}
function isHTMLElement2(node2) {
  if (isWindow(node2)) {
    return false;
  }
  return node2 instanceof getWindow2(node2).HTMLElement;
}
function isSVGElement(node2) {
  return node2 instanceof getWindow2(node2).SVGElement;
}
function getOwnerDocument(target) {
  if (!target) {
    return document;
  }
  if (isWindow(target)) {
    return target.document;
  }
  if (!isNode3(target)) {
    return document;
  }
  if (isDocument(target)) {
    return target;
  }
  if (isHTMLElement2(target) || isSVGElement(target)) {
    return target.ownerDocument;
  }
  return document;
}
var useIsomorphicLayoutEffect2 = canUseDOM2 ? import_react238.useLayoutEffect : import_react238.useEffect;
function useEvent(handler) {
  const handlerRef = import_react238.useRef(handler);
  useIsomorphicLayoutEffect2(() => {
    handlerRef.current = handler;
  });
  return import_react238.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0;_key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return handlerRef.current == null ? undefined : handlerRef.current(...args);
  }, []);
}
function useInterval() {
  const intervalRef = import_react238.useRef(null);
  const set2 = import_react238.useCallback((listener, duration) => {
    intervalRef.current = setInterval(listener, duration);
  }, []);
  const clear = import_react238.useCallback(() => {
    if (intervalRef.current !== null) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }
  }, []);
  return [set2, clear];
}
function useLatestValue(value, dependencies) {
  if (dependencies === undefined) {
    dependencies = [value];
  }
  const valueRef = import_react238.useRef(value);
  useIsomorphicLayoutEffect2(() => {
    if (valueRef.current !== value) {
      valueRef.current = value;
    }
  }, dependencies);
  return valueRef;
}
function useLazyMemo(callback, dependencies) {
  const valueRef = import_react238.useRef();
  return import_react238.useMemo(() => {
    const newValue = callback(valueRef.current);
    valueRef.current = newValue;
    return newValue;
  }, [...dependencies]);
}
function useNodeRef(onChange) {
  const onChangeHandler = useEvent(onChange);
  const node2 = import_react238.useRef(null);
  const setNodeRef = import_react238.useCallback((element) => {
    if (element !== node2.current) {
      onChangeHandler == null || onChangeHandler(element, node2.current);
    }
    node2.current = element;
  }, []);
  return [node2, setNodeRef];
}
function usePrevious2(value) {
  const ref = import_react238.useRef();
  import_react238.useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}
var ids = {};
function useUniqueId(prefix3, value) {
  return import_react238.useMemo(() => {
    if (value) {
      return value;
    }
    const id = ids[prefix3] == null ? 0 : ids[prefix3] + 1;
    ids[prefix3] = id;
    return prefix3 + "-" + id;
  }, [prefix3, value]);
}
function createAdjustmentFn(modifier) {
  return function(object) {
    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++) {
      adjustments[_key - 1] = arguments[_key];
    }
    return adjustments.reduce((accumulator, adjustment) => {
      const entries = Object.entries(adjustment);
      for (const [key, valueAdjustment] of entries) {
        const value = accumulator[key];
        if (value != null) {
          accumulator[key] = value + modifier * valueAdjustment;
        }
      }
      return accumulator;
    }, {
      ...object
    });
  };
}
var add = /* @__PURE__ */ createAdjustmentFn(1);
var subtract = /* @__PURE__ */ createAdjustmentFn(-1);
function hasViewportRelativeCoordinates(event) {
  return "clientX" in event && "clientY" in event;
}
function isKeyboardEvent(event) {
  if (!event) {
    return false;
  }
  const {
    KeyboardEvent: KeyboardEvent2
  } = getWindow2(event.target);
  return KeyboardEvent2 && event instanceof KeyboardEvent2;
}
function isTouchEvent(event) {
  if (!event) {
    return false;
  }
  const {
    TouchEvent
  } = getWindow2(event.target);
  return TouchEvent && event instanceof TouchEvent;
}
function getEventCoordinates(event) {
  if (isTouchEvent(event)) {
    if (event.touches && event.touches.length) {
      const {
        clientX: x2,
        clientY: y2
      } = event.touches[0];
      return {
        x: x2,
        y: y2
      };
    } else if (event.changedTouches && event.changedTouches.length) {
      const {
        clientX: x2,
        clientY: y2
      } = event.changedTouches[0];
      return {
        x: x2,
        y: y2
      };
    }
  }
  if (hasViewportRelativeCoordinates(event)) {
    return {
      x: event.clientX,
      y: event.clientY
    };
  }
  return null;
}
var CSS2 = /* @__PURE__ */ Object.freeze({
  Translate: {
    toString(transform) {
      if (!transform) {
        return;
      }
      const {
        x: x2,
        y: y2
      } = transform;
      return "translate3d(" + (x2 ? Math.round(x2) : 0) + "px, " + (y2 ? Math.round(y2) : 0) + "px, 0)";
    }
  },
  Scale: {
    toString(transform) {
      if (!transform) {
        return;
      }
      const {
        scaleX,
        scaleY
      } = transform;
      return "scaleX(" + scaleX + ") scaleY(" + scaleY + ")";
    }
  },
  Transform: {
    toString(transform) {
      if (!transform) {
        return;
      }
      return [CSS2.Translate.toString(transform), CSS2.Scale.toString(transform)].join(" ");
    }
  },
  Transition: {
    toString(_ref) {
      let {
        property,
        duration,
        easing
      } = _ref;
      return property + " " + duration + "ms " + easing;
    }
  }
});
var SELECTOR = "a,frame,iframe,input:not([type=hidden]):not(:disabled),select:not(:disabled),textarea:not(:disabled),button:not(:disabled),*[tabindex]";
function findFirstFocusableNode(element) {
  if (element.matches(SELECTOR)) {
    return element;
  }
  return element.querySelector(SELECTOR);
}

// node_modules/@dnd-kit/accessibility/dist/accessibility.esm.js
var import_react239 = __toESM(require_react(), 1);
var hiddenStyles = {
  display: "none"
};
function HiddenText(_ref) {
  let {
    id,
    value
  } = _ref;
  return import_react239.default.createElement("div", {
    id,
    style: hiddenStyles
  }, value);
}
function LiveRegion(_ref) {
  let {
    id,
    announcement,
    ariaLiveType = "assertive"
  } = _ref;
  const visuallyHidden = {
    position: "fixed",
    top: 0,
    left: 0,
    width: 1,
    height: 1,
    margin: -1,
    border: 0,
    padding: 0,
    overflow: "hidden",
    clip: "rect(0 0 0 0)",
    clipPath: "inset(100%)",
    whiteSpace: "nowrap"
  };
  return import_react239.default.createElement("div", {
    id,
    style: visuallyHidden,
    role: "status",
    "aria-live": ariaLiveType,
    "aria-atomic": true
  }, announcement);
}
function useAnnouncement() {
  const [announcement, setAnnouncement] = import_react239.useState("");
  const announce = import_react239.useCallback((value) => {
    if (value != null) {
      setAnnouncement(value);
    }
  }, []);
  return {
    announce,
    announcement
  };
}

// node_modules/@dnd-kit/core/dist/core.esm.js
var DndMonitorContext = /* @__PURE__ */ import_react240.createContext(null);
function useDndMonitor(listener) {
  const registerListener = import_react240.useContext(DndMonitorContext);
  import_react240.useEffect(() => {
    if (!registerListener) {
      throw new Error("useDndMonitor must be used within a children of <DndContext>");
    }
    const unsubscribe = registerListener(listener);
    return unsubscribe;
  }, [listener, registerListener]);
}
function useDndMonitorProvider() {
  const [listeners] = import_react240.useState(() => new Set);
  const registerListener = import_react240.useCallback((listener) => {
    listeners.add(listener);
    return () => listeners.delete(listener);
  }, [listeners]);
  const dispatch = import_react240.useCallback((_ref) => {
    let {
      type,
      event
    } = _ref;
    listeners.forEach((listener) => {
      var _listener$type;
      return (_listener$type = listener[type]) == null ? undefined : _listener$type.call(listener, event);
    });
  }, [listeners]);
  return [dispatch, registerListener];
}
var defaultScreenReaderInstructions = {
  draggable: `
    To pick up a draggable item, press the space bar.
    While dragging, use the arrow keys to move the item.
    Press space again to drop the item in its new position, or press escape to cancel.
  `
};
var defaultAnnouncements = {
  onDragStart(_ref) {
    let {
      active
    } = _ref;
    return "Picked up draggable item " + active.id + ".";
  },
  onDragOver(_ref2) {
    let {
      active,
      over
    } = _ref2;
    if (over) {
      return "Draggable item " + active.id + " was moved over droppable area " + over.id + ".";
    }
    return "Draggable item " + active.id + " is no longer over a droppable area.";
  },
  onDragEnd(_ref3) {
    let {
      active,
      over
    } = _ref3;
    if (over) {
      return "Draggable item " + active.id + " was dropped over droppable area " + over.id;
    }
    return "Draggable item " + active.id + " was dropped.";
  },
  onDragCancel(_ref4) {
    let {
      active
    } = _ref4;
    return "Dragging was cancelled. Draggable item " + active.id + " was dropped.";
  }
};
function Accessibility(_ref) {
  let {
    announcements = defaultAnnouncements,
    container,
    hiddenTextDescribedById,
    screenReaderInstructions = defaultScreenReaderInstructions
  } = _ref;
  const {
    announce,
    announcement
  } = useAnnouncement();
  const liveRegionId = useUniqueId("DndLiveRegion");
  const [mounted, setMounted] = import_react240.useState(false);
  import_react240.useEffect(() => {
    setMounted(true);
  }, []);
  useDndMonitor(import_react240.useMemo(() => ({
    onDragStart(_ref2) {
      let {
        active
      } = _ref2;
      announce(announcements.onDragStart({
        active
      }));
    },
    onDragMove(_ref3) {
      let {
        active,
        over
      } = _ref3;
      if (announcements.onDragMove) {
        announce(announcements.onDragMove({
          active,
          over
        }));
      }
    },
    onDragOver(_ref4) {
      let {
        active,
        over
      } = _ref4;
      announce(announcements.onDragOver({
        active,
        over
      }));
    },
    onDragEnd(_ref5) {
      let {
        active,
        over
      } = _ref5;
      announce(announcements.onDragEnd({
        active,
        over
      }));
    },
    onDragCancel(_ref6) {
      let {
        active,
        over
      } = _ref6;
      announce(announcements.onDragCancel({
        active,
        over
      }));
    }
  }), [announce, announcements]));
  if (!mounted) {
    return null;
  }
  const markup = import_react240.default.createElement(import_react240.default.Fragment, null, import_react240.default.createElement(HiddenText, {
    id: hiddenTextDescribedById,
    value: screenReaderInstructions.draggable
  }), import_react240.default.createElement(LiveRegion, {
    id: liveRegionId,
    announcement
  }));
  return container ? import_react_dom5.createPortal(markup, container) : markup;
}
var Action;
(function(Action2) {
  Action2["DragStart"] = "dragStart";
  Action2["DragMove"] = "dragMove";
  Action2["DragEnd"] = "dragEnd";
  Action2["DragCancel"] = "dragCancel";
  Action2["DragOver"] = "dragOver";
  Action2["RegisterDroppable"] = "registerDroppable";
  Action2["SetDroppableDisabled"] = "setDroppableDisabled";
  Action2["UnregisterDroppable"] = "unregisterDroppable";
})(Action || (Action = {}));
function noop7() {
}
function useSensor(sensor, options) {
  return import_react240.useMemo(() => ({
    sensor,
    options: options != null ? options : {}
  }), [sensor, options]);
}
function useSensors() {
  for (var _len = arguments.length, sensors = new Array(_len), _key = 0;_key < _len; _key++) {
    sensors[_key] = arguments[_key];
  }
  return import_react240.useMemo(() => [...sensors].filter((sensor) => sensor != null), [...sensors]);
}
var defaultCoordinates = /* @__PURE__ */ Object.freeze({
  x: 0,
  y: 0
});
function distanceBetween(p1, p2) {
  return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
}
function sortCollisionsAsc(_ref, _ref2) {
  let {
    data: {
      value: a2
    }
  } = _ref;
  let {
    data: {
      value: b
    }
  } = _ref2;
  return a2 - b;
}
function sortCollisionsDesc(_ref3, _ref4) {
  let {
    data: {
      value: a2
    }
  } = _ref3;
  let {
    data: {
      value: b
    }
  } = _ref4;
  return b - a2;
}
function cornersOfRectangle(_ref5) {
  let {
    left,
    top,
    height,
    width
  } = _ref5;
  return [{
    x: left,
    y: top
  }, {
    x: left + width,
    y: top
  }, {
    x: left,
    y: top + height
  }, {
    x: left + width,
    y: top + height
  }];
}
function getFirstCollision(collisions, property) {
  if (!collisions || collisions.length === 0) {
    return null;
  }
  const [firstCollision] = collisions;
  return property ? firstCollision[property] : firstCollision;
}
function centerOfRectangle(rect, left, top) {
  if (left === undefined) {
    left = rect.left;
  }
  if (top === undefined) {
    top = rect.top;
  }
  return {
    x: left + rect.width * 0.5,
    y: top + rect.height * 0.5
  };
}
var closestCenter = (_ref) => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref;
  const centerRect = centerOfRectangle(collisionRect, collisionRect.left, collisionRect.top);
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);
    if (rect) {
      const distBetween = distanceBetween(centerOfRectangle(rect), centerRect);
      collisions.push({
        id,
        data: {
          droppableContainer,
          value: distBetween
        }
      });
    }
  }
  return collisions.sort(sortCollisionsAsc);
};
var closestCorners = (_ref) => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref;
  const corners = cornersOfRectangle(collisionRect);
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);
    if (rect) {
      const rectCorners = cornersOfRectangle(rect);
      const distances = corners.reduce((accumulator, corner, index4) => {
        return accumulator + distanceBetween(rectCorners[index4], corner);
      }, 0);
      const effectiveDistance = Number((distances / 4).toFixed(4));
      collisions.push({
        id,
        data: {
          droppableContainer,
          value: effectiveDistance
        }
      });
    }
  }
  return collisions.sort(sortCollisionsAsc);
};
function getIntersectionRatio(entry, target) {
  const top = Math.max(target.top, entry.top);
  const left = Math.max(target.left, entry.left);
  const right = Math.min(target.left + target.width, entry.left + entry.width);
  const bottom = Math.min(target.top + target.height, entry.top + entry.height);
  const width = right - left;
  const height = bottom - top;
  if (left < right && top < bottom) {
    const targetArea = target.width * target.height;
    const entryArea = entry.width * entry.height;
    const intersectionArea = width * height;
    const intersectionRatio = intersectionArea / (targetArea + entryArea - intersectionArea);
    return Number(intersectionRatio.toFixed(4));
  }
  return 0;
}
var rectIntersection = (_ref) => {
  let {
    collisionRect,
    droppableRects,
    droppableContainers
  } = _ref;
  const collisions = [];
  for (const droppableContainer of droppableContainers) {
    const {
      id
    } = droppableContainer;
    const rect = droppableRects.get(id);
    if (rect) {
      const intersectionRatio = getIntersectionRatio(rect, collisionRect);
      if (intersectionRatio > 0) {
        collisions.push({
          id,
          data: {
            droppableContainer,
            value: intersectionRatio
          }
        });
      }
    }
  }
  return collisions.sort(sortCollisionsDesc);
};
function adjustScale(transform, rect1, rect2) {
  return {
    ...transform,
    scaleX: rect1 && rect2 ? rect1.width / rect2.width : 1,
    scaleY: rect1 && rect2 ? rect1.height / rect2.height : 1
  };
}
function getRectDelta(rect1, rect2) {
  return rect1 && rect2 ? {
    x: rect1.left - rect2.left,
    y: rect1.top - rect2.top
  } : defaultCoordinates;
}
function createRectAdjustmentFn(modifier) {
  return function adjustClientRect(rect) {
    for (var _len = arguments.length, adjustments = new Array(_len > 1 ? _len - 1 : 0), _key = 1;_key < _len; _key++) {
      adjustments[_key - 1] = arguments[_key];
    }
    return adjustments.reduce((acc, adjustment) => ({
      ...acc,
      top: acc.top + modifier * adjustment.y,
      bottom: acc.bottom + modifier * adjustment.y,
      left: acc.left + modifier * adjustment.x,
      right: acc.right + modifier * adjustment.x
    }), {
      ...rect
    });
  };
}
var getAdjustedRect = /* @__PURE__ */ createRectAdjustmentFn(1);
function parseTransform(transform) {
  if (transform.startsWith("matrix3d(")) {
    const transformArray = transform.slice(9, -1).split(/, /);
    return {
      x: +transformArray[12],
      y: +transformArray[13],
      scaleX: +transformArray[0],
      scaleY: +transformArray[5]
    };
  } else if (transform.startsWith("matrix(")) {
    const transformArray = transform.slice(7, -1).split(/, /);
    return {
      x: +transformArray[4],
      y: +transformArray[5],
      scaleX: +transformArray[0],
      scaleY: +transformArray[3]
    };
  }
  return null;
}
function inverseTransform(rect, transform, transformOrigin) {
  const parsedTransform = parseTransform(transform);
  if (!parsedTransform) {
    return rect;
  }
  const {
    scaleX,
    scaleY,
    x: translateX,
    y: translateY
  } = parsedTransform;
  const x2 = rect.left - translateX - (1 - scaleX) * parseFloat(transformOrigin);
  const y2 = rect.top - translateY - (1 - scaleY) * parseFloat(transformOrigin.slice(transformOrigin.indexOf(" ") + 1));
  const w2 = scaleX ? rect.width / scaleX : rect.width;
  const h = scaleY ? rect.height / scaleY : rect.height;
  return {
    width: w2,
    height: h,
    top: y2,
    right: x2 + w2,
    bottom: y2 + h,
    left: x2
  };
}
var defaultOptions = {
  ignoreTransform: false
};
function getClientRect(element, options) {
  if (options === undefined) {
    options = defaultOptions;
  }
  let rect = element.getBoundingClientRect();
  if (options.ignoreTransform) {
    const {
      transform,
      transformOrigin
    } = getWindow2(element).getComputedStyle(element);
    if (transform) {
      rect = inverseTransform(rect, transform, transformOrigin);
    }
  }
  const {
    top,
    left,
    width,
    height,
    bottom,
    right
  } = rect;
  return {
    top,
    left,
    width,
    height,
    bottom,
    right
  };
}
function getTransformAgnosticClientRect(element) {
  return getClientRect(element, {
    ignoreTransform: true
  });
}
function getWindowClientRect(element) {
  const width = element.innerWidth;
  const height = element.innerHeight;
  return {
    top: 0,
    left: 0,
    right: width,
    bottom: height,
    width,
    height
  };
}
function isFixed(node2, computedStyle) {
  if (computedStyle === undefined) {
    computedStyle = getWindow2(node2).getComputedStyle(node2);
  }
  return computedStyle.position === "fixed";
}
function isScrollable(element, computedStyle) {
  if (computedStyle === undefined) {
    computedStyle = getWindow2(element).getComputedStyle(element);
  }
  const overflowRegex = /(auto|scroll|overlay)/;
  const properties = ["overflow", "overflowX", "overflowY"];
  return properties.some((property) => {
    const value = computedStyle[property];
    return typeof value === "string" ? overflowRegex.test(value) : false;
  });
}
function getScrollableAncestors(element, limit) {
  const scrollParents = [];
  function findScrollableAncestors(node2) {
    if (limit != null && scrollParents.length >= limit) {
      return scrollParents;
    }
    if (!node2) {
      return scrollParents;
    }
    if (isDocument(node2) && node2.scrollingElement != null && !scrollParents.includes(node2.scrollingElement)) {
      scrollParents.push(node2.scrollingElement);
      return scrollParents;
    }
    if (!isHTMLElement2(node2) || isSVGElement(node2)) {
      return scrollParents;
    }
    if (scrollParents.includes(node2)) {
      return scrollParents;
    }
    const computedStyle = getWindow2(element).getComputedStyle(node2);
    if (node2 !== element) {
      if (isScrollable(node2, computedStyle)) {
        scrollParents.push(node2);
      }
    }
    if (isFixed(node2, computedStyle)) {
      return scrollParents;
    }
    return findScrollableAncestors(node2.parentNode);
  }
  if (!element) {
    return scrollParents;
  }
  return findScrollableAncestors(element);
}
function getFirstScrollableAncestor(node2) {
  const [firstScrollableAncestor] = getScrollableAncestors(node2, 1);
  return firstScrollableAncestor != null ? firstScrollableAncestor : null;
}
function getScrollableElement(element) {
  if (!canUseDOM2 || !element) {
    return null;
  }
  if (isWindow(element)) {
    return element;
  }
  if (!isNode3(element)) {
    return null;
  }
  if (isDocument(element) || element === getOwnerDocument(element).scrollingElement) {
    return window;
  }
  if (isHTMLElement2(element)) {
    return element;
  }
  return null;
}
function getScrollXCoordinate(element) {
  if (isWindow(element)) {
    return element.scrollX;
  }
  return element.scrollLeft;
}
function getScrollYCoordinate(element) {
  if (isWindow(element)) {
    return element.scrollY;
  }
  return element.scrollTop;
}
function getScrollCoordinates(element) {
  return {
    x: getScrollXCoordinate(element),
    y: getScrollYCoordinate(element)
  };
}
var Direction;
(function(Direction2) {
  Direction2[Direction2["Forward"] = 1] = "Forward";
  Direction2[Direction2["Backward"] = -1] = "Backward";
})(Direction || (Direction = {}));
function isDocumentScrollingElement(element) {
  if (!canUseDOM2 || !element) {
    return false;
  }
  return element === document.scrollingElement;
}
function getScrollPosition(scrollingContainer) {
  const minScroll = {
    x: 0,
    y: 0
  };
  const dimensions = isDocumentScrollingElement(scrollingContainer) ? {
    height: window.innerHeight,
    width: window.innerWidth
  } : {
    height: scrollingContainer.clientHeight,
    width: scrollingContainer.clientWidth
  };
  const maxScroll = {
    x: scrollingContainer.scrollWidth - dimensions.width,
    y: scrollingContainer.scrollHeight - dimensions.height
  };
  const isTop = scrollingContainer.scrollTop <= minScroll.y;
  const isLeft = scrollingContainer.scrollLeft <= minScroll.x;
  const isBottom = scrollingContainer.scrollTop >= maxScroll.y;
  const isRight = scrollingContainer.scrollLeft >= maxScroll.x;
  return {
    isTop,
    isLeft,
    isBottom,
    isRight,
    maxScroll,
    minScroll
  };
}
var defaultThreshold = {
  x: 0.2,
  y: 0.2
};
function getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, _ref, acceleration, thresholdPercentage) {
  let {
    top,
    left,
    right,
    bottom
  } = _ref;
  if (acceleration === undefined) {
    acceleration = 10;
  }
  if (thresholdPercentage === undefined) {
    thresholdPercentage = defaultThreshold;
  }
  const {
    isTop,
    isBottom,
    isLeft,
    isRight
  } = getScrollPosition(scrollContainer);
  const direction = {
    x: 0,
    y: 0
  };
  const speed = {
    x: 0,
    y: 0
  };
  const threshold = {
    height: scrollContainerRect.height * thresholdPercentage.y,
    width: scrollContainerRect.width * thresholdPercentage.x
  };
  if (!isTop && top <= scrollContainerRect.top + threshold.height) {
    direction.y = Direction.Backward;
    speed.y = acceleration * Math.abs((scrollContainerRect.top + threshold.height - top) / threshold.height);
  } else if (!isBottom && bottom >= scrollContainerRect.bottom - threshold.height) {
    direction.y = Direction.Forward;
    speed.y = acceleration * Math.abs((scrollContainerRect.bottom - threshold.height - bottom) / threshold.height);
  }
  if (!isRight && right >= scrollContainerRect.right - threshold.width) {
    direction.x = Direction.Forward;
    speed.x = acceleration * Math.abs((scrollContainerRect.right - threshold.width - right) / threshold.width);
  } else if (!isLeft && left <= scrollContainerRect.left + threshold.width) {
    direction.x = Direction.Backward;
    speed.x = acceleration * Math.abs((scrollContainerRect.left + threshold.width - left) / threshold.width);
  }
  return {
    direction,
    speed
  };
}
function getScrollElementRect(element) {
  if (element === document.scrollingElement) {
    const {
      innerWidth,
      innerHeight
    } = window;
    return {
      top: 0,
      left: 0,
      right: innerWidth,
      bottom: innerHeight,
      width: innerWidth,
      height: innerHeight
    };
  }
  const {
    top,
    left,
    right,
    bottom
  } = element.getBoundingClientRect();
  return {
    top,
    left,
    right,
    bottom,
    width: element.clientWidth,
    height: element.clientHeight
  };
}
function getScrollOffsets(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node2) => {
    return add(acc, getScrollCoordinates(node2));
  }, defaultCoordinates);
}
function getScrollXOffset(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node2) => {
    return acc + getScrollXCoordinate(node2);
  }, 0);
}
function getScrollYOffset(scrollableAncestors) {
  return scrollableAncestors.reduce((acc, node2) => {
    return acc + getScrollYCoordinate(node2);
  }, 0);
}
function scrollIntoViewIfNeeded(element, measure) {
  if (measure === undefined) {
    measure = getClientRect;
  }
  if (!element) {
    return;
  }
  const {
    top,
    left,
    bottom,
    right
  } = measure(element);
  const firstScrollableAncestor = getFirstScrollableAncestor(element);
  if (!firstScrollableAncestor) {
    return;
  }
  if (bottom <= 0 || right <= 0 || top >= window.innerHeight || left >= window.innerWidth) {
    element.scrollIntoView({
      block: "center",
      inline: "center"
    });
  }
}
var properties = [["x", ["left", "right"], getScrollXOffset], ["y", ["top", "bottom"], getScrollYOffset]];

class Rect {
  constructor(rect, element) {
    this.rect = undefined;
    this.width = undefined;
    this.height = undefined;
    this.top = undefined;
    this.bottom = undefined;
    this.right = undefined;
    this.left = undefined;
    const scrollableAncestors = getScrollableAncestors(element);
    const scrollOffsets = getScrollOffsets(scrollableAncestors);
    this.rect = {
      ...rect
    };
    this.width = rect.width;
    this.height = rect.height;
    for (const [axis, keys2, getScrollOffset] of properties) {
      for (const key of keys2) {
        Object.defineProperty(this, key, {
          get: () => {
            const currentOffsets = getScrollOffset(scrollableAncestors);
            const scrollOffsetsDeltla = scrollOffsets[axis] - currentOffsets;
            return this.rect[key] + scrollOffsetsDeltla;
          },
          enumerable: true
        });
      }
    }
    Object.defineProperty(this, "rect", {
      enumerable: false
    });
  }
}

class Listeners {
  constructor(target) {
    this.target = undefined;
    this.listeners = [];
    this.removeAll = () => {
      this.listeners.forEach((listener) => {
        var _this$target;
        return (_this$target = this.target) == null ? undefined : _this$target.removeEventListener(...listener);
      });
    };
    this.target = target;
  }
  add(eventName, handler, options) {
    var _this$target2;
    (_this$target2 = this.target) == null || _this$target2.addEventListener(eventName, handler, options);
    this.listeners.push([eventName, handler, options]);
  }
}
function getEventListenerTarget(target) {
  const {
    EventTarget
  } = getWindow2(target);
  return target instanceof EventTarget ? target : getOwnerDocument(target);
}
function hasExceededDistance(delta, measurement) {
  const dx = Math.abs(delta.x);
  const dy = Math.abs(delta.y);
  if (typeof measurement === "number") {
    return Math.sqrt(dx ** 2 + dy ** 2) > measurement;
  }
  if ("x" in measurement && "y" in measurement) {
    return dx > measurement.x && dy > measurement.y;
  }
  if ("x" in measurement) {
    return dx > measurement.x;
  }
  if ("y" in measurement) {
    return dy > measurement.y;
  }
  return false;
}
var EventName;
(function(EventName2) {
  EventName2["Click"] = "click";
  EventName2["DragStart"] = "dragstart";
  EventName2["Keydown"] = "keydown";
  EventName2["ContextMenu"] = "contextmenu";
  EventName2["Resize"] = "resize";
  EventName2["SelectionChange"] = "selectionchange";
  EventName2["VisibilityChange"] = "visibilitychange";
})(EventName || (EventName = {}));
function preventDefault(event) {
  event.preventDefault();
}
function stopPropagation(event) {
  event.stopPropagation();
}
var KeyboardCode;
(function(KeyboardCode2) {
  KeyboardCode2["Space"] = "Space";
  KeyboardCode2["Down"] = "ArrowDown";
  KeyboardCode2["Right"] = "ArrowRight";
  KeyboardCode2["Left"] = "ArrowLeft";
  KeyboardCode2["Up"] = "ArrowUp";
  KeyboardCode2["Esc"] = "Escape";
  KeyboardCode2["Enter"] = "Enter";
  KeyboardCode2["Tab"] = "Tab";
})(KeyboardCode || (KeyboardCode = {}));
var defaultKeyboardCodes = {
  start: [KeyboardCode.Space, KeyboardCode.Enter],
  cancel: [KeyboardCode.Esc],
  end: [KeyboardCode.Space, KeyboardCode.Enter, KeyboardCode.Tab]
};
var defaultKeyboardCoordinateGetter = (event, _ref) => {
  let {
    currentCoordinates
  } = _ref;
  switch (event.code) {
    case KeyboardCode.Right:
      return {
        ...currentCoordinates,
        x: currentCoordinates.x + 25
      };
    case KeyboardCode.Left:
      return {
        ...currentCoordinates,
        x: currentCoordinates.x - 25
      };
    case KeyboardCode.Down:
      return {
        ...currentCoordinates,
        y: currentCoordinates.y + 25
      };
    case KeyboardCode.Up:
      return {
        ...currentCoordinates,
        y: currentCoordinates.y - 25
      };
  }
  return;
};

class KeyboardSensor {
  constructor(props) {
    this.props = undefined;
    this.autoScrollEnabled = false;
    this.referenceCoordinates = undefined;
    this.listeners = undefined;
    this.windowListeners = undefined;
    this.props = props;
    const {
      event: {
        target
      }
    } = props;
    this.props = props;
    this.listeners = new Listeners(getOwnerDocument(target));
    this.windowListeners = new Listeners(getWindow2(target));
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.attach();
  }
  attach() {
    this.handleStart();
    this.windowListeners.add(EventName.Resize, this.handleCancel);
    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
    setTimeout(() => this.listeners.add(EventName.Keydown, this.handleKeyDown));
  }
  handleStart() {
    const {
      activeNode,
      onStart
    } = this.props;
    const node2 = activeNode.node.current;
    if (node2) {
      scrollIntoViewIfNeeded(node2);
    }
    onStart(defaultCoordinates);
  }
  handleKeyDown(event) {
    if (isKeyboardEvent(event)) {
      const {
        active,
        context,
        options
      } = this.props;
      const {
        keyboardCodes = defaultKeyboardCodes,
        coordinateGetter = defaultKeyboardCoordinateGetter,
        scrollBehavior = "smooth"
      } = options;
      const {
        code
      } = event;
      if (keyboardCodes.end.includes(code)) {
        this.handleEnd(event);
        return;
      }
      if (keyboardCodes.cancel.includes(code)) {
        this.handleCancel(event);
        return;
      }
      const {
        collisionRect
      } = context.current;
      const currentCoordinates = collisionRect ? {
        x: collisionRect.left,
        y: collisionRect.top
      } : defaultCoordinates;
      if (!this.referenceCoordinates) {
        this.referenceCoordinates = currentCoordinates;
      }
      const newCoordinates = coordinateGetter(event, {
        active,
        context: context.current,
        currentCoordinates
      });
      if (newCoordinates) {
        const coordinatesDelta = subtract(newCoordinates, currentCoordinates);
        const scrollDelta = {
          x: 0,
          y: 0
        };
        const {
          scrollableAncestors
        } = context.current;
        for (const scrollContainer of scrollableAncestors) {
          const direction = event.code;
          const {
            isTop,
            isRight,
            isLeft,
            isBottom,
            maxScroll,
            minScroll
          } = getScrollPosition(scrollContainer);
          const scrollElementRect = getScrollElementRect(scrollContainer);
          const clampedCoordinates = {
            x: Math.min(direction === KeyboardCode.Right ? scrollElementRect.right - scrollElementRect.width / 2 : scrollElementRect.right, Math.max(direction === KeyboardCode.Right ? scrollElementRect.left : scrollElementRect.left + scrollElementRect.width / 2, newCoordinates.x)),
            y: Math.min(direction === KeyboardCode.Down ? scrollElementRect.bottom - scrollElementRect.height / 2 : scrollElementRect.bottom, Math.max(direction === KeyboardCode.Down ? scrollElementRect.top : scrollElementRect.top + scrollElementRect.height / 2, newCoordinates.y))
          };
          const canScrollX = direction === KeyboardCode.Right && !isRight || direction === KeyboardCode.Left && !isLeft;
          const canScrollY = direction === KeyboardCode.Down && !isBottom || direction === KeyboardCode.Up && !isTop;
          if (canScrollX && clampedCoordinates.x !== newCoordinates.x) {
            const newScrollCoordinates = scrollContainer.scrollLeft + coordinatesDelta.x;
            const canScrollToNewCoordinates = direction === KeyboardCode.Right && newScrollCoordinates <= maxScroll.x || direction === KeyboardCode.Left && newScrollCoordinates >= minScroll.x;
            if (canScrollToNewCoordinates && !coordinatesDelta.y) {
              scrollContainer.scrollTo({
                left: newScrollCoordinates,
                behavior: scrollBehavior
              });
              return;
            }
            if (canScrollToNewCoordinates) {
              scrollDelta.x = scrollContainer.scrollLeft - newScrollCoordinates;
            } else {
              scrollDelta.x = direction === KeyboardCode.Right ? scrollContainer.scrollLeft - maxScroll.x : scrollContainer.scrollLeft - minScroll.x;
            }
            if (scrollDelta.x) {
              scrollContainer.scrollBy({
                left: -scrollDelta.x,
                behavior: scrollBehavior
              });
            }
            break;
          } else if (canScrollY && clampedCoordinates.y !== newCoordinates.y) {
            const newScrollCoordinates = scrollContainer.scrollTop + coordinatesDelta.y;
            const canScrollToNewCoordinates = direction === KeyboardCode.Down && newScrollCoordinates <= maxScroll.y || direction === KeyboardCode.Up && newScrollCoordinates >= minScroll.y;
            if (canScrollToNewCoordinates && !coordinatesDelta.x) {
              scrollContainer.scrollTo({
                top: newScrollCoordinates,
                behavior: scrollBehavior
              });
              return;
            }
            if (canScrollToNewCoordinates) {
              scrollDelta.y = scrollContainer.scrollTop - newScrollCoordinates;
            } else {
              scrollDelta.y = direction === KeyboardCode.Down ? scrollContainer.scrollTop - maxScroll.y : scrollContainer.scrollTop - minScroll.y;
            }
            if (scrollDelta.y) {
              scrollContainer.scrollBy({
                top: -scrollDelta.y,
                behavior: scrollBehavior
              });
            }
            break;
          }
        }
        this.handleMove(event, add(subtract(newCoordinates, this.referenceCoordinates), scrollDelta));
      }
    }
  }
  handleMove(event, coordinates) {
    const {
      onMove
    } = this.props;
    event.preventDefault();
    onMove(coordinates);
  }
  handleEnd(event) {
    const {
      onEnd
    } = this.props;
    event.preventDefault();
    this.detach();
    onEnd();
  }
  handleCancel(event) {
    const {
      onCancel
    } = this.props;
    event.preventDefault();
    this.detach();
    onCancel();
  }
  detach() {
    this.listeners.removeAll();
    this.windowListeners.removeAll();
  }
}
KeyboardSensor.activators = [{
  eventName: "onKeyDown",
  handler: (event, _ref, _ref2) => {
    let {
      keyboardCodes = defaultKeyboardCodes,
      onActivation
    } = _ref;
    let {
      active
    } = _ref2;
    const {
      code
    } = event.nativeEvent;
    if (keyboardCodes.start.includes(code)) {
      const activator = active.activatorNode.current;
      if (activator && event.target !== activator) {
        return false;
      }
      event.preventDefault();
      onActivation == null || onActivation({
        event: event.nativeEvent
      });
      return true;
    }
    return false;
  }
}];
function isDistanceConstraint(constraint) {
  return Boolean(constraint && "distance" in constraint);
}
function isDelayConstraint(constraint) {
  return Boolean(constraint && "delay" in constraint);
}

class AbstractPointerSensor {
  constructor(props, events, listenerTarget) {
    var _getEventCoordinates;
    if (listenerTarget === undefined) {
      listenerTarget = getEventListenerTarget(props.event.target);
    }
    this.props = undefined;
    this.events = undefined;
    this.autoScrollEnabled = true;
    this.document = undefined;
    this.activated = false;
    this.initialCoordinates = undefined;
    this.timeoutId = null;
    this.listeners = undefined;
    this.documentListeners = undefined;
    this.windowListeners = undefined;
    this.props = props;
    this.events = events;
    const {
      event
    } = props;
    const {
      target
    } = event;
    this.props = props;
    this.events = events;
    this.document = getOwnerDocument(target);
    this.documentListeners = new Listeners(this.document);
    this.listeners = new Listeners(listenerTarget);
    this.windowListeners = new Listeners(getWindow2(target));
    this.initialCoordinates = (_getEventCoordinates = getEventCoordinates(event)) != null ? _getEventCoordinates : defaultCoordinates;
    this.handleStart = this.handleStart.bind(this);
    this.handleMove = this.handleMove.bind(this);
    this.handleEnd = this.handleEnd.bind(this);
    this.handleCancel = this.handleCancel.bind(this);
    this.handleKeydown = this.handleKeydown.bind(this);
    this.removeTextSelection = this.removeTextSelection.bind(this);
    this.attach();
  }
  attach() {
    const {
      events,
      props: {
        options: {
          activationConstraint,
          bypassActivationConstraint
        }
      }
    } = this;
    this.listeners.add(events.move.name, this.handleMove, {
      passive: false
    });
    this.listeners.add(events.end.name, this.handleEnd);
    if (events.cancel) {
      this.listeners.add(events.cancel.name, this.handleCancel);
    }
    this.windowListeners.add(EventName.Resize, this.handleCancel);
    this.windowListeners.add(EventName.DragStart, preventDefault);
    this.windowListeners.add(EventName.VisibilityChange, this.handleCancel);
    this.windowListeners.add(EventName.ContextMenu, preventDefault);
    this.documentListeners.add(EventName.Keydown, this.handleKeydown);
    if (activationConstraint) {
      if (bypassActivationConstraint != null && bypassActivationConstraint({
        event: this.props.event,
        activeNode: this.props.activeNode,
        options: this.props.options
      })) {
        return this.handleStart();
      }
      if (isDelayConstraint(activationConstraint)) {
        this.timeoutId = setTimeout(this.handleStart, activationConstraint.delay);
        this.handlePending(activationConstraint);
        return;
      }
      if (isDistanceConstraint(activationConstraint)) {
        this.handlePending(activationConstraint);
        return;
      }
    }
    this.handleStart();
  }
  detach() {
    this.listeners.removeAll();
    this.windowListeners.removeAll();
    setTimeout(this.documentListeners.removeAll, 50);
    if (this.timeoutId !== null) {
      clearTimeout(this.timeoutId);
      this.timeoutId = null;
    }
  }
  handlePending(constraint, offset4) {
    const {
      active,
      onPending
    } = this.props;
    onPending(active, constraint, this.initialCoordinates, offset4);
  }
  handleStart() {
    const {
      initialCoordinates
    } = this;
    const {
      onStart
    } = this.props;
    if (initialCoordinates) {
      this.activated = true;
      this.documentListeners.add(EventName.Click, stopPropagation, {
        capture: true
      });
      this.removeTextSelection();
      this.documentListeners.add(EventName.SelectionChange, this.removeTextSelection);
      onStart(initialCoordinates);
    }
  }
  handleMove(event) {
    var _getEventCoordinates2;
    const {
      activated,
      initialCoordinates,
      props
    } = this;
    const {
      onMove,
      options: {
        activationConstraint
      }
    } = props;
    if (!initialCoordinates) {
      return;
    }
    const coordinates = (_getEventCoordinates2 = getEventCoordinates(event)) != null ? _getEventCoordinates2 : defaultCoordinates;
    const delta = subtract(initialCoordinates, coordinates);
    if (!activated && activationConstraint) {
      if (isDistanceConstraint(activationConstraint)) {
        if (activationConstraint.tolerance != null && hasExceededDistance(delta, activationConstraint.tolerance)) {
          return this.handleCancel();
        }
        if (hasExceededDistance(delta, activationConstraint.distance)) {
          return this.handleStart();
        }
      }
      if (isDelayConstraint(activationConstraint)) {
        if (hasExceededDistance(delta, activationConstraint.tolerance)) {
          return this.handleCancel();
        }
      }
      this.handlePending(activationConstraint, delta);
      return;
    }
    if (event.cancelable) {
      event.preventDefault();
    }
    onMove(coordinates);
  }
  handleEnd() {
    const {
      onAbort,
      onEnd
    } = this.props;
    this.detach();
    if (!this.activated) {
      onAbort(this.props.active);
    }
    onEnd();
  }
  handleCancel() {
    const {
      onAbort,
      onCancel
    } = this.props;
    this.detach();
    if (!this.activated) {
      onAbort(this.props.active);
    }
    onCancel();
  }
  handleKeydown(event) {
    if (event.code === KeyboardCode.Esc) {
      this.handleCancel();
    }
  }
  removeTextSelection() {
    var _this$document$getSel;
    (_this$document$getSel = this.document.getSelection()) == null || _this$document$getSel.removeAllRanges();
  }
}
var events = {
  cancel: {
    name: "pointercancel"
  },
  move: {
    name: "pointermove"
  },
  end: {
    name: "pointerup"
  }
};

class PointerSensor extends AbstractPointerSensor {
  constructor(props) {
    const {
      event
    } = props;
    const listenerTarget = getOwnerDocument(event.target);
    super(props, events, listenerTarget);
  }
}
PointerSensor.activators = [{
  eventName: "onPointerDown",
  handler: (_ref, _ref2) => {
    let {
      nativeEvent: event
    } = _ref;
    let {
      onActivation
    } = _ref2;
    if (!event.isPrimary || event.button !== 0) {
      return false;
    }
    onActivation == null || onActivation({
      event
    });
    return true;
  }
}];
var events$1 = {
  move: {
    name: "mousemove"
  },
  end: {
    name: "mouseup"
  }
};
var MouseButton;
(function(MouseButton2) {
  MouseButton2[MouseButton2["RightClick"] = 2] = "RightClick";
})(MouseButton || (MouseButton = {}));

class MouseSensor extends AbstractPointerSensor {
  constructor(props) {
    super(props, events$1, getOwnerDocument(props.event.target));
  }
}
MouseSensor.activators = [{
  eventName: "onMouseDown",
  handler: (_ref, _ref2) => {
    let {
      nativeEvent: event
    } = _ref;
    let {
      onActivation
    } = _ref2;
    if (event.button === MouseButton.RightClick) {
      return false;
    }
    onActivation == null || onActivation({
      event
    });
    return true;
  }
}];
var events$2 = {
  cancel: {
    name: "touchcancel"
  },
  move: {
    name: "touchmove"
  },
  end: {
    name: "touchend"
  }
};

class TouchSensor extends AbstractPointerSensor {
  constructor(props) {
    super(props, events$2);
  }
  static setup() {
    window.addEventListener(events$2.move.name, noop8, {
      capture: false,
      passive: false
    });
    return function teardown() {
      window.removeEventListener(events$2.move.name, noop8);
    };
    function noop8() {
    }
  }
}
TouchSensor.activators = [{
  eventName: "onTouchStart",
  handler: (_ref, _ref2) => {
    let {
      nativeEvent: event
    } = _ref;
    let {
      onActivation
    } = _ref2;
    const {
      touches
    } = event;
    if (touches.length > 1) {
      return false;
    }
    onActivation == null || onActivation({
      event
    });
    return true;
  }
}];
var AutoScrollActivator;
(function(AutoScrollActivator2) {
  AutoScrollActivator2[AutoScrollActivator2["Pointer"] = 0] = "Pointer";
  AutoScrollActivator2[AutoScrollActivator2["DraggableRect"] = 1] = "DraggableRect";
})(AutoScrollActivator || (AutoScrollActivator = {}));
var TraversalOrder;
(function(TraversalOrder2) {
  TraversalOrder2[TraversalOrder2["TreeOrder"] = 0] = "TreeOrder";
  TraversalOrder2[TraversalOrder2["ReversedTreeOrder"] = 1] = "ReversedTreeOrder";
})(TraversalOrder || (TraversalOrder = {}));
function useAutoScroller(_ref) {
  let {
    acceleration,
    activator = AutoScrollActivator.Pointer,
    canScroll,
    draggingRect,
    enabled,
    interval = 5,
    order = TraversalOrder.TreeOrder,
    pointerCoordinates,
    scrollableAncestors,
    scrollableAncestorRects,
    delta,
    threshold
  } = _ref;
  const scrollIntent = useScrollIntent({
    delta,
    disabled: !enabled
  });
  const [setAutoScrollInterval, clearAutoScrollInterval] = useInterval();
  const scrollSpeed = import_react240.useRef({
    x: 0,
    y: 0
  });
  const scrollDirection = import_react240.useRef({
    x: 0,
    y: 0
  });
  const rect = import_react240.useMemo(() => {
    switch (activator) {
      case AutoScrollActivator.Pointer:
        return pointerCoordinates ? {
          top: pointerCoordinates.y,
          bottom: pointerCoordinates.y,
          left: pointerCoordinates.x,
          right: pointerCoordinates.x
        } : null;
      case AutoScrollActivator.DraggableRect:
        return draggingRect;
    }
  }, [activator, draggingRect, pointerCoordinates]);
  const scrollContainerRef = import_react240.useRef(null);
  const autoScroll = import_react240.useCallback(() => {
    const scrollContainer = scrollContainerRef.current;
    if (!scrollContainer) {
      return;
    }
    const scrollLeft = scrollSpeed.current.x * scrollDirection.current.x;
    const scrollTop = scrollSpeed.current.y * scrollDirection.current.y;
    scrollContainer.scrollBy(scrollLeft, scrollTop);
  }, []);
  const sortedScrollableAncestors = import_react240.useMemo(() => order === TraversalOrder.TreeOrder ? [...scrollableAncestors].reverse() : scrollableAncestors, [order, scrollableAncestors]);
  import_react240.useEffect(() => {
    if (!enabled || !scrollableAncestors.length || !rect) {
      clearAutoScrollInterval();
      return;
    }
    for (const scrollContainer of sortedScrollableAncestors) {
      if ((canScroll == null ? undefined : canScroll(scrollContainer)) === false) {
        continue;
      }
      const index4 = scrollableAncestors.indexOf(scrollContainer);
      const scrollContainerRect = scrollableAncestorRects[index4];
      if (!scrollContainerRect) {
        continue;
      }
      const {
        direction,
        speed
      } = getScrollDirectionAndSpeed(scrollContainer, scrollContainerRect, rect, acceleration, threshold);
      for (const axis of ["x", "y"]) {
        if (!scrollIntent[axis][direction[axis]]) {
          speed[axis] = 0;
          direction[axis] = 0;
        }
      }
      if (speed.x > 0 || speed.y > 0) {
        clearAutoScrollInterval();
        scrollContainerRef.current = scrollContainer;
        setAutoScrollInterval(autoScroll, interval);
        scrollSpeed.current = speed;
        scrollDirection.current = direction;
        return;
      }
    }
    scrollSpeed.current = {
      x: 0,
      y: 0
    };
    scrollDirection.current = {
      x: 0,
      y: 0
    };
    clearAutoScrollInterval();
  }, [
    acceleration,
    autoScroll,
    canScroll,
    clearAutoScrollInterval,
    enabled,
    interval,
    JSON.stringify(rect),
    JSON.stringify(scrollIntent),
    setAutoScrollInterval,
    scrollableAncestors,
    sortedScrollableAncestors,
    scrollableAncestorRects,
    JSON.stringify(threshold)
  ]);
}
var defaultScrollIntent = {
  x: {
    [Direction.Backward]: false,
    [Direction.Forward]: false
  },
  y: {
    [Direction.Backward]: false,
    [Direction.Forward]: false
  }
};
function useScrollIntent(_ref2) {
  let {
    delta,
    disabled
  } = _ref2;
  const previousDelta = usePrevious2(delta);
  return useLazyMemo((previousIntent) => {
    if (disabled || !previousDelta || !previousIntent) {
      return defaultScrollIntent;
    }
    const direction = {
      x: Math.sign(delta.x - previousDelta.x),
      y: Math.sign(delta.y - previousDelta.y)
    };
    return {
      x: {
        [Direction.Backward]: previousIntent.x[Direction.Backward] || direction.x === -1,
        [Direction.Forward]: previousIntent.x[Direction.Forward] || direction.x === 1
      },
      y: {
        [Direction.Backward]: previousIntent.y[Direction.Backward] || direction.y === -1,
        [Direction.Forward]: previousIntent.y[Direction.Forward] || direction.y === 1
      }
    };
  }, [disabled, delta, previousDelta]);
}
function useCachedNode(draggableNodes, id) {
  const draggableNode = id != null ? draggableNodes.get(id) : undefined;
  const node2 = draggableNode ? draggableNode.node.current : null;
  return useLazyMemo((cachedNode) => {
    var _ref;
    if (id == null) {
      return null;
    }
    return (_ref = node2 != null ? node2 : cachedNode) != null ? _ref : null;
  }, [node2, id]);
}
function useCombineActivators(sensors, getSyntheticHandler) {
  return import_react240.useMemo(() => sensors.reduce((accumulator, sensor) => {
    const {
      sensor: Sensor
    } = sensor;
    const sensorActivators = Sensor.activators.map((activator) => ({
      eventName: activator.eventName,
      handler: getSyntheticHandler(activator.handler, sensor)
    }));
    return [...accumulator, ...sensorActivators];
  }, []), [sensors, getSyntheticHandler]);
}
var MeasuringStrategy;
(function(MeasuringStrategy2) {
  MeasuringStrategy2[MeasuringStrategy2["Always"] = 0] = "Always";
  MeasuringStrategy2[MeasuringStrategy2["BeforeDragging"] = 1] = "BeforeDragging";
  MeasuringStrategy2[MeasuringStrategy2["WhileDragging"] = 2] = "WhileDragging";
})(MeasuringStrategy || (MeasuringStrategy = {}));
var MeasuringFrequency;
(function(MeasuringFrequency2) {
  MeasuringFrequency2["Optimized"] = "optimized";
})(MeasuringFrequency || (MeasuringFrequency = {}));
var defaultValue = /* @__PURE__ */ new Map;
function useDroppableMeasuring(containers, _ref) {
  let {
    dragging,
    dependencies,
    config
  } = _ref;
  const [queue, setQueue] = import_react240.useState(null);
  const {
    frequency,
    measure,
    strategy
  } = config;
  const containersRef = import_react240.useRef(containers);
  const disabled = isDisabled();
  const disabledRef = useLatestValue(disabled);
  const measureDroppableContainers = import_react240.useCallback(function(ids2) {
    if (ids2 === undefined) {
      ids2 = [];
    }
    if (disabledRef.current) {
      return;
    }
    setQueue((value) => {
      if (value === null) {
        return ids2;
      }
      return value.concat(ids2.filter((id) => !value.includes(id)));
    });
  }, [disabledRef]);
  const timeoutId = import_react240.useRef(null);
  const droppableRects = useLazyMemo((previousValue) => {
    if (disabled && !dragging) {
      return defaultValue;
    }
    if (!previousValue || previousValue === defaultValue || containersRef.current !== containers || queue != null) {
      const map = new Map;
      for (let container of containers) {
        if (!container) {
          continue;
        }
        if (queue && queue.length > 0 && !queue.includes(container.id) && container.rect.current) {
          map.set(container.id, container.rect.current);
          continue;
        }
        const node2 = container.node.current;
        const rect = node2 ? new Rect(measure(node2), node2) : null;
        container.rect.current = rect;
        if (rect) {
          map.set(container.id, rect);
        }
      }
      return map;
    }
    return previousValue;
  }, [containers, queue, dragging, disabled, measure]);
  import_react240.useEffect(() => {
    containersRef.current = containers;
  }, [containers]);
  import_react240.useEffect(() => {
    if (disabled) {
      return;
    }
    measureDroppableContainers();
  }, [dragging, disabled]);
  import_react240.useEffect(() => {
    if (queue && queue.length > 0) {
      setQueue(null);
    }
  }, [JSON.stringify(queue)]);
  import_react240.useEffect(() => {
    if (disabled || typeof frequency !== "number" || timeoutId.current !== null) {
      return;
    }
    timeoutId.current = setTimeout(() => {
      measureDroppableContainers();
      timeoutId.current = null;
    }, frequency);
  }, [frequency, disabled, measureDroppableContainers, ...dependencies]);
  return {
    droppableRects,
    measureDroppableContainers,
    measuringScheduled: queue != null
  };
  function isDisabled() {
    switch (strategy) {
      case MeasuringStrategy.Always:
        return false;
      case MeasuringStrategy.BeforeDragging:
        return dragging;
      default:
        return !dragging;
    }
  }
}
function useInitialValue(value, computeFn) {
  return useLazyMemo((previousValue) => {
    if (!value) {
      return null;
    }
    if (previousValue) {
      return previousValue;
    }
    return typeof computeFn === "function" ? computeFn(value) : value;
  }, [computeFn, value]);
}
function useInitialRect(node2, measure) {
  return useInitialValue(node2, measure);
}
function useMutationObserver(_ref) {
  let {
    callback,
    disabled
  } = _ref;
  const handleMutations = useEvent(callback);
  const mutationObserver = import_react240.useMemo(() => {
    if (disabled || typeof window === "undefined" || typeof window.MutationObserver === "undefined") {
      return;
    }
    const {
      MutationObserver: MutationObserver2
    } = window;
    return new MutationObserver2(handleMutations);
  }, [handleMutations, disabled]);
  import_react240.useEffect(() => {
    return () => mutationObserver == null ? undefined : mutationObserver.disconnect();
  }, [mutationObserver]);
  return mutationObserver;
}
function useResizeObserver2(_ref) {
  let {
    callback,
    disabled
  } = _ref;
  const handleResize = useEvent(callback);
  const resizeObserver = import_react240.useMemo(() => {
    if (disabled || typeof window === "undefined" || typeof window.ResizeObserver === "undefined") {
      return;
    }
    const {
      ResizeObserver: ResizeObserver2
    } = window;
    return new ResizeObserver2(handleResize);
  }, [disabled]);
  import_react240.useEffect(() => {
    return () => resizeObserver == null ? undefined : resizeObserver.disconnect();
  }, [resizeObserver]);
  return resizeObserver;
}
function defaultMeasure(element) {
  return new Rect(getClientRect(element), element);
}
function useRect(element, measure, fallbackRect) {
  if (measure === undefined) {
    measure = defaultMeasure;
  }
  const [rect, setRect] = import_react240.useState(null);
  function measureRect() {
    setRect((currentRect) => {
      if (!element) {
        return null;
      }
      if (element.isConnected === false) {
        var _ref;
        return (_ref = currentRect != null ? currentRect : fallbackRect) != null ? _ref : null;
      }
      const newRect = measure(element);
      if (JSON.stringify(currentRect) === JSON.stringify(newRect)) {
        return currentRect;
      }
      return newRect;
    });
  }
  const mutationObserver = useMutationObserver({
    callback(records) {
      if (!element) {
        return;
      }
      for (const record of records) {
        const {
          type,
          target
        } = record;
        if (type === "childList" && target instanceof HTMLElement && target.contains(element)) {
          measureRect();
          break;
        }
      }
    }
  });
  const resizeObserver = useResizeObserver2({
    callback: measureRect
  });
  useIsomorphicLayoutEffect2(() => {
    measureRect();
    if (element) {
      resizeObserver == null || resizeObserver.observe(element);
      mutationObserver == null || mutationObserver.observe(document.body, {
        childList: true,
        subtree: true
      });
    } else {
      resizeObserver == null || resizeObserver.disconnect();
      mutationObserver == null || mutationObserver.disconnect();
    }
  }, [element]);
  return rect;
}
function useRectDelta(rect) {
  const initialRect = useInitialValue(rect);
  return getRectDelta(rect, initialRect);
}
var defaultValue$1 = [];
function useScrollableAncestors(node2) {
  const previousNode = import_react240.useRef(node2);
  const ancestors = useLazyMemo((previousValue) => {
    if (!node2) {
      return defaultValue$1;
    }
    if (previousValue && previousValue !== defaultValue$1 && node2 && previousNode.current && node2.parentNode === previousNode.current.parentNode) {
      return previousValue;
    }
    return getScrollableAncestors(node2);
  }, [node2]);
  import_react240.useEffect(() => {
    previousNode.current = node2;
  }, [node2]);
  return ancestors;
}
function useScrollOffsets(elements) {
  const [scrollCoordinates, setScrollCoordinates] = import_react240.useState(null);
  const prevElements = import_react240.useRef(elements);
  const handleScroll2 = import_react240.useCallback((event) => {
    const scrollingElement = getScrollableElement(event.target);
    if (!scrollingElement) {
      return;
    }
    setScrollCoordinates((scrollCoordinates2) => {
      if (!scrollCoordinates2) {
        return null;
      }
      scrollCoordinates2.set(scrollingElement, getScrollCoordinates(scrollingElement));
      return new Map(scrollCoordinates2);
    });
  }, []);
  import_react240.useEffect(() => {
    const previousElements = prevElements.current;
    if (elements !== previousElements) {
      cleanup(previousElements);
      const entries = elements.map((element) => {
        const scrollableElement = getScrollableElement(element);
        if (scrollableElement) {
          scrollableElement.addEventListener("scroll", handleScroll2, {
            passive: true
          });
          return [scrollableElement, getScrollCoordinates(scrollableElement)];
        }
        return null;
      }).filter((entry) => entry != null);
      setScrollCoordinates(entries.length ? new Map(entries) : null);
      prevElements.current = elements;
    }
    return () => {
      cleanup(elements);
      cleanup(previousElements);
    };
    function cleanup(elements2) {
      elements2.forEach((element) => {
        const scrollableElement = getScrollableElement(element);
        scrollableElement == null || scrollableElement.removeEventListener("scroll", handleScroll2);
      });
    }
  }, [handleScroll2, elements]);
  return import_react240.useMemo(() => {
    if (elements.length) {
      return scrollCoordinates ? Array.from(scrollCoordinates.values()).reduce((acc, coordinates) => add(acc, coordinates), defaultCoordinates) : getScrollOffsets(elements);
    }
    return defaultCoordinates;
  }, [elements, scrollCoordinates]);
}
function useScrollOffsetsDelta(scrollOffsets, dependencies) {
  if (dependencies === undefined) {
    dependencies = [];
  }
  const initialScrollOffsets = import_react240.useRef(null);
  import_react240.useEffect(() => {
    initialScrollOffsets.current = null;
  }, dependencies);
  import_react240.useEffect(() => {
    const hasScrollOffsets = scrollOffsets !== defaultCoordinates;
    if (hasScrollOffsets && !initialScrollOffsets.current) {
      initialScrollOffsets.current = scrollOffsets;
    }
    if (!hasScrollOffsets && initialScrollOffsets.current) {
      initialScrollOffsets.current = null;
    }
  }, [scrollOffsets]);
  return initialScrollOffsets.current ? subtract(scrollOffsets, initialScrollOffsets.current) : defaultCoordinates;
}
function useSensorSetup(sensors) {
  import_react240.useEffect(() => {
    if (!canUseDOM2) {
      return;
    }
    const teardownFns = sensors.map((_ref) => {
      let {
        sensor
      } = _ref;
      return sensor.setup == null ? undefined : sensor.setup();
    });
    return () => {
      for (const teardown of teardownFns) {
        teardown == null || teardown();
      }
    };
  }, sensors.map((_ref2) => {
    let {
      sensor
    } = _ref2;
    return sensor;
  }));
}
function useSyntheticListeners(listeners, id) {
  return import_react240.useMemo(() => {
    return listeners.reduce((acc, _ref) => {
      let {
        eventName,
        handler
      } = _ref;
      acc[eventName] = (event) => {
        handler(event, id);
      };
      return acc;
    }, {});
  }, [listeners, id]);
}
function useWindowRect(element) {
  return import_react240.useMemo(() => element ? getWindowClientRect(element) : null, [element]);
}
var defaultValue$2 = [];
function useRects(elements, measure) {
  if (measure === undefined) {
    measure = getClientRect;
  }
  const [firstElement] = elements;
  const windowRect = useWindowRect(firstElement ? getWindow2(firstElement) : null);
  const [rects, setRects] = import_react240.useState(defaultValue$2);
  function measureRects() {
    setRects(() => {
      if (!elements.length) {
        return defaultValue$2;
      }
      return elements.map((element) => isDocumentScrollingElement(element) ? windowRect : new Rect(measure(element), element));
    });
  }
  const resizeObserver = useResizeObserver2({
    callback: measureRects
  });
  useIsomorphicLayoutEffect2(() => {
    resizeObserver == null || resizeObserver.disconnect();
    measureRects();
    elements.forEach((element) => resizeObserver == null ? undefined : resizeObserver.observe(element));
  }, [elements]);
  return rects;
}
function getMeasurableNode(node2) {
  if (!node2) {
    return null;
  }
  if (node2.children.length > 1) {
    return node2;
  }
  const firstChild = node2.children[0];
  return isHTMLElement2(firstChild) ? firstChild : node2;
}
function useDragOverlayMeasuring(_ref) {
  let {
    measure
  } = _ref;
  const [rect, setRect] = import_react240.useState(null);
  const handleResize = import_react240.useCallback((entries) => {
    for (const {
      target
    } of entries) {
      if (isHTMLElement2(target)) {
        setRect((rect2) => {
          const newRect = measure(target);
          return rect2 ? {
            ...rect2,
            width: newRect.width,
            height: newRect.height
          } : newRect;
        });
        break;
      }
    }
  }, [measure]);
  const resizeObserver = useResizeObserver2({
    callback: handleResize
  });
  const handleNodeChange = import_react240.useCallback((element) => {
    const node2 = getMeasurableNode(element);
    resizeObserver == null || resizeObserver.disconnect();
    if (node2) {
      resizeObserver == null || resizeObserver.observe(node2);
    }
    setRect(node2 ? measure(node2) : null);
  }, [measure, resizeObserver]);
  const [nodeRef, setRef] = useNodeRef(handleNodeChange);
  return import_react240.useMemo(() => ({
    nodeRef,
    rect,
    setRef
  }), [rect, nodeRef, setRef]);
}
var defaultSensors = [{
  sensor: PointerSensor,
  options: {}
}, {
  sensor: KeyboardSensor,
  options: {}
}];
var defaultData = {
  current: {}
};
var defaultMeasuringConfiguration = {
  draggable: {
    measure: getTransformAgnosticClientRect
  },
  droppable: {
    measure: getTransformAgnosticClientRect,
    strategy: MeasuringStrategy.WhileDragging,
    frequency: MeasuringFrequency.Optimized
  },
  dragOverlay: {
    measure: getClientRect
  }
};

class DroppableContainersMap extends Map {
  get(id) {
    var _super$get;
    return id != null ? (_super$get = super.get(id)) != null ? _super$get : undefined : undefined;
  }
  toArray() {
    return Array.from(this.values());
  }
  getEnabled() {
    return this.toArray().filter((_ref) => {
      let {
        disabled
      } = _ref;
      return !disabled;
    });
  }
  getNodeFor(id) {
    var _this$get$node$curren, _this$get;
    return (_this$get$node$curren = (_this$get = this.get(id)) == null ? undefined : _this$get.node.current) != null ? _this$get$node$curren : undefined;
  }
}
var defaultPublicContext = {
  activatorEvent: null,
  active: null,
  activeNode: null,
  activeNodeRect: null,
  collisions: null,
  containerNodeRect: null,
  draggableNodes: /* @__PURE__ */ new Map,
  droppableRects: /* @__PURE__ */ new Map,
  droppableContainers: /* @__PURE__ */ new DroppableContainersMap,
  over: null,
  dragOverlay: {
    nodeRef: {
      current: null
    },
    rect: null,
    setRef: noop7
  },
  scrollableAncestors: [],
  scrollableAncestorRects: [],
  measuringConfiguration: defaultMeasuringConfiguration,
  measureDroppableContainers: noop7,
  windowRect: null,
  measuringScheduled: false
};
var defaultInternalContext = {
  activatorEvent: null,
  activators: [],
  active: null,
  activeNodeRect: null,
  ariaDescribedById: {
    draggable: ""
  },
  dispatch: noop7,
  draggableNodes: /* @__PURE__ */ new Map,
  over: null,
  measureDroppableContainers: noop7
};
var InternalContext = /* @__PURE__ */ import_react240.createContext(defaultInternalContext);
var PublicContext = /* @__PURE__ */ import_react240.createContext(defaultPublicContext);
function getInitialState() {
  return {
    draggable: {
      active: null,
      initialCoordinates: {
        x: 0,
        y: 0
      },
      nodes: new Map,
      translate: {
        x: 0,
        y: 0
      }
    },
    droppable: {
      containers: new DroppableContainersMap
    }
  };
}
function reducer(state, action) {
  switch (action.type) {
    case Action.DragStart:
      return {
        ...state,
        draggable: {
          ...state.draggable,
          initialCoordinates: action.initialCoordinates,
          active: action.active
        }
      };
    case Action.DragMove:
      if (state.draggable.active == null) {
        return state;
      }
      return {
        ...state,
        draggable: {
          ...state.draggable,
          translate: {
            x: action.coordinates.x - state.draggable.initialCoordinates.x,
            y: action.coordinates.y - state.draggable.initialCoordinates.y
          }
        }
      };
    case Action.DragEnd:
    case Action.DragCancel:
      return {
        ...state,
        draggable: {
          ...state.draggable,
          active: null,
          initialCoordinates: {
            x: 0,
            y: 0
          },
          translate: {
            x: 0,
            y: 0
          }
        }
      };
    case Action.RegisterDroppable: {
      const {
        element
      } = action;
      const {
        id
      } = element;
      const containers = new DroppableContainersMap(state.droppable.containers);
      containers.set(id, element);
      return {
        ...state,
        droppable: {
          ...state.droppable,
          containers
        }
      };
    }
    case Action.SetDroppableDisabled: {
      const {
        id,
        key,
        disabled
      } = action;
      const element = state.droppable.containers.get(id);
      if (!element || key !== element.key) {
        return state;
      }
      const containers = new DroppableContainersMap(state.droppable.containers);
      containers.set(id, {
        ...element,
        disabled
      });
      return {
        ...state,
        droppable: {
          ...state.droppable,
          containers
        }
      };
    }
    case Action.UnregisterDroppable: {
      const {
        id,
        key
      } = action;
      const element = state.droppable.containers.get(id);
      if (!element || key !== element.key) {
        return state;
      }
      const containers = new DroppableContainersMap(state.droppable.containers);
      containers.delete(id);
      return {
        ...state,
        droppable: {
          ...state.droppable,
          containers
        }
      };
    }
    default: {
      return state;
    }
  }
}
function RestoreFocus(_ref) {
  let {
    disabled
  } = _ref;
  const {
    active,
    activatorEvent,
    draggableNodes
  } = import_react240.useContext(InternalContext);
  const previousActivatorEvent = usePrevious2(activatorEvent);
  const previousActiveId = usePrevious2(active == null ? undefined : active.id);
  import_react240.useEffect(() => {
    if (disabled) {
      return;
    }
    if (!activatorEvent && previousActivatorEvent && previousActiveId != null) {
      if (!isKeyboardEvent(previousActivatorEvent)) {
        return;
      }
      if (document.activeElement === previousActivatorEvent.target) {
        return;
      }
      const draggableNode = draggableNodes.get(previousActiveId);
      if (!draggableNode) {
        return;
      }
      const {
        activatorNode,
        node: node2
      } = draggableNode;
      if (!activatorNode.current && !node2.current) {
        return;
      }
      requestAnimationFrame(() => {
        for (const element of [activatorNode.current, node2.current]) {
          if (!element) {
            continue;
          }
          const focusableNode = findFirstFocusableNode(element);
          if (focusableNode) {
            focusableNode.focus();
            break;
          }
        }
      });
    }
  }, [activatorEvent, disabled, draggableNodes, previousActiveId, previousActivatorEvent]);
  return null;
}
function applyModifiers(modifiers, _ref) {
  let {
    transform,
    ...args
  } = _ref;
  return modifiers != null && modifiers.length ? modifiers.reduce((accumulator, modifier) => {
    return modifier({
      transform: accumulator,
      ...args
    });
  }, transform) : transform;
}
function useMeasuringConfiguration(config) {
  return import_react240.useMemo(() => ({
    draggable: {
      ...defaultMeasuringConfiguration.draggable,
      ...config == null ? undefined : config.draggable
    },
    droppable: {
      ...defaultMeasuringConfiguration.droppable,
      ...config == null ? undefined : config.droppable
    },
    dragOverlay: {
      ...defaultMeasuringConfiguration.dragOverlay,
      ...config == null ? undefined : config.dragOverlay
    }
  }), [config == null ? undefined : config.draggable, config == null ? undefined : config.droppable, config == null ? undefined : config.dragOverlay]);
}
function useLayoutShiftScrollCompensation(_ref) {
  let {
    activeNode,
    measure,
    initialRect,
    config = true
  } = _ref;
  const initialized = import_react240.useRef(false);
  const {
    x: x2,
    y: y2
  } = typeof config === "boolean" ? {
    x: config,
    y: config
  } : config;
  useIsomorphicLayoutEffect2(() => {
    const disabled = !x2 && !y2;
    if (disabled || !activeNode) {
      initialized.current = false;
      return;
    }
    if (initialized.current || !initialRect) {
      return;
    }
    const node2 = activeNode == null ? undefined : activeNode.node.current;
    if (!node2 || node2.isConnected === false) {
      return;
    }
    const rect = measure(node2);
    const rectDelta = getRectDelta(rect, initialRect);
    if (!x2) {
      rectDelta.x = 0;
    }
    if (!y2) {
      rectDelta.y = 0;
    }
    initialized.current = true;
    if (Math.abs(rectDelta.x) > 0 || Math.abs(rectDelta.y) > 0) {
      const firstScrollableAncestor = getFirstScrollableAncestor(node2);
      if (firstScrollableAncestor) {
        firstScrollableAncestor.scrollBy({
          top: rectDelta.y,
          left: rectDelta.x
        });
      }
    }
  }, [activeNode, x2, y2, initialRect, measure]);
}
var ActiveDraggableContext = /* @__PURE__ */ import_react240.createContext({
  ...defaultCoordinates,
  scaleX: 1,
  scaleY: 1
});
var Status;
(function(Status2) {
  Status2[Status2["Uninitialized"] = 0] = "Uninitialized";
  Status2[Status2["Initializing"] = 1] = "Initializing";
  Status2[Status2["Initialized"] = 2] = "Initialized";
})(Status || (Status = {}));
var DndContext = /* @__PURE__ */ import_react240.memo(function DndContext2(_ref) {
  var _sensorContext$curren, _dragOverlay$nodeRef$, _dragOverlay$rect, _over$rect;
  let {
    id,
    accessibility,
    autoScroll = true,
    children,
    sensors = defaultSensors,
    collisionDetection = rectIntersection,
    measuring,
    modifiers,
    ...props
  } = _ref;
  const store = import_react240.useReducer(reducer, undefined, getInitialState);
  const [state, dispatch] = store;
  const [dispatchMonitorEvent, registerMonitorListener] = useDndMonitorProvider();
  const [status, setStatus] = import_react240.useState(Status.Uninitialized);
  const isInitialized = status === Status.Initialized;
  const {
    draggable: {
      active: activeId,
      nodes: draggableNodes,
      translate
    },
    droppable: {
      containers: droppableContainers
    }
  } = state;
  const node2 = activeId != null ? draggableNodes.get(activeId) : null;
  const activeRects = import_react240.useRef({
    initial: null,
    translated: null
  });
  const active = import_react240.useMemo(() => {
    var _node$data;
    return activeId != null ? {
      id: activeId,
      data: (_node$data = node2 == null ? undefined : node2.data) != null ? _node$data : defaultData,
      rect: activeRects
    } : null;
  }, [activeId, node2]);
  const activeRef = import_react240.useRef(null);
  const [activeSensor, setActiveSensor] = import_react240.useState(null);
  const [activatorEvent, setActivatorEvent] = import_react240.useState(null);
  const latestProps = useLatestValue(props, Object.values(props));
  const draggableDescribedById = useUniqueId("DndDescribedBy", id);
  const enabledDroppableContainers = import_react240.useMemo(() => droppableContainers.getEnabled(), [droppableContainers]);
  const measuringConfiguration = useMeasuringConfiguration(measuring);
  const {
    droppableRects,
    measureDroppableContainers,
    measuringScheduled
  } = useDroppableMeasuring(enabledDroppableContainers, {
    dragging: isInitialized,
    dependencies: [translate.x, translate.y],
    config: measuringConfiguration.droppable
  });
  const activeNode = useCachedNode(draggableNodes, activeId);
  const activationCoordinates = import_react240.useMemo(() => activatorEvent ? getEventCoordinates(activatorEvent) : null, [activatorEvent]);
  const autoScrollOptions = getAutoScrollerOptions();
  const initialActiveNodeRect = useInitialRect(activeNode, measuringConfiguration.draggable.measure);
  useLayoutShiftScrollCompensation({
    activeNode: activeId != null ? draggableNodes.get(activeId) : null,
    config: autoScrollOptions.layoutShiftCompensation,
    initialRect: initialActiveNodeRect,
    measure: measuringConfiguration.draggable.measure
  });
  const activeNodeRect = useRect(activeNode, measuringConfiguration.draggable.measure, initialActiveNodeRect);
  const containerNodeRect = useRect(activeNode ? activeNode.parentElement : null);
  const sensorContext = import_react240.useRef({
    activatorEvent: null,
    active: null,
    activeNode,
    collisionRect: null,
    collisions: null,
    droppableRects,
    draggableNodes,
    draggingNode: null,
    draggingNodeRect: null,
    droppableContainers,
    over: null,
    scrollableAncestors: [],
    scrollAdjustedTranslate: null
  });
  const overNode = droppableContainers.getNodeFor((_sensorContext$curren = sensorContext.current.over) == null ? undefined : _sensorContext$curren.id);
  const dragOverlay = useDragOverlayMeasuring({
    measure: measuringConfiguration.dragOverlay.measure
  });
  const draggingNode = (_dragOverlay$nodeRef$ = dragOverlay.nodeRef.current) != null ? _dragOverlay$nodeRef$ : activeNode;
  const draggingNodeRect = isInitialized ? (_dragOverlay$rect = dragOverlay.rect) != null ? _dragOverlay$rect : activeNodeRect : null;
  const usesDragOverlay = Boolean(dragOverlay.nodeRef.current && dragOverlay.rect);
  const nodeRectDelta = useRectDelta(usesDragOverlay ? null : activeNodeRect);
  const windowRect = useWindowRect(draggingNode ? getWindow2(draggingNode) : null);
  const scrollableAncestors = useScrollableAncestors(isInitialized ? overNode != null ? overNode : activeNode : null);
  const scrollableAncestorRects = useRects(scrollableAncestors);
  const modifiedTranslate = applyModifiers(modifiers, {
    transform: {
      x: translate.x - nodeRectDelta.x,
      y: translate.y - nodeRectDelta.y,
      scaleX: 1,
      scaleY: 1
    },
    activatorEvent,
    active,
    activeNodeRect,
    containerNodeRect,
    draggingNodeRect,
    over: sensorContext.current.over,
    overlayNodeRect: dragOverlay.rect,
    scrollableAncestors,
    scrollableAncestorRects,
    windowRect
  });
  const pointerCoordinates = activationCoordinates ? add(activationCoordinates, translate) : null;
  const scrollOffsets = useScrollOffsets(scrollableAncestors);
  const scrollAdjustment = useScrollOffsetsDelta(scrollOffsets);
  const activeNodeScrollDelta = useScrollOffsetsDelta(scrollOffsets, [activeNodeRect]);
  const scrollAdjustedTranslate = add(modifiedTranslate, scrollAdjustment);
  const collisionRect = draggingNodeRect ? getAdjustedRect(draggingNodeRect, modifiedTranslate) : null;
  const collisions = active && collisionRect ? collisionDetection({
    active,
    collisionRect,
    droppableRects,
    droppableContainers: enabledDroppableContainers,
    pointerCoordinates
  }) : null;
  const overId = getFirstCollision(collisions, "id");
  const [over, setOver] = import_react240.useState(null);
  const appliedTranslate = usesDragOverlay ? modifiedTranslate : add(modifiedTranslate, activeNodeScrollDelta);
  const transform = adjustScale(appliedTranslate, (_over$rect = over == null ? undefined : over.rect) != null ? _over$rect : null, activeNodeRect);
  const activeSensorRef = import_react240.useRef(null);
  const instantiateSensor = import_react240.useCallback((event, _ref2) => {
    let {
      sensor: Sensor,
      options
    } = _ref2;
    if (activeRef.current == null) {
      return;
    }
    const activeNode2 = draggableNodes.get(activeRef.current);
    if (!activeNode2) {
      return;
    }
    const activatorEvent2 = event.nativeEvent;
    const sensorInstance = new Sensor({
      active: activeRef.current,
      activeNode: activeNode2,
      event: activatorEvent2,
      options,
      context: sensorContext,
      onAbort(id2) {
        const draggableNode = draggableNodes.get(id2);
        if (!draggableNode) {
          return;
        }
        const {
          onDragAbort
        } = latestProps.current;
        const event2 = {
          id: id2
        };
        onDragAbort == null || onDragAbort(event2);
        dispatchMonitorEvent({
          type: "onDragAbort",
          event: event2
        });
      },
      onPending(id2, constraint, initialCoordinates, offset4) {
        const draggableNode = draggableNodes.get(id2);
        if (!draggableNode) {
          return;
        }
        const {
          onDragPending
        } = latestProps.current;
        const event2 = {
          id: id2,
          constraint,
          initialCoordinates,
          offset: offset4
        };
        onDragPending == null || onDragPending(event2);
        dispatchMonitorEvent({
          type: "onDragPending",
          event: event2
        });
      },
      onStart(initialCoordinates) {
        const id2 = activeRef.current;
        if (id2 == null) {
          return;
        }
        const draggableNode = draggableNodes.get(id2);
        if (!draggableNode) {
          return;
        }
        const {
          onDragStart
        } = latestProps.current;
        const event2 = {
          activatorEvent: activatorEvent2,
          active: {
            id: id2,
            data: draggableNode.data,
            rect: activeRects
          }
        };
        import_react_dom5.unstable_batchedUpdates(() => {
          onDragStart == null || onDragStart(event2);
          setStatus(Status.Initializing);
          dispatch({
            type: Action.DragStart,
            initialCoordinates,
            active: id2
          });
          dispatchMonitorEvent({
            type: "onDragStart",
            event: event2
          });
          setActiveSensor(activeSensorRef.current);
          setActivatorEvent(activatorEvent2);
        });
      },
      onMove(coordinates) {
        dispatch({
          type: Action.DragMove,
          coordinates
        });
      },
      onEnd: createHandler(Action.DragEnd),
      onCancel: createHandler(Action.DragCancel)
    });
    activeSensorRef.current = sensorInstance;
    function createHandler(type) {
      return async function handler() {
        const {
          active: active2,
          collisions: collisions2,
          over: over2,
          scrollAdjustedTranslate: scrollAdjustedTranslate2
        } = sensorContext.current;
        let event2 = null;
        if (active2 && scrollAdjustedTranslate2) {
          const {
            cancelDrop
          } = latestProps.current;
          event2 = {
            activatorEvent: activatorEvent2,
            active: active2,
            collisions: collisions2,
            delta: scrollAdjustedTranslate2,
            over: over2
          };
          if (type === Action.DragEnd && typeof cancelDrop === "function") {
            const shouldCancel = await Promise.resolve(cancelDrop(event2));
            if (shouldCancel) {
              type = Action.DragCancel;
            }
          }
        }
        activeRef.current = null;
        import_react_dom5.unstable_batchedUpdates(() => {
          dispatch({
            type
          });
          setStatus(Status.Uninitialized);
          setOver(null);
          setActiveSensor(null);
          setActivatorEvent(null);
          activeSensorRef.current = null;
          const eventName = type === Action.DragEnd ? "onDragEnd" : "onDragCancel";
          if (event2) {
            const handler = latestProps.current[eventName];
            handler == null || handler(event2);
            dispatchMonitorEvent({
              type: eventName,
              event: event2
            });
          }
        });
      };
    }
  }, [draggableNodes]);
  const bindActivatorToSensorInstantiator = import_react240.useCallback((handler, sensor) => {
    return (event, active2) => {
      const nativeEvent = event.nativeEvent;
      const activeDraggableNode = draggableNodes.get(active2);
      if (activeRef.current !== null || !activeDraggableNode || nativeEvent.dndKit || nativeEvent.defaultPrevented) {
        return;
      }
      const activationContext = {
        active: activeDraggableNode
      };
      const shouldActivate = handler(event, sensor.options, activationContext);
      if (shouldActivate === true) {
        nativeEvent.dndKit = {
          capturedBy: sensor.sensor
        };
        activeRef.current = active2;
        instantiateSensor(event, sensor);
      }
    };
  }, [draggableNodes, instantiateSensor]);
  const activators = useCombineActivators(sensors, bindActivatorToSensorInstantiator);
  useSensorSetup(sensors);
  useIsomorphicLayoutEffect2(() => {
    if (activeNodeRect && status === Status.Initializing) {
      setStatus(Status.Initialized);
    }
  }, [activeNodeRect, status]);
  import_react240.useEffect(() => {
    const {
      onDragMove
    } = latestProps.current;
    const {
      active: active2,
      activatorEvent: activatorEvent2,
      collisions: collisions2,
      over: over2
    } = sensorContext.current;
    if (!active2 || !activatorEvent2) {
      return;
    }
    const event = {
      active: active2,
      activatorEvent: activatorEvent2,
      collisions: collisions2,
      delta: {
        x: scrollAdjustedTranslate.x,
        y: scrollAdjustedTranslate.y
      },
      over: over2
    };
    import_react_dom5.unstable_batchedUpdates(() => {
      onDragMove == null || onDragMove(event);
      dispatchMonitorEvent({
        type: "onDragMove",
        event
      });
    });
  }, [scrollAdjustedTranslate.x, scrollAdjustedTranslate.y]);
  import_react240.useEffect(() => {
    const {
      active: active2,
      activatorEvent: activatorEvent2,
      collisions: collisions2,
      droppableContainers: droppableContainers2,
      scrollAdjustedTranslate: scrollAdjustedTranslate2
    } = sensorContext.current;
    if (!active2 || activeRef.current == null || !activatorEvent2 || !scrollAdjustedTranslate2) {
      return;
    }
    const {
      onDragOver
    } = latestProps.current;
    const overContainer = droppableContainers2.get(overId);
    const over2 = overContainer && overContainer.rect.current ? {
      id: overContainer.id,
      rect: overContainer.rect.current,
      data: overContainer.data,
      disabled: overContainer.disabled
    } : null;
    const event = {
      active: active2,
      activatorEvent: activatorEvent2,
      collisions: collisions2,
      delta: {
        x: scrollAdjustedTranslate2.x,
        y: scrollAdjustedTranslate2.y
      },
      over: over2
    };
    import_react_dom5.unstable_batchedUpdates(() => {
      setOver(over2);
      onDragOver == null || onDragOver(event);
      dispatchMonitorEvent({
        type: "onDragOver",
        event
      });
    });
  }, [overId]);
  useIsomorphicLayoutEffect2(() => {
    sensorContext.current = {
      activatorEvent,
      active,
      activeNode,
      collisionRect,
      collisions,
      droppableRects,
      draggableNodes,
      draggingNode,
      draggingNodeRect,
      droppableContainers,
      over,
      scrollableAncestors,
      scrollAdjustedTranslate
    };
    activeRects.current = {
      initial: draggingNodeRect,
      translated: collisionRect
    };
  }, [active, activeNode, collisions, collisionRect, draggableNodes, draggingNode, draggingNodeRect, droppableRects, droppableContainers, over, scrollableAncestors, scrollAdjustedTranslate]);
  useAutoScroller({
    ...autoScrollOptions,
    delta: translate,
    draggingRect: collisionRect,
    pointerCoordinates,
    scrollableAncestors,
    scrollableAncestorRects
  });
  const publicContext = import_react240.useMemo(() => {
    const context = {
      active,
      activeNode,
      activeNodeRect,
      activatorEvent,
      collisions,
      containerNodeRect,
      dragOverlay,
      draggableNodes,
      droppableContainers,
      droppableRects,
      over,
      measureDroppableContainers,
      scrollableAncestors,
      scrollableAncestorRects,
      measuringConfiguration,
      measuringScheduled,
      windowRect
    };
    return context;
  }, [active, activeNode, activeNodeRect, activatorEvent, collisions, containerNodeRect, dragOverlay, draggableNodes, droppableContainers, droppableRects, over, measureDroppableContainers, scrollableAncestors, scrollableAncestorRects, measuringConfiguration, measuringScheduled, windowRect]);
  const internalContext = import_react240.useMemo(() => {
    const context = {
      activatorEvent,
      activators,
      active,
      activeNodeRect,
      ariaDescribedById: {
        draggable: draggableDescribedById
      },
      dispatch,
      draggableNodes,
      over,
      measureDroppableContainers
    };
    return context;
  }, [activatorEvent, activators, active, activeNodeRect, dispatch, draggableDescribedById, draggableNodes, over, measureDroppableContainers]);
  return import_react240.default.createElement(DndMonitorContext.Provider, {
    value: registerMonitorListener
  }, import_react240.default.createElement(InternalContext.Provider, {
    value: internalContext
  }, import_react240.default.createElement(PublicContext.Provider, {
    value: publicContext
  }, import_react240.default.createElement(ActiveDraggableContext.Provider, {
    value: transform
  }, children)), import_react240.default.createElement(RestoreFocus, {
    disabled: (accessibility == null ? undefined : accessibility.restoreFocus) === false
  })), import_react240.default.createElement(Accessibility, {
    ...accessibility,
    hiddenTextDescribedById: draggableDescribedById
  }));
  function getAutoScrollerOptions() {
    const activeSensorDisablesAutoscroll = (activeSensor == null ? undefined : activeSensor.autoScrollEnabled) === false;
    const autoScrollGloballyDisabled = typeof autoScroll === "object" ? autoScroll.enabled === false : autoScroll === false;
    const enabled = isInitialized && !activeSensorDisablesAutoscroll && !autoScrollGloballyDisabled;
    if (typeof autoScroll === "object") {
      return {
        ...autoScroll,
        enabled
      };
    }
    return {
      enabled
    };
  }
});
var NullContext = /* @__PURE__ */ import_react240.createContext(null);
var defaultRole = "button";
var ID_PREFIX = "Draggable";
function useDraggable(_ref) {
  let {
    id,
    data,
    disabled = false,
    attributes
  } = _ref;
  const key = useUniqueId(ID_PREFIX);
  const {
    activators,
    activatorEvent,
    active,
    activeNodeRect,
    ariaDescribedById,
    draggableNodes,
    over
  } = import_react240.useContext(InternalContext);
  const {
    role = defaultRole,
    roleDescription = "draggable",
    tabIndex = 0
  } = attributes != null ? attributes : {};
  const isDragging = (active == null ? undefined : active.id) === id;
  const transform = import_react240.useContext(isDragging ? ActiveDraggableContext : NullContext);
  const [node2, setNodeRef] = useNodeRef();
  const [activatorNode, setActivatorNodeRef] = useNodeRef();
  const listeners = useSyntheticListeners(activators, id);
  const dataRef = useLatestValue(data);
  useIsomorphicLayoutEffect2(() => {
    draggableNodes.set(id, {
      id,
      key,
      node: node2,
      activatorNode,
      data: dataRef
    });
    return () => {
      const node3 = draggableNodes.get(id);
      if (node3 && node3.key === key) {
        draggableNodes.delete(id);
      }
    };
  }, [draggableNodes, id]);
  const memoizedAttributes = import_react240.useMemo(() => ({
    role,
    tabIndex,
    "aria-disabled": disabled,
    "aria-pressed": isDragging && role === defaultRole ? true : undefined,
    "aria-roledescription": roleDescription,
    "aria-describedby": ariaDescribedById.draggable
  }), [disabled, role, tabIndex, isDragging, roleDescription, ariaDescribedById.draggable]);
  return {
    active,
    activatorEvent,
    activeNodeRect,
    attributes: memoizedAttributes,
    isDragging,
    listeners: disabled ? undefined : listeners,
    node: node2,
    over,
    setNodeRef,
    setActivatorNodeRef,
    transform
  };
}
function useDndContext() {
  return import_react240.useContext(PublicContext);
}
var ID_PREFIX$1 = "Droppable";
var defaultResizeObserverConfig = {
  timeout: 25
};
function useDroppable(_ref) {
  let {
    data,
    disabled = false,
    id,
    resizeObserverConfig
  } = _ref;
  const key = useUniqueId(ID_PREFIX$1);
  const {
    active,
    dispatch,
    over,
    measureDroppableContainers
  } = import_react240.useContext(InternalContext);
  const previous = import_react240.useRef({
    disabled
  });
  const resizeObserverConnected = import_react240.useRef(false);
  const rect = import_react240.useRef(null);
  const callbackId = import_react240.useRef(null);
  const {
    disabled: resizeObserverDisabled,
    updateMeasurementsFor,
    timeout: resizeObserverTimeout
  } = {
    ...defaultResizeObserverConfig,
    ...resizeObserverConfig
  };
  const ids2 = useLatestValue(updateMeasurementsFor != null ? updateMeasurementsFor : id);
  const handleResize = import_react240.useCallback(() => {
    if (!resizeObserverConnected.current) {
      resizeObserverConnected.current = true;
      return;
    }
    if (callbackId.current != null) {
      clearTimeout(callbackId.current);
    }
    callbackId.current = setTimeout(() => {
      measureDroppableContainers(Array.isArray(ids2.current) ? ids2.current : [ids2.current]);
      callbackId.current = null;
    }, resizeObserverTimeout);
  }, [resizeObserverTimeout]);
  const resizeObserver = useResizeObserver2({
    callback: handleResize,
    disabled: resizeObserverDisabled || !active
  });
  const handleNodeChange = import_react240.useCallback((newElement, previousElement) => {
    if (!resizeObserver) {
      return;
    }
    if (previousElement) {
      resizeObserver.unobserve(previousElement);
      resizeObserverConnected.current = false;
    }
    if (newElement) {
      resizeObserver.observe(newElement);
    }
  }, [resizeObserver]);
  const [nodeRef, setNodeRef] = useNodeRef(handleNodeChange);
  const dataRef = useLatestValue(data);
  import_react240.useEffect(() => {
    if (!resizeObserver || !nodeRef.current) {
      return;
    }
    resizeObserver.disconnect();
    resizeObserverConnected.current = false;
    resizeObserver.observe(nodeRef.current);
  }, [nodeRef, resizeObserver]);
  import_react240.useEffect(() => {
    dispatch({
      type: Action.RegisterDroppable,
      element: {
        id,
        key,
        disabled,
        node: nodeRef,
        rect,
        data: dataRef
      }
    });
    return () => dispatch({
      type: Action.UnregisterDroppable,
      key,
      id
    });
  }, [id]);
  import_react240.useEffect(() => {
    if (disabled !== previous.current.disabled) {
      dispatch({
        type: Action.SetDroppableDisabled,
        id,
        key,
        disabled
      });
      previous.current.disabled = disabled;
    }
  }, [id, key, disabled, dispatch]);
  return {
    active,
    rect,
    isOver: (over == null ? undefined : over.id) === id,
    node: nodeRef,
    over,
    setNodeRef
  };
}

// node_modules/@dnd-kit/sortable/dist/sortable.esm.js
var import_react241 = __toESM(require_react(), 1);
function arrayMove(array, from2, to) {
  const newArray = array.slice();
  newArray.splice(to < 0 ? newArray.length + to : to, 0, newArray.splice(from2, 1)[0]);
  return newArray;
}
function getSortedRects(items, rects) {
  return items.reduce((accumulator, id, index4) => {
    const rect = rects.get(id);
    if (rect) {
      accumulator[index4] = rect;
    }
    return accumulator;
  }, Array(items.length));
}
function isValidIndex(index4) {
  return index4 !== null && index4 >= 0;
}
function itemsEqual(a2, b) {
  if (a2 === b) {
    return true;
  }
  if (a2.length !== b.length) {
    return false;
  }
  for (let i2 = 0;i2 < a2.length; i2++) {
    if (a2[i2] !== b[i2]) {
      return false;
    }
  }
  return true;
}
function normalizeDisabled(disabled) {
  if (typeof disabled === "boolean") {
    return {
      draggable: disabled,
      droppable: disabled
    };
  }
  return disabled;
}
var defaultScale = {
  scaleX: 1,
  scaleY: 1
};
var horizontalListSortingStrategy = (_ref) => {
  var _rects$activeIndex;
  let {
    rects,
    activeNodeRect: fallbackActiveRect,
    activeIndex,
    overIndex,
    index: index4
  } = _ref;
  const activeNodeRect = (_rects$activeIndex = rects[activeIndex]) != null ? _rects$activeIndex : fallbackActiveRect;
  if (!activeNodeRect) {
    return null;
  }
  const itemGap = getItemGap(rects, index4, activeIndex);
  if (index4 === activeIndex) {
    const newIndexRect = rects[overIndex];
    if (!newIndexRect) {
      return null;
    }
    return {
      x: activeIndex < overIndex ? newIndexRect.left + newIndexRect.width - (activeNodeRect.left + activeNodeRect.width) : newIndexRect.left - activeNodeRect.left,
      y: 0,
      ...defaultScale
    };
  }
  if (index4 > activeIndex && index4 <= overIndex) {
    return {
      x: -activeNodeRect.width - itemGap,
      y: 0,
      ...defaultScale
    };
  }
  if (index4 < activeIndex && index4 >= overIndex) {
    return {
      x: activeNodeRect.width + itemGap,
      y: 0,
      ...defaultScale
    };
  }
  return {
    x: 0,
    y: 0,
    ...defaultScale
  };
};
function getItemGap(rects, index4, activeIndex) {
  const currentRect = rects[index4];
  const previousRect = rects[index4 - 1];
  const nextRect = rects[index4 + 1];
  if (!currentRect || !previousRect && !nextRect) {
    return 0;
  }
  if (activeIndex < index4) {
    return previousRect ? currentRect.left - (previousRect.left + previousRect.width) : nextRect.left - (currentRect.left + currentRect.width);
  }
  return nextRect ? nextRect.left - (currentRect.left + currentRect.width) : currentRect.left - (previousRect.left + previousRect.width);
}
var rectSortingStrategy = (_ref) => {
  let {
    rects,
    activeIndex,
    overIndex,
    index: index4
  } = _ref;
  const newRects = arrayMove(rects, overIndex, activeIndex);
  const oldRect = rects[index4];
  const newRect = newRects[index4];
  if (!newRect || !oldRect) {
    return null;
  }
  return {
    x: newRect.left - oldRect.left,
    y: newRect.top - oldRect.top,
    scaleX: newRect.width / oldRect.width,
    scaleY: newRect.height / oldRect.height
  };
};
var ID_PREFIX2 = "Sortable";
var Context = /* @__PURE__ */ import_react241.default.createContext({
  activeIndex: -1,
  containerId: ID_PREFIX2,
  disableTransforms: false,
  items: [],
  overIndex: -1,
  useDragOverlay: false,
  sortedRects: [],
  strategy: rectSortingStrategy,
  disabled: {
    draggable: false,
    droppable: false
  }
});
function SortableContext(_ref) {
  let {
    children,
    id,
    items: userDefinedItems,
    strategy = rectSortingStrategy,
    disabled: disabledProp = false
  } = _ref;
  const {
    active,
    dragOverlay,
    droppableRects,
    over,
    measureDroppableContainers
  } = useDndContext();
  const containerId = useUniqueId(ID_PREFIX2, id);
  const useDragOverlay = Boolean(dragOverlay.rect !== null);
  const items = import_react241.useMemo(() => userDefinedItems.map((item) => typeof item === "object" && ("id" in item) ? item.id : item), [userDefinedItems]);
  const isDragging = active != null;
  const activeIndex = active ? items.indexOf(active.id) : -1;
  const overIndex = over ? items.indexOf(over.id) : -1;
  const previousItemsRef = import_react241.useRef(items);
  const itemsHaveChanged = !itemsEqual(items, previousItemsRef.current);
  const disableTransforms = overIndex !== -1 && activeIndex === -1 || itemsHaveChanged;
  const disabled = normalizeDisabled(disabledProp);
  useIsomorphicLayoutEffect2(() => {
    if (itemsHaveChanged && isDragging) {
      measureDroppableContainers(items);
    }
  }, [itemsHaveChanged, items, isDragging, measureDroppableContainers]);
  import_react241.useEffect(() => {
    previousItemsRef.current = items;
  }, [items]);
  const contextValue = import_react241.useMemo(() => ({
    activeIndex,
    containerId,
    disabled,
    disableTransforms,
    items,
    overIndex,
    useDragOverlay,
    sortedRects: getSortedRects(items, droppableRects),
    strategy
  }), [activeIndex, containerId, disabled.draggable, disabled.droppable, disableTransforms, items, overIndex, droppableRects, useDragOverlay, strategy]);
  return import_react241.default.createElement(Context.Provider, {
    value: contextValue
  }, children);
}
var defaultNewIndexGetter = (_ref) => {
  let {
    id,
    items,
    activeIndex,
    overIndex
  } = _ref;
  return arrayMove(items, activeIndex, overIndex).indexOf(id);
};
var defaultAnimateLayoutChanges = (_ref2) => {
  let {
    containerId,
    isSorting,
    wasDragging,
    index: index4,
    items,
    newIndex,
    previousItems,
    previousContainerId,
    transition
  } = _ref2;
  if (!transition || !wasDragging) {
    return false;
  }
  if (previousItems !== items && index4 === newIndex) {
    return false;
  }
  if (isSorting) {
    return true;
  }
  return newIndex !== index4 && containerId === previousContainerId;
};
var defaultTransition2 = {
  duration: 200,
  easing: "ease"
};
var transitionProperty = "transform";
var disabledTransition = /* @__PURE__ */ CSS2.Transition.toString({
  property: transitionProperty,
  duration: 0,
  easing: "linear"
});
var defaultAttributes2 = {
  roleDescription: "sortable"
};
function useDerivedTransform(_ref) {
  let {
    disabled,
    index: index4,
    node: node2,
    rect
  } = _ref;
  const [derivedTransform, setDerivedtransform] = import_react241.useState(null);
  const previousIndex = import_react241.useRef(index4);
  useIsomorphicLayoutEffect2(() => {
    if (!disabled && index4 !== previousIndex.current && node2.current) {
      const initial = rect.current;
      if (initial) {
        const current2 = getClientRect(node2.current, {
          ignoreTransform: true
        });
        const delta = {
          x: initial.left - current2.left,
          y: initial.top - current2.top,
          scaleX: initial.width / current2.width,
          scaleY: initial.height / current2.height
        };
        if (delta.x || delta.y) {
          setDerivedtransform(delta);
        }
      }
    }
    if (index4 !== previousIndex.current) {
      previousIndex.current = index4;
    }
  }, [disabled, index4, node2, rect]);
  import_react241.useEffect(() => {
    if (derivedTransform) {
      setDerivedtransform(null);
    }
  }, [derivedTransform]);
  return derivedTransform;
}
function useSortable(_ref) {
  let {
    animateLayoutChanges = defaultAnimateLayoutChanges,
    attributes: userDefinedAttributes,
    disabled: localDisabled,
    data: customData,
    getNewIndex = defaultNewIndexGetter,
    id,
    strategy: localStrategy,
    resizeObserverConfig,
    transition = defaultTransition2
  } = _ref;
  const {
    items,
    containerId,
    activeIndex,
    disabled: globalDisabled,
    disableTransforms,
    sortedRects,
    overIndex,
    useDragOverlay,
    strategy: globalStrategy
  } = import_react241.useContext(Context);
  const disabled = normalizeLocalDisabled(localDisabled, globalDisabled);
  const index4 = items.indexOf(id);
  const data = import_react241.useMemo(() => ({
    sortable: {
      containerId,
      index: index4,
      items
    },
    ...customData
  }), [containerId, customData, index4, items]);
  const itemsAfterCurrentSortable = import_react241.useMemo(() => items.slice(items.indexOf(id)), [items, id]);
  const {
    rect,
    node: node2,
    isOver,
    setNodeRef: setDroppableNodeRef
  } = useDroppable({
    id,
    data,
    disabled: disabled.droppable,
    resizeObserverConfig: {
      updateMeasurementsFor: itemsAfterCurrentSortable,
      ...resizeObserverConfig
    }
  });
  const {
    active,
    activatorEvent,
    activeNodeRect,
    attributes,
    setNodeRef: setDraggableNodeRef,
    listeners,
    isDragging,
    over,
    setActivatorNodeRef,
    transform
  } = useDraggable({
    id,
    data,
    attributes: {
      ...defaultAttributes2,
      ...userDefinedAttributes
    },
    disabled: disabled.draggable
  });
  const setNodeRef = useCombinedRefs(setDroppableNodeRef, setDraggableNodeRef);
  const isSorting = Boolean(active);
  const displaceItem = isSorting && !disableTransforms && isValidIndex(activeIndex) && isValidIndex(overIndex);
  const shouldDisplaceDragSource = !useDragOverlay && isDragging;
  const dragSourceDisplacement = shouldDisplaceDragSource && displaceItem ? transform : null;
  const strategy = localStrategy != null ? localStrategy : globalStrategy;
  const finalTransform = displaceItem ? dragSourceDisplacement != null ? dragSourceDisplacement : strategy({
    rects: sortedRects,
    activeNodeRect,
    activeIndex,
    overIndex,
    index: index4
  }) : null;
  const newIndex = isValidIndex(activeIndex) && isValidIndex(overIndex) ? getNewIndex({
    id,
    items,
    activeIndex,
    overIndex
  }) : index4;
  const activeId = active == null ? undefined : active.id;
  const previous = import_react241.useRef({
    activeId,
    items,
    newIndex,
    containerId
  });
  const itemsHaveChanged = items !== previous.current.items;
  const shouldAnimateLayoutChanges = animateLayoutChanges({
    active,
    containerId,
    isDragging,
    isSorting,
    id,
    index: index4,
    items,
    newIndex: previous.current.newIndex,
    previousItems: previous.current.items,
    previousContainerId: previous.current.containerId,
    transition,
    wasDragging: previous.current.activeId != null
  });
  const derivedTransform = useDerivedTransform({
    disabled: !shouldAnimateLayoutChanges,
    index: index4,
    node: node2,
    rect
  });
  import_react241.useEffect(() => {
    if (isSorting && previous.current.newIndex !== newIndex) {
      previous.current.newIndex = newIndex;
    }
    if (containerId !== previous.current.containerId) {
      previous.current.containerId = containerId;
    }
    if (items !== previous.current.items) {
      previous.current.items = items;
    }
  }, [isSorting, newIndex, containerId, items]);
  import_react241.useEffect(() => {
    if (activeId === previous.current.activeId) {
      return;
    }
    if (activeId != null && previous.current.activeId == null) {
      previous.current.activeId = activeId;
      return;
    }
    const timeoutId = setTimeout(() => {
      previous.current.activeId = activeId;
    }, 50);
    return () => clearTimeout(timeoutId);
  }, [activeId]);
  return {
    active,
    activeIndex,
    attributes,
    data,
    rect,
    index: index4,
    newIndex,
    items,
    isOver,
    isSorting,
    isDragging,
    listeners,
    node: node2,
    overIndex,
    over,
    setNodeRef,
    setActivatorNodeRef,
    setDroppableNodeRef,
    setDraggableNodeRef,
    transform: derivedTransform != null ? derivedTransform : finalTransform,
    transition: getTransition()
  };
  function getTransition() {
    if (derivedTransform || itemsHaveChanged && previous.current.newIndex === index4) {
      return disabledTransition;
    }
    if (shouldDisplaceDragSource && !isKeyboardEvent(activatorEvent) || !transition) {
      return;
    }
    if (isSorting || shouldAnimateLayoutChanges) {
      return CSS2.Transition.toString({
        ...transition,
        property: transitionProperty
      });
    }
    return;
  }
}
function normalizeLocalDisabled(localDisabled, globalDisabled) {
  var _localDisabled$dragga, _localDisabled$droppa;
  if (typeof localDisabled === "boolean") {
    return {
      draggable: localDisabled,
      droppable: false
    };
  }
  return {
    draggable: (_localDisabled$dragga = localDisabled == null ? undefined : localDisabled.draggable) != null ? _localDisabled$dragga : globalDisabled.draggable,
    droppable: (_localDisabled$droppa = localDisabled == null ? undefined : localDisabled.droppable) != null ? _localDisabled$droppa : globalDisabled.droppable
  };
}
function hasSortableData(entry) {
  if (!entry) {
    return false;
  }
  const data = entry.data.current;
  if (data && "sortable" in data && typeof data.sortable === "object" && "containerId" in data.sortable && "items" in data.sortable && "index" in data.sortable) {
    return true;
  }
  return false;
}
var directions = [KeyboardCode.Down, KeyboardCode.Right, KeyboardCode.Up, KeyboardCode.Left];
var sortableKeyboardCoordinates = (event, _ref) => {
  let {
    context: {
      active,
      collisionRect,
      droppableRects,
      droppableContainers,
      over,
      scrollableAncestors
    }
  } = _ref;
  if (directions.includes(event.code)) {
    event.preventDefault();
    if (!active || !collisionRect) {
      return;
    }
    const filteredContainers = [];
    droppableContainers.getEnabled().forEach((entry) => {
      if (!entry || entry != null && entry.disabled) {
        return;
      }
      const rect = droppableRects.get(entry.id);
      if (!rect) {
        return;
      }
      switch (event.code) {
        case KeyboardCode.Down:
          if (collisionRect.top < rect.top) {
            filteredContainers.push(entry);
          }
          break;
        case KeyboardCode.Up:
          if (collisionRect.top > rect.top) {
            filteredContainers.push(entry);
          }
          break;
        case KeyboardCode.Left:
          if (collisionRect.left > rect.left) {
            filteredContainers.push(entry);
          }
          break;
        case KeyboardCode.Right:
          if (collisionRect.left < rect.left) {
            filteredContainers.push(entry);
          }
          break;
      }
    });
    const collisions = closestCorners({
      active,
      collisionRect,
      droppableRects,
      droppableContainers: filteredContainers,
      pointerCoordinates: null
    });
    let closestId = getFirstCollision(collisions, "id");
    if (closestId === (over == null ? undefined : over.id) && collisions.length > 1) {
      closestId = collisions[1].id;
    }
    if (closestId != null) {
      const activeDroppable = droppableContainers.get(active.id);
      const newDroppable = droppableContainers.get(closestId);
      const newRect = newDroppable ? droppableRects.get(newDroppable.id) : null;
      const newNode = newDroppable == null ? undefined : newDroppable.node.current;
      if (newNode && newRect && activeDroppable && newDroppable) {
        const newScrollAncestors = getScrollableAncestors(newNode);
        const hasDifferentScrollAncestors = newScrollAncestors.some((element, index4) => scrollableAncestors[index4] !== element);
        const hasSameContainer = isSameContainer(activeDroppable, newDroppable);
        const isAfterActive = isAfter(activeDroppable, newDroppable);
        const offset4 = hasDifferentScrollAncestors || !hasSameContainer ? {
          x: 0,
          y: 0
        } : {
          x: isAfterActive ? collisionRect.width - newRect.width : 0,
          y: isAfterActive ? collisionRect.height - newRect.height : 0
        };
        const rectCoordinates = {
          x: newRect.left,
          y: newRect.top
        };
        const newCoordinates = offset4.x && offset4.y ? rectCoordinates : subtract(rectCoordinates, offset4);
        return newCoordinates;
      }
    }
  }
  return;
};
function isSameContainer(a2, b) {
  if (!hasSortableData(a2) || !hasSortableData(b)) {
    return false;
  }
  return a2.data.current.sortable.containerId === b.data.current.sortable.containerId;
}
function isAfter(a2, b) {
  if (!hasSortableData(a2) || !hasSortableData(b)) {
    return false;
  }
  if (!isSameContainer(a2, b)) {
    return false;
  }
  return a2.data.current.sortable.index < b.data.current.sortable.index;
}

// src/components/LayoutMappingModal/DependentGroupSortableCard.tsx
var import_react242 = __toESM(require_react(), 1);
var jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var TransformCommandCard = ({
  transform,
  index: index4,
  onUpdate,
  onRemove
}) => {
  return /* @__PURE__ */ jsx_runtime4.jsxs(Card, {
    shadow: "sm",
    padding: "xs",
    radius: "md",
    withBorder: true,
    mb: "xs",
    children: [
      /* @__PURE__ */ jsx_runtime4.jsx(Group, {
        justify: "flex-end",
        mb: "xs",
        children: /* @__PURE__ */ jsx_runtime4.jsx(ActionIcon, {
          variant: "subtle",
          color: "red",
          size: "sm",
          onClick: () => onRemove(index4),
          children: /* @__PURE__ */ jsx_runtime4.jsx(IconX, {
            size: 16
          })
        })
      }),
      /* @__PURE__ */ jsx_runtime4.jsx(Text, {
        size: "xs",
        mb: "xs",
        children: "Find:"
      }),
      /* @__PURE__ */ jsx_runtime4.jsx(Input, {
        placeholder: "Text to find",
        value: transform.find,
        onChange: (e) => onUpdate(index4, { ...transform, find: e.target.value }),
        mb: "xs",
        size: "xs"
      }),
      /* @__PURE__ */ jsx_runtime4.jsx(Text, {
        size: "xs",
        mb: "xs",
        children: "Replace:"
      }),
      /* @__PURE__ */ jsx_runtime4.jsx(Input, {
        placeholder: "Replacement text",
        value: transform.replace,
        onChange: (e) => onUpdate(index4, { ...transform, replace: e.target.value }),
        mb: "xs",
        size: "xs"
      }),
      /* @__PURE__ */ jsx_runtime4.jsx(Checkbox, {
        label: "Replace All",
        checked: transform.replaceAll,
        onChange: (e) => onUpdate(index4, { ...transform, replaceAll: e.target.checked }),
        size: "xs"
      })
    ]
  });
};
var DependentGroupValueSortableCard = ({
  id,
  value,
  groupIndex,
  imageVariableId,
  mapId,
  onRemove,
  getDisplayValue
}) => {
  const raiseError2 = appStore((state) => state.raiseError);
  const updateVarValueFromDependentGroup = appStore((state) => state.effects.studio.layoutImageMapping.updateVarValueFromDependentGroup);
  const variables = appStore((state) => state.state.studio.document.variables);
  const [transformModalOpen, setTransformModalOpen] = import_react242.useState(false);
  const [transforms, setTransforms] = import_react242.useState([]);
  const {
    attributes,
    listeners,
    setNodeRef,
    transform,
    transition,
    isDragging
  } = useSortable({ id });
  const style2 = {
    transform: CSS2.Transform.toString(transform),
    transition,
    opacity: isDragging ? 0.5 : 1,
    zIndex: isDragging ? 1 : 0,
    minWidth: "120px",
    height: "auto",
    minHeight: "80px",
    display: "flex",
    flexDirection: "column",
    justifyContent: "center",
    position: "relative"
  };
  const variableValueIndex = parseInt(id.toString().split("-")[1]);
  const updateVarValue = (newValue) => {
    if (mapId && imageVariableId !== null && groupIndex !== null) {
      updateVarValueFromDependentGroup({
        mapId,
        imageVariableId,
        groupIndex,
        variableValueIndex,
        variableValue: newValue
      });
    } else {
      raiseError2(new Error(`Failed to update variable value: mapId=${mapId}, imageVariableId=${imageVariableId}, groupIndex=${groupIndex}`));
    }
  };
  const selectOptions = variables.filter((v2) => v2.type !== "image" && v2.type !== "boolean").map((v2) => ({
    value: v2.id,
    label: v2.name
  }));
  const openTransformModal = () => {
    if (typeof value !== "string" && value.transform) {
      setTransforms([...value.transform]);
    } else {
      setTransforms([]);
    }
    setTransformModalOpen(true);
  };
  const updateTransform = (index4, updatedTransform) => {
    const newTransforms = [...transforms];
    newTransforms[index4] = updatedTransform;
    setTransforms(newTransforms);
  };
  const removeTransform = (index4) => {
    setTransforms(transforms.filter((_2, i2) => i2 !== index4));
  };
  const addTransform = () => {
    setTransforms([
      ...transforms,
      { find: "", replace: "", replaceAll: false, regex: false }
    ]);
  };
  const saveTransforms = () => {
    const validTransforms = transforms.filter((t) => t.find.trim() !== "" && t.replace.trim() !== "");
    if (typeof value !== "string" && value.type) {
      updateVarValue({
        ...value,
        transform: validTransforms
      });
    }
    setTransformModalOpen(false);
  };
  const getWandColor = () => {
    if (typeof value !== "string" && value.transform && value.transform.length > 0) {
      return "blue";
    }
    return "gray";
  };
  const getWandOpacity = () => {
    if (typeof value !== "string" && value.transform && value.transform.length > 0) {
      return 1;
    }
    return 0.5;
  };
  return /* @__PURE__ */ jsx_runtime4.jsxs(jsx_runtime4.Fragment, {
    children: [
      /* @__PURE__ */ jsx_runtime4.jsxs(Card, {
        ref: setNodeRef,
        shadow: "sm",
        padding: "xs",
        radius: "md",
        style: style2,
        children: [
          /* @__PURE__ */ jsx_runtime4.jsx(ActionIcon, {
            variant: "subtle",
            size: "sm",
            color: "red",
            radius: "xl",
            style: {
              position: "absolute",
              top: "5px",
              right: "5px"
            },
            onClick: onRemove,
            children: /* @__PURE__ */ jsx_runtime4.jsx(IconX, {})
          }),
          typeof value !== "string" && /* @__PURE__ */ jsx_runtime4.jsx(ActionIcon, {
            variant: "subtle",
            size: "sm",
            opacity: getWandOpacity(),
            color: getWandColor(),
            radius: "xl",
            style: {
              position: "absolute",
              top: "5px",
              right: "30px"
            },
            onClick: openTransformModal,
            children: /* @__PURE__ */ jsx_runtime4.jsx(IconWand, {
              size: 14
            })
          }),
          /* @__PURE__ */ jsx_runtime4.jsx(ActionIcon, {
            ...attributes,
            ...listeners,
            variant: "subtle",
            size: "md",
            style: {
              position: "absolute",
              top: "5px",
              left: "5px",
              cursor: "grab"
            },
            children: /* @__PURE__ */ jsx_runtime4.jsx(IconGripVertical, {
              size: 14
            })
          }),
          /* @__PURE__ */ jsx_runtime4.jsx("div", {
            style: { marginTop: "20px", marginBottom: "5px" },
            children: typeof value === "string" ? /* @__PURE__ */ jsx_runtime4.jsx(Input, {
              size: "xs",
              value,
              onChange: (e) => updateVarValue(e.target.value),
              placeholder: "Enter value"
            }) : value.type === "StudioList" ? /* @__PURE__ */ jsx_runtime4.jsx(Select, {
              size: "xs",
              data: selectOptions,
              value: value.id || null,
              onChange: (newId) => {
                if (newId) {
                  updateVarValue({
                    ...value,
                    id: newId
                  });
                }
              },
              placeholder: "Select variable",
              clearable: true
            }) : /* @__PURE__ */ jsx_runtime4.jsx(Text, {
              size: "sm",
              ta: "center",
              style: { wordBreak: "break-word" },
              children: getDisplayValue(value)
            })
          })
        ]
      }),
      /* @__PURE__ */ jsx_runtime4.jsx(Modal, {
        opened: transformModalOpen,
        onClose: () => setTransformModalOpen(false),
        title: "Transform Commands",
        centered: true,
        children: /* @__PURE__ */ jsx_runtime4.jsxs(Stack, {
          children: [
            transforms.map((t, index4) => /* @__PURE__ */ jsx_runtime4.jsx(TransformCommandCard, {
              transform: t,
              index: index4,
              onUpdate: updateTransform,
              onRemove: removeTransform
            }, index4)),
            /* @__PURE__ */ jsx_runtime4.jsx(Card, {
              shadow: "sm",
              padding: "xs",
              radius: "md",
              withBorder: true,
              children: /* @__PURE__ */ jsx_runtime4.jsx(Group, {
                justify: "center",
                children: /* @__PURE__ */ jsx_runtime4.jsx(ActionIcon, {
                  variant: "subtle",
                  color: "blue",
                  onClick: addTransform,
                  children: /* @__PURE__ */ jsx_runtime4.jsx(IconPlus, {
                    size: 20
                  })
                })
              })
            }),
            /* @__PURE__ */ jsx_runtime4.jsxs(Group, {
              justify: "flex-end",
              mt: "md",
              children: [
                /* @__PURE__ */ jsx_runtime4.jsx(Button, {
                  variant: "outline",
                  onClick: () => setTransformModalOpen(false),
                  children: "Cancel"
                }),
                /* @__PURE__ */ jsx_runtime4.jsx(Button, {
                  onClick: saveTransforms,
                  children: "Save"
                })
              ]
            })
          ]
        })
      })
    ]
  });
};

// src/components/LayoutMappingModal/DependentGroupSetValue.tsx
var jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var DependentGroupSetValue = ({
  groupIndex,
  imageVariableId,
  mapId,
  variableValue
}) => {
  const removeVarValueFromDependentGroup = appStore((state) => state.effects.studio.layoutImageMapping.removeVarValueFromDependentGroup);
  const addVarValueToDependentGroup = appStore((state) => state.effects.studio.layoutImageMapping.addVarValueToDependentGroup);
  const setIndexOfVarValueFromDependentGroup = appStore((state) => state.effects.studio.layoutImageMapping.setIndexOfVarValueFromDependentGroup);
  const sensors = useSensors(useSensor(PointerSensor), useSensor(KeyboardSensor, {
    coordinateGetter: sortableKeyboardCoordinates
  }));
  const handleRemoveVarValue = (valueIndex) => {
    removeVarValueFromDependentGroup({
      mapId,
      imageVariableId,
      groupIndex,
      variableValueIndex: valueIndex
    });
  };
  const handleAddStringValue = () => {
    addVarValueToDependentGroup({
      mapId,
      imageVariableId,
      groupIndex,
      variableValue: ""
    });
  };
  const handleAddListVariable = () => {
    addVarValueToDependentGroup({
      mapId,
      imageVariableId,
      groupIndex,
      variableValue: {
        id: null,
        type: "StudioList",
        transform: []
      }
    });
  };
  const getDisplayValue = (value) => {
    if (typeof value === "string") {
      return value;
    } else {
      return `Variable: ${value.id}`;
    }
  };
  const handleDragEnd = (event) => {
    const { active, over } = event;
    if (over && active.id !== over.id) {
      const oldIndex = parseInt(active.id.toString().split("-")[1]);
      const newIndex = parseInt(over.id.toString().split("-")[1]);
      setIndexOfVarValueFromDependentGroup({
        mapId,
        imageVariableId,
        groupIndex,
        oldVariableValueIndex: oldIndex,
        newVariableValueIndex: newIndex
      });
    }
  };
  return /* @__PURE__ */ jsx_runtime5.jsxs("div", {
    style: { marginTop: "10px" },
    children: [
      /* @__PURE__ */ jsx_runtime5.jsx(Text, {
        fw: 500,
        size: "sm",
        mb: 5,
        children: "Value ="
      }),
      /* @__PURE__ */ jsx_runtime5.jsx(ScrollArea.Autosize, {
        maw: screen.width * 0.9,
        children: /* @__PURE__ */ jsx_runtime5.jsx(DndContext, {
          sensors,
          collisionDetection: closestCenter,
          onDragEnd: handleDragEnd,
          children: /* @__PURE__ */ jsx_runtime5.jsx(SortableContext, {
            items: variableValue.map((_2, index4) => `item-${index4}`),
            strategy: horizontalListSortingStrategy,
            children: /* @__PURE__ */ jsx_runtime5.jsxs(Group, {
              gap: "xs",
              wrap: "nowrap",
              style: { minWidth: "100%" },
              children: [
                variableValue.map((value, index4) => /* @__PURE__ */ jsx_runtime5.jsx(DependentGroupValueSortableCard, {
                  id: `item-${index4}`,
                  value,
                  mapId,
                  groupIndex,
                  imageVariableId,
                  onRemove: () => handleRemoveVarValue(index4),
                  getDisplayValue
                }, `item-${index4}`)),
                /* @__PURE__ */ jsx_runtime5.jsxs(Menu, {
                  position: "bottom-end",
                  withArrow: true,
                  children: [
                    /* @__PURE__ */ jsx_runtime5.jsx(Menu.Target, {
                      children: /* @__PURE__ */ jsx_runtime5.jsx(Card, {
                        shadow: "sm",
                        padding: "xs",
                        radius: "md",
                        style: {
                          minWidth: "80px",
                          height: "80px",
                          display: "flex",
                          justifyContent: "center",
                          alignItems: "center",
                          border: "1px dashed #ccc",
                          cursor: "pointer"
                        },
                        children: /* @__PURE__ */ jsx_runtime5.jsx(ActionIcon, {
                          variant: "transparent",
                          size: "lg",
                          children: /* @__PURE__ */ jsx_runtime5.jsx(IconPlus, {})
                        })
                      })
                    }),
                    /* @__PURE__ */ jsx_runtime5.jsxs(Menu.Dropdown, {
                      children: [
                        /* @__PURE__ */ jsx_runtime5.jsx(Menu.Label, {
                          children: "Add Value Type"
                        }),
                        /* @__PURE__ */ jsx_runtime5.jsx(Menu.Item, {
                          leftSection: /* @__PURE__ */ jsx_runtime5.jsx(IconAbc, {
                            size: 14
                          }),
                          onClick: handleAddStringValue,
                          children: "String"
                        }),
                        /* @__PURE__ */ jsx_runtime5.jsx(Menu.Item, {
                          leftSection: /* @__PURE__ */ jsx_runtime5.jsx(IconList, {
                            size: 14
                          }),
                          onClick: handleAddListVariable,
                          children: "List Variable"
                        })
                      ]
                    })
                  ]
                })
              ]
            })
          })
        })
      })
    ]
  });
};

// src/components/LayoutMappingModal/DependentGroup.tsx
var jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var DependentGroup = ({
  dependentGroup,
  groupIndex,
  variableConfig,
  layoutMap
}) => {
  const bgColor = groupIndex % 2 === 0 ? "#5b575b" : "#335760";
  const variables = appStore((state) => state.state.studio.document.variables);
  const raiseError2 = appStore((state) => state.raiseError);
  const setCurrentImageVariableId = appStore((state) => state.effects.modal.dependentModal.setCurrentImageVariableId);
  const setCurrentSelectedMapId = appStore((state) => state.effects.modal.setCurrentSelectedMapId);
  const setCurrentGroupIndex = appStore((state) => state.effects.modal.dependentModal.setCurrentGroupIndex);
  const setIsOpen = appStore((state) => state.effects.modal.dependentModal.setIsOpen);
  const removeDependentGroup = appStore((state) => state.effects.studio.layoutImageMapping.removeDependentGroup);
  const copyDependentGroup = appStore((state) => state.effects.studio.layoutImageMapping.copyDependentGroup);
  const removeDependent = appStore((state) => state.effects.studio.layoutImageMapping.removeDependent);
  const updateDependent = appStore((state) => state.effects.studio.layoutImageMapping.updateDependent);
  const handleAddDependentToGroup = (groupIndex2) => {
    setCurrentImageVariableId(variableConfig.id);
    setCurrentSelectedMapId(layoutMap.id);
    setCurrentGroupIndex(groupIndex2);
    setIsOpen(true);
  };
  const handleRemoveGroup = (groupIndex2) => {
    removeDependentGroup({
      groupIndex: groupIndex2,
      imageVariableId: variableConfig.id,
      mapId: layoutMap.id
    });
  };
  const handleCopyGroup = (groupIndex2) => {
    copyDependentGroup({
      groupIndex: groupIndex2,
      imageVariableId: variableConfig.id,
      mapId: layoutMap.id
    });
  };
  console.log(dependentGroup, groupIndex, variableConfig);
  const getVariableById = (id) => {
    return variables.find((v2) => v2.id === id);
  };
  return /* @__PURE__ */ jsx_runtime6.jsxs(Stack, {
    style: {
      backgroundColor: bgColor,
      padding: "10px",
      borderRadius: "5px",
      marginBottom: "10px",
      gap: "8px"
    },
    children: [
      /* @__PURE__ */ jsx_runtime6.jsxs(Group, {
        align: "center",
        justify: "space-between",
        children: [
          /* @__PURE__ */ jsx_runtime6.jsxs(Text, {
            fw: 500,
            size: "sm",
            ta: "center",
            children: [
              "Group ",
              groupIndex + 1
            ]
          }),
          /* @__PURE__ */ jsx_runtime6.jsxs(Group, {
            gap: "xs",
            children: [
              /* @__PURE__ */ jsx_runtime6.jsx(ActionIcon, {
                variant: "subtle",
                size: "lg",
                radius: "xl",
                onClick: () => handleCopyGroup(groupIndex),
                children: /* @__PURE__ */ jsx_runtime6.jsx(IconCopy, {})
              }),
              /* @__PURE__ */ jsx_runtime6.jsx(ActionIcon, {
                variant: "subtle",
                size: "lg",
                color: "red",
                radius: "xl",
                onClick: () => handleRemoveGroup(groupIndex),
                children: /* @__PURE__ */ jsx_runtime6.jsx(IconTrashFilled, {})
              })
            ]
          })
        ]
      }),
      /* @__PURE__ */ jsx_runtime6.jsxs(Grid, {
        gutter: "xs",
        children: [
          dependentGroup.dependents.map((dependent, depIndex) => {
            const depVariable = getVariableById(dependent.variableId);
            return /* @__PURE__ */ jsx_runtime6.jsx(Grid.Col, {
              span: 4,
              children: /* @__PURE__ */ jsx_runtime6.jsxs(Card, {
                shadow: "sm",
                padding: "xs",
                radius: "md",
                style: {
                  minHeight: "100px",
                  height: "auto",
                  display: "flex",
                  flexDirection: "column",
                  justifyContent: "center",
                  position: "relative"
                },
                children: [
                  /* @__PURE__ */ jsx_runtime6.jsx(ActionIcon, {
                    variant: "subtle",
                    size: "sm",
                    color: "red",
                    radius: "xl",
                    style: {
                      position: "absolute",
                      top: "5px",
                      right: "5px"
                    },
                    onClick: () => {
                      removeDependent({
                        imageVariableId: variableConfig.id,
                        dependentGroupIndex: groupIndex,
                        dependent,
                        mapId: layoutMap.id
                      });
                    },
                    children: /* @__PURE__ */ jsx_runtime6.jsx(IconX, {})
                  }),
                  /* @__PURE__ */ jsx_runtime6.jsx(Text, {
                    fw: 500,
                    size: "sm",
                    ta: "center",
                    children: depVariable?.name || "Unknown"
                  }),
                  /* @__PURE__ */ jsx_runtime6.jsx(Text, {
                    size: "xs",
                    c: "dimmed",
                    ta: "center",
                    children: depVariable?.type || "Unknown"
                  }),
                  depVariable?.type === "list" && /* @__PURE__ */ jsx_runtime6.jsx(MultiSelect, {
                    size: "xs",
                    data: depVariable.items.map((item) => ({
                      value: item.value,
                      label: item.displayValue || item.value
                    })),
                    value: dependent.values,
                    onChange: (newValues) => {
                      updateDependent({
                        mapId: layoutMap.id,
                        imageVariableId: variableConfig.id,
                        dependentGroupIndex: groupIndex,
                        dependent: {
                          ...dependent,
                          values: newValues
                        }
                      });
                    },
                    placeholder: "Select values",
                    style: { marginTop: "5px" }
                  }),
                  depVariable?.type === "boolean" && /* @__PURE__ */ jsx_runtime6.jsx(MultiSelect, {
                    size: "xs",
                    data: [
                      { value: "true", label: "TRUE" },
                      { value: "false", label: "FALSE" }
                    ],
                    value: dependent.values,
                    onChange: (newValues) => {
                      updateDependent({
                        mapId: layoutMap.id,
                        imageVariableId: variableConfig.id,
                        dependentGroupIndex: groupIndex,
                        dependent: {
                          ...dependent,
                          values: newValues
                        }
                      });
                    },
                    placeholder: "Select values",
                    style: { marginTop: "5px" }
                  })
                ]
              })
            }, depIndex);
          }),
          /* @__PURE__ */ jsx_runtime6.jsx(Grid.Col, {
            span: 4,
            children: /* @__PURE__ */ jsx_runtime6.jsx(Card, {
              shadow: "sm",
              padding: "xs",
              radius: "md",
              style: {
                minHeight: "100px",
                height: "auto",
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                border: "1px dashed #ccc",
                cursor: "pointer"
              },
              onClick: () => handleAddDependentToGroup(groupIndex),
              children: /* @__PURE__ */ jsx_runtime6.jsx(ActionIcon, {
                variant: "transparent",
                size: "xl",
                children: /* @__PURE__ */ jsx_runtime6.jsx(IconPlus, {})
              })
            })
          })
        ]
      }),
      /* @__PURE__ */ jsx_runtime6.jsx(DependentGroupSetValue, {
        groupIndex,
        imageVariableId: variableConfig.id,
        mapId: layoutMap.id,
        variableValue: dependentGroup.variableValue
      })
    ]
  }, groupIndex);
};

// src/components/LayoutMappingModal/VariableCard.tsx
var jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var VariableCard = ({
  variableConfig,
  layoutMap
}) => {
  const documentVariables = appStore((store) => store.state.studio.document.variables);
  const raiseError2 = appStore((store) => store.raiseError);
  const setCurrentImageVariableId = appStore((store) => store.effects.modal.dependentModal.setCurrentImageVariableId);
  const setDependentModalIsOpen = appStore((store) => store.effects.modal.dependentModal.setIsOpen);
  const removeImageVariable = appStore((store) => store.effects.studio.layoutImageMapping.removeImageVariable);
  const [isOpen, setIsOpen] = import_react243.useState(false);
  const variableImageConfig = documentVariables.find((v2) => v2.id === variableConfig.id);
  if (variableImageConfig == null) {
    raiseError2(Result.error(new Error("variableDocument is null")));
    throw "ERROR - DO BETTER!!!";
  }
  const handleAddGroup = () => {
    setCurrentImageVariableId(variableConfig.id);
    setDependentModalIsOpen(true);
  };
  return /* @__PURE__ */ jsx_runtime7.jsxs(Paper, {
    styles: { root: { margin: "15px" } },
    shadow: "sm",
    radius: "lg",
    p: "md",
    children: [
      /* @__PURE__ */ jsx_runtime7.jsxs(Group, {
        justify: "space-between",
        onClick: () => setIsOpen(!isOpen),
        children: [
          /* @__PURE__ */ jsx_runtime7.jsx(Title, {
            order: 5,
            children: variableImageConfig.name
          }),
          /* @__PURE__ */ jsx_runtime7.jsxs(Group, {
            gap: "md",
            children: [
              /* @__PURE__ */ jsx_runtime7.jsx(ActionIcon, {
                size: "lg",
                radius: "xl",
                onClick: () => setIsOpen(!isOpen),
                style: {
                  transform: isOpen ? "rotate(0deg)" : "rotate(90deg)",
                  transition: "transform 0.2s ease"
                },
                children: /* @__PURE__ */ jsx_runtime7.jsx(IconCaretDownFilled, {})
              }),
              /* @__PURE__ */ jsx_runtime7.jsx(ActionIcon, {
                size: "lg",
                color: "red",
                radius: "xl",
                onClick: () => {
                  removeImageVariable({
                    mapId: layoutMap.id,
                    imageVariableId: variableConfig.id
                  });
                },
                children: /* @__PURE__ */ jsx_runtime7.jsx(IconTrashFilled, {})
              })
            ]
          })
        ]
      }),
      isOpen && /* @__PURE__ */ jsx_runtime7.jsxs(jsx_runtime7.Fragment, {
        children: [
          /* @__PURE__ */ jsx_runtime7.jsxs(Text, {
            size: "small",
            c: "dimmed",
            children: [
              "Type: ",
              variableImageConfig.type
            ]
          }),
          /* @__PURE__ */ jsx_runtime7.jsx(Title, {
            order: 6,
            mt: "md",
            children: "Dependents:"
          }),
          variableConfig.dependentGroup.length === 0 ? /* @__PURE__ */ jsx_runtime7.jsx(Text, {
            size: "sm",
            c: "dimmed",
            children: "No dependents"
          }) : variableConfig.dependentGroup.map((dependentGroup, groupIndex) => {
            console.log(dependentGroup);
            return /* @__PURE__ */ jsx_runtime7.jsx(DependentGroup, {
              dependentGroup,
              groupIndex,
              variableConfig,
              layoutMap
            }, groupIndex);
          }),
          /* @__PURE__ */ jsx_runtime7.jsx(Group, {
            mt: "md",
            justify: "flex-end",
            children: /* @__PURE__ */ jsx_runtime7.jsx(Button, {
              variant: "subtle",
              size: "sm",
              onClick: handleAddGroup,
              children: /* @__PURE__ */ jsx_runtime7.jsxs(Group, {
                align: "center",
                style: { gap: "5px" },
                children: [
                  /* @__PURE__ */ jsx_runtime7.jsx(IconPlus, {
                    size: 16
                  }),
                  /* @__PURE__ */ jsx_runtime7.jsx(Text, {
                    children: "Add Group"
                  })
                ]
              })
            })
          })
        ]
      })
    ]
  }, variableConfig.id);
};

// src/components/LayoutMappingModal/LayoutConfigSelection.tsx
var jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var LayoutConfigSection = ({
  mapConfig,
  index: index4
}) => {
  const [isOpen, setIsOpen] = import_react244.useState(false);
  const [menuOpened, setMenuOpened] = import_react244.useState(false);
  const [deleteModalOpen, setDeleteModalOpen] = import_react244.useState(false);
  const addLayoutMapFromCopy = appStore((store) => store.effects.studio.layoutImageMapping.addLayoutMapFromCopy);
  const setIsImageVariableMappingModalOpen = appStore((store) => store.effects.modal.setIsImageVariableMappingModalOpen);
  const setCurrentSelectedMapId = appStore((store) => store.effects.modal.setCurrentSelectedMapId);
  const setCurrentAddImageMappingSelectedVariables = appStore((store) => store.effects.modal.setCurrentAddImageMappingSelectedVariables);
  const deleteLayoutMap = appStore((store) => store.effects.studio.layoutImageMapping.deleteLayoutMap);
  return /* @__PURE__ */ jsx_runtime8.jsxs(Paper, {
    p: "md",
    children: [
      /* @__PURE__ */ jsx_runtime8.jsxs(Group, {
        justify: "space-between",
        mb: 20,
        onClick: () => setIsOpen(!isOpen),
        children: [
          /* @__PURE__ */ jsx_runtime8.jsxs(Title, {
            order: 3,
            children: [
              "Layout Mapping #",
              index4 + 1
            ]
          }),
          /* @__PURE__ */ jsx_runtime8.jsx(Group, {
            children: /* @__PURE__ */ jsx_runtime8.jsxs(Group, {
              gap: "xs",
              children: [
                /* @__PURE__ */ jsx_runtime8.jsx(ActionIcon, {
                  size: "lg",
                  radius: "xl",
                  onClick: () => addLayoutMapFromCopy(mapConfig.id),
                  children: /* @__PURE__ */ jsx_runtime8.jsx(IconCopy, {})
                }),
                /* @__PURE__ */ jsx_runtime8.jsx(ActionIcon, {
                  size: "lg",
                  color: "red",
                  radius: "xl",
                  onClick: () => setDeleteModalOpen(true),
                  children: /* @__PURE__ */ jsx_runtime8.jsx(IconTrashFilled, {})
                }),
                /* @__PURE__ */ jsx_runtime8.jsx(ActionIcon, {
                  size: "lg",
                  radius: "xl",
                  onClick: () => setIsOpen(!isOpen),
                  style: {
                    transform: isOpen ? "rotate(0deg)" : "rotate(90deg)",
                    transition: "transform 0.2s ease"
                  },
                  children: /* @__PURE__ */ jsx_runtime8.jsx(IconCaretDownFilled, {})
                })
              ]
            })
          })
        ]
      }),
      /* @__PURE__ */ jsx_runtime8.jsx(Title, {
        styles: { root: { marginTop: "30px" } },
        order: 5,
        mb: "md",
        children: "Layout Dependencies"
      }),
      /* @__PURE__ */ jsx_runtime8.jsx(LayoutMultiSelect, {
        showButton: isOpen,
        layoutConfig: mapConfig
      }, index4),
      isOpen && /* @__PURE__ */ jsx_runtime8.jsxs(jsx_runtime8.Fragment, {
        children: [
          /* @__PURE__ */ jsx_runtime8.jsx(Divider, {
            styles: { root: { marginTop: "30px" } }
          }),
          /* @__PURE__ */ jsx_runtime8.jsx(Title, {
            styles: { root: { marginTop: "20px" } },
            order: 5,
            mb: "md",
            children: "Set Variables"
          }),
          mapConfig.variables.map((variableConfig) => /* @__PURE__ */ jsx_runtime8.jsx(VariableCard, {
            variableConfig,
            layoutMap: mapConfig
          }, variableConfig.id)),
          /* @__PURE__ */ jsx_runtime8.jsxs(Button, {
            onClick: () => {
              setIsImageVariableMappingModalOpen(true);
              setCurrentSelectedMapId(mapConfig.id);
              setCurrentAddImageMappingSelectedVariables([]);
            },
            children: [
              /* @__PURE__ */ jsx_runtime8.jsx(IconPlus, {}),
              /* @__PURE__ */ jsx_runtime8.jsx("span", {
                style: { marginLeft: "10px" },
                children: "Add Variables"
              })
            ]
          })
        ]
      }),
      /* @__PURE__ */ jsx_runtime8.jsxs(Modal, {
        opened: deleteModalOpen,
        onClose: () => setDeleteModalOpen(false),
        title: "Confirm Deletion",
        centered: true,
        children: [
          /* @__PURE__ */ jsx_runtime8.jsx(Text, {
            size: "sm",
            mb: "lg",
            children: "Are you sure you want to delete this mapping?"
          }),
          /* @__PURE__ */ jsx_runtime8.jsxs(Group, {
            justify: "flex-end",
            mt: "md",
            children: [
              /* @__PURE__ */ jsx_runtime8.jsx(Button, {
                variant: "outline",
                onClick: () => setDeleteModalOpen(false),
                children: "Cancel"
              }),
              /* @__PURE__ */ jsx_runtime8.jsx(Button, {
                color: "red",
                onClick: () => {
                  deleteLayoutMap(mapConfig.id);
                  setDeleteModalOpen(false);
                },
                children: "Delete"
              })
            ]
          })
        ]
      })
    ]
  }, index4);
};

// src/components/LayoutMappingModal/LayoutModal.tsx
var jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var LayoutImageMappingModal = ({ onExportCSV = () => console.log("Export CSV clicked") }) => {
  const events2 = appStore((state) => state.effects);
  const raiseError2 = appStore((state) => state.raiseError);
  const enableToolbar = appStore((state) => state.enableToolbar);
  const document2 = appStore((state) => state.state.studio.document);
  const variables = appStore((state) => state.state.studio.document.variables);
  const isLayoutConfigLoaded = appStore((state) => state.state.studio.isLayoutConfigLoaded);
  const isDocumentLoaded = appStore((state) => state.state.studio.isDocumentLoaded);
  const isModalVisible = appStore((state) => state.state.modal.isModalVisible);
  const layoutImageMapping = appStore((state) => state.state.studio.layoutImageMapping);
  const currentSelectedMapId = appStore((state) => state.state.modal.currentSelectedMapId);
  const [validationReport, setValidationReport] = import_react245.useState(null);
  const [isValidationModalOpen, setIsValidationModalOpen] = import_react245.useState(false);
  const imageVariables = import_react245.useMemo(() => {
    return variables.filter((variable) => variable.type === "image");
  }, [variables]);
  const imageVariableOptions = import_react245.useMemo(() => {
    return imageVariables.map((variable) => ({
      value: variable.id,
      label: variable.name
    }));
  }, [imageVariables]);
  import_react245.useEffect(() => {
    const loadConfig = async () => {
      if (!isLayoutConfigLoaded && !isDocumentLoaded) {
        const resultDoc = await loadDocFromDoc();
        const resultLayoutMap = await loadLayoutImageMapFromDoc();
        resultLayoutMap.fold((layoutMapArray) => {
          resultDoc.fold((doc) => {
            const combinedReport = {
              removedLayoutIds: [],
              removedVariables: [],
              removedDependents: [],
              removedVariableValues: []
            };
            const cleanedConfigArray = layoutMapArray.map((config) => {
              const { cleanLayoutMap, report } = layoutMappingValidation(config, doc);
              combinedReport.removedLayoutIds.push(...report.removedLayoutIds);
              combinedReport.removedVariables.push(...report.removedVariables);
              combinedReport.removedDependents.push(...report.removedDependents);
              combinedReport.removedVariableValues.push(...report.removedVariableValues);
              return cleanLayoutMap;
            });
            const hasRemovedItems = combinedReport.removedLayoutIds.length > 0 || combinedReport.removedVariables.length > 0 || combinedReport.removedDependents.length > 0 || combinedReport.removedVariableValues.length > 0;
            if (hasRemovedItems) {
              setValidationReport(combinedReport);
              setIsValidationModalOpen(true);
              events2.studio.layoutImageMapping.load(cleanedConfigArray);
            } else {
              events2.studio.layoutImageMapping.load(layoutMapArray);
            }
            events2.studio.document.load(doc);
          }, raiseError2);
        }, raiseError2);
      }
    };
    if (isModalVisible)
      loadConfig();
  }, [isModalVisible]);
  if (!isModalVisible)
    return null;
  const handleClose = () => {
    events2.studio.document.unload();
    events2.studio.layoutImageMapping.unload();
    enableToolbar();
    events2.modal.hideModal();
  };
  const handleSave = async () => {
    const saveToDocResult = await saveLayoutImageMapToDoc(layoutImageMapping);
    saveToDocResult.map(async (_2) => {
      return await saveLayoutMappingToAction(layoutImageMapping, document2);
    }).fold(handleClose, (e) => e ? raiseError2(e) : e);
  };
  const handleConfigChange = (updatedConfig) => {
    events2.studio.layoutImageMapping.load(updatedConfig);
  };
  const ModalHeader2 = () => {
    return /* @__PURE__ */ jsx_runtime9.jsx(TopBar, {
      children: /* @__PURE__ */ jsx_runtime9.jsxs(Group, {
        justify: "space-between",
        w: "100%",
        children: [
          /* @__PURE__ */ jsx_runtime9.jsx(Title, {
            order: 4,
            c: "white",
            children: "Layout Image Mapping Tool"
          }),
          /* @__PURE__ */ jsx_runtime9.jsx(Button, {
            leftSection: /* @__PURE__ */ jsx_runtime9.jsx(IconPlus, {
              size: 16
            }),
            onClick: () => events2.studio.layoutImageMapping.addLayoutMap(),
            children: "Add Mapping"
          })
        ]
      })
    });
  };
  const ModalFooter = () => {
    return /* @__PURE__ */ jsx_runtime9.jsx(BottomBar, {
      children: /* @__PURE__ */ jsx_runtime9.jsxs(Group, {
        justify: "flex-end",
        gap: "sm",
        children: [
          /* @__PURE__ */ jsx_runtime9.jsx(Checkbox, {
            defaultChecked: true,
            label: "Generate Action"
          }),
          /* @__PURE__ */ jsx_runtime9.jsx(Button, {
            color: "green",
            onClick: handleSave,
            children: "Save"
          }),
          /* @__PURE__ */ jsx_runtime9.jsx(Button, {
            onClick: handleClose,
            children: "Close"
          })
        ]
      })
    });
  };
  return /* @__PURE__ */ jsx_runtime9.jsxs(MantineProvider, {
    defaultColorScheme: "dark",
    children: [
      /* @__PURE__ */ jsx_runtime9.jsxs(Modal, {
        trapFocus: false,
        styles: {
          body: {
            width: "100%",
            height: "90%",
            padding: "0px",
            backgroundColor: "#4a4949",
            borderRadius: "8px",
            display: "flex",
            flexDirection: "column",
            boxShadow: "0 4px 8px rgba(0, 0, 0, 0.2)",
            overflow: "hidden"
          },
          content: {
            width: "100%",
            height: "100%",
            justifyContent: "center",
            alignItems: "center",
            display: "flex"
          }
        },
        centered: true,
        fullScreen: true,
        opened: isModalVisible,
        onClose: handleClose,
        withCloseButton: false,
        children: [
          /* @__PURE__ */ jsx_runtime9.jsx(ModalHeader2, {}),
          /* @__PURE__ */ jsx_runtime9.jsx(Content, {
            children: !isLayoutConfigLoaded || !isDocumentLoaded ? /* @__PURE__ */ jsx_runtime9.jsx(LoadingSpinner, {}) : /* @__PURE__ */ jsx_runtime9.jsx(Stack, {
              h: "100%",
              gap: "md",
              children: layoutImageMapping.map((config, index4) => /* @__PURE__ */ jsx_runtime9.jsx(LayoutConfigSection, {
                mapConfig: config,
                index: index4
              }, index4))
            })
          }),
          /* @__PURE__ */ jsx_runtime9.jsx(ModalFooter, {})
        ]
      }),
      /* @__PURE__ */ jsx_runtime9.jsx(AddMappingImageVariableModal, {
        currentMapConfig: layoutImageMapping.find((config) => config.id === currentSelectedMapId) || null
      }),
      /* @__PURE__ */ jsx_runtime9.jsx(AddDependentModal, {}),
      /* @__PURE__ */ jsx_runtime9.jsx(Modal, {
        opened: isValidationModalOpen,
        onClose: () => setIsValidationModalOpen(false),
        title: /* @__PURE__ */ jsx_runtime9.jsx(Title, {
          order: 4,
          children: "Layout Mapping Validation"
        }),
        centered: true,
        size: "lg",
        children: /* @__PURE__ */ jsx_runtime9.jsxs(Stack, {
          gap: "md",
          children: [
            /* @__PURE__ */ jsx_runtime9.jsx(Alert, {
              color: "yellow",
              title: "Items Removed from Layout Mapping",
              children: /* @__PURE__ */ jsx_runtime9.jsx(Text, {
                children: "Values were deleted from the document and thus we also removed those values from your layout mapping."
              })
            }),
            validationReport && /* @__PURE__ */ jsx_runtime9.jsxs(jsx_runtime9.Fragment, {
              children: [
                validationReport.removedLayoutIds.length > 0 && /* @__PURE__ */ jsx_runtime9.jsxs(Stack, {
                  gap: "xs",
                  children: [
                    /* @__PURE__ */ jsx_runtime9.jsx(Text, {
                      fw: 600,
                      children: "Removed Layout IDs:"
                    }),
                    /* @__PURE__ */ jsx_runtime9.jsx(List, {
                      children: validationReport.removedLayoutIds.map((id, index4) => /* @__PURE__ */ jsx_runtime9.jsx(List.Item, {
                        children: id
                      }, index4))
                    })
                  ]
                }),
                validationReport.removedVariables.length > 0 && /* @__PURE__ */ jsx_runtime9.jsxs(Stack, {
                  gap: "xs",
                  children: [
                    /* @__PURE__ */ jsx_runtime9.jsx(Text, {
                      fw: 600,
                      children: "Removed Variables:"
                    }),
                    /* @__PURE__ */ jsx_runtime9.jsx(List, {
                      children: validationReport.removedVariables.map((id, index4) => /* @__PURE__ */ jsx_runtime9.jsx(List.Item, {
                        children: id
                      }, index4))
                    })
                  ]
                }),
                validationReport.removedDependents.length > 0 && /* @__PURE__ */ jsx_runtime9.jsxs(Stack, {
                  gap: "xs",
                  children: [
                    /* @__PURE__ */ jsx_runtime9.jsx(Text, {
                      fw: 600,
                      children: "Removed Dependents:"
                    }),
                    /* @__PURE__ */ jsx_runtime9.jsx(List, {
                      children: validationReport.removedDependents.map((item, index4) => /* @__PURE__ */ jsx_runtime9.jsxs(List.Item, {
                        children: [
                          "Variable ID: ",
                          item.variableId,
                          " (from Image Variable:",
                          " ",
                          item.imageVariableId,
                          ")"
                        ]
                      }, index4))
                    })
                  ]
                }),
                validationReport.removedVariableValues.length > 0 && /* @__PURE__ */ jsx_runtime9.jsxs(Stack, {
                  gap: "xs",
                  children: [
                    /* @__PURE__ */ jsx_runtime9.jsx(Text, {
                      fw: 600,
                      children: "Removed Variable Values:"
                    }),
                    /* @__PURE__ */ jsx_runtime9.jsx(List, {
                      children: validationReport.removedVariableValues.map((item, index4) => /* @__PURE__ */ jsx_runtime9.jsxs(List.Item, {
                        children: [
                          "Value: ",
                          item.value,
                          " (from Image Variable:",
                          " ",
                          item.imageVariableId,
                          ", Group:",
                          " ",
                          item.dependentGroupIndex,
                          ")"
                        ]
                      }, index4))
                    })
                  ]
                })
              ]
            }),
            /* @__PURE__ */ jsx_runtime9.jsx(Group, {
              justify: "flex-end",
              children: /* @__PURE__ */ jsx_runtime9.jsx(Button, {
                onClick: () => setIsValidationModalOpen(false),
                children: "OK"
              })
            })
          ]
        })
      })
    ]
  });
};
var TopBar = dt.div`
  padding: 16px 20px;
  background-color: #3a3939;
  border-bottom: 1px solid #5a5a5a;
`;
var Content = dt.div`
  flex: 1;
  padding: 20px;
  overflow-y: auto;
`;
var BottomBar = dt.div`
  padding: 16px 20px;
  background-color: #3a3939;
  border-top: 1px solid #5a5a5a;
`;
var LoadingSpinner = dt.div`
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;

  &:after {
    content: "";
    width: 40px;
    height: 40px;
    border: 4px solid #f3f3f3;
    border-top: 4px solid #be4bdb;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
`;

// src/components/Toolbar.tsx
var import_react257 = __toESM(require_react(), 1);

// src/components/FrameSnapshotLayout/FrameSnapshotLayoutModal.tsx
var import_react252 = __toESM(require_react(), 1);

// src/components/FrameSnapshotLayout/FrameLayoutCard.tsx
var import_react251 = __toESM(require_react(), 1);

// src/components/FrameSnapshotLayout/FrameSnapshotRow.tsx
var import_react247 = __toESM(require_react(), 1);

// src/components/FrameSnapshotLayout/EditableCell.tsx
var import_react246 = __toESM(require_react(), 1);
var jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
function EditableCell({
  rowKey,
  field,
  value,
  onEditStart,
  isEditing,
  editValue,
  onEditChange,
  onEditSave,
  onEditCancel
}) {
  const [isHovered, setIsHovered] = import_react246.useState(false);
  const inputRef = import_react246.useRef(null);
  const cellKey = `${rowKey}:${field}`;
  import_react246.useEffect(() => {
    if (isEditing) {
      setTimeout(() => inputRef.current?.focus(), 10);
    }
  }, [isEditing]);
  import_react246.useEffect(() => {
    console.log(rowKey);
  }, []);
  const handleKeyDown = (e) => {
    if (e.key === "Enter")
      onEditSave();
    if (e.key === "Escape")
      onEditCancel();
  };
  return /* @__PURE__ */ jsx_runtime10.jsx("div", {
    onMouseEnter: () => setIsHovered(true),
    onMouseLeave: () => setIsHovered(false),
    style: { position: "relative" },
    children: isEditing ? field === "imageName" ? /* @__PURE__ */ jsx_runtime10.jsx(TextInput, {
      ref: inputRef,
      value: editValue,
      onChange: (e) => onEditChange(e.target.value),
      onKeyDown: handleKeyDown,
      onBlur: onEditSave,
      size: "xs",
      style: { width: "100%" }
    }) : /* @__PURE__ */ jsx_runtime10.jsx(NumberInput, {
      ref: inputRef,
      value: Number(editValue),
      onChange: (val) => onEditChange(val || 0),
      onKeyDown: handleKeyDown,
      onBlur: onEditSave,
      size: "xs",
      style: { width: "100%" }
    }) : /* @__PURE__ */ jsx_runtime10.jsxs(jsx_runtime10.Fragment, {
      children: [
        value,
        isHovered && /* @__PURE__ */ jsx_runtime10.jsx(ActionIcon, {
          size: "xs",
          variant: "subtle",
          color: "blue",
          style: { position: "absolute", right: "5px", top: "50%", transform: "translateY(-50%)" },
          onClick: () => onEditStart(cellKey, value),
          children: /* @__PURE__ */ jsx_runtime10.jsx(IconPencil, {
            size: 14
          })
        })
      ]
    })
  });
}

// src/components/FrameSnapshotLayout/FrameSnapshotRow.tsx
var jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
function FrameSnapshotRow({
  snapshot,
  layoutId,
  onEditCell,
  onCheckChange,
  isChecked
}) {
  const [editState, setEditState] = import_react247.useState({ key: null, value: "" });
  const handleEditStart = import_react247.useCallback((key, value) => {
    setEditState({ key, value });
  }, []);
  const handleEditChange = import_react247.useCallback((value) => {
    setEditState((prev2) => ({ ...prev2, value }));
  }, []);
  const handleEditSave = import_react247.useCallback(() => {
    if (editState.key && onEditCell) {
      onEditCell(layoutId, editState.key, editState.value);
    }
    setEditState({ key: null, value: "" });
  }, [editState, onEditCell]);
  const handleEditCancel = import_react247.useCallback(() => {
    setEditState({ key: null, value: "" });
  }, []);
  const rowStyle = isChecked ? { backgroundColor: "#e6f7ff" } : {};
  return /* @__PURE__ */ jsx_runtime11.jsxs(Table.Tr, {
    style: rowStyle,
    children: [
      ["imageName", "x", "y", "width", "height"].map((field) => /* @__PURE__ */ jsx_runtime11.jsx(Table.Td, {
        children: /* @__PURE__ */ jsx_runtime11.jsx(EditableCell, {
          rowKey: snapshot.uniqueId,
          field,
          value: snapshot[field],
          onEditStart: handleEditStart,
          isEditing: editState.key === `${snapshot.uniqueId}:${field}`,
          editValue: editState.value,
          onEditChange: handleEditChange,
          onEditSave: handleEditSave,
          onEditCancel: handleEditCancel
        })
      }, field)),
      /* @__PURE__ */ jsx_runtime11.jsx(Table.Td, {
        children: /* @__PURE__ */ jsx_runtime11.jsx(Checkbox, {
          checked: isChecked,
          onChange: (event) => onCheckChange(snapshot.uniqueId, event.currentTarget.checked)
        })
      })
    ]
  });
}

// src/components/FrameSnapshotLayout/CopyToLayerModal.tsx
var import_react248 = __toESM(require_react(), 1);
var jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
function CopyToLayerModal({
  opened,
  onClose,
  snapshots,
  sourceLayoutId,
  frameLayoutMaps,
  onUpdateFrameLayoutMaps
}) {
  const [layouts, setLayouts] = import_react248.useState([]);
  const [selectedLayoutId, setSelectedLayoutId] = import_react248.useState(null);
  const [isLoading, setIsLoading] = import_react248.useState(false);
  const raiseError2 = appStore((store) => store.raiseError);
  import_react248.useEffect(() => {
    if (opened) {
      loadAvailableLayouts();
    }
  }, [opened]);
  const loadAvailableLayouts = async () => {
    try {
      const layoutsResult = await getAllLayouts(window.SDK);
      if (!layoutsResult.isOk()) {
        raiseError2(new Error(layoutsResult.error?.message || "Failed to load layouts"));
        return;
      }
      const filteredLayouts = layoutsResult.value.filter((layout) => layout.id !== sourceLayoutId).map((layout) => ({
        value: layout.id,
        label: layout.name || "Unnamed Layout"
      }));
      setLayouts(filteredLayouts);
      if (filteredLayouts.length > 0) {
        setSelectedLayoutId(filteredLayouts[0].value);
      }
    } catch (error) {
      raiseError2(error instanceof Error ? error : new Error(String(error)));
    }
  };
  const handleCopy = () => {
    if (!selectedLayoutId) {
      raiseError2(new Error("No layout selected"));
      return;
    }
    setIsLoading(true);
    try {
      const updatedFrameLayoutMaps = [...frameLayoutMaps];
      let targetLayoutMap = updatedFrameLayoutMaps.find((map) => map.layoutId === selectedLayoutId);
      if (!targetLayoutMap) {
        const layoutName = layouts.find((l2) => l2.value === selectedLayoutId)?.label || "Unknown Layout";
        targetLayoutMap = {
          layoutId: selectedLayoutId,
          layoutName,
          frameSnapshots: []
        };
        updatedFrameLayoutMaps.push(targetLayoutMap);
      }
      for (const snapshot of snapshots) {
        const uniqueId = snapshot.uniqueId || `${snapshot.frameId}_${snapshot.imageName}`;
        const existingIndex = targetLayoutMap.frameSnapshots.findIndex((s2) => s2.id === uniqueId);
        if (existingIndex !== -1) {
          targetLayoutMap.frameSnapshots[existingIndex] = {
            frameId: snapshot.frameId,
            imageName: snapshot.imageName,
            x: snapshot.x,
            y: snapshot.y,
            width: snapshot.width,
            height: snapshot.height,
            id: uniqueId
          };
        } else {
          targetLayoutMap.frameSnapshots.push({
            frameId: snapshot.frameId,
            imageName: snapshot.imageName,
            x: snapshot.x,
            y: snapshot.y,
            width: snapshot.width,
            height: snapshot.height,
            id: uniqueId
          });
        }
      }
      onUpdateFrameLayoutMaps(updatedFrameLayoutMaps);
      onClose();
    } catch (error) {
      raiseError2(error instanceof Error ? error : new Error(String(error)));
    } finally {
      setIsLoading(false);
    }
  };
  return /* @__PURE__ */ jsx_runtime12.jsx(Modal, {
    opened,
    onClose,
    title: "Copy to Layer",
    centered: true,
    children: /* @__PURE__ */ jsx_runtime12.jsxs(Stack, {
      children: [
        /* @__PURE__ */ jsx_runtime12.jsxs(Text, {
          size: "sm",
          children: [
            "Select a layout to copy ",
            snapshots.length,
            " snapshot",
            snapshots.length !== 1 ? "s" : "",
            " to:"
          ]
        }),
        /* @__PURE__ */ jsx_runtime12.jsx(Select, {
          label: "Target Layout",
          placeholder: "Select a layout",
          data: layouts,
          value: selectedLayoutId,
          onChange: setSelectedLayoutId,
          searchable: true,
          required: true
        }),
        /* @__PURE__ */ jsx_runtime12.jsxs(Group, {
          justify: "flex-end",
          mt: "md",
          children: [
            /* @__PURE__ */ jsx_runtime12.jsx(Button, {
              variant: "outline",
              onClick: onClose,
              children: "Cancel"
            }),
            /* @__PURE__ */ jsx_runtime12.jsx(Button, {
              onClick: handleCopy,
              loading: isLoading,
              disabled: !selectedLayoutId,
              children: "Copy"
            })
          ]
        })
      ]
    })
  });
}

// src/components/FrameSnapshotLayout/CopyAndAddRowModal.tsx
var import_react249 = __toESM(require_react(), 1);
var jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
function CopyAndAddRowModal({
  opened,
  onClose,
  snapshot,
  layoutId,
  existingSnapshots,
  onAddCopy
}) {
  const [newName, setNewName] = import_react249.useState("");
  const [error, setError] = import_react249.useState(null);
  const [isLoading, setIsLoading] = import_react249.useState(false);
  import_react249.default.useEffect(() => {
    if (opened) {
      setNewName(snapshot.imageName);
      setError(null);
      setIsLoading(false);
    }
  }, [opened, snapshot]);
  const handleNameChange = (e) => {
    setNewName(e.target.value);
    setError(null);
  };
  const handleCreate = () => {
    if (!newName.trim()) {
      setError("Name cannot be empty");
      return;
    }
    const nameExists = existingSnapshots.some((s2) => s2.imageName === newName.trim());
    if (nameExists) {
      setError("Name already exists");
      return;
    }
    setIsLoading(true);
    onAddCopy(snapshot, newName.trim());
    setIsLoading(false);
    onClose();
  };
  return /* @__PURE__ */ jsx_runtime13.jsx(Modal, {
    opened,
    onClose,
    title: "Copy and Add Row",
    centered: true,
    children: /* @__PURE__ */ jsx_runtime13.jsxs(Stack, {
      children: [
        /* @__PURE__ */ jsx_runtime13.jsx(Text, {
          size: "sm",
          children: "Enter a name for the new snapshot:"
        }),
        /* @__PURE__ */ jsx_runtime13.jsx(TextInput, {
          label: "Name",
          placeholder: "Enter name",
          value: newName,
          onChange: handleNameChange,
          error,
          required: true,
          autoFocus: true
        }),
        /* @__PURE__ */ jsx_runtime13.jsxs(Group, {
          justify: "flex-end",
          mt: "md",
          children: [
            /* @__PURE__ */ jsx_runtime13.jsx(Button, {
              variant: "outline",
              onClick: onClose,
              children: "Cancel"
            }),
            /* @__PURE__ */ jsx_runtime13.jsx(Button, {
              onClick: handleCreate,
              loading: isLoading,
              disabled: !newName.trim(),
              children: "Create"
            })
          ]
        })
      ]
    })
  });
}

// src/components/FrameSnapshotLayout/CopyAndReplaceModal.tsx
var import_react250 = __toESM(require_react(), 1);
var jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
function CopyAndReplaceModal({
  opened,
  onClose,
  snapshots,
  layoutId,
  existingSnapshots,
  onAddCopy
}) {
  const [searchText, setSearchText] = import_react250.useState("");
  const [replaceText, setReplaceText] = import_react250.useState("");
  const [errors, setErrors] = import_react250.useState({});
  const [isLoading, setIsLoading] = import_react250.useState(false);
  const [previewSnapshot, setPreviewSnapshot] = import_react250.useState(null);
  const [previewNewName, setPreviewNewName] = import_react250.useState("");
  const [isPreviewNameDifferent, setIsPreviewNameDifferent] = import_react250.useState(false);
  import_react250.useEffect(() => {
    if (opened) {
      setSearchText("");
      setReplaceText("");
      setErrors({});
      setIsLoading(false);
      if (snapshots.length > 0) {
        setPreviewSnapshot(snapshots[0]);
        setPreviewNewName(snapshots[0].imageName);
        setIsPreviewNameDifferent(false);
      }
    }
  }, [opened, snapshots]);
  import_react250.useEffect(() => {
    if (previewSnapshot) {
      const newName = previewSnapshot.imageName.replace(new RegExp(searchText, "g"), replaceText);
      setPreviewNewName(newName);
      setIsPreviewNameDifferent(newName !== previewSnapshot.imageName);
    }
  }, [searchText, replaceText, previewSnapshot]);
  const handleSearchChange = (e) => {
    setSearchText(e.target.value);
  };
  const handleReplaceChange = (e) => {
    setReplaceText(e.target.value);
  };
  const handleCopyAndReplace = () => {
    if (!searchText.trim()) {
      setErrors({ searchText: "Search text cannot be empty" });
      return;
    }
    setIsLoading(true);
    const newErrors = {};
    let hasErrors = false;
    snapshots.forEach((snapshot) => {
      const newName = snapshot.imageName.replace(new RegExp(searchText, "g"), replaceText);
      if (newName === snapshot.imageName) {
        return;
      }
      const nameExists = existingSnapshots.some((s2) => s2.imageName === newName);
      if (nameExists) {
        newErrors[snapshot.uniqueId] = `Name "${newName}" already exists`;
        hasErrors = true;
      }
    });
    if (hasErrors) {
      setErrors(newErrors);
      setIsLoading(false);
      return;
    }
    snapshots.forEach((snapshot) => {
      const newName = snapshot.imageName.replace(new RegExp(searchText, "g"), replaceText);
      if (newName === snapshot.imageName) {
        return;
      }
      onAddCopy(snapshot, newName);
    });
    setIsLoading(false);
    onClose();
  };
  return /* @__PURE__ */ jsx_runtime14.jsx(Modal, {
    opened,
    onClose,
    title: "Copy and Replace",
    centered: true,
    children: /* @__PURE__ */ jsx_runtime14.jsxs(Stack, {
      children: [
        /* @__PURE__ */ jsx_runtime14.jsx(Text, {
          size: "sm",
          children: "Enter search and replace text to create copies with modified names:"
        }),
        /* @__PURE__ */ jsx_runtime14.jsx(TextInput, {
          label: "Search",
          placeholder: "Text to search for",
          value: searchText,
          onChange: handleSearchChange,
          error: errors.searchText,
          required: true,
          autoFocus: true
        }),
        /* @__PURE__ */ jsx_runtime14.jsx(TextInput, {
          label: "Replace",
          placeholder: "Text to replace with",
          value: replaceText,
          onChange: handleReplaceChange,
          required: true
        }),
        previewSnapshot && /* @__PURE__ */ jsx_runtime14.jsxs(Alert, {
          color: isPreviewNameDifferent ? "green" : "red",
          title: "Name Preview",
          children: [
            /* @__PURE__ */ jsx_runtime14.jsxs(Text, {
              size: "sm",
              children: [
                "Original: ",
                previewSnapshot.imageName
              ]
            }),
            /* @__PURE__ */ jsx_runtime14.jsxs(Text, {
              size: "sm",
              children: [
                "New: ",
                previewNewName
              ]
            }),
            /* @__PURE__ */ jsx_runtime14.jsxs(Text, {
              size: "sm",
              fw: 700,
              children: [
                "Is name different: ",
                isPreviewNameDifferent ? "Yes" : "No"
              ]
            })
          ]
        }),
        Object.keys(errors).length > 0 && Object.keys(errors).some((key) => key !== "searchText") && /* @__PURE__ */ jsx_runtime14.jsx(Alert, {
          color: "red",
          title: "Validation Errors",
          children: Object.entries(errors).filter(([key]) => key !== "searchText").map(([key, error]) => /* @__PURE__ */ jsx_runtime14.jsx(Text, {
            size: "sm",
            children: error
          }, key))
        }),
        /* @__PURE__ */ jsx_runtime14.jsxs(Group, {
          justify: "flex-end",
          mt: "md",
          children: [
            /* @__PURE__ */ jsx_runtime14.jsx(Button, {
              variant: "outline",
              onClick: onClose,
              children: "Cancel"
            }),
            /* @__PURE__ */ jsx_runtime14.jsx(Button, {
              onClick: handleCopyAndReplace,
              loading: isLoading,
              disabled: !searchText.trim() || !isPreviewNameDifferent,
              children: "Copy and Replace"
            })
          ]
        })
      ]
    })
  });
}

// src/components/FrameSnapshotLayout/FrameLayoutCard.tsx
var jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
function FrameLayoutCard({
  layoutMap,
  onRemoveSnapshot,
  onEditCell,
  frameLayoutMaps,
  onUpdateFrameLayoutMaps
}) {
  const [checkedSnapshots, setCheckedSnapshots] = import_react251.useState({});
  const [copyModalOpened, setCopyModalOpened] = import_react251.useState(false);
  const [copyAndAddRowModalOpened, setCopyAndAddRowModalOpened] = import_react251.useState(false);
  const [copyAndReplaceModalOpened, setCopyAndReplaceModalOpened] = import_react251.useState(false);
  const handleCheckChange = (snapshotKey, isChecked) => {
    setCheckedSnapshots((prev2) => ({
      ...prev2,
      [snapshotKey]: isChecked
    }));
  };
  const getCheckedSnapshots = () => {
    return layoutMap.snapshots.filter((snapshot) => checkedSnapshots[snapshot.uniqueId]);
  };
  const deleteCheckedSnapshots = async () => {
    const checked = getCheckedSnapshots();
    for (const snapshot of checked) {
      if (snapshot.uniqueId) {
        await onRemoveSnapshot(layoutMap.layoutId, snapshot.uniqueId);
      }
    }
    setCheckedSnapshots({});
  };
  const deselectAllRows = () => {
    setCheckedSnapshots({});
  };
  const hasCheckedSnapshots = Object.values(checkedSnapshots).some(Boolean);
  const checkedSnapshotsCount = Object.values(checkedSnapshots).filter(Boolean).length;
  const singleSelectedSnapshot = import_react251.useMemo(() => {
    if (checkedSnapshotsCount === 1) {
      const selectedKey = Object.keys(checkedSnapshots).find((key) => checkedSnapshots[key]);
      return layoutMap.snapshots.find((snapshot) => snapshot.uniqueId === selectedKey);
    }
    return null;
  }, [checkedSnapshots, layoutMap.snapshots]);
  const handleAddCopy = (snapshot, newName) => {
    const updatedFrameLayoutMaps = [...frameLayoutMaps];
    const currentLayoutMap = updatedFrameLayoutMaps.find((map) => map.layoutId === layoutMap.layoutId);
    if (!currentLayoutMap)
      return;
    const uniqueId = `${snapshot.frameId}_${newName}`;
    const newSnapshot = {
      frameId: snapshot.frameId,
      imageName: newName,
      x: snapshot.x,
      y: snapshot.y,
      width: snapshot.width,
      height: snapshot.height,
      id: uniqueId,
      uniqueId
    };
    if (!currentLayoutMap.frameSnapshots) {
      currentLayoutMap.frameSnapshots = [];
    }
    currentLayoutMap.frameSnapshots.push(newSnapshot);
    onUpdateFrameLayoutMaps(updatedFrameLayoutMaps);
  };
  return /* @__PURE__ */ jsx_runtime15.jsxs(Card, {
    shadow: "sm",
    padding: "md",
    radius: "md",
    withBorder: true,
    children: [
      /* @__PURE__ */ jsx_runtime15.jsx(Card.Section, {
        withBorder: true,
        inheritPadding: true,
        py: "xs",
        children: /* @__PURE__ */ jsx_runtime15.jsxs(Group, {
          justify: "space-between",
          children: [
            /* @__PURE__ */ jsx_runtime15.jsx(Title, {
              order: 4,
              children: layoutMap.layoutName
            }),
            /* @__PURE__ */ jsx_runtime15.jsx(Group, {
              children: hasCheckedSnapshots && /* @__PURE__ */ jsx_runtime15.jsxs(jsx_runtime15.Fragment, {
                children: [
                  /* @__PURE__ */ jsx_runtime15.jsx(ActionIcon, {
                    color: "red",
                    variant: "filled",
                    onClick: deleteCheckedSnapshots,
                    title: "Delete selected",
                    children: /* @__PURE__ */ jsx_runtime15.jsx(IconTrash, {
                      size: 16
                    })
                  }),
                  /* @__PURE__ */ jsx_runtime15.jsx(ActionIcon, {
                    color: "blue",
                    variant: "filled",
                    onClick: () => setCopyModalOpened(true),
                    title: "Copy to layer",
                    children: /* @__PURE__ */ jsx_runtime15.jsx(IconCopy, {
                      size: 16
                    })
                  }),
                  checkedSnapshotsCount === 1 && /* @__PURE__ */ jsx_runtime15.jsx(ActionIcon, {
                    color: "blue",
                    variant: "filled",
                    onClick: () => setCopyAndAddRowModalOpened(true),
                    title: "Copy and add row",
                    children: /* @__PURE__ */ jsx_runtime15.jsx(IconCopyPlus, {
                      size: 16
                    })
                  }),
                  /* @__PURE__ */ jsx_runtime15.jsx(ActionIcon, {
                    color: "blue",
                    variant: "filled",
                    onClick: () => setCopyAndReplaceModalOpened(true),
                    title: "Copy and replace",
                    children: /* @__PURE__ */ jsx_runtime15.jsx(IconReplace, {
                      size: 16
                    })
                  }),
                  /* @__PURE__ */ jsx_runtime15.jsx(ActionIcon, {
                    color: "blue",
                    variant: "filled",
                    onClick: deselectAllRows,
                    title: "Deselect all",
                    children: /* @__PURE__ */ jsx_runtime15.jsx(IconDeselect, {
                      size: 16
                    })
                  })
                ]
              })
            })
          ]
        })
      }),
      /* @__PURE__ */ jsx_runtime15.jsxs(Table, {
        mt: "md",
        striped: true,
        highlightOnHover: true,
        children: [
          /* @__PURE__ */ jsx_runtime15.jsx(Table.Thead, {
            children: /* @__PURE__ */ jsx_runtime15.jsxs(Table.Tr, {
              children: [
                /* @__PURE__ */ jsx_runtime15.jsx(Table.Th, {
                  children: "Image Name"
                }),
                /* @__PURE__ */ jsx_runtime15.jsx(Table.Th, {
                  children: "X"
                }),
                /* @__PURE__ */ jsx_runtime15.jsx(Table.Th, {
                  children: "Y"
                }),
                /* @__PURE__ */ jsx_runtime15.jsx(Table.Th, {
                  children: "Width"
                }),
                /* @__PURE__ */ jsx_runtime15.jsx(Table.Th, {
                  children: "Height"
                }),
                /* @__PURE__ */ jsx_runtime15.jsx(Table.Th, {
                  children: "Actions"
                })
              ]
            })
          }),
          /* @__PURE__ */ jsx_runtime15.jsx(Table.Tbody, {
            children: layoutMap.snapshots.map((snapshot) => /* @__PURE__ */ jsx_runtime15.jsx(FrameSnapshotRow, {
              snapshot,
              layoutId: layoutMap.layoutId,
              onRemoveSnapshot,
              onEditCell,
              onCheckChange: handleCheckChange,
              isChecked: !!checkedSnapshots[snapshot.uniqueId]
            }, snapshot.uniqueId))
          })
        ]
      }),
      /* @__PURE__ */ jsx_runtime15.jsx(CopyToLayerModal, {
        opened: copyModalOpened,
        onClose: () => setCopyModalOpened(false),
        snapshots: getCheckedSnapshots(),
        sourceLayoutId: layoutMap.layoutId,
        frameLayoutMaps,
        onUpdateFrameLayoutMaps
      }),
      singleSelectedSnapshot && /* @__PURE__ */ jsx_runtime15.jsx(CopyAndAddRowModal, {
        opened: copyAndAddRowModalOpened,
        onClose: () => setCopyAndAddRowModalOpened(false),
        snapshot: singleSelectedSnapshot,
        layoutId: layoutMap.layoutId,
        existingSnapshots: layoutMap.snapshots,
        onAddCopy: handleAddCopy
      }),
      /* @__PURE__ */ jsx_runtime15.jsx(CopyAndReplaceModal, {
        opened: copyAndReplaceModalOpened,
        onClose: () => setCopyAndReplaceModalOpened(false),
        snapshots: getCheckedSnapshots(),
        layoutId: layoutMap.layoutId,
        existingSnapshots: layoutMap.snapshots,
        onAddCopy: handleAddCopy
      })
    ]
  }, layoutMap.layoutId);
}

// src/components/FrameSnapshotLayout/FrameSnapshotLayoutModal.tsx
var jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
function FrameSnapshotLayoutModal({
  opened,
  onClose
}) {
  const [frameLayoutMaps, setFrameLayoutMaps] = import_react252.useState([]);
  const [isLoading, setIsLoading] = import_react252.useState(false);
  const [isRemoving, setIsRemoving] = import_react252.useState(false);
  const raiseError2 = appStore((store) => store.raiseError);
  const tableData = import_react252.useMemo(() => {
    return frameLayoutMaps.map((frameLayoutMap, layoutIndex) => {
      let snapshots = frameLayoutMap.frameSnapshots.map((snapshot, snapshotIndex) => {
        const uniqueId = `${snapshot.frameId}_${snapshot.imageName}`;
        return {
          ...snapshot,
          uniqueId
        };
      });
      snapshots = [...snapshots].sort((a2, b) => a2.imageName.localeCompare(b.imageName));
      return {
        layoutId: frameLayoutMap.layoutId,
        layoutName: frameLayoutMap.layoutName,
        snapshots
      };
    });
  }, [frameLayoutMaps]);
  const sortAlphabetically = (maps) => {
    return maps.map((map) => {
      map.frameSnapshots = [...map.frameSnapshots].sort((a2, b) => a2.imageName.localeCompare(b.imageName));
    });
  };
  const handleEditCell = import_react252.useCallback((layoutId, key, value) => {
    if (!key)
      return;
    const [uniqueId, field] = key.split(":");
    setFrameLayoutMaps((prev2) => {
      const next2 = [...prev2];
      const frameSnapshot = next2.find((map) => map.layoutId === layoutId)?.frameSnapshots.find((s2) => s2.uniqueId === uniqueId);
      if (!frameSnapshot)
        return prev2;
      if (field === "imageName") {
        const nameExists = next2.some((map) => map.frameSnapshots.some((s2) => s2.imageName === value && s2.uniqueId !== uniqueId));
        if (nameExists)
          return prev2;
        const stringValue = String(value).trim();
        if (stringValue === "")
          return prev2;
        frameSnapshot.imageName = String(value);
      } else {
        frameSnapshot[field] = Number(value);
      }
      return next2;
    });
  }, []);
  const loadFrameLayouts = async () => {
    setIsLoading(true);
    try {
      const frameLayoutsResult = await loadFrameLayoutMapsFromDoc();
      if (!frameLayoutsResult.isOk()) {
        raiseError2(new Error(frameLayoutsResult.error?.message || "Failed to load frame layouts"));
        return;
      }
      const layoutsResult = await getAllLayouts(window.SDK);
      if (!layoutsResult.isOk()) {
        raiseError2(new Error(layoutsResult.error?.message || "Failed to load layouts"));
        return;
      }
      const layoutMap = new Map;
      layoutsResult.value.forEach((layout) => {
        layoutMap.set(layout.id, layout.name || "Unnamed Layout");
      });
      const enhancedFrameLayoutMaps = frameLayoutsResult.value.map((frameLayoutMap) => ({
        ...frameLayoutMap,
        frameSnapshots: frameLayoutMap.frameSnapshots.map((snapshot) => ({
          ...snapshot,
          uniqueId: `${snapshot.frameId}_${snapshot.imageName}`
        })),
        layoutName: layoutMap.get(frameLayoutMap.layoutId) || "Unknown Layout"
      }));
      setFrameLayoutMaps(enhancedFrameLayoutMaps);
    } catch (error) {
      raiseError2(error instanceof Error ? error : new Error(String(error)));
    } finally {
      setIsLoading(false);
    }
  };
  import_react252.useEffect(() => {
    if (opened) {
      loadFrameLayouts();
    }
  }, [opened]);
  const handleRemoveFrameLayout = async (layoutId, uniqueId) => {
    try {
      setIsRemoving(true);
      setFrameLayoutMaps((prev2) => {
        const next2 = [...prev2];
        for (let i2 = 0;i2 < next2.length; i2++) {
          const layout = next2[i2];
          if (layout.layoutId === layoutId) {
            const snapshotIndex = layout.frameSnapshots.findIndex((s2) => s2.uniqueId === uniqueId);
            if (snapshotIndex !== -1) {
              layout.frameSnapshots.splice(snapshotIndex, 1);
              break;
            }
          }
        }
        return next2;
      });
    } catch (error) {
      raiseError2(error instanceof Error ? error : new Error(String(error)));
    } finally {
      setIsRemoving(false);
    }
  };
  const cleanupFrameLayoutMaps = import_react252.useCallback(() => {
    return frameLayoutMaps.map((map) => {
      const { layoutName, ...cleanMap } = map;
      const sortedSnapshots = [...cleanMap.frameSnapshots].sort((a2, b) => a2.imageName.localeCompare(b.imageName));
      return {
        ...cleanMap,
        frameSnapshots: sortedSnapshots
      };
    });
  }, [frameLayoutMaps]);
  const saveCleanedFrameLayoutMaps = import_react252.useCallback(async () => {
    const cleanFrameLayoutMaps = cleanupFrameLayoutMaps();
    return await saveFrameLayoutMapsToDoc(cleanFrameLayoutMaps);
  }, [cleanupFrameLayoutMaps]);
  const handleUpdateActions = async () => {
    setIsLoading(true);
    try {
      const saveResult = await saveCleanedFrameLayoutMaps();
      if (!saveResult.isOk()) {
        raiseError2(new Error(saveResult.error?.message || "Failed to save frame layout maps"));
        return;
      }
      const result = await saveImageSizingMappingToAction(cleanupFrameLayoutMaps());
      if (result.isError()) {
        raiseError2(result.error);
      }
    } catch (error) {
      raiseError2(error instanceof Error ? error : new Error(String(error)));
    } finally {
      setIsLoading(false);
      onClose();
    }
  };
  const handleCleanupAndClose = async () => {
    setIsLoading(true);
    try {
      const saveResult = await saveCleanedFrameLayoutMaps();
      if (!saveResult.isOk()) {
        raiseError2(new Error(saveResult.error?.message || "Failed to save frame layout maps"));
      }
    } catch (error) {
      raiseError2(error instanceof Error ? error : new Error(String(error)));
    } finally {
      setIsLoading(false);
      onClose();
    }
  };
  return /* @__PURE__ */ jsx_runtime16.jsx(Modal, {
    opened,
    onClose: handleCleanupAndClose,
    title: "Frame Position Viewer",
    fullScreen: true,
    centered: true,
    children: /* @__PURE__ */ jsx_runtime16.jsxs("div", {
      style: { display: "flex", flexDirection: "column", height: "calc(100vh - 120px)" },
      children: [
        /* @__PURE__ */ jsx_runtime16.jsx(Group, {
          justify: "flex-end",
          mb: "md"
        }),
        /* @__PURE__ */ jsx_runtime16.jsx(ScrollArea, {
          style: { flex: 1 },
          children: isLoading ? /* @__PURE__ */ jsx_runtime16.jsx(Center, {
            style: { height: "100%", width: "100%" },
            children: /* @__PURE__ */ jsx_runtime16.jsx(Loader, {
              size: "lg"
            })
          }) : /* @__PURE__ */ jsx_runtime16.jsx(Stack, {
            children: frameLayoutMaps.length === 0 ? /* @__PURE__ */ jsx_runtime16.jsx(Text, {
              children: "No frame layouts found."
            }) : tableData.map((layout) => /* @__PURE__ */ jsx_runtime16.jsx(FrameLayoutCard, {
              layoutMap: layout,
              onRemoveSnapshot: handleRemoveFrameLayout,
              onEditCell: handleEditCell,
              frameLayoutMaps,
              onUpdateFrameLayoutMaps: setFrameLayoutMaps
            }, layout.layoutId))
          })
        }),
        /* @__PURE__ */ jsx_runtime16.jsxs(Group, {
          justify: "flex-end",
          mt: "md",
          children: [
            /* @__PURE__ */ jsx_runtime16.jsx(Button, {
              onClick: handleUpdateActions,
              color: "blue",
              disabled: isLoading || isRemoving,
              loading: isLoading || isRemoving,
              children: "Update Actions"
            }),
            /* @__PURE__ */ jsx_runtime16.jsx(Button, {
              onClick: handleCleanupAndClose,
              disabled: isRemoving,
              children: "Close"
            })
          ]
        })
      ]
    })
  });
}
// src/components/AddFrameSnapshotModal.tsx
var import_react253 = __toESM(require_react(), 1);
var jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
function AddFrameSnapshotModal({
  opened,
  onClose,
  raiseError: raiseError2
}) {
  const [status, setStatus] = import_react253.useState("idle");
  const [message, setMessage] = import_react253.useState(null);
  const [positionData, setPositionData] = import_react253.useState(null);
  import_react253.useEffect(() => {
    if (!opened) {
      setStatus("idle");
      setMessage(null);
      setPositionData(null);
      return;
    }
    const fetchAndValidateFrame = async () => {
      setStatus("loading");
      setMessage(null);
      try {
        const studioResult = await getStudio();
        if (!studioResult.isOk()) {
          throw studioResult.error;
        }
        const studio2 = studioResult.value;
        const selectedResult = await getSelected2(studio2);
        if (!selectedResult.isOk()) {
          throw selectedResult.error;
        }
        const selectedFrames = selectedResult.value;
        if (selectedFrames.length === 0) {
          setStatus("error");
          setMessage("Please select an image frame.");
          return;
        }
        if (selectedFrames.length > 1) {
          setStatus("error");
          setMessage(`Please select only one frame - ${selectedFrames.length} were selected.`);
          return;
        }
        const selectedFrameType = selectedFrames[0];
        if (selectedFrameType.type !== "image") {
          setStatus("error");
          setMessage(`Please select an image frame, you selected a ${selectedFrameType.type || "non-image"} frame.`);
          return;
        }
        const frameResult = await getById2(studio2, selectedFrameType.id);
        if (!frameResult.isOk()) {
          throw frameResult.error;
        }
        const frame = frameResult.value;
        const frameVariableId = frame.src?.id;
        if (!frameVariableId) {
          throw new Error("Image frame is not tied to image variable");
        }
        const variableResult = await getById(studio2, frameVariableId);
        if (!variableResult.isOk()) {
          throw variableResult.error;
        }
        const linkedVariable = variableResult.value;
        const variableValue = linkedVariable.value?.assetId;
        if (!variableValue) {
          throw new Error("assetId not found on linked variable");
        }
        const propertiesResult = await getPropertiesOnSelectedLayout(studio2);
        if (!propertiesResult.isOk()) {
          throw propertiesResult.error;
        }
        const allProperties = propertiesResult.value;
        const frameProperties = Array.isArray(allProperties) ? allProperties.find((prop) => prop.id === selectedFrameType.id) : null;
        if (!frameProperties) {
          throw new Error(`Could not find properties for selected frame ${selectedFrameType.name} with ID: ${selectedFrameType.id}`);
        }
        const { x: x2, y: y2, width, height } = frameProperties;
        if (x2?.value === undefined || y2?.value === undefined || width?.value === undefined || height?.value === undefined) {
          throw new Error("Selected image frame is missing position properties (x, y, width, or height values).");
        }
        const extractedPosition = { x: x2.value, y: y2.value, width: width.value, height: height.value };
        setPositionData(extractedPosition);
        const updateResult = await updateFrameLayoutMaps({
          frameId: selectedFrameType.id,
          assetId: variableValue,
          x: extractedPosition.x,
          y: extractedPosition.y,
          width: extractedPosition.width,
          height: extractedPosition.height
        });
        if (!updateResult.isOk()) {
          throw updateResult.error;
        }
        setStatus("success");
        setMessage("Image position successfully saved to layout mapping");
      } catch (error) {
        const err = error instanceof Error ? error : new Error(String(error));
        setStatus("error");
        setMessage(err.message);
        raiseError2(err);
      }
    };
    fetchAndValidateFrame();
  }, [opened, raiseError2]);
  return /* @__PURE__ */ jsx_runtime17.jsx(Modal, {
    opened,
    onClose: status === "loading" ? () => {
    } : onClose,
    title: "Snapshot Image Position",
    centered: true,
    closeOnClickOutside: status !== "loading",
    closeOnEscape: status !== "loading",
    children: /* @__PURE__ */ jsx_runtime17.jsxs(Stack, {
      children: [
        status === "loading" && /* @__PURE__ */ jsx_runtime17.jsxs(Stack, {
          align: "center",
          children: [
            /* @__PURE__ */ jsx_runtime17.jsx(Loader, {}),
            /* @__PURE__ */ jsx_runtime17.jsx(Text, {
              children: "Processing frame snapshot..."
            })
          ]
        }),
        status === "error" && message && /* @__PURE__ */ jsx_runtime17.jsx(Alert, {
          icon: /* @__PURE__ */ jsx_runtime17.jsx(IconAlertCircle, {
            size: "1rem"
          }),
          title: "Error",
          color: "red",
          children: message
        }),
        status === "success" && message && /* @__PURE__ */ jsx_runtime17.jsx(Alert, {
          color: "green",
          title: "Success",
          children: message
        }),
        status === "idle" && /* @__PURE__ */ jsx_runtime17.jsx(Text, {
          size: "sm",
          c: "dimmed",
          children: "Initializing..."
        })
      ]
    })
  });
}

// src/components/LayoutManagerModal.tsx
var import_react254 = __toESM(require_react(), 1);
var jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
function LayoutManagerModal({ opened, onClose }) {
  const [layouts, setLayouts] = import_react254.useState([]);
  const [studio2, setStudio] = import_react254.useState(null);
  const raiseError2 = appStore((store) => store.raiseError);
  import_react254.useEffect(() => {
    const fetchLayouts = async () => {
      try {
        const studioResult = await getStudio();
        if (!studioResult.isOk()) {
          raiseError2(new Error(studioResult.error?.message || "Failed to get studio"));
          return;
        }
        setStudio(studioResult.value);
        const layoutsResult = await getAllLayouts(studioResult.value);
        if (!layoutsResult.isOk()) {
          raiseError2(new Error(layoutsResult.error?.message || "Failed to get layouts"));
          return;
        }
        const layoutNodes = layoutsResult.value.map((layout) => ({
          id: layout.id,
          name: layout.name,
          parentId: layout.parentId,
          available: true,
          resizable: layout.resizableByUser.enabled,
          minWidth: layout.resizableByUser.minWidth,
          maxWidth: layout.resizableByUser.maxWidth,
          minHeight: layout.resizableByUser.minHeight,
          maxHeight: layout.resizableByUser.maxHeight,
          lockAspectRatio: false,
          percentage: 100
        }));
        const sortedLayouts = sortLayouts(layoutNodes);
        setLayouts(sortedLayouts);
      } catch (error) {
        raiseError2(error instanceof Error ? error : new Error(String(error)));
      }
    };
    if (opened) {
      fetchLayouts();
    }
  }, [opened, raiseError2]);
  const sortLayouts = (layoutNodes) => {
    const nodeMap = new Map;
    layoutNodes.forEach((node2) => {
      nodeMap.set(node2.id, node2);
    });
    const depthMap = new Map;
    const getDepth = (nodeId) => {
      if (depthMap.has(nodeId)) {
        return depthMap.get(nodeId);
      }
      const node2 = nodeMap.get(nodeId);
      if (!node2 || !node2.parentId) {
        depthMap.set(nodeId, 0);
        return 0;
      }
      const parentDepth = getDepth(node2.parentId);
      const depth = parentDepth + 1;
      depthMap.set(nodeId, depth);
      return depth;
    };
    layoutNodes.forEach((node2) => getDepth(node2.id));
    return [...layoutNodes].sort((a2, b) => {
      const depthA = depthMap.get(a2.id) || 0;
      const depthB = depthMap.get(b.id) || 0;
      if (depthA !== depthB) {
        return depthA - depthB;
      }
      return a2.name.localeCompare(b.name);
    });
  };
  const handleSaveLayout = async (layout) => {
    if (!studio2)
      return;
    try {
      const update = {
        enabled: { value: layout.resizable },
        minWidth: layout.minWidth !== undefined ? { value: String(layout.minWidth) } : undefined,
        maxWidth: layout.maxWidth !== undefined ? { value: String(layout.maxWidth) } : undefined,
        minHeight: layout.minHeight !== undefined ? { value: String(layout.minHeight) } : undefined,
        maxHeight: layout.maxHeight !== undefined ? { value: String(layout.maxHeight) } : undefined
      };
      const result = await updateLayoutResizable(studio2, layout.id, update);
      if (!result.isOk()) {
        raiseError2(new Error(result.error?.message || "Failed to update layout"));
        return;
      }
    } catch (error) {
      raiseError2(error instanceof Error ? error : new Error(String(error)));
    }
  };
  const handleLayoutChange = (layoutId, property, value) => {
    setLayouts(layouts.map((node2) => node2.id === layoutId ? { ...node2, [property]: value } : node2));
  };
  const LayoutCard = ({ node: node2 }) => {
    const getParentInfo = () => {
      if (!node2.parentId)
        return null;
      const parent = layouts.find((layout) => layout.id === node2.parentId);
      if (!parent)
        return null;
      return /* @__PURE__ */ jsx_runtime18.jsxs(Text, {
        size: "sm",
        color: "dimmed",
        children: [
          "Parent: ",
          parent.name
        ]
      });
    };
    const getIndentation = () => {
      const parent = layouts.find((layout) => layout.id === node2.parentId);
      return parent ? 20 : 0;
    };
    return /* @__PURE__ */ jsx_runtime18.jsx(Box, {
      mb: "sm",
      ml: getIndentation(),
      children: /* @__PURE__ */ jsx_runtime18.jsx(Card, {
        shadow: "sm",
        p: "md",
        radius: "md",
        withBorder: true,
        children: /* @__PURE__ */ jsx_runtime18.jsxs(Stack, {
          children: [
            /* @__PURE__ */ jsx_runtime18.jsx(Group, {
              justify: "space-between",
              children: /* @__PURE__ */ jsx_runtime18.jsxs(Stack, {
                gap: "xs",
                children: [
                  /* @__PURE__ */ jsx_runtime18.jsx(Title, {
                    order: 5,
                    children: node2.name
                  }),
                  getParentInfo()
                ]
              })
            }),
            /* @__PURE__ */ jsx_runtime18.jsxs(Group, {
              children: [
                /* @__PURE__ */ jsx_runtime18.jsx(Switch, {
                  label: "Available",
                  checked: node2.available,
                  onChange: (event) => handleLayoutChange(node2.id, "available", event.currentTarget.checked)
                }),
                /* @__PURE__ */ jsx_runtime18.jsx(Switch, {
                  label: "Resizable",
                  checked: node2.resizable,
                  onChange: (event) => handleLayoutChange(node2.id, "resizable", event.currentTarget.checked)
                })
              ]
            }),
            /* @__PURE__ */ jsx_runtime18.jsxs(Group, {
              children: [
                /* @__PURE__ */ jsx_runtime18.jsx(NumberInput, {
                  label: "Min Width",
                  value: node2.minWidth !== null ? node2.minWidth : undefined,
                  onChange: (value) => handleLayoutChange(node2.id, "minWidth", value),
                  disabled: !node2.resizable,
                  style: { width: "80px" }
                }),
                /* @__PURE__ */ jsx_runtime18.jsx(NumberInput, {
                  label: "Max Width",
                  value: node2.maxWidth !== null ? node2.maxWidth : undefined,
                  onChange: (value) => handleLayoutChange(node2.id, "maxWidth", value),
                  disabled: !node2.resizable,
                  style: { width: "80px" }
                }),
                /* @__PURE__ */ jsx_runtime18.jsx(NumberInput, {
                  label: "Min Height",
                  value: node2.minHeight !== null ? node2.minHeight : undefined,
                  onChange: (value) => handleLayoutChange(node2.id, "minHeight", value),
                  disabled: !node2.resizable,
                  style: { width: "80px" }
                }),
                /* @__PURE__ */ jsx_runtime18.jsx(NumberInput, {
                  label: "Max Height",
                  value: node2.maxHeight !== null ? node2.maxHeight : undefined,
                  onChange: (value) => handleLayoutChange(node2.id, "maxHeight", value),
                  disabled: !node2.resizable,
                  style: { width: "80px" }
                })
              ]
            }),
            /* @__PURE__ */ jsx_runtime18.jsx(Checkbox, {
              label: "Lock Aspect Ratio",
              checked: node2.lockAspectRatio,
              onChange: (event) => handleLayoutChange(node2.id, "lockAspectRatio", event.currentTarget.checked),
              disabled: !node2.resizable
            }),
            node2.lockAspectRatio && /* @__PURE__ */ jsx_runtime18.jsx(NumberInput, {
              label: "Percentage",
              value: node2.percentage,
              onChange: (value) => handleLayoutChange(node2.id, "percentage", value),
              min: 0,
              max: 50,
              step: 1,
              style: { width: "60px" }
            }),
            /* @__PURE__ */ jsx_runtime18.jsx(Group, {
              justify: "flex-end",
              mt: "xs",
              children: /* @__PURE__ */ jsx_runtime18.jsx(Button, {
                onClick: () => handleSaveLayout(node2),
                color: "blue",
                size: "sm",
                children: "Save Changes"
              })
            })
          ]
        })
      })
    });
  };
  return /* @__PURE__ */ jsx_runtime18.jsx(Modal, {
    opened,
    onClose,
    title: "Layout Manager",
    size: "xl",
    fullScreen: true,
    children: /* @__PURE__ */ jsx_runtime18.jsxs(Box, {
      style: { height: "calc(100vh - 120px)", overflowY: "auto", padding: "16px" },
      children: [
        /* @__PURE__ */ jsx_runtime18.jsx(Title, {
          order: 4,
          mb: "md",
          children: "Layouts"
        }),
        /* @__PURE__ */ jsx_runtime18.jsx(Stack, {
          children: layouts.map((node2) => /* @__PURE__ */ jsx_runtime18.jsx(LayoutCard, {
            node: node2
          }, node2.id))
        })
      ]
    })
  });
}

// src/components/DownloadModal.tsx
var import_react256 = __toESM(require_react(), 1);

// src/studio/documentHandler.ts
async function getCurrentDocumentState(studio2) {
  return handleStudioFunc(studio2.document.getCurrentState);
}
async function loadDocumentFromJsonStr(studio2, document2) {
  return handleStudioFunc(studio2.document.load, document2);
}

// src/components/ConnectorReplacementModal.tsx
var import_react255 = __toESM(require_react(), 1);
var jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
function ConnectorReplacementModal({
  opened,
  onClose,
  missingConnectors,
  availableConnectors,
  onReplace,
  nameMatches = {}
}) {
  const [replacements, setReplacements] = import_react255.useState({});
  const mediaConnectors = availableConnectors.filter((c2) => c2.type === "media");
  import_react255.useEffect(() => {
    if (opened && Object.keys(nameMatches).length > 0) {
      setReplacements(nameMatches);
    }
  }, [opened, nameMatches]);
  const allSelected = missingConnectors.every((connector) => replacements[connector.id] !== undefined);
  const handleReplace = () => {
    const replacementArray = Object.entries(replacements).map(([original, replacement]) => ({
      original,
      replacement
    }));
    onReplace(replacementArray);
    onClose();
  };
  return /* @__PURE__ */ jsx_runtime19.jsx(Modal, {
    opened,
    onClose,
    title: "Missing Connectors Detected",
    size: "lg",
    centered: true,
    children: /* @__PURE__ */ jsx_runtime19.jsxs(Stack, {
      children: [
        /* @__PURE__ */ jsx_runtime19.jsx(Text, {
          size: "sm",
          children: "The following connectors in your document were not found in your current environment. Please select replacement connectors:"
        }),
        /* @__PURE__ */ jsx_runtime19.jsxs(Table, {
          children: [
            /* @__PURE__ */ jsx_runtime19.jsx(Table.Thead, {
              children: /* @__PURE__ */ jsx_runtime19.jsxs(Table.Tr, {
                children: [
                  /* @__PURE__ */ jsx_runtime19.jsx(Table.Th, {
                    children: "Original Connector"
                  }),
                  /* @__PURE__ */ jsx_runtime19.jsx(Table.Th, {
                    children: "ID"
                  }),
                  /* @__PURE__ */ jsx_runtime19.jsx(Table.Th, {
                    children: "Replace With"
                  })
                ]
              })
            }),
            /* @__PURE__ */ jsx_runtime19.jsx(Table.Tbody, {
              children: missingConnectors.map((connector) => /* @__PURE__ */ jsx_runtime19.jsxs(Table.Tr, {
                children: [
                  /* @__PURE__ */ jsx_runtime19.jsx(Table.Td, {
                    children: connector.name
                  }),
                  /* @__PURE__ */ jsx_runtime19.jsx(Table.Td, {
                    children: connector.id
                  }),
                  /* @__PURE__ */ jsx_runtime19.jsx(Table.Td, {
                    children: /* @__PURE__ */ jsx_runtime19.jsx(Select, {
                      data: mediaConnectors.map((c2) => ({
                        value: c2.id,
                        label: c2.name
                      })),
                      placeholder: "Select a connector",
                      value: replacements[connector.id],
                      onChange: (value) => {
                        if (value) {
                          setReplacements((prev2) => ({
                            ...prev2,
                            [connector.id]: value
                          }));
                        }
                      }
                    })
                  })
                ]
              }, connector.id))
            })
          ]
        }),
        /* @__PURE__ */ jsx_runtime19.jsxs(Group, {
          justify: "flex-end",
          children: [
            /* @__PURE__ */ jsx_runtime19.jsx(Button, {
              onClick: onClose,
              variant: "outline",
              children: "Cancel"
            }),
            /* @__PURE__ */ jsx_runtime19.jsx(Button, {
              onClick: handleReplace,
              disabled: !allSelected,
              children: "Replace Connectors"
            })
          ]
        })
      ]
    })
  });
}

// src/components/DownloadModal.tsx
var jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
function DownloadModal({ opened, onClose }) {
  const fileInputRef = import_react256.useRef(null);
  const raiseError2 = appStore((store) => store.raiseError);
  const [replacementModalOpened, setReplacementModalOpened] = import_react256.useState(false);
  const [missingConnectors, setMissingConnectors] = import_react256.useState([]);
  const [availableConnectors, setAvailableConnectors] = import_react256.useState([]);
  const [pendingJsonContent, setPendingJsonContent] = import_react256.useState("");
  const [nameMatches, setNameMatches] = import_react256.useState({});
  const [downloadTemplateFonts, setDownloadTemplateFonts] = import_react256.useState(false);
  const handleDownload = async () => {
    try {
      const studioResult = await getStudio();
      if (!studioResult.isOk()) {
        raiseError2(new Error(studioResult.error?.message || "Failed to get studio"));
        return;
      }
      const documentResult = await getCurrentDocumentState(studioResult.value);
      if (!documentResult.isOk()) {
        raiseError2(new Error(documentResult.error?.message || "Failed to get document state"));
        return;
      }
      const token2 = (await studioResult.value.configuration.getValue("GRAFX_AUTH_TOKEN")).parsedData;
      const baseUrl = (await studioResult.value.configuration.getValue("ENVIRONMENT_API")).parsedData;
      const urlPath = window.location.href;
      const templateIdMatch = urlPath.match(/templates\/([\w-]+)/);
      let templateId = "";
      let templateName = "document";
      if (templateIdMatch && templateIdMatch[1]) {
        templateId = templateIdMatch[1];
        const token3 = (await studioResult.value.configuration.getValue("GRAFX_AUTH_TOKEN")).parsedData;
        const baseUrl2 = (await studioResult.value.configuration.getValue("ENVIRONMENT_API")).parsedData;
        try {
          const templateResponse = await fetch(`${baseUrl2}templates/${templateId}`, {
            headers: {
              Authorization: `Bearer ${token3}`,
              "Content-Type": "application/json"
            }
          });
          if (templateResponse.ok) {
            const templateData = await templateResponse.json();
            if (templateData && templateData.data && templateData.data.name) {
              templateName = templateData.data.name;
            }
          }
        } catch (error) {
          console.warn("Failed to fetch template name:", error);
        }
      }
      const jsonStr = JSON.stringify(documentResult.value, null, 2);
      const blob = new Blob([jsonStr], { type: "application/json" });
      const url = URL.createObjectURL(blob);
      const a2 = document.createElement("a");
      a2.href = url;
      a2.download = `${templateName}.json`;
      document.body.appendChild(a2);
      a2.click();
      setTimeout(() => {
        document.body.removeChild(a2);
        URL.revokeObjectURL(url);
      }, 0);
      if (downloadTemplateFonts) {
        try {
          const docValue = documentResult.value;
          if (docValue && docValue.stylekit && Array.isArray(docValue.stylekit.fontFamilies)) {
            const fontFamilies = docValue.stylekit.fontFamilies;
            const fontDownloads = [];
            for (const fontFamily of fontFamilies) {
              if (fontFamily && Array.isArray(fontFamily.fontStyles) && fontFamily.fontStyles.length > 0) {
                for (const fontStyle of fontFamily.fontStyles) {
                  const fontStyleId = fontStyle.fontStyleId;
                  if (!fontStyleId) {
                    console.warn("Font style ID is missing", fontStyle);
                    continue;
                  }
                  fontDownloads.push({ fontStyleId, fontFamily: fontFamily.name });
                }
              }
            }
            onClose();
            for (const download of fontDownloads) {
              try {
                const fontStyleResponse = await fetch(`${baseUrl}font-styles/${download.fontStyleId}`, {
                  headers: {
                    Authorization: `Bearer ${token2}`,
                    "Content-Type": "application/json"
                  }
                });
                if (!fontStyleResponse.ok) {
                  console.warn(`Failed to fetch font style details for ${download.fontStyleId}: ${fontStyleResponse.statusText}`);
                  continue;
                }
                const fontStyleDetails = await fontStyleResponse.json();
                const fontDownloadResponse = await fetch(`${baseUrl}font-styles/${download.fontStyleId}/download`, {
                  headers: {
                    Authorization: `Bearer ${token2}`
                  }
                });
                if (!fontDownloadResponse.ok) {
                  console.warn(`Failed to download font ${fontStyleDetails.fileName}: ${fontDownloadResponse.statusText}`);
                  continue;
                }
                const fontBlob = await fontDownloadResponse.blob();
                const fontUrl = URL.createObjectURL(fontBlob);
                const fontLink = document.createElement("a");
                fontLink.href = fontUrl;
                const lastDotIndex = fontStyleDetails.fileName.lastIndexOf(".");
                const fileName = fontStyleDetails.fileName.slice(0, lastDotIndex) + "_" + fontStyleDetails.name + fontStyleDetails.fileName.slice(lastDotIndex);
                fontLink.download = fileName;
                document.body.appendChild(fontLink);
                fontLink.click();
                setTimeout(() => {
                  document.body.removeChild(fontLink);
                  URL.revokeObjectURL(fontUrl);
                }, 100);
                await new Promise((resolve) => setTimeout(resolve, 300));
              } catch (error) {
                console.warn(`Error downloading font ${download.fontStyleId} from family ${download.fontFamily}:`, error);
              }
            }
          } else {
            console.warn("No font families found in the document");
            onClose();
          }
        } catch (fontError) {
          console.error("Error downloading template fonts:", fontError);
          raiseError2(new Error(`Error downloading template fonts: ${fontError instanceof Error ? fontError.message : String(fontError)}`));
          onClose();
        }
      } else {
        onClose();
      }
    } catch (error) {
      raiseError2(error instanceof Error ? error : new Error(String(error)));
    }
  };
  const handleUpload = () => {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  };
  const handleFileChange = async (event) => {
    const file = event.target.files?.[0];
    if (!file)
      return;
    try {
      const reader = new FileReader;
      reader.onload = async (e) => {
        const content = e.target?.result;
        setPendingJsonContent(content);
        try {
          const jsonData = JSON.parse(content);
          if (jsonData.connectors && Array.isArray(jsonData.connectors)) {
            const studioResult = await getStudio();
            if (!studioResult.isOk()) {
              raiseError2(new Error(studioResult.error?.message || "Failed to get studio"));
              return;
            }
            const token2 = (await studioResult.value.configuration.getValue("GRAFX_AUTH_TOKEN")).parsedData;
            const baseUrl = (await studioResult.value.configuration.getValue("ENVIRONMENT_API")).parsedData;
            try {
              const response = await fetch(`${baseUrl}connectors`, {
                headers: {
                  Authorization: `Bearer ${token2}`,
                  "Content-Type": "application/json"
                }
              });
              if (!response.ok) {
                throw new Error(`Failed to fetch connectors: ${response.statusText}`);
              }
              const connectorResponse = await response.json();
              setAvailableConnectors(connectorResponse.data);
              const documentConnectors = jsonData.connectors;
              const missingConnectorsList = [];
              const nameMatchesMap = {};
              for (const docConnector of documentConnectors) {
                if (docConnector.source.source === "grafx" && docConnector.source.id) {
                  const sourceId = docConnector.source.id;
                  const foundConnector = connectorResponse.data.find((c2) => c2.id === sourceId);
                  if (!foundConnector) {
                    const nameMatch = connectorResponse.data.find((c2) => c2.name === docConnector.name);
                    if (nameMatch) {
                      nameMatchesMap[docConnector.id] = nameMatch.id;
                      docConnector.source.id = nameMatch.id;
                      missingConnectorsList.push(docConnector);
                    } else {
                      missingConnectorsList.push(docConnector);
                    }
                  }
                }
              }
              setNameMatches(nameMatchesMap);
              if (missingConnectorsList.length > 0) {
                const allHaveMatches = missingConnectorsList.every((connector) => nameMatchesMap[connector.id] !== undefined);
                if (!allHaveMatches) {
                  setMissingConnectors(missingConnectorsList);
                  setReplacementModalOpened(true);
                  return;
                }
              }
              const updatedContent = JSON.stringify(jsonData);
              await loadDocument(studioResult.value, updatedContent);
            } catch (error) {
              raiseError2(error instanceof Error ? error : new Error(String(error)));
            }
          } else {
            const studioResult = await getStudio();
            if (!studioResult.isOk()) {
              raiseError2(new Error(studioResult.error?.message || "Failed to get studio"));
              return;
            }
            await loadDocument(studioResult.value, content);
          }
        } catch (parseError) {
          raiseError2(new Error(`Invalid JSON format: ${parseError instanceof Error ? parseError.message : String(parseError)}`));
        }
      };
      reader.readAsText(file);
    } catch (error) {
      raiseError2(error instanceof Error ? error : new Error(String(error)));
    }
    if (event.target) {
      event.target.value = "";
    }
  };
  const loadDocument = async (studio2, content) => {
    const loadResult = await loadDocumentFromJsonStr(studio2, content);
    if (!loadResult.isOk()) {
      raiseError2(new Error(loadResult.error?.message || "Failed to load document"));
      return;
    }
    onClose();
  };
  const handleConnectorReplacements = async (replacements) => {
    try {
      const jsonData = JSON.parse(pendingJsonContent);
      if (jsonData.connectors && Array.isArray(jsonData.connectors)) {
        const documentConnectors = jsonData.connectors;
        for (const docConnector of documentConnectors) {
          if (docConnector.source.source === "grafx") {
            const replacement = replacements.find((r3) => r3.original === docConnector.id);
            if (replacement) {
              docConnector.source.id = replacement.replacement;
            }
          }
        }
        const studioResult = await getStudio();
        if (!studioResult.isOk()) {
          raiseError2(new Error(studioResult.error?.message || "Failed to get studio"));
          return;
        }
        const updatedContent = JSON.stringify(jsonData);
        await loadDocument(studioResult.value, updatedContent);
      }
    } catch (error) {
      raiseError2(error instanceof Error ? error : new Error(String(error)));
    }
  };
  return /* @__PURE__ */ jsx_runtime20.jsxs(jsx_runtime20.Fragment, {
    children: [
      /* @__PURE__ */ jsx_runtime20.jsx(Modal, {
        opened,
        onClose,
        title: "Document Upload/Download",
        centered: true,
        children: /* @__PURE__ */ jsx_runtime20.jsxs(Stack, {
          children: [
            /* @__PURE__ */ jsx_runtime20.jsx(Text, {
              size: "sm",
              children: "Uploading and downloading only transfers the JSON not assets."
            }),
            /* @__PURE__ */ jsx_runtime20.jsxs(Stack, {
              gap: "xs",
              children: [
                /* @__PURE__ */ jsx_runtime20.jsxs(Group, {
                  children: [
                    /* @__PURE__ */ jsx_runtime20.jsx(Button, {
                      onClick: handleDownload,
                      color: "blue",
                      children: /* @__PURE__ */ jsx_runtime20.jsxs(Group, {
                        gap: "xs",
                        children: [
                          /* @__PURE__ */ jsx_runtime20.jsx(IconDownload, {
                            size: 20
                          }),
                          /* @__PURE__ */ jsx_runtime20.jsx("span", {
                            children: "Download"
                          })
                        ]
                      })
                    }),
                    /* @__PURE__ */ jsx_runtime20.jsx(Button, {
                      onClick: handleUpload,
                      color: "green",
                      children: /* @__PURE__ */ jsx_runtime20.jsxs(Group, {
                        gap: "xs",
                        children: [
                          /* @__PURE__ */ jsx_runtime20.jsx(IconUpload, {
                            size: 20
                          }),
                          /* @__PURE__ */ jsx_runtime20.jsx("span", {
                            children: "Upload"
                          })
                        ]
                      })
                    })
                  ]
                }),
                /* @__PURE__ */ jsx_runtime20.jsx(Checkbox, {
                  label: "Download template fonts",
                  checked: downloadTemplateFonts,
                  onChange: (event) => setDownloadTemplateFonts(event.currentTarget.checked)
                })
              ]
            })
          ]
        })
      }),
      /* @__PURE__ */ jsx_runtime20.jsx("input", {
        type: "file",
        ref: fileInputRef,
        style: { display: "none" },
        accept: ".json",
        onChange: handleFileChange
      }),
      /* @__PURE__ */ jsx_runtime20.jsx(ConnectorReplacementModal, {
        opened: replacementModalOpened,
        onClose: () => setReplacementModalOpened(false),
        missingConnectors,
        availableConnectors,
        onReplace: handleConnectorReplacements,
        nameMatches
      })
    ]
  });
}

// src/components/Toolbar.tsx
var jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
function Toolbar() {
  const [visible2, setVisible] = import_react257.useState(false);
  const [isDownloadUploadModalOpen, setIsDownloadUploadModalOpen] = import_react257.useState(false);
  const [isConvertModalOpen, setIsConvertModalOpen] = import_react257.useState(false);
  const [isUpdateModalOpen, setIsUpdateModalOpen] = import_react257.useState(false);
  const [isFramePositionViewerOpen, setIsFramePositionViewerOpen] = import_react257.useState(false);
  const [isAddFrameSnapshotModalOpen, setIsAddFrameSnapshotModalOpen] = import_react257.useState(false);
  const [isLayoutManagerOpen, setIsLayoutManagerOpen] = import_react257.useState(false);
  const [isAspectLockConfirmModalOpen, setIsAspectLockConfirmModalOpen] = import_react257.useState(false);
  const [isAspectLockSuccessModalOpen, setIsAspectLockSuccessModalOpen] = import_react257.useState(false);
  const [aspectLockSuccessMessage, setAspectLockSuccessMessage] = import_react257.useState("");
  const [updateInfo, setUpdateInfo] = import_react257.useState(null);
  const effects = appStore((store) => store.effects);
  const raiseError2 = appStore((store) => store.raiseError);
  const isToolbarEnabled = appStore((store) => store.state.isToolbarEnabled);
  const disableToolbar = appStore((store) => store.disableToolbar);
  const handleTestError = () => {
    raiseError2(new Error("This is a test error message"));
  };
  const setVisibleIntercept = (value) => {
    if (!isToolbarEnabled) {
      setVisible(false);
    }
    setVisible(value);
  };
  const handleUploadDownloadClick = () => {
    setIsDownloadUploadModalOpen(true);
  };
  const handleDismissUpdate = () => {
    if (updateInfo) {
      localStorage.setItem("toolbarplus_last_notified_version", updateInfo.latestVersion);
    }
    setIsUpdateModalOpen(false);
  };
  import_react257.useEffect(() => {
    const versionDiv = document.getElementById("toolbar-version");
    if (versionDiv) {
      const currentVersion = versionDiv.dataset.currentVersion;
      const latestVersion = versionDiv.dataset.latestVersion;
      if (currentVersion && latestVersion && currentVersion !== latestVersion) {
        setUpdateInfo({
          currentVersion,
          latestVersion
        });
        setIsUpdateModalOpen(true);
      }
    }
    const handleMouseMove = (event) => {
      if (event.clientY <= 40) {
        setVisibleIntercept(true);
      }
      if (event.clientY > 50) {
        setVisibleIntercept(false);
      }
    };
    document.addEventListener("mousemove", handleMouseMove);
    return () => {
      document.removeEventListener("mousemove", handleMouseMove);
    };
  }, []);
  const handleLayoutClick = () => {
    setVisible(false);
    disableToolbar();
    effects.modal.showModal();
  };
  const handleFramePositionViewer = () => {
    setVisible(false);
    setIsFramePositionViewerOpen(true);
  };
  const handleSnapshot = () => {
    setVisible(false);
    setIsAddFrameSnapshotModalOpen(true);
  };
  const handleLayoutManager = () => {
    setVisible(false);
    setIsLayoutManagerOpen(true);
  };
  const handleAspectLock = () => {
    setIsAspectLockConfirmModalOpen(true);
  };
  const handleConfirmAspectLock = async (value) => {
    setIsAspectLockConfirmModalOpen(false);
    (await saveLayoutSizingToAction(value)).fold((_2) => {
      setAspectLockSuccessMessage(value ? "Success in turning Aspect Ratio On" : "Success in turning Aspect Ratio Off");
      setIsAspectLockSuccessModalOpen(true);
    }, (err) => raiseError2(err ?? Error(`Error setting aspect lock to ${value}`)));
  };
  return /* @__PURE__ */ jsx_runtime21.jsxs(jsx_runtime21.Fragment, {
    children: [
      /* @__PURE__ */ jsx_runtime21.jsx(Transition, {
        mounted: visible2,
        transition: "slide-down",
        duration: 300,
        timingFunction: "ease",
        children: (styles) => /* @__PURE__ */ jsx_runtime21.jsx(Box, {
          style: {
            ...styles,
            position: "fixed",
            top: 0,
            left: "50%",
            transform: "translateX(-50%)",
            zIndex: 1000,
            width: "60%",
            backgroundColor: "#25262b",
            padding: "10px",
            display: "flex",
            justifyContent: "center",
            boxShadow: "0 2px 10px rgba(0, 0, 0, 0.2)",
            borderBottom: "1px solid #373A40"
          },
          onMouseLeave: () => setVisible(false),
          children: /* @__PURE__ */ jsx_runtime21.jsxs(Group, {
            gap: "lg",
            children: [
              /* @__PURE__ */ jsx_runtime21.jsx(Tooltip, {
                label: "Snapshot Image Position",
                position: "bottom",
                withArrow: true,
                children: /* @__PURE__ */ jsx_runtime21.jsx(ActionIcon, {
                  variant: "filled",
                  color: "blue",
                  size: "lg",
                  "aria-label": "Snapshot Image Position",
                  onClick: handleSnapshot,
                  children: /* @__PURE__ */ jsx_runtime21.jsx(IconCameraPlus, {
                    size: 20
                  })
                })
              }),
              /* @__PURE__ */ jsx_runtime21.jsx(Tooltip, {
                label: "Frame Position Viewer",
                position: "bottom",
                withArrow: true,
                children: /* @__PURE__ */ jsx_runtime21.jsx(ActionIcon, {
                  variant: "filled",
                  color: "blue",
                  size: "lg",
                  "aria-label": "Frame Position Viewer",
                  onClick: handleFramePositionViewer,
                  children: /* @__PURE__ */ jsx_runtime21.jsx(IconPhotoCog, {
                    size: 20
                  })
                })
              }),
              /* @__PURE__ */ jsx_runtime21.jsx(Tooltip, {
                label: "Aspect Lock",
                position: "bottom",
                withArrow: true,
                children: /* @__PURE__ */ jsx_runtime21.jsx(ActionIcon, {
                  variant: "filled",
                  color: "blue",
                  size: "lg",
                  "aria-label": "Aspect Lock",
                  onClick: handleAspectLock,
                  children: /* @__PURE__ */ jsx_runtime21.jsx(IconPlaystationSquare, {
                    size: 20
                  })
                })
              }),
              /* @__PURE__ */ jsx_runtime21.jsx(Tooltip, {
                label: "Upload/Download Document",
                position: "bottom",
                withArrow: true,
                children: /* @__PURE__ */ jsx_runtime21.jsx(ActionIcon, {
                  variant: "filled",
                  color: "blue",
                  size: "lg",
                  "aria-label": "Upload/Download",
                  onClick: handleUploadDownloadClick,
                  children: /* @__PURE__ */ jsx_runtime21.jsx(IconArrowsTransferUpDown, {
                    size: 20
                  })
                })
              }),
              /* @__PURE__ */ jsx_runtime21.jsx(Tooltip, {
                label: "Layout Image Mapper",
                position: "bottom",
                withArrow: true,
                children: /* @__PURE__ */ jsx_runtime21.jsx(ActionIcon, {
                  variant: "filled",
                  color: "blue",
                  size: "lg",
                  "aria-label": "Layout",
                  onClick: handleLayoutClick,
                  children: /* @__PURE__ */ jsx_runtime21.jsx(IconMapBolt, {
                    size: 20
                  })
                })
              }),
              /* @__PURE__ */ jsx_runtime21.jsx(Tooltip, {
                label: "Test Error",
                position: "bottom",
                withArrow: true,
                children: /* @__PURE__ */ jsx_runtime21.jsx(ActionIcon, {
                  variant: "filled",
                  color: "red",
                  size: "lg",
                  "aria-label": "Test Error",
                  onClick: handleTestError,
                  children: /* @__PURE__ */ jsx_runtime21.jsx(IconBug, {
                    size: 20
                  })
                })
              })
            ]
          })
        })
      }),
      /* @__PURE__ */ jsx_runtime21.jsx(DownloadModal, {
        opened: isDownloadUploadModalOpen,
        onClose: () => setIsDownloadUploadModalOpen(false)
      }),
      /* @__PURE__ */ jsx_runtime21.jsx(Modal, {
        opened: isUpdateModalOpen,
        onClose: () => setIsUpdateModalOpen(false),
        title: "Update Available",
        centered: true,
        children: /* @__PURE__ */ jsx_runtime21.jsxs(Stack, {
          children: [
            /* @__PURE__ */ jsx_runtime21.jsx(Text, {
              children: "A new version of Studio Toolbar Plus is available!"
            }),
            /* @__PURE__ */ jsx_runtime21.jsxs(Text, {
              size: "sm",
              children: [
                "Current version: ",
                updateInfo?.currentVersion,
                /* @__PURE__ */ jsx_runtime21.jsx("br", {}),
                "Latest version: ",
                updateInfo?.latestVersion
              ]
            }),
            /* @__PURE__ */ jsx_runtime21.jsxs(Group, {
              justify: "space-between",
              mt: "md",
              children: [
                /* @__PURE__ */ jsx_runtime21.jsx(Button, {
                  onClick: handleDismissUpdate,
                  variant: "subtle",
                  color: "gray",
                  children: "Dismiss"
                }),
                /* @__PURE__ */ jsx_runtime21.jsx(Button, {
                  component: "a",
                  href: "https://github.com/spicy-labs/studio-toolbar-plus/",
                  target: "_blank",
                  rightSection: /* @__PURE__ */ jsx_runtime21.jsx(IconExternalLink, {
                    size: 16
                  }),
                  color: "blue",
                  children: "Download Update"
                })
              ]
            })
          ]
        })
      }),
      isFramePositionViewerOpen && /* @__PURE__ */ jsx_runtime21.jsx(FrameSnapshotLayoutModal, {
        opened: isFramePositionViewerOpen,
        onClose: () => setIsFramePositionViewerOpen(false)
      }),
      isAddFrameSnapshotModalOpen && /* @__PURE__ */ jsx_runtime21.jsx(AddFrameSnapshotModal, {
        opened: isAddFrameSnapshotModalOpen,
        onClose: () => setIsAddFrameSnapshotModalOpen(false),
        raiseError: raiseError2
      }),
      isLayoutManagerOpen && /* @__PURE__ */ jsx_runtime21.jsx(LayoutManagerModal, {
        opened: isLayoutManagerOpen,
        onClose: () => setIsLayoutManagerOpen(false)
      }),
      /* @__PURE__ */ jsx_runtime21.jsxs(Modal, {
        opened: isAspectLockConfirmModalOpen,
        onClose: () => setIsAspectLockConfirmModalOpen(false),
        title: "Confirm Aspect Lock Change",
        centered: true,
        size: "sm",
        children: [
          /* @__PURE__ */ jsx_runtime21.jsx(Text, {
            children: "Turn Aspect Lock On?"
          }),
          /* @__PURE__ */ jsx_runtime21.jsxs(Group, {
            justify: "flex-end",
            mt: "md",
            children: [
              /* @__PURE__ */ jsx_runtime21.jsx(Button, {
                variant: "default",
                onClick: () => handleConfirmAspectLock(false),
                children: "No"
              }),
              /* @__PURE__ */ jsx_runtime21.jsx(Button, {
                color: "blue",
                onClick: () => handleConfirmAspectLock(true),
                children: "Yes"
              })
            ]
          })
        ]
      }),
      /* @__PURE__ */ jsx_runtime21.jsxs(Modal, {
        opened: isAspectLockSuccessModalOpen,
        onClose: () => {
          setIsAspectLockSuccessModalOpen(false);
          setAspectLockSuccessMessage("");
        },
        title: "Aspect Lock Status",
        centered: true,
        size: "sm",
        children: [
          /* @__PURE__ */ jsx_runtime21.jsx(Text, {
            children: aspectLockSuccessMessage
          }),
          /* @__PURE__ */ jsx_runtime21.jsx(Group, {
            justify: "flex-end",
            mt: "md",
            children: /* @__PURE__ */ jsx_runtime21.jsx(Button, {
              onClick: () => {
                setIsAspectLockSuccessModalOpen(false);
                setAspectLockSuccessMessage("");
              },
              children: "Close"
            })
          })
        ]
      })
    ]
  });
}

// src/components/AlertsContainer.tsx
var import_react258 = __toESM(require_react(), 1);
var jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
function AlertsContainer() {
  const alerts = appStore((store) => store.alerts);
  const dismissAlert = appStore((store) => store.dismissAlert);
  import_react258.useEffect(() => {
    const timers = [];
    alerts.forEach((alert) => {
      const timer = setTimeout(() => {
        dismissAlert(alert.id);
      }, 7000);
      timers.push(timer);
    });
    return () => {
      timers.forEach((timer) => clearTimeout(timer));
    };
  }, [alerts, dismissAlert]);
  if (alerts.length === 0) {
    return null;
  }
  return /* @__PURE__ */ jsx_runtime22.jsx(Box, {
    style: {
      position: "fixed",
      top: "20px",
      left: "20px",
      zIndex: 1001,
      width: "300px"
    },
    children: /* @__PURE__ */ jsx_runtime22.jsx(Stack, {
      gap: "md",
      children: alerts.map((alert) => /* @__PURE__ */ jsx_runtime22.jsx(Alert, {
        icon: /* @__PURE__ */ jsx_runtime22.jsx(IconInfoCircle, {
          size: "1rem"
        }),
        title: "Toolbar Error",
        variant: "filled",
        color: "red",
        withCloseButton: true,
        onClose: () => dismissAlert(alert.id),
        styles: {
          root: {
            animation: "fadeIn 0.3s ease-in-out"
          }
        },
        children: alert.message
      }, alert.id))
    })
  });
}

// src/index.tsx
var jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
var theme = createTheme({
  primaryColor: "blue",
  defaultRadius: "sm",
  colors: {}
});
window.test = () => console.log(appStore.getState());
async function renderToolbar(studio2) {
  console.log("Rendering toolbar...");
  if (!window.rootInstance) {
    const modalContainer = document.createElement("div");
    modalContainer.id = "config-modal-root";
    document.body.appendChild(modalContainer);
    window.rootInstance = import_client.createRoot(modalContainer);
  }
  if (!window.toolbarInstance) {
    const toolbarContainer = document.createElement("div");
    toolbarContainer.id = "toolbar-container";
    document.body.appendChild(toolbarContainer);
    window.toolbarInstance = import_client.createRoot(toolbarContainer);
  }
  window.rootInstance.render(/* @__PURE__ */ jsx_runtime23.jsx(import_react259.default.StrictMode, {
    children: /* @__PURE__ */ jsx_runtime23.jsx(LayoutImageMappingModal, {
      onExportCSV: () => console.log("Look")
    })
  }));
  window.toolbarInstance.render(/* @__PURE__ */ jsx_runtime23.jsx(import_react259.default.StrictMode, {
    children: /* @__PURE__ */ jsx_runtime23.jsxs(MantineProvider, {
      children: [
        /* @__PURE__ */ jsx_runtime23.jsx(Toolbar, {}),
        /* @__PURE__ */ jsx_runtime23.jsx(AlertsContainer, {})
      ]
    })
  }));
}
async function checkStudioExist() {
  const studioResult = await getStudio();
  studioResult.fold((studio2) => {
    studio2.config.events.onParagraphStylesChanged.registerCallback(() => {
      console.log("Studio found, rendering toolbar...");
      if (window.customToolbarLoaded == null) {
        window.customToolbarLoaded = true;
        renderToolbar(studio2);
        setEnableActions(studio2, true);
      }
    });
  }, () => {
    console.log("Studio not found, retrying in 200ms...");
    setTimeout(() => {
      checkStudioExist();
    }, 200);
  });
}
checkStudioExist();

//# debugId=1F97A5B28D8070C064756E2164756E21
